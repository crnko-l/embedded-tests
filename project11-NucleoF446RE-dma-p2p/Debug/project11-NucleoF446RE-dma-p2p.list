
project11-NucleoF446RE-dma-p2p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003de0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08003fb0  08003fb0  00004fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004010  08004010  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004010  08004010  00005010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004018  08004018  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004018  08004018  00005018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800401c  0800401c  0000501c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004020  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002dc  2000005c  0800407c  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  0800407c  00006338  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009e25  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001be2  00000000  00000000  0000feb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000870  00000000  00000000  00011a98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000674  00000000  00000000  00012308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021ba0  00000000  00000000  0001297c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b55d  00000000  00000000  0003451c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4c40  00000000  00000000  0003fa79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001146b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026dc  00000000  00000000  001146fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00116dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003f98 	.word	0x08003f98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08003f98 	.word	0x08003f98

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <HAL_ADC_ConvHalfCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// ADC Half-Transfer Callback
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000628 <HAL_ADC_ConvHalfCpltCallback+0x3c>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d110      	bne.n	8000620 <HAL_ADC_ConvHalfCpltCallback+0x34>
  {
    // Example: send the first sample of the half-buffer
    sprintf(msg, "ADC: %u\r\n", adc_buf[0]);
 80005fe:	4b0b      	ldr	r3, [pc, #44]	@ (800062c <HAL_ADC_ConvHalfCpltCallback+0x40>)
 8000600:	881b      	ldrh	r3, [r3, #0]
 8000602:	461a      	mov	r2, r3
 8000604:	490a      	ldr	r1, [pc, #40]	@ (8000630 <HAL_ADC_ConvHalfCpltCallback+0x44>)
 8000606:	480b      	ldr	r0, [pc, #44]	@ (8000634 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 8000608:	f003 f826 	bl	8003658 <siprintf>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)msg, strlen(msg));
 800060c:	4809      	ldr	r0, [pc, #36]	@ (8000634 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 800060e:	f7ff fdff 	bl	8000210 <strlen>
 8000612:	4603      	mov	r3, r0
 8000614:	b29b      	uxth	r3, r3
 8000616:	461a      	mov	r2, r3
 8000618:	4906      	ldr	r1, [pc, #24]	@ (8000634 <HAL_ADC_ConvHalfCpltCallback+0x48>)
 800061a:	4807      	ldr	r0, [pc, #28]	@ (8000638 <HAL_ADC_ConvHalfCpltCallback+0x4c>)
 800061c:	f002 fbde 	bl	8002ddc <HAL_UART_Transmit_DMA>
  }
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40012000 	.word	0x40012000
 800062c:	20000078 	.word	0x20000078
 8000630:	08003fb0 	.word	0x08003fb0
 8000634:	200000b8 	.word	0x200000b8
 8000638:	20000140 	.word	0x20000140

0800063c <HAL_ADC_ConvCpltCallback>:

// ADC Transfer-Complete Callback
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <HAL_ADC_ConvCpltCallback+0x3c>)
 800064a:	4293      	cmp	r3, r2
 800064c:	d110      	bne.n	8000670 <HAL_ADC_ConvCpltCallback+0x34>
  {
    // Example: send the first sample of the second half
    sprintf(msg, "ADC: %u\r\n", adc_buf[ADC_BUF_LEN/2]);
 800064e:	4b0b      	ldr	r3, [pc, #44]	@ (800067c <HAL_ADC_ConvCpltCallback+0x40>)
 8000650:	8c1b      	ldrh	r3, [r3, #32]
 8000652:	461a      	mov	r2, r3
 8000654:	490a      	ldr	r1, [pc, #40]	@ (8000680 <HAL_ADC_ConvCpltCallback+0x44>)
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x48>)
 8000658:	f002 fffe 	bl	8003658 <siprintf>
    HAL_UART_Transmit_DMA(&huart2, (uint8_t*)msg, strlen(msg));
 800065c:	4809      	ldr	r0, [pc, #36]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x48>)
 800065e:	f7ff fdd7 	bl	8000210 <strlen>
 8000662:	4603      	mov	r3, r0
 8000664:	b29b      	uxth	r3, r3
 8000666:	461a      	mov	r2, r3
 8000668:	4906      	ldr	r1, [pc, #24]	@ (8000684 <HAL_ADC_ConvCpltCallback+0x48>)
 800066a:	4807      	ldr	r0, [pc, #28]	@ (8000688 <HAL_ADC_ConvCpltCallback+0x4c>)
 800066c:	f002 fbb6 	bl	8002ddc <HAL_UART_Transmit_DMA>
  }
}
 8000670:	bf00      	nop
 8000672:	3708      	adds	r7, #8
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	40012000 	.word	0x40012000
 800067c:	20000078 	.word	0x20000078
 8000680:	08003fb0 	.word	0x08003fb0
 8000684:	200000b8 	.word	0x200000b8
 8000688:	20000140 	.word	0x20000140

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000690:	f000 fad2 	bl	8000c38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000694:	f000 f814 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000698:	f000 f91c 	bl	80008d4 <MX_GPIO_Init>
  MX_DMA_Init();
 800069c:	f000 f8fa 	bl	8000894 <MX_DMA_Init>
  MX_ADC1_Init();
 80006a0:	f000 f87c 	bl	800079c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80006a4:	f000 f8cc 	bl	8000840 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buf, ADC_BUF_LEN);
 80006a8:	2220      	movs	r2, #32
 80006aa:	4903      	ldr	r1, [pc, #12]	@ (80006b8 <main+0x2c>)
 80006ac:	4803      	ldr	r0, [pc, #12]	@ (80006bc <main+0x30>)
 80006ae:	f000 fb79 	bl	8000da4 <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	bf00      	nop
 80006b4:	e7fd      	b.n	80006b2 <main+0x26>
 80006b6:	bf00      	nop
 80006b8:	20000078 	.word	0x20000078
 80006bc:	200000f8 	.word	0x200000f8

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	@ 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	2234      	movs	r2, #52	@ 0x34
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 ffe4 	bl	800369c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
 80006e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e4:	2300      	movs	r3, #0
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000794 <SystemClock_Config+0xd4>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	4a29      	ldr	r2, [pc, #164]	@ (8000794 <SystemClock_Config+0xd4>)
 80006ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f4:	4b27      	ldr	r3, [pc, #156]	@ (8000794 <SystemClock_Config+0xd4>)
 80006f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000700:	2300      	movs	r3, #0
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	4b24      	ldr	r3, [pc, #144]	@ (8000798 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800070c:	4a22      	ldr	r2, [pc, #136]	@ (8000798 <SystemClock_Config+0xd8>)
 800070e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b20      	ldr	r3, [pc, #128]	@ (8000798 <SystemClock_Config+0xd8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	603b      	str	r3, [r7, #0]
 800071e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000734:	2310      	movs	r3, #16
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000738:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800073c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073e:	2304      	movs	r3, #4
 8000740:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000742:	2302      	movs	r3, #2
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000746:	2302      	movs	r3, #2
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f856 	bl	8002800 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800075a:	f000 f8d5 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 0308 	add.w	r3, r7, #8
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f001 fcf6 	bl	800216c <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000786:	f000 f8bf 	bl	8000908 <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b084      	sub	sp, #16
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007a2:	463b      	mov	r3, r7
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007ae:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007b0:	4a21      	ldr	r2, [pc, #132]	@ (8000838 <MX_ADC1_Init+0x9c>)
 80007b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80007ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ce:	4b19      	ldr	r3, [pc, #100]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007d8:	2200      	movs	r2, #0
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007dc:	4b15      	ldr	r3, [pc, #84]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007de:	4a17      	ldr	r2, [pc, #92]	@ (800083c <MX_ADC1_Init+0xa0>)
 80007e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007e2:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007e8:	4b12      	ldr	r3, [pc, #72]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007ea:	2201      	movs	r2, #1
 80007ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ee:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <MX_ADC1_Init+0x98>)
 80007fe:	f000 fa8d 	bl	8000d1c <HAL_ADC_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000808:	f000 f87e 	bl	8000908 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800080c:	2300      	movs	r3, #0
 800080e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000810:	2301      	movs	r3, #1
 8000812:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000814:	2300      	movs	r3, #0
 8000816:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	4619      	mov	r1, r3
 800081c:	4805      	ldr	r0, [pc, #20]	@ (8000834 <MX_ADC1_Init+0x98>)
 800081e:	f000 fbdf 	bl	8000fe0 <HAL_ADC_ConfigChannel>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d001      	beq.n	800082c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000828:	f000 f86e 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800082c:	bf00      	nop
 800082e:	3710      	adds	r7, #16
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	200000f8 	.word	0x200000f8
 8000838:	40012000 	.word	0x40012000
 800083c:	0f000001 	.word	0x0f000001

08000840 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000844:	4b11      	ldr	r3, [pc, #68]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000846:	4a12      	ldr	r2, [pc, #72]	@ (8000890 <MX_USART2_UART_Init+0x50>)
 8000848:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800084c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000850:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000852:	4b0e      	ldr	r3, [pc, #56]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000854:	2200      	movs	r2, #0
 8000856:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800085a:	2200      	movs	r2, #0
 800085c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800085e:	4b0b      	ldr	r3, [pc, #44]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000860:	2200      	movs	r2, #0
 8000862:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000866:	220c      	movs	r2, #12
 8000868:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800086a:	4b08      	ldr	r3, [pc, #32]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000872:	2200      	movs	r2, #0
 8000874:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000876:	4805      	ldr	r0, [pc, #20]	@ (800088c <MX_USART2_UART_Init+0x4c>)
 8000878:	f002 fa60 	bl	8002d3c <HAL_UART_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000882:	f000 f841 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000140 	.word	0x20000140
 8000890:	40004400 	.word	0x40004400

08000894 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	4b0c      	ldr	r3, [pc, #48]	@ (80008d0 <MX_DMA_Init+0x3c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a0b      	ldr	r2, [pc, #44]	@ (80008d0 <MX_DMA_Init+0x3c>)
 80008a4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <MX_DMA_Init+0x3c>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2011      	movs	r0, #17
 80008bc:	f000 ff1b 	bl	80016f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008c0:	2011      	movs	r0, #17
 80008c2:	f000 ff34 	bl	800172e <HAL_NVIC_EnableIRQ>

}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <MX_GPIO_Init+0x30>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	4a08      	ldr	r2, [pc, #32]	@ (8000904 <MX_GPIO_Init+0x30>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <MX_GPIO_Init+0x30>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f6:	bf00      	nop
 80008f8:	370c      	adds	r7, #12
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <Error_Handler+0x8>

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	@ (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000928:	6453      	str	r3, [r2, #68]	@ 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	@ (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	@ 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000952:	2007      	movs	r0, #7
 8000954:	f000 fec4 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	@ 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0314 	add.w	r3, r7, #20
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a17      	ldr	r2, [pc, #92]	@ (80009e0 <HAL_ADC_MspInit+0x7c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d127      	bne.n	80009d6 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <HAL_ADC_MspInit+0x80>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <HAL_ADC_MspInit+0x80>)
 8000990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b13      	ldr	r3, [pc, #76]	@ (80009e4 <HAL_ADC_MspInit+0x80>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800099e:	613b      	str	r3, [r7, #16]
 80009a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <HAL_ADC_MspInit+0x80>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a0e      	ldr	r2, [pc, #56]	@ (80009e4 <HAL_ADC_MspInit+0x80>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <HAL_ADC_MspInit+0x80>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	60fb      	str	r3, [r7, #12]
 80009bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80009be:	2301      	movs	r3, #1
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009c2:	2303      	movs	r3, #3
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	@ (80009e8 <HAL_ADC_MspInit+0x84>)
 80009d2:	f001 fa37 	bl	8001e44 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80009d6:	bf00      	nop
 80009d8:	3728      	adds	r7, #40	@ 0x28
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	40012000 	.word	0x40012000
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020000 	.word	0x40020000

080009ec <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	@ 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a30      	ldr	r2, [pc, #192]	@ (8000acc <HAL_UART_MspInit+0xe0>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d159      	bne.n	8000ac2 <HAL_UART_MspInit+0xd6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	4b2f      	ldr	r3, [pc, #188]	@ (8000ad0 <HAL_UART_MspInit+0xe4>)
 8000a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a16:	4a2e      	ldr	r2, [pc, #184]	@ (8000ad0 <HAL_UART_MspInit+0xe4>)
 8000a18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a1e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <HAL_UART_MspInit+0xe4>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a26:	613b      	str	r3, [r7, #16]
 8000a28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	4b28      	ldr	r3, [pc, #160]	@ (8000ad0 <HAL_UART_MspInit+0xe4>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a27      	ldr	r2, [pc, #156]	@ (8000ad0 <HAL_UART_MspInit+0xe4>)
 8000a34:	f043 0301 	orr.w	r3, r3, #1
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b25      	ldr	r3, [pc, #148]	@ (8000ad0 <HAL_UART_MspInit+0xe4>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0301 	and.w	r3, r3, #1
 8000a42:	60fb      	str	r3, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a46:	230c      	movs	r3, #12
 8000a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a52:	2303      	movs	r3, #3
 8000a54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a56:	2307      	movs	r3, #7
 8000a58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	481c      	ldr	r0, [pc, #112]	@ (8000ad4 <HAL_UART_MspInit+0xe8>)
 8000a62:	f001 f9ef 	bl	8001e44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a68:	4a1c      	ldr	r2, [pc, #112]	@ (8000adc <HAL_UART_MspInit+0xf0>)
 8000a6a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a6e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000a72:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a76:	2240      	movs	r2, #64	@ 0x40
 8000a78:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a82:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a86:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a88:	4b13      	ldr	r3, [pc, #76]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a94:	4b10      	ldr	r3, [pc, #64]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a9a:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000aa0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000aa6:	480c      	ldr	r0, [pc, #48]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000aa8:	f000 fe5c 	bl	8001764 <HAL_DMA_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000ab2:	f7ff ff29 	bl	8000908 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000aba:	639a      	str	r2, [r3, #56]	@ 0x38
 8000abc:	4a06      	ldr	r2, [pc, #24]	@ (8000ad8 <HAL_UART_MspInit+0xec>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	@ 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020000 	.word	0x40020000
 8000ad8:	20000188 	.word	0x20000188
 8000adc:	400260a0 	.word	0x400260a0

08000ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <NMI_Handler+0x4>

08000ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <MemManage_Handler+0x4>

08000af8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <BusFault_Handler+0x4>

08000b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <UsageFault_Handler+0x4>

08000b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr

08000b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b36:	f000 f8d1 	bl	8000cdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
	...

08000b40 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b44:	4802      	ldr	r0, [pc, #8]	@ (8000b50 <DMA1_Stream6_IRQHandler+0x10>)
 8000b46:	f000 ff13 	bl	8001970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000188 	.word	0x20000188

08000b54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b5c:	4a14      	ldr	r2, [pc, #80]	@ (8000bb0 <_sbrk+0x5c>)
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <_sbrk+0x60>)
 8000b60:	1ad3      	subs	r3, r2, r3
 8000b62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b68:	4b13      	ldr	r3, [pc, #76]	@ (8000bb8 <_sbrk+0x64>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b70:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <_sbrk+0x64>)
 8000b72:	4a12      	ldr	r2, [pc, #72]	@ (8000bbc <_sbrk+0x68>)
 8000b74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b76:	4b10      	ldr	r3, [pc, #64]	@ (8000bb8 <_sbrk+0x64>)
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4413      	add	r3, r2
 8000b7e:	693a      	ldr	r2, [r7, #16]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	d207      	bcs.n	8000b94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b84:	f002 fd92 	bl	80036ac <__errno>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b92:	e009      	b.n	8000ba8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <_sbrk+0x64>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9a:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <_sbrk+0x64>)
 8000b9c:	681a      	ldr	r2, [r3, #0]
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	4a05      	ldr	r2, [pc, #20]	@ (8000bb8 <_sbrk+0x64>)
 8000ba4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ba6:	68fb      	ldr	r3, [r7, #12]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3718      	adds	r7, #24
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20020000 	.word	0x20020000
 8000bb4:	00000400 	.word	0x00000400
 8000bb8:	200001e8 	.word	0x200001e8
 8000bbc:	20000338 	.word	0x20000338

08000bc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <SystemInit+0x20>)
 8000bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bca:	4a05      	ldr	r2, [pc, #20]	@ (8000be0 <SystemInit+0x20>)
 8000bcc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000be4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c1c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be8:	f7ff ffea 	bl	8000bc0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bec:	480c      	ldr	r0, [pc, #48]	@ (8000c20 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bee:	490d      	ldr	r1, [pc, #52]	@ (8000c24 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	@ (8000c28 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf4:	e002      	b.n	8000bfc <LoopCopyDataInit>

08000bf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfa:	3304      	adds	r3, #4

08000bfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c00:	d3f9      	bcc.n	8000bf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c02:	4a0a      	ldr	r2, [pc, #40]	@ (8000c2c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c04:	4c0a      	ldr	r4, [pc, #40]	@ (8000c30 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c08:	e001      	b.n	8000c0e <LoopFillZerobss>

08000c0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c0c:	3204      	adds	r2, #4

08000c0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c10:	d3fb      	bcc.n	8000c0a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000c12:	f002 fd51 	bl	80036b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c16:	f7ff fd39 	bl	800068c <main>
  bx  lr    
 8000c1a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c24:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000c28:	08004020 	.word	0x08004020
  ldr r2, =_sbss
 8000c2c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000c30:	20000338 	.word	0x20000338

08000c34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c34:	e7fe      	b.n	8000c34 <ADC_IRQHandler>
	...

08000c38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <HAL_Init+0x40>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <HAL_Init+0x40>)
 8000c42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c48:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <HAL_Init+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000c78 <HAL_Init+0x40>)
 8000c4e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c54:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <HAL_Init+0x40>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	@ (8000c78 <HAL_Init+0x40>)
 8000c5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c60:	2003      	movs	r0, #3
 8000c62:	f000 fd3d 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c66:	2000      	movs	r0, #0
 8000c68:	f000 f808 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c6c:	f7ff fe52 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40023c00 	.word	0x40023c00

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c84:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_InitTick+0x54>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x58>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f000 fd55 	bl	800174a <HAL_SYSTICK_Config>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	e00e      	b.n	8000cc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2b0f      	cmp	r3, #15
 8000cae:	d80a      	bhi.n	8000cc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	6879      	ldr	r1, [r7, #4]
 8000cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb8:	f000 fd1d 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cbc:	4a06      	ldr	r2, [pc, #24]	@ (8000cd8 <HAL_InitTick+0x5c>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	e000      	b.n	8000cc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000000 	.word	0x20000000
 8000cd4:	20000008 	.word	0x20000008
 8000cd8:	20000004 	.word	0x20000004

08000cdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_IncTick+0x20>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x24>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4413      	add	r3, r2
 8000cec:	4a04      	ldr	r2, [pc, #16]	@ (8000d00 <HAL_IncTick+0x24>)
 8000cee:	6013      	str	r3, [r2, #0]
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000008 	.word	0x20000008
 8000d00:	200001ec 	.word	0x200001ec

08000d04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  return uwTick;
 8000d08:	4b03      	ldr	r3, [pc, #12]	@ (8000d18 <HAL_GetTick+0x14>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	200001ec 	.word	0x200001ec

08000d1c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d101      	bne.n	8000d32 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e033      	b.n	8000d9a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d109      	bne.n	8000d4e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff fe12 	bl	8000964 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2200      	movs	r2, #0
 8000d44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2200      	movs	r2, #0
 8000d4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d118      	bne.n	8000d8c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d62:	f023 0302 	bic.w	r3, r3, #2
 8000d66:	f043 0202 	orr.w	r2, r3, #2
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d6e:	6878      	ldr	r0, [r7, #4]
 8000d70:	f000 fa68 	bl	8001244 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f023 0303 	bic.w	r3, r3, #3
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d8a:	e001      	b.n	8000d90 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b088      	sub	sp, #32
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8000db0:	2300      	movs	r3, #0
 8000db2:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <HAL_ADC_Start_DMA+0x22>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e0eb      	b.n	8000f9e <HAL_ADC_Start_DMA+0x1fa>
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	f003 0301 	and.w	r3, r3, #1
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d018      	beq.n	8000e0e <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	689a      	ldr	r2, [r3, #8]
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f042 0201 	orr.w	r2, r2, #1
 8000dea:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000dec:	4b6e      	ldr	r3, [pc, #440]	@ (8000fa8 <HAL_ADC_Start_DMA+0x204>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a6e      	ldr	r2, [pc, #440]	@ (8000fac <HAL_ADC_Start_DMA+0x208>)
 8000df2:	fba2 2303 	umull	r2, r3, r2, r3
 8000df6:	0c9a      	lsrs	r2, r3, #18
 8000df8:	4613      	mov	r3, r2
 8000dfa:	005b      	lsls	r3, r3, #1
 8000dfc:	4413      	add	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000e00:	e002      	b.n	8000e08 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f9      	bne.n	8000e02 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	689b      	ldr	r3, [r3, #8]
 8000e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000e18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e1c:	d107      	bne.n	8000e2e <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e2c:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	f003 0301 	and.w	r3, r3, #1
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	f040 80a3 	bne.w	8000f84 <HAL_ADC_Start_DMA+0x1e0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e42:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000e46:	f023 0301 	bic.w	r3, r3, #1
 8000e4a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d007      	beq.n	8000e70 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e64:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e68:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e74:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000e7c:	d106      	bne.n	8000e8c <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e82:	f023 0206 	bic.w	r2, r3, #6
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e8a:	e002      	b.n	8000e92 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e9a:	4b45      	ldr	r3, [pc, #276]	@ (8000fb0 <HAL_ADC_Start_DMA+0x20c>)
 8000e9c:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ea2:	4a44      	ldr	r2, [pc, #272]	@ (8000fb4 <HAL_ADC_Start_DMA+0x210>)
 8000ea4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eaa:	4a43      	ldr	r2, [pc, #268]	@ (8000fb8 <HAL_ADC_Start_DMA+0x214>)
 8000eac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000eb2:	4a42      	ldr	r2, [pc, #264]	@ (8000fbc <HAL_ADC_Start_DMA+0x218>)
 8000eb4:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000ebe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	685a      	ldr	r2, [r3, #4]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8000ece:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ede:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	334c      	adds	r3, #76	@ 0x4c
 8000eea:	4619      	mov	r1, r3
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	f000 fce6 	bl	80018c0 <HAL_DMA_Start_IT>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 031f 	and.w	r3, r3, #31
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d12a      	bne.n	8000f5a <HAL_ADC_Start_DMA+0x1b6>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc0 <HAL_ADC_Start_DMA+0x21c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d015      	beq.n	8000f3a <HAL_ADC_Start_DMA+0x196>
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4a2c      	ldr	r2, [pc, #176]	@ (8000fc4 <HAL_ADC_Start_DMA+0x220>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d105      	bne.n	8000f24 <HAL_ADC_Start_DMA+0x180>
 8000f18:	4b25      	ldr	r3, [pc, #148]	@ (8000fb0 <HAL_ADC_Start_DMA+0x20c>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f003 031f 	and.w	r3, r3, #31
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d00a      	beq.n	8000f3a <HAL_ADC_Start_DMA+0x196>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a27      	ldr	r2, [pc, #156]	@ (8000fc8 <HAL_ADC_Start_DMA+0x224>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d136      	bne.n	8000f9c <HAL_ADC_Start_DMA+0x1f8>
 8000f2e:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <HAL_ADC_Start_DMA+0x20c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d130      	bne.n	8000f9c <HAL_ADC_Start_DMA+0x1f8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d129      	bne.n	8000f9c <HAL_ADC_Start_DMA+0x1f8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	e020      	b.n	8000f9c <HAL_ADC_Start_DMA+0x1f8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a18      	ldr	r2, [pc, #96]	@ (8000fc0 <HAL_ADC_Start_DMA+0x21c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d11b      	bne.n	8000f9c <HAL_ADC_Start_DMA+0x1f8>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d114      	bne.n	8000f9c <HAL_ADC_Start_DMA+0x1f8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	689a      	ldr	r2, [r3, #8]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	e00b      	b.n	8000f9c <HAL_ADC_Start_DMA+0x1f8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f88:	f043 0210 	orr.w	r2, r3, #16
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f94:	f043 0201 	orr.w	r2, r3, #1
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8000f9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	431bde83 	.word	0x431bde83
 8000fb0:	40012300 	.word	0x40012300
 8000fb4:	0800143d 	.word	0x0800143d
 8000fb8:	080014f7 	.word	0x080014f7
 8000fbc:	08001513 	.word	0x08001513
 8000fc0:	40012000 	.word	0x40012000
 8000fc4:	40012100 	.word	0x40012100
 8000fc8:	40012200 	.word	0x40012200

08000fcc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000fd4:	bf00      	nop
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d101      	bne.n	8000ffc <HAL_ADC_ConfigChannel+0x1c>
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	e113      	b.n	8001224 <HAL_ADC_ConfigChannel+0x244>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2201      	movs	r2, #1
 8001000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d925      	bls.n	8001058 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	68d9      	ldr	r1, [r3, #12]
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	b29b      	uxth	r3, r3
 8001018:	461a      	mov	r2, r3
 800101a:	4613      	mov	r3, r2
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	4413      	add	r3, r2
 8001020:	3b1e      	subs	r3, #30
 8001022:	2207      	movs	r2, #7
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	43da      	mvns	r2, r3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	400a      	ands	r2, r1
 8001030:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	68d9      	ldr	r1, [r3, #12]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	4618      	mov	r0, r3
 8001044:	4603      	mov	r3, r0
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	4403      	add	r3, r0
 800104a:	3b1e      	subs	r3, #30
 800104c:	409a      	lsls	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	e022      	b.n	800109e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	6919      	ldr	r1, [r3, #16]
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	b29b      	uxth	r3, r3
 8001064:	461a      	mov	r2, r3
 8001066:	4613      	mov	r3, r2
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	2207      	movs	r2, #7
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	400a      	ands	r2, r1
 800107a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	6919      	ldr	r1, [r3, #16]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	b29b      	uxth	r3, r3
 800108c:	4618      	mov	r0, r3
 800108e:	4603      	mov	r3, r0
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4403      	add	r3, r0
 8001094:	409a      	lsls	r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	430a      	orrs	r2, r1
 800109c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b06      	cmp	r3, #6
 80010a4:	d824      	bhi.n	80010f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	009b      	lsls	r3, r3, #2
 80010b4:	4413      	add	r3, r2
 80010b6:	3b05      	subs	r3, #5
 80010b8:	221f      	movs	r2, #31
 80010ba:	fa02 f303 	lsl.w	r3, r2, r3
 80010be:	43da      	mvns	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	400a      	ands	r2, r1
 80010c6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	4618      	mov	r0, r3
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	4613      	mov	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	3b05      	subs	r3, #5
 80010e2:	fa00 f203 	lsl.w	r2, r0, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80010ee:	e04c      	b.n	800118a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	2b0c      	cmp	r3, #12
 80010f6:	d824      	bhi.n	8001142 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685a      	ldr	r2, [r3, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4413      	add	r3, r2
 8001108:	3b23      	subs	r3, #35	@ 0x23
 800110a:	221f      	movs	r2, #31
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43da      	mvns	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	400a      	ands	r2, r1
 8001118:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	4613      	mov	r3, r2
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	4413      	add	r3, r2
 8001132:	3b23      	subs	r3, #35	@ 0x23
 8001134:	fa00 f203 	lsl.w	r2, r0, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	430a      	orrs	r2, r1
 800113e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001140:	e023      	b.n	800118a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685a      	ldr	r2, [r3, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	3b41      	subs	r3, #65	@ 0x41
 8001154:	221f      	movs	r2, #31
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43da      	mvns	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	400a      	ands	r2, r1
 8001162:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	685a      	ldr	r2, [r3, #4]
 8001176:	4613      	mov	r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	4413      	add	r3, r2
 800117c:	3b41      	subs	r3, #65	@ 0x41
 800117e:	fa00 f203 	lsl.w	r2, r0, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	430a      	orrs	r2, r1
 8001188:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800118a:	4b29      	ldr	r3, [pc, #164]	@ (8001230 <HAL_ADC_ConfigChannel+0x250>)
 800118c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <HAL_ADC_ConfigChannel+0x254>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d10f      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1d8>
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b12      	cmp	r3, #18
 800119e:	d10b      	bne.n	80011b8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_ADC_ConfigChannel+0x254>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d12b      	bne.n	800121a <HAL_ADC_ConfigChannel+0x23a>
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a1c      	ldr	r2, [pc, #112]	@ (8001238 <HAL_ADC_ConfigChannel+0x258>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d003      	beq.n	80011d4 <HAL_ADC_ConfigChannel+0x1f4>
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b11      	cmp	r3, #17
 80011d2:	d122      	bne.n	800121a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a11      	ldr	r2, [pc, #68]	@ (8001238 <HAL_ADC_ConfigChannel+0x258>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d111      	bne.n	800121a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_ADC_ConfigChannel+0x25c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a11      	ldr	r2, [pc, #68]	@ (8001240 <HAL_ADC_ConfigChannel+0x260>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9a      	lsrs	r2, r3, #18
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800120c:	e002      	b.n	8001214 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	3b01      	subs	r3, #1
 8001212:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d1f9      	bne.n	800120e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2200      	movs	r2, #0
 800121e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3714      	adds	r7, #20
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	40012300 	.word	0x40012300
 8001234:	40012000 	.word	0x40012000
 8001238:	10000012 	.word	0x10000012
 800123c:	20000000 	.word	0x20000000
 8001240:	431bde83 	.word	0x431bde83

08001244 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800124c:	4b79      	ldr	r3, [pc, #484]	@ (8001434 <ADC_Init+0x1f0>)
 800124e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	685a      	ldr	r2, [r3, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	431a      	orrs	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001278:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	691b      	ldr	r3, [r3, #16]
 8001284:	021a      	lsls	r2, r3, #8
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800129c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6859      	ldr	r1, [r3, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	689a      	ldr	r2, [r3, #8]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	689a      	ldr	r2, [r3, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6899      	ldr	r1, [r3, #8]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d6:	4a58      	ldr	r2, [pc, #352]	@ (8001438 <ADC_Init+0x1f4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d022      	beq.n	8001322 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	689a      	ldr	r2, [r3, #8]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6899      	ldr	r1, [r3, #8]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	430a      	orrs	r2, r1
 80012fc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800130c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	6899      	ldr	r1, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	430a      	orrs	r2, r1
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	e00f      	b.n	8001342 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	689a      	ldr	r2, [r3, #8]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001340:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689a      	ldr	r2, [r3, #8]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f022 0202 	bic.w	r2, r2, #2
 8001350:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	6899      	ldr	r1, [r3, #8]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	7e1b      	ldrb	r3, [r3, #24]
 800135c:	005a      	lsls	r2, r3, #1
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d01b      	beq.n	80013a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	685a      	ldr	r2, [r3, #4]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800137e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	685a      	ldr	r2, [r3, #4]
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800138e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	6859      	ldr	r1, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	3b01      	subs	r3, #1
 800139c:	035a      	lsls	r2, r3, #13
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	e007      	b.n	80013b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013b6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80013c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	3b01      	subs	r3, #1
 80013d4:	051a      	lsls	r2, r3, #20
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	430a      	orrs	r2, r1
 80013dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689a      	ldr	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6899      	ldr	r1, [r3, #8]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013fa:	025a      	lsls	r2, r3, #9
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	430a      	orrs	r2, r1
 8001402:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001412:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	029a      	lsls	r2, r3, #10
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	609a      	str	r2, [r3, #8]
}
 8001428:	bf00      	nop
 800142a:	3714      	adds	r7, #20
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	40012300 	.word	0x40012300
 8001438:	0f000001 	.word	0x0f000001

0800143c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001448:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001452:	2b00      	cmp	r3, #0
 8001454:	d13c      	bne.n	80014d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800145a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800146c:	2b00      	cmp	r3, #0
 800146e:	d12b      	bne.n	80014c8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001474:	2b00      	cmp	r3, #0
 8001476:	d127      	bne.n	80014c8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800147e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001482:	2b00      	cmp	r3, #0
 8001484:	d006      	beq.n	8001494 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001490:	2b00      	cmp	r3, #0
 8001492:	d119      	bne.n	80014c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	685a      	ldr	r2, [r3, #4]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 0220 	bic.w	r2, r2, #32
 80014a2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c0:	f043 0201 	orr.w	r2, r3, #1
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80014c8:	68f8      	ldr	r0, [r7, #12]
 80014ca:	f7ff f8b7 	bl	800063c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80014ce:	e00e      	b.n	80014ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d4:	f003 0310 	and.w	r3, r3, #16
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80014dc:	68f8      	ldr	r0, [r7, #12]
 80014de:	f7ff fd75 	bl	8000fcc <HAL_ADC_ErrorCallback>
}
 80014e2:	e004      	b.n	80014ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80014e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	4798      	blx	r3
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b084      	sub	sp, #16
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001502:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f7ff f871 	bl	80005ec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b084      	sub	sp, #16
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2240      	movs	r2, #64	@ 0x40
 8001524:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f043 0204 	orr.w	r2, r3, #4
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001532:	68f8      	ldr	r0, [r7, #12]
 8001534:	f7ff fd4a 	bl	8000fcc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001538:	bf00      	nop
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	@ (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	@ (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	@ (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff29 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff3e 	bl	8001588 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff31 	bl	80015a4 <__NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffa2 	bl	800169c <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b086      	sub	sp, #24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001770:	f7ff fac8 	bl	8000d04 <HAL_GetTick>
 8001774:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e099      	b.n	80018b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2202      	movs	r2, #2
 8001784:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017a0:	e00f      	b.n	80017c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80017a2:	f7ff faaf 	bl	8000d04 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	2b05      	cmp	r3, #5
 80017ae:	d908      	bls.n	80017c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2220      	movs	r2, #32
 80017b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2203      	movs	r2, #3
 80017ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e078      	b.n	80018b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1e8      	bne.n	80017a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	4b38      	ldr	r3, [pc, #224]	@ (80018bc <HAL_DMA_Init+0x158>)
 80017dc:	4013      	ands	r3, r2
 80017de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	691b      	ldr	r3, [r3, #16]
 80017f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001806:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	2b04      	cmp	r3, #4
 800181a:	d107      	bne.n	800182c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001824:	4313      	orrs	r3, r2
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f023 0307 	bic.w	r3, r3, #7
 8001842:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001848:	697a      	ldr	r2, [r7, #20]
 800184a:	4313      	orrs	r3, r2
 800184c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001852:	2b04      	cmp	r3, #4
 8001854:	d117      	bne.n	8001886 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4313      	orrs	r3, r2
 800185e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001864:	2b00      	cmp	r3, #0
 8001866:	d00e      	beq.n	8001886 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 fa6f 	bl	8001d4c <DMA_CheckFifoParam>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d008      	beq.n	8001886 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2240      	movs	r2, #64	@ 0x40
 8001878:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001882:	2301      	movs	r3, #1
 8001884:	e016      	b.n	80018b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fa26 	bl	8001ce0 <DMA_CalcBaseAndBitshift>
 8001894:	4603      	mov	r3, r0
 8001896:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800189c:	223f      	movs	r2, #63	@ 0x3f
 800189e:	409a      	lsls	r2, r3
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2201      	movs	r2, #1
 80018ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	f010803f 	.word	0xf010803f

080018c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
 80018cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_DMA_Start_IT+0x26>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e040      	b.n	8001968 <HAL_DMA_Start_IT+0xa8>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d12f      	bne.n	800195a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2202      	movs	r2, #2
 80018fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	68b9      	ldr	r1, [r7, #8]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f9b8 	bl	8001c84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001918:	223f      	movs	r2, #63	@ 0x3f
 800191a:	409a      	lsls	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0216 	orr.w	r2, r2, #22
 800192e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 0208 	orr.w	r2, r2, #8
 8001946:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 0201 	orr.w	r2, r2, #1
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e005      	b.n	8001966 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001962:	2302      	movs	r3, #2
 8001964:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001966:	7dfb      	ldrb	r3, [r7, #23]
}
 8001968:	4618      	mov	r0, r3
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800197c:	4b8e      	ldr	r3, [pc, #568]	@ (8001bb8 <HAL_DMA_IRQHandler+0x248>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a8e      	ldr	r2, [pc, #568]	@ (8001bbc <HAL_DMA_IRQHandler+0x24c>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0a9b      	lsrs	r3, r3, #10
 8001988:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800199a:	2208      	movs	r2, #8
 800199c:	409a      	lsls	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d01a      	beq.n	80019dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d013      	beq.n	80019dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f022 0204 	bic.w	r2, r2, #4
 80019c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019c8:	2208      	movs	r2, #8
 80019ca:	409a      	lsls	r2, r3
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d4:	f043 0201 	orr.w	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e0:	2201      	movs	r2, #1
 80019e2:	409a      	lsls	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4013      	ands	r3, r2
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d012      	beq.n	8001a12 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019fe:	2201      	movs	r2, #1
 8001a00:	409a      	lsls	r2, r3
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a0a:	f043 0202 	orr.w	r2, r3, #2
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a16:	2204      	movs	r2, #4
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d012      	beq.n	8001a48 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d00b      	beq.n	8001a48 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a34:	2204      	movs	r2, #4
 8001a36:	409a      	lsls	r2, r3
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a40:	f043 0204 	orr.w	r2, r3, #4
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d043      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0308 	and.w	r3, r3, #8
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d03c      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	409a      	lsls	r2, r3
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d018      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d108      	bne.n	8001aa0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d024      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	4798      	blx	r3
 8001a9e:	e01f      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01b      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	4798      	blx	r3
 8001ab0:	e016      	b.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d107      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0208 	bic.w	r2, r2, #8
 8001ace:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ae4:	2220      	movs	r2, #32
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 808f 	beq.w	8001c10 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f003 0310 	and.w	r3, r3, #16
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8087 	beq.w	8001c10 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b06:	2220      	movs	r2, #32
 8001b08:	409a      	lsls	r2, r3
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d136      	bne.n	8001b88 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0216 	bic.w	r2, r2, #22
 8001b28:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	695a      	ldr	r2, [r3, #20]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b38:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d103      	bne.n	8001b4a <HAL_DMA_IRQHandler+0x1da>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d007      	beq.n	8001b5a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0208 	bic.w	r2, r2, #8
 8001b58:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5e:	223f      	movs	r2, #63	@ 0x3f
 8001b60:	409a      	lsls	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d07e      	beq.n	8001c7c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	4798      	blx	r3
        }
        return;
 8001b86:	e079      	b.n	8001c7c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d01d      	beq.n	8001bd2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10d      	bne.n	8001bc0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d031      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	4798      	blx	r3
 8001bb4:	e02c      	b.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
 8001bb6:	bf00      	nop
 8001bb8:	20000000 	.word	0x20000000
 8001bbc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d023      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	4798      	blx	r3
 8001bd0:	e01e      	b.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d10f      	bne.n	8001c00 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0210 	bic.w	r2, r2, #16
 8001bee:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d032      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c1c:	f003 0301 	and.w	r3, r3, #1
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d022      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2205      	movs	r2, #5
 8001c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0201 	bic.w	r2, r2, #1
 8001c3a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	60bb      	str	r3, [r7, #8]
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d307      	bcc.n	8001c58 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d1f2      	bne.n	8001c3c <HAL_DMA_IRQHandler+0x2cc>
 8001c56:	e000      	b.n	8001c5a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c58:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	4798      	blx	r3
 8001c7a:	e000      	b.n	8001c7e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c7c:	bf00      	nop
    }
  }
}
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b085      	sub	sp, #20
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
 8001c90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001ca0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	683a      	ldr	r2, [r7, #0]
 8001ca8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	2b40      	cmp	r3, #64	@ 0x40
 8001cb0:	d108      	bne.n	8001cc4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68ba      	ldr	r2, [r7, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001cc2:	e007      	b.n	8001cd4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	68ba      	ldr	r2, [r7, #8]
 8001cca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	60da      	str	r2, [r3, #12]
}
 8001cd4:	bf00      	nop
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	3b10      	subs	r3, #16
 8001cf0:	4a14      	ldr	r2, [pc, #80]	@ (8001d44 <DMA_CalcBaseAndBitshift+0x64>)
 8001cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf6:	091b      	lsrs	r3, r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cfa:	4a13      	ldr	r2, [pc, #76]	@ (8001d48 <DMA_CalcBaseAndBitshift+0x68>)
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4413      	add	r3, r2
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d909      	bls.n	8001d22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d16:	f023 0303 	bic.w	r3, r3, #3
 8001d1a:	1d1a      	adds	r2, r3, #4
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001d20:	e007      	b.n	8001d32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001d2a:	f023 0303 	bic.w	r3, r3, #3
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3714      	adds	r7, #20
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	aaaaaaab 	.word	0xaaaaaaab
 8001d48:	08003fd4 	.word	0x08003fd4

08001d4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d54:	2300      	movs	r3, #0
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d11f      	bne.n	8001da6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d856      	bhi.n	8001e1a <DMA_CheckFifoParam+0xce>
 8001d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8001d74 <DMA_CheckFifoParam+0x28>)
 8001d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d72:	bf00      	nop
 8001d74:	08001d85 	.word	0x08001d85
 8001d78:	08001d97 	.word	0x08001d97
 8001d7c:	08001d85 	.word	0x08001d85
 8001d80:	08001e1b 	.word	0x08001e1b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d046      	beq.n	8001e1e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d94:	e043      	b.n	8001e1e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d9e:	d140      	bne.n	8001e22 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001da4:	e03d      	b.n	8001e22 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001dae:	d121      	bne.n	8001df4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d837      	bhi.n	8001e26 <DMA_CheckFifoParam+0xda>
 8001db6:	a201      	add	r2, pc, #4	@ (adr r2, 8001dbc <DMA_CheckFifoParam+0x70>)
 8001db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dbc:	08001dcd 	.word	0x08001dcd
 8001dc0:	08001dd3 	.word	0x08001dd3
 8001dc4:	08001dcd 	.word	0x08001dcd
 8001dc8:	08001de5 	.word	0x08001de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	73fb      	strb	r3, [r7, #15]
      break;
 8001dd0:	e030      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d025      	beq.n	8001e2a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001de2:	e022      	b.n	8001e2a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001de8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001dec:	d11f      	bne.n	8001e2e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001df2:	e01c      	b.n	8001e2e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d903      	bls.n	8001e02 <DMA_CheckFifoParam+0xb6>
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b03      	cmp	r3, #3
 8001dfe:	d003      	beq.n	8001e08 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001e00:	e018      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	73fb      	strb	r3, [r7, #15]
      break;
 8001e06:	e015      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e0c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d00e      	beq.n	8001e32 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001e14:	2301      	movs	r3, #1
 8001e16:	73fb      	strb	r3, [r7, #15]
      break;
 8001e18:	e00b      	b.n	8001e32 <DMA_CheckFifoParam+0xe6>
      break;
 8001e1a:	bf00      	nop
 8001e1c:	e00a      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e1e:	bf00      	nop
 8001e20:	e008      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e22:	bf00      	nop
 8001e24:	e006      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e26:	bf00      	nop
 8001e28:	e004      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e2a:	bf00      	nop
 8001e2c:	e002      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e2e:	bf00      	nop
 8001e30:	e000      	b.n	8001e34 <DMA_CheckFifoParam+0xe8>
      break;
 8001e32:	bf00      	nop
    }
  } 
  
  return status; 
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop

08001e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
 8001e5e:	e165      	b.n	800212c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e60:	2201      	movs	r2, #1
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	697a      	ldr	r2, [r7, #20]
 8001e70:	4013      	ands	r3, r2
 8001e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	f040 8154 	bne.w	8002126 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d005      	beq.n	8001e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d130      	bne.n	8001ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43db      	mvns	r3, r3
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	4013      	ands	r3, r2
 8001eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	68da      	ldr	r2, [r3, #12]
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ecc:	2201      	movs	r2, #1
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	091b      	lsrs	r3, r3, #4
 8001ee2:	f003 0201 	and.w	r2, r3, #1
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d017      	beq.n	8001f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d123      	bne.n	8001f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	08da      	lsrs	r2, r3, #3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3208      	adds	r2, #8
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	220f      	movs	r2, #15
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691a      	ldr	r2, [r3, #16]
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	fa02 f303 	lsl.w	r3, r2, r3
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	08da      	lsrs	r2, r3, #3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	3208      	adds	r2, #8
 8001f82:	69b9      	ldr	r1, [r7, #24]
 8001f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	2203      	movs	r2, #3
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80ae 	beq.w	8002126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b5d      	ldr	r3, [pc, #372]	@ (8002144 <HAL_GPIO_Init+0x300>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	4a5c      	ldr	r2, [pc, #368]	@ (8002144 <HAL_GPIO_Init+0x300>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fda:	4b5a      	ldr	r3, [pc, #360]	@ (8002144 <HAL_GPIO_Init+0x300>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe6:	4a58      	ldr	r2, [pc, #352]	@ (8002148 <HAL_GPIO_Init+0x304>)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	220f      	movs	r2, #15
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a4f      	ldr	r2, [pc, #316]	@ (800214c <HAL_GPIO_Init+0x308>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d025      	beq.n	800205e <HAL_GPIO_Init+0x21a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a4e      	ldr	r2, [pc, #312]	@ (8002150 <HAL_GPIO_Init+0x30c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d01f      	beq.n	800205a <HAL_GPIO_Init+0x216>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a4d      	ldr	r2, [pc, #308]	@ (8002154 <HAL_GPIO_Init+0x310>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d019      	beq.n	8002056 <HAL_GPIO_Init+0x212>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a4c      	ldr	r2, [pc, #304]	@ (8002158 <HAL_GPIO_Init+0x314>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d013      	beq.n	8002052 <HAL_GPIO_Init+0x20e>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4b      	ldr	r2, [pc, #300]	@ (800215c <HAL_GPIO_Init+0x318>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d00d      	beq.n	800204e <HAL_GPIO_Init+0x20a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4a      	ldr	r2, [pc, #296]	@ (8002160 <HAL_GPIO_Init+0x31c>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d007      	beq.n	800204a <HAL_GPIO_Init+0x206>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a49      	ldr	r2, [pc, #292]	@ (8002164 <HAL_GPIO_Init+0x320>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d101      	bne.n	8002046 <HAL_GPIO_Init+0x202>
 8002042:	2306      	movs	r3, #6
 8002044:	e00c      	b.n	8002060 <HAL_GPIO_Init+0x21c>
 8002046:	2307      	movs	r3, #7
 8002048:	e00a      	b.n	8002060 <HAL_GPIO_Init+0x21c>
 800204a:	2305      	movs	r3, #5
 800204c:	e008      	b.n	8002060 <HAL_GPIO_Init+0x21c>
 800204e:	2304      	movs	r3, #4
 8002050:	e006      	b.n	8002060 <HAL_GPIO_Init+0x21c>
 8002052:	2303      	movs	r3, #3
 8002054:	e004      	b.n	8002060 <HAL_GPIO_Init+0x21c>
 8002056:	2302      	movs	r3, #2
 8002058:	e002      	b.n	8002060 <HAL_GPIO_Init+0x21c>
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_GPIO_Init+0x21c>
 800205e:	2300      	movs	r3, #0
 8002060:	69fa      	ldr	r2, [r7, #28]
 8002062:	f002 0203 	and.w	r2, r2, #3
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4093      	lsls	r3, r2
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002070:	4935      	ldr	r1, [pc, #212]	@ (8002148 <HAL_GPIO_Init+0x304>)
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	089b      	lsrs	r3, r3, #2
 8002076:	3302      	adds	r3, #2
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800207e:	4b3a      	ldr	r3, [pc, #232]	@ (8002168 <HAL_GPIO_Init+0x324>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d003      	beq.n	80020a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020a2:	4a31      	ldr	r2, [pc, #196]	@ (8002168 <HAL_GPIO_Init+0x324>)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020a8:	4b2f      	ldr	r3, [pc, #188]	@ (8002168 <HAL_GPIO_Init+0x324>)
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	43db      	mvns	r3, r3
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	4013      	ands	r3, r2
 80020b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020cc:	4a26      	ldr	r2, [pc, #152]	@ (8002168 <HAL_GPIO_Init+0x324>)
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020d2:	4b25      	ldr	r3, [pc, #148]	@ (8002168 <HAL_GPIO_Init+0x324>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020ee:	69ba      	ldr	r2, [r7, #24]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	4313      	orrs	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002168 <HAL_GPIO_Init+0x324>)
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020fc:	4b1a      	ldr	r3, [pc, #104]	@ (8002168 <HAL_GPIO_Init+0x324>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002102:	693b      	ldr	r3, [r7, #16]
 8002104:	43db      	mvns	r3, r3
 8002106:	69ba      	ldr	r2, [r7, #24]
 8002108:	4013      	ands	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002120:	4a11      	ldr	r2, [pc, #68]	@ (8002168 <HAL_GPIO_Init+0x324>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	3301      	adds	r3, #1
 800212a:	61fb      	str	r3, [r7, #28]
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	2b0f      	cmp	r3, #15
 8002130:	f67f ae96 	bls.w	8001e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	40013800 	.word	0x40013800
 800214c:	40020000 	.word	0x40020000
 8002150:	40020400 	.word	0x40020400
 8002154:	40020800 	.word	0x40020800
 8002158:	40020c00 	.word	0x40020c00
 800215c:	40021000 	.word	0x40021000
 8002160:	40021400 	.word	0x40021400
 8002164:	40021800 	.word	0x40021800
 8002168:	40013c00 	.word	0x40013c00

0800216c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e0cc      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002180:	4b68      	ldr	r3, [pc, #416]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 030f 	and.w	r3, r3, #15
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	429a      	cmp	r2, r3
 800218c:	d90c      	bls.n	80021a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218e:	4b65      	ldr	r3, [pc, #404]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	b2d2      	uxtb	r2, r2
 8002194:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002196:	4b63      	ldr	r3, [pc, #396]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	683a      	ldr	r2, [r7, #0]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d001      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0b8      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0302 	and.w	r3, r3, #2
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d020      	beq.n	80021f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021c0:	4b59      	ldr	r3, [pc, #356]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	4a58      	ldr	r2, [pc, #352]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021ca:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d005      	beq.n	80021e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d8:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	4a52      	ldr	r2, [pc, #328]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e4:	4b50      	ldr	r3, [pc, #320]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	494d      	ldr	r1, [pc, #308]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d044      	beq.n	800228c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220a:	4b47      	ldr	r3, [pc, #284]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d119      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e07f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d003      	beq.n	800222a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	2b03      	cmp	r3, #3
 8002228:	d107      	bne.n	800223a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800222a:	4b3f      	ldr	r3, [pc, #252]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d109      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e06f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223a:	4b3b      	ldr	r3, [pc, #236]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d101      	bne.n	800224a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e067      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800224a:	4b37      	ldr	r3, [pc, #220]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 0203 	bic.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	4934      	ldr	r1, [pc, #208]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	4313      	orrs	r3, r2
 800225a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800225c:	f7fe fd52 	bl	8000d04 <HAL_GetTick>
 8002260:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002262:	e00a      	b.n	800227a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002264:	f7fe fd4e 	bl	8000d04 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002272:	4293      	cmp	r3, r2
 8002274:	d901      	bls.n	800227a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e04f      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800227a:	4b2b      	ldr	r3, [pc, #172]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 020c 	and.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	429a      	cmp	r2, r3
 800228a:	d1eb      	bne.n	8002264 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800228c:	4b25      	ldr	r3, [pc, #148]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 030f 	and.w	r3, r3, #15
 8002294:	683a      	ldr	r2, [r7, #0]
 8002296:	429a      	cmp	r2, r3
 8002298:	d20c      	bcs.n	80022b4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229a:	4b22      	ldr	r3, [pc, #136]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022a2:	4b20      	ldr	r3, [pc, #128]	@ (8002324 <HAL_RCC_ClockConfig+0x1b8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 030f 	and.w	r3, r3, #15
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e032      	b.n	800231a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d008      	beq.n	80022d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022c0:	4b19      	ldr	r3, [pc, #100]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4916      	ldr	r1, [pc, #88]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d009      	beq.n	80022f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022de:	4b12      	ldr	r3, [pc, #72]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	691b      	ldr	r3, [r3, #16]
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	490e      	ldr	r1, [pc, #56]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022f2:	f000 f855 	bl	80023a0 <HAL_RCC_GetSysClockFreq>
 80022f6:	4602      	mov	r2, r0
 80022f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002328 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	091b      	lsrs	r3, r3, #4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	490a      	ldr	r1, [pc, #40]	@ (800232c <HAL_RCC_ClockConfig+0x1c0>)
 8002304:	5ccb      	ldrb	r3, [r1, r3]
 8002306:	fa22 f303 	lsr.w	r3, r2, r3
 800230a:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <HAL_RCC_ClockConfig+0x1c4>)
 800230c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800230e:	4b09      	ldr	r3, [pc, #36]	@ (8002334 <HAL_RCC_ClockConfig+0x1c8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fcb2 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40023c00 	.word	0x40023c00
 8002328:	40023800 	.word	0x40023800
 800232c:	08003fbc 	.word	0x08003fbc
 8002330:	20000000 	.word	0x20000000
 8002334:	20000004 	.word	0x20000004

08002338 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <HAL_RCC_GetHCLKFreq+0x14>)
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000000 	.word	0x20000000

08002350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002354:	f7ff fff0 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002358:	4602      	mov	r2, r0
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <HAL_RCC_GetPCLK1Freq+0x20>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	0a9b      	lsrs	r3, r3, #10
 8002360:	f003 0307 	and.w	r3, r3, #7
 8002364:	4903      	ldr	r1, [pc, #12]	@ (8002374 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002366:	5ccb      	ldrb	r3, [r1, r3]
 8002368:	fa22 f303 	lsr.w	r3, r2, r3
}
 800236c:	4618      	mov	r0, r3
 800236e:	bd80      	pop	{r7, pc}
 8002370:	40023800 	.word	0x40023800
 8002374:	08003fcc 	.word	0x08003fcc

08002378 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800237c:	f7ff ffdc 	bl	8002338 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0b5b      	lsrs	r3, r3, #13
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	@ (800239c <HAL_RCC_GetPCLK2Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	08003fcc 	.word	0x08003fcc

080023a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023a4:	b0ae      	sub	sp, #184	@ 0xb8
 80023a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023a8:	2300      	movs	r3, #0
 80023aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023c6:	4bcb      	ldr	r3, [pc, #812]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	2b0c      	cmp	r3, #12
 80023d0:	f200 8206 	bhi.w	80027e0 <HAL_RCC_GetSysClockFreq+0x440>
 80023d4:	a201      	add	r2, pc, #4	@ (adr r2, 80023dc <HAL_RCC_GetSysClockFreq+0x3c>)
 80023d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023da:	bf00      	nop
 80023dc:	08002411 	.word	0x08002411
 80023e0:	080027e1 	.word	0x080027e1
 80023e4:	080027e1 	.word	0x080027e1
 80023e8:	080027e1 	.word	0x080027e1
 80023ec:	08002419 	.word	0x08002419
 80023f0:	080027e1 	.word	0x080027e1
 80023f4:	080027e1 	.word	0x080027e1
 80023f8:	080027e1 	.word	0x080027e1
 80023fc:	08002421 	.word	0x08002421
 8002400:	080027e1 	.word	0x080027e1
 8002404:	080027e1 	.word	0x080027e1
 8002408:	080027e1 	.word	0x080027e1
 800240c:	08002611 	.word	0x08002611
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002410:	4bb9      	ldr	r3, [pc, #740]	@ (80026f8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002412:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002416:	e1e7      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002418:	4bb8      	ldr	r3, [pc, #736]	@ (80026fc <HAL_RCC_GetSysClockFreq+0x35c>)
 800241a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800241e:	e1e3      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002420:	4bb4      	ldr	r3, [pc, #720]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002428:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800242c:	4bb1      	ldr	r3, [pc, #708]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d071      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002438:	4bae      	ldr	r3, [pc, #696]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	099b      	lsrs	r3, r3, #6
 800243e:	2200      	movs	r2, #0
 8002440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002444:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002448:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800244c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002450:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002454:	2300      	movs	r3, #0
 8002456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800245a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800245e:	4622      	mov	r2, r4
 8002460:	462b      	mov	r3, r5
 8002462:	f04f 0000 	mov.w	r0, #0
 8002466:	f04f 0100 	mov.w	r1, #0
 800246a:	0159      	lsls	r1, r3, #5
 800246c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002470:	0150      	lsls	r0, r2, #5
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4621      	mov	r1, r4
 8002478:	1a51      	subs	r1, r2, r1
 800247a:	6439      	str	r1, [r7, #64]	@ 0x40
 800247c:	4629      	mov	r1, r5
 800247e:	eb63 0301 	sbc.w	r3, r3, r1
 8002482:	647b      	str	r3, [r7, #68]	@ 0x44
 8002484:	f04f 0200 	mov.w	r2, #0
 8002488:	f04f 0300 	mov.w	r3, #0
 800248c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002490:	4649      	mov	r1, r9
 8002492:	018b      	lsls	r3, r1, #6
 8002494:	4641      	mov	r1, r8
 8002496:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800249a:	4641      	mov	r1, r8
 800249c:	018a      	lsls	r2, r1, #6
 800249e:	4641      	mov	r1, r8
 80024a0:	1a51      	subs	r1, r2, r1
 80024a2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024a4:	4649      	mov	r1, r9
 80024a6:	eb63 0301 	sbc.w	r3, r3, r1
 80024aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024ac:	f04f 0200 	mov.w	r2, #0
 80024b0:	f04f 0300 	mov.w	r3, #0
 80024b4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80024b8:	4649      	mov	r1, r9
 80024ba:	00cb      	lsls	r3, r1, #3
 80024bc:	4641      	mov	r1, r8
 80024be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024c2:	4641      	mov	r1, r8
 80024c4:	00ca      	lsls	r2, r1, #3
 80024c6:	4610      	mov	r0, r2
 80024c8:	4619      	mov	r1, r3
 80024ca:	4603      	mov	r3, r0
 80024cc:	4622      	mov	r2, r4
 80024ce:	189b      	adds	r3, r3, r2
 80024d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80024d2:	462b      	mov	r3, r5
 80024d4:	460a      	mov	r2, r1
 80024d6:	eb42 0303 	adc.w	r3, r2, r3
 80024da:	637b      	str	r3, [r7, #52]	@ 0x34
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024e8:	4629      	mov	r1, r5
 80024ea:	024b      	lsls	r3, r1, #9
 80024ec:	4621      	mov	r1, r4
 80024ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024f2:	4621      	mov	r1, r4
 80024f4:	024a      	lsls	r2, r1, #9
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024fe:	2200      	movs	r2, #0
 8002500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002508:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800250c:	f7fd fed8 	bl	80002c0 <__aeabi_uldivmod>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4613      	mov	r3, r2
 8002516:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800251a:	e067      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251c:	4b75      	ldr	r3, [pc, #468]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	2200      	movs	r2, #0
 8002524:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002528:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 800252c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002534:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002536:	2300      	movs	r3, #0
 8002538:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800253a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800253e:	4622      	mov	r2, r4
 8002540:	462b      	mov	r3, r5
 8002542:	f04f 0000 	mov.w	r0, #0
 8002546:	f04f 0100 	mov.w	r1, #0
 800254a:	0159      	lsls	r1, r3, #5
 800254c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002550:	0150      	lsls	r0, r2, #5
 8002552:	4602      	mov	r2, r0
 8002554:	460b      	mov	r3, r1
 8002556:	4621      	mov	r1, r4
 8002558:	1a51      	subs	r1, r2, r1
 800255a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800255c:	4629      	mov	r1, r5
 800255e:	eb63 0301 	sbc.w	r3, r3, r1
 8002562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002570:	4649      	mov	r1, r9
 8002572:	018b      	lsls	r3, r1, #6
 8002574:	4641      	mov	r1, r8
 8002576:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800257a:	4641      	mov	r1, r8
 800257c:	018a      	lsls	r2, r1, #6
 800257e:	4641      	mov	r1, r8
 8002580:	ebb2 0a01 	subs.w	sl, r2, r1
 8002584:	4649      	mov	r1, r9
 8002586:	eb63 0b01 	sbc.w	fp, r3, r1
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	f04f 0300 	mov.w	r3, #0
 8002592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002596:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800259a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800259e:	4692      	mov	sl, r2
 80025a0:	469b      	mov	fp, r3
 80025a2:	4623      	mov	r3, r4
 80025a4:	eb1a 0303 	adds.w	r3, sl, r3
 80025a8:	623b      	str	r3, [r7, #32]
 80025aa:	462b      	mov	r3, r5
 80025ac:	eb4b 0303 	adc.w	r3, fp, r3
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b2:	f04f 0200 	mov.w	r2, #0
 80025b6:	f04f 0300 	mov.w	r3, #0
 80025ba:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025be:	4629      	mov	r1, r5
 80025c0:	028b      	lsls	r3, r1, #10
 80025c2:	4621      	mov	r1, r4
 80025c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c8:	4621      	mov	r1, r4
 80025ca:	028a      	lsls	r2, r1, #10
 80025cc:	4610      	mov	r0, r2
 80025ce:	4619      	mov	r1, r3
 80025d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025d4:	2200      	movs	r2, #0
 80025d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80025d8:	677a      	str	r2, [r7, #116]	@ 0x74
 80025da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025de:	f7fd fe6f 	bl	80002c0 <__aeabi_uldivmod>
 80025e2:	4602      	mov	r2, r0
 80025e4:	460b      	mov	r3, r1
 80025e6:	4613      	mov	r3, r2
 80025e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025ec:	4b41      	ldr	r3, [pc, #260]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	0c1b      	lsrs	r3, r3, #16
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	3301      	adds	r3, #1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80025fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002602:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800260e:	e0eb      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002610:	4b38      	ldr	r3, [pc, #224]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002618:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800261c:	4b35      	ldr	r3, [pc, #212]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d06b      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002628:	4b32      	ldr	r3, [pc, #200]	@ (80026f4 <HAL_RCC_GetSysClockFreq+0x354>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	099b      	lsrs	r3, r3, #6
 800262e:	2200      	movs	r2, #0
 8002630:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002632:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002634:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800263a:	663b      	str	r3, [r7, #96]	@ 0x60
 800263c:	2300      	movs	r3, #0
 800263e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002640:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002644:	4622      	mov	r2, r4
 8002646:	462b      	mov	r3, r5
 8002648:	f04f 0000 	mov.w	r0, #0
 800264c:	f04f 0100 	mov.w	r1, #0
 8002650:	0159      	lsls	r1, r3, #5
 8002652:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002656:	0150      	lsls	r0, r2, #5
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4621      	mov	r1, r4
 800265e:	1a51      	subs	r1, r2, r1
 8002660:	61b9      	str	r1, [r7, #24]
 8002662:	4629      	mov	r1, r5
 8002664:	eb63 0301 	sbc.w	r3, r3, r1
 8002668:	61fb      	str	r3, [r7, #28]
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	f04f 0300 	mov.w	r3, #0
 8002672:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002676:	4659      	mov	r1, fp
 8002678:	018b      	lsls	r3, r1, #6
 800267a:	4651      	mov	r1, sl
 800267c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002680:	4651      	mov	r1, sl
 8002682:	018a      	lsls	r2, r1, #6
 8002684:	4651      	mov	r1, sl
 8002686:	ebb2 0801 	subs.w	r8, r2, r1
 800268a:	4659      	mov	r1, fp
 800268c:	eb63 0901 	sbc.w	r9, r3, r1
 8002690:	f04f 0200 	mov.w	r2, #0
 8002694:	f04f 0300 	mov.w	r3, #0
 8002698:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800269c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026a4:	4690      	mov	r8, r2
 80026a6:	4699      	mov	r9, r3
 80026a8:	4623      	mov	r3, r4
 80026aa:	eb18 0303 	adds.w	r3, r8, r3
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	462b      	mov	r3, r5
 80026b2:	eb49 0303 	adc.w	r3, r9, r3
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026c4:	4629      	mov	r1, r5
 80026c6:	024b      	lsls	r3, r1, #9
 80026c8:	4621      	mov	r1, r4
 80026ca:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026ce:	4621      	mov	r1, r4
 80026d0:	024a      	lsls	r2, r1, #9
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80026da:	2200      	movs	r2, #0
 80026dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026de:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026e0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026e4:	f7fd fdec 	bl	80002c0 <__aeabi_uldivmod>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4613      	mov	r3, r2
 80026ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026f2:	e065      	b.n	80027c0 <HAL_RCC_GetSysClockFreq+0x420>
 80026f4:	40023800 	.word	0x40023800
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002700:	4b3d      	ldr	r3, [pc, #244]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	099b      	lsrs	r3, r3, #6
 8002706:	2200      	movs	r2, #0
 8002708:	4618      	mov	r0, r3
 800270a:	4611      	mov	r1, r2
 800270c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002710:	653b      	str	r3, [r7, #80]	@ 0x50
 8002712:	2300      	movs	r3, #0
 8002714:	657b      	str	r3, [r7, #84]	@ 0x54
 8002716:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800271a:	4642      	mov	r2, r8
 800271c:	464b      	mov	r3, r9
 800271e:	f04f 0000 	mov.w	r0, #0
 8002722:	f04f 0100 	mov.w	r1, #0
 8002726:	0159      	lsls	r1, r3, #5
 8002728:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800272c:	0150      	lsls	r0, r2, #5
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4641      	mov	r1, r8
 8002734:	1a51      	subs	r1, r2, r1
 8002736:	60b9      	str	r1, [r7, #8]
 8002738:	4649      	mov	r1, r9
 800273a:	eb63 0301 	sbc.w	r3, r3, r1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	f04f 0200 	mov.w	r2, #0
 8002744:	f04f 0300 	mov.w	r3, #0
 8002748:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800274c:	4659      	mov	r1, fp
 800274e:	018b      	lsls	r3, r1, #6
 8002750:	4651      	mov	r1, sl
 8002752:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002756:	4651      	mov	r1, sl
 8002758:	018a      	lsls	r2, r1, #6
 800275a:	4651      	mov	r1, sl
 800275c:	1a54      	subs	r4, r2, r1
 800275e:	4659      	mov	r1, fp
 8002760:	eb63 0501 	sbc.w	r5, r3, r1
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	00eb      	lsls	r3, r5, #3
 800276e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002772:	00e2      	lsls	r2, r4, #3
 8002774:	4614      	mov	r4, r2
 8002776:	461d      	mov	r5, r3
 8002778:	4643      	mov	r3, r8
 800277a:	18e3      	adds	r3, r4, r3
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	464b      	mov	r3, r9
 8002780:	eb45 0303 	adc.w	r3, r5, r3
 8002784:	607b      	str	r3, [r7, #4]
 8002786:	f04f 0200 	mov.w	r2, #0
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002792:	4629      	mov	r1, r5
 8002794:	028b      	lsls	r3, r1, #10
 8002796:	4621      	mov	r1, r4
 8002798:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800279c:	4621      	mov	r1, r4
 800279e:	028a      	lsls	r2, r1, #10
 80027a0:	4610      	mov	r0, r2
 80027a2:	4619      	mov	r1, r3
 80027a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027a8:	2200      	movs	r2, #0
 80027aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027ac:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027ae:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027b2:	f7fd fd85 	bl	80002c0 <__aeabi_uldivmod>
 80027b6:	4602      	mov	r2, r0
 80027b8:	460b      	mov	r3, r1
 80027ba:	4613      	mov	r3, r2
 80027bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027c0:	4b0d      	ldr	r3, [pc, #52]	@ (80027f8 <HAL_RCC_GetSysClockFreq+0x458>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	0f1b      	lsrs	r3, r3, #28
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80027ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80027d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027de:	e003      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_RCC_GetSysClockFreq+0x45c>)
 80027e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	37b8      	adds	r7, #184	@ 0xb8
 80027f0:	46bd      	mov	sp, r7
 80027f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f6:	bf00      	nop
 80027f8:	40023800 	.word	0x40023800
 80027fc:	00f42400 	.word	0x00f42400

08002800 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	e28d      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	f000 8083 	beq.w	8002926 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002820:	4b94      	ldr	r3, [pc, #592]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f003 030c 	and.w	r3, r3, #12
 8002828:	2b04      	cmp	r3, #4
 800282a:	d019      	beq.n	8002860 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800282c:	4b91      	ldr	r3, [pc, #580]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 030c 	and.w	r3, r3, #12
        || \
 8002834:	2b08      	cmp	r3, #8
 8002836:	d106      	bne.n	8002846 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002838:	4b8e      	ldr	r3, [pc, #568]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002840:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002844:	d00c      	beq.n	8002860 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002846:	4b8b      	ldr	r3, [pc, #556]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800284e:	2b0c      	cmp	r3, #12
 8002850:	d112      	bne.n	8002878 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002852:	4b88      	ldr	r3, [pc, #544]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800285e:	d10b      	bne.n	8002878 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	4b84      	ldr	r3, [pc, #528]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d05b      	beq.n	8002924 <HAL_RCC_OscConfig+0x124>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d157      	bne.n	8002924 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e25a      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002880:	d106      	bne.n	8002890 <HAL_RCC_OscConfig+0x90>
 8002882:	4b7c      	ldr	r3, [pc, #496]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a7b      	ldr	r2, [pc, #492]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002888:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	e01d      	b.n	80028cc <HAL_RCC_OscConfig+0xcc>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002898:	d10c      	bne.n	80028b4 <HAL_RCC_OscConfig+0xb4>
 800289a:	4b76      	ldr	r3, [pc, #472]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a75      	ldr	r2, [pc, #468]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80028a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a4:	6013      	str	r3, [r2, #0]
 80028a6:	4b73      	ldr	r3, [pc, #460]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a72      	ldr	r2, [pc, #456]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80028ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	e00b      	b.n	80028cc <HAL_RCC_OscConfig+0xcc>
 80028b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80028ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028be:	6013      	str	r3, [r2, #0]
 80028c0:	4b6c      	ldr	r3, [pc, #432]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80028c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d4:	f7fe fa16 	bl	8000d04 <HAL_GetTick>
 80028d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	e008      	b.n	80028ee <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028dc:	f7fe fa12 	bl	8000d04 <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d901      	bls.n	80028ee <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e21f      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ee:	4b61      	ldr	r3, [pc, #388]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0f0      	beq.n	80028dc <HAL_RCC_OscConfig+0xdc>
 80028fa:	e014      	b.n	8002926 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028fc:	f7fe fa02 	bl	8000d04 <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002904:	f7fe f9fe 	bl	8000d04 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b64      	cmp	r3, #100	@ 0x64
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e20b      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002916:	4b57      	ldr	r3, [pc, #348]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x104>
 8002922:	e000      	b.n	8002926 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002924:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d06f      	beq.n	8002a12 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002932:	4b50      	ldr	r3, [pc, #320]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 030c 	and.w	r3, r3, #12
 800293a:	2b00      	cmp	r3, #0
 800293c:	d017      	beq.n	800296e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800293e:	4b4d      	ldr	r3, [pc, #308]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
        || \
 8002946:	2b08      	cmp	r3, #8
 8002948:	d105      	bne.n	8002956 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800294a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00b      	beq.n	800296e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002956:	4b47      	ldr	r3, [pc, #284]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800295e:	2b0c      	cmp	r3, #12
 8002960:	d11c      	bne.n	800299c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002962:	4b44      	ldr	r3, [pc, #272]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d116      	bne.n	800299c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800296e:	4b41      	ldr	r3, [pc, #260]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x186>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d001      	beq.n	8002986 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e1d3      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002986:	4b3b      	ldr	r3, [pc, #236]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	00db      	lsls	r3, r3, #3
 8002994:	4937      	ldr	r1, [pc, #220]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002996:	4313      	orrs	r3, r2
 8002998:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299a:	e03a      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	68db      	ldr	r3, [r3, #12]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d020      	beq.n	80029e6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029a4:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCC_OscConfig+0x278>)
 80029a6:	2201      	movs	r2, #1
 80029a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029aa:	f7fe f9ab 	bl	8000d04 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b2:	f7fe f9a7 	bl	8000d04 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e1b4      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d0:	4b28      	ldr	r3, [pc, #160]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
 80029dc:	00db      	lsls	r3, r3, #3
 80029de:	4925      	ldr	r1, [pc, #148]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	600b      	str	r3, [r1, #0]
 80029e4:	e015      	b.n	8002a12 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029e6:	4b24      	ldr	r3, [pc, #144]	@ (8002a78 <HAL_RCC_OscConfig+0x278>)
 80029e8:	2200      	movs	r2, #0
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ec:	f7fe f98a 	bl	8000d04 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029f4:	f7fe f986 	bl	8000d04 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e193      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a06:	4b1b      	ldr	r3, [pc, #108]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d036      	beq.n	8002a8c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d016      	beq.n	8002a54 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a26:	4b15      	ldr	r3, [pc, #84]	@ (8002a7c <HAL_RCC_OscConfig+0x27c>)
 8002a28:	2201      	movs	r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a2c:	f7fe f96a 	bl	8000d04 <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a34:	f7fe f966 	bl	8000d04 <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e173      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a46:	4b0b      	ldr	r3, [pc, #44]	@ (8002a74 <HAL_RCC_OscConfig+0x274>)
 8002a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a4a:	f003 0302 	and.w	r3, r3, #2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x234>
 8002a52:	e01b      	b.n	8002a8c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a54:	4b09      	ldr	r3, [pc, #36]	@ (8002a7c <HAL_RCC_OscConfig+0x27c>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe f953 	bl	8000d04 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	e00e      	b.n	8002a80 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a62:	f7fe f94f 	bl	8000d04 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d907      	bls.n	8002a80 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e15c      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
 8002a74:	40023800 	.word	0x40023800
 8002a78:	42470000 	.word	0x42470000
 8002a7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a80:	4b8a      	ldr	r3, [pc, #552]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1ea      	bne.n	8002a62 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	f000 8097 	beq.w	8002bc8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a9e:	4b83      	ldr	r3, [pc, #524]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d10f      	bne.n	8002aca <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	4b7f      	ldr	r3, [pc, #508]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	4a7e      	ldr	r2, [pc, #504]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aba:	4b7c      	ldr	r3, [pc, #496]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aca:	4b79      	ldr	r3, [pc, #484]	@ (8002cb0 <HAL_RCC_OscConfig+0x4b0>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d118      	bne.n	8002b08 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad6:	4b76      	ldr	r3, [pc, #472]	@ (8002cb0 <HAL_RCC_OscConfig+0x4b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a75      	ldr	r2, [pc, #468]	@ (8002cb0 <HAL_RCC_OscConfig+0x4b0>)
 8002adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ae2:	f7fe f90f 	bl	8000d04 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aea:	f7fe f90b 	bl	8000d04 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e118      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb0 <HAL_RCC_OscConfig+0x4b0>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d106      	bne.n	8002b1e <HAL_RCC_OscConfig+0x31e>
 8002b10:	4b66      	ldr	r3, [pc, #408]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b14:	4a65      	ldr	r2, [pc, #404]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b16:	f043 0301 	orr.w	r3, r3, #1
 8002b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b1c:	e01c      	b.n	8002b58 <HAL_RCC_OscConfig+0x358>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d10c      	bne.n	8002b40 <HAL_RCC_OscConfig+0x340>
 8002b26:	4b61      	ldr	r3, [pc, #388]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b2a:	4a60      	ldr	r2, [pc, #384]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	f043 0304 	orr.w	r3, r3, #4
 8002b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b32:	4b5e      	ldr	r3, [pc, #376]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b36:	4a5d      	ldr	r2, [pc, #372]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b3e:	e00b      	b.n	8002b58 <HAL_RCC_OscConfig+0x358>
 8002b40:	4b5a      	ldr	r3, [pc, #360]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b44:	4a59      	ldr	r2, [pc, #356]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b46:	f023 0301 	bic.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b4c:	4b57      	ldr	r3, [pc, #348]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b50:	4a56      	ldr	r2, [pc, #344]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	f023 0304 	bic.w	r3, r3, #4
 8002b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d015      	beq.n	8002b8c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe f8d0 	bl	8000d04 <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe f8cc 	bl	8000d04 <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0d7      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b7e:	4b4b      	ldr	r3, [pc, #300]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0ee      	beq.n	8002b68 <HAL_RCC_OscConfig+0x368>
 8002b8a:	e014      	b.n	8002bb6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8c:	f7fe f8ba 	bl	8000d04 <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b92:	e00a      	b.n	8002baa <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe f8b6 	bl	8000d04 <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0c1      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002baa:	4b40      	ldr	r3, [pc, #256]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1ee      	bne.n	8002b94 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002bb6:	7dfb      	ldrb	r3, [r7, #23]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d105      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	4a3a      	ldr	r2, [pc, #232]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	699b      	ldr	r3, [r3, #24]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 80ad 	beq.w	8002d2c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bd2:	4b36      	ldr	r3, [pc, #216]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b08      	cmp	r3, #8
 8002bdc:	d060      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d145      	bne.n	8002c72 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b33      	ldr	r3, [pc, #204]	@ (8002cb4 <HAL_RCC_OscConfig+0x4b4>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bec:	f7fe f88a 	bl	8000d04 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe f886 	bl	8000d04 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e093      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c06:	4b29      	ldr	r3, [pc, #164]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	69da      	ldr	r2, [r3, #28]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c20:	019b      	lsls	r3, r3, #6
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c28:	085b      	lsrs	r3, r3, #1
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	041b      	lsls	r3, r3, #16
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c34:	061b      	lsls	r3, r3, #24
 8002c36:	431a      	orrs	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	071b      	lsls	r3, r3, #28
 8002c3e:	491b      	ldr	r1, [pc, #108]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002c40:	4313      	orrs	r3, r2
 8002c42:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c44:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb4 <HAL_RCC_OscConfig+0x4b4>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f85b 	bl	8000d04 <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c52:	f7fe f857 	bl	8000d04 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e064      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c64:	4b11      	ldr	r3, [pc, #68]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x452>
 8002c70:	e05c      	b.n	8002d2c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <HAL_RCC_OscConfig+0x4b4>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f7fe f844 	bl	8000d04 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c80:	f7fe f840 	bl	8000d04 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e04d      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c92:	4b06      	ldr	r3, [pc, #24]	@ (8002cac <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1f0      	bne.n	8002c80 <HAL_RCC_OscConfig+0x480>
 8002c9e:	e045      	b.n	8002d2c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d107      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e040      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40007000 	.word	0x40007000
 8002cb4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002d38 <HAL_RCC_OscConfig+0x538>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d030      	beq.n	8002d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d129      	bne.n	8002d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d122      	bne.n	8002d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ce8:	4013      	ands	r3, r2
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d119      	bne.n	8002d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfe:	085b      	lsrs	r3, r3, #1
 8002d00:	3b01      	subs	r3, #1
 8002d02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d10f      	bne.n	8002d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d001      	beq.n	8002d2c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3718      	adds	r7, #24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800

08002d3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e042      	b.n	8002dd4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d106      	bne.n	8002d68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7fd fe42 	bl	80009ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2224      	movs	r2, #36	@ 0x24
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	68da      	ldr	r2, [r3, #12]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002d7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f9f5 	bl	8003170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	691a      	ldr	r2, [r3, #16]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695a      	ldr	r2, [r3, #20]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002da4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002db4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08c      	sub	sp, #48	@ 0x30
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	60f8      	str	r0, [r7, #12]
 8002de4:	60b9      	str	r1, [r7, #8]
 8002de6:	4613      	mov	r3, r2
 8002de8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b20      	cmp	r3, #32
 8002df4:	d162      	bne.n	8002ebc <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <HAL_UART_Transmit_DMA+0x26>
 8002dfc:	88fb      	ldrh	r3, [r7, #6]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e05b      	b.n	8002ebe <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8002e06:	68ba      	ldr	r2, [r7, #8]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	88fa      	ldrh	r2, [r7, #6]
 8002e10:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	88fa      	ldrh	r2, [r7, #6]
 8002e16:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2221      	movs	r2, #33	@ 0x21
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e2a:	4a27      	ldr	r2, [pc, #156]	@ (8002ec8 <HAL_UART_Transmit_DMA+0xec>)
 8002e2c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e32:	4a26      	ldr	r2, [pc, #152]	@ (8002ecc <HAL_UART_Transmit_DMA+0xf0>)
 8002e34:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e3a:	4a25      	ldr	r2, [pc, #148]	@ (8002ed0 <HAL_UART_Transmit_DMA+0xf4>)
 8002e3c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e42:	2200      	movs	r2, #0
 8002e44:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8002e46:	f107 0308 	add.w	r3, r7, #8
 8002e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e52:	6819      	ldr	r1, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	3304      	adds	r3, #4
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	88fb      	ldrh	r3, [r7, #6]
 8002e5e:	f7fe fd2f 	bl	80018c0 <HAL_DMA_Start_IT>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d008      	beq.n	8002e7a <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2210      	movs	r2, #16
 8002e6c:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2220      	movs	r2, #32
 8002e72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e021      	b.n	8002ebe <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e82:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3314      	adds	r3, #20
 8002e8a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	e853 3f00 	ldrex	r3, [r3]
 8002e92:	617b      	str	r3, [r7, #20]
   return(result);
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3314      	adds	r3, #20
 8002ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ea4:	627a      	str	r2, [r7, #36]	@ 0x24
 8002ea6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea8:	6a39      	ldr	r1, [r7, #32]
 8002eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002eac:	e841 2300 	strex	r3, r2, [r1]
 8002eb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e5      	bne.n	8002e84 <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	e000      	b.n	8002ebe <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8002ebc:	2302      	movs	r3, #2
  }
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3730      	adds	r7, #48	@ 0x30
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	08002f11 	.word	0x08002f11
 8002ecc:	08002fab 	.word	0x08002fab
 8002ed0:	08002fc7 	.word	0x08002fc7

08002ed4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b083      	sub	sp, #12
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002edc:	bf00      	nop
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f04:	bf00      	nop
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b090      	sub	sp, #64	@ 0x40
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d137      	bne.n	8002f9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f2e:	2200      	movs	r2, #0
 8002f30:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	3314      	adds	r3, #20
 8002f38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3c:	e853 3f00 	ldrex	r3, [r3]
 8002f40:	623b      	str	r3, [r7, #32]
   return(result);
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f48:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	3314      	adds	r3, #20
 8002f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002f52:	633a      	str	r2, [r7, #48]	@ 0x30
 8002f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002f58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f5a:	e841 2300 	strex	r3, r2, [r1]
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d1e5      	bne.n	8002f32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	330c      	adds	r3, #12
 8002f6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	e853 3f00 	ldrex	r3, [r3]
 8002f74:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	330c      	adds	r3, #12
 8002f84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002f86:	61fa      	str	r2, [r7, #28]
 8002f88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f8a:	69b9      	ldr	r1, [r7, #24]
 8002f8c:	69fa      	ldr	r2, [r7, #28]
 8002f8e:	e841 2300 	strex	r3, r2, [r1]
 8002f92:	617b      	str	r3, [r7, #20]
   return(result);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1e5      	bne.n	8002f66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002f9a:	e002      	b.n	8002fa2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002f9c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002f9e:	f7ff ff99 	bl	8002ed4 <HAL_UART_TxCpltCallback>
}
 8002fa2:	bf00      	nop
 8002fa4:	3740      	adds	r7, #64	@ 0x40
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f7ff ff95 	bl	8002ee8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fbe:	bf00      	nop
 8002fc0:	3710      	adds	r7, #16
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b084      	sub	sp, #16
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe2:	2b80      	cmp	r3, #128	@ 0x80
 8002fe4:	bf0c      	ite	eq
 8002fe6:	2301      	moveq	r3, #1
 8002fe8:	2300      	movne	r3, #0
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b21      	cmp	r3, #33	@ 0x21
 8002ff8:	d108      	bne.n	800300c <UART_DMAError+0x46>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d005      	beq.n	800300c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2200      	movs	r2, #0
 8003004:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003006:	68b8      	ldr	r0, [r7, #8]
 8003008:	f000 f827 	bl	800305a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003016:	2b40      	cmp	r3, #64	@ 0x40
 8003018:	bf0c      	ite	eq
 800301a:	2301      	moveq	r3, #1
 800301c:	2300      	movne	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b22      	cmp	r3, #34	@ 0x22
 800302c:	d108      	bne.n	8003040 <UART_DMAError+0x7a>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2200      	movs	r2, #0
 8003038:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800303a:	68b8      	ldr	r0, [r7, #8]
 800303c:	f000 f835 	bl	80030aa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003044:	f043 0210 	orr.w	r2, r3, #16
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800304c:	68b8      	ldr	r0, [r7, #8]
 800304e:	f7ff ff55 	bl	8002efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800305a:	b480      	push	{r7}
 800305c:	b089      	sub	sp, #36	@ 0x24
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	330c      	adds	r3, #12
 8003068:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	e853 3f00 	ldrex	r3, [r3]
 8003070:	60bb      	str	r3, [r7, #8]
   return(result);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003078:	61fb      	str	r3, [r7, #28]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	330c      	adds	r3, #12
 8003080:	69fa      	ldr	r2, [r7, #28]
 8003082:	61ba      	str	r2, [r7, #24]
 8003084:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003086:	6979      	ldr	r1, [r7, #20]
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	e841 2300 	strex	r3, r2, [r1]
 800308e:	613b      	str	r3, [r7, #16]
   return(result);
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d1e5      	bne.n	8003062 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2220      	movs	r2, #32
 800309a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b095      	sub	sp, #84	@ 0x54
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80030bc:	e853 3f00 	ldrex	r3, [r3]
 80030c0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80030c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	330c      	adds	r3, #12
 80030d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80030d2:	643a      	str	r2, [r7, #64]	@ 0x40
 80030d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80030d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030da:	e841 2300 	strex	r3, r2, [r1]
 80030de:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80030e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d1e5      	bne.n	80030b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3314      	adds	r3, #20
 80030ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	e853 3f00 	ldrex	r3, [r3]
 80030f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f023 0301 	bic.w	r3, r3, #1
 80030fc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003106:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003108:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800310c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800310e:	e841 2300 	strex	r3, r2, [r1]
 8003112:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1e5      	bne.n	80030e6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311e:	2b01      	cmp	r3, #1
 8003120:	d119      	bne.n	8003156 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	330c      	adds	r3, #12
 8003128:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	e853 3f00 	ldrex	r3, [r3]
 8003130:	60bb      	str	r3, [r7, #8]
   return(result);
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f023 0310 	bic.w	r3, r3, #16
 8003138:	647b      	str	r3, [r7, #68]	@ 0x44
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	330c      	adds	r3, #12
 8003140:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003142:	61ba      	str	r2, [r7, #24]
 8003144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003146:	6979      	ldr	r1, [r7, #20]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	e841 2300 	strex	r3, r2, [r1]
 800314e:	613b      	str	r3, [r7, #16]
   return(result);
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1e5      	bne.n	8003122 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2220      	movs	r2, #32
 800315a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003164:	bf00      	nop
 8003166:	3754      	adds	r7, #84	@ 0x54
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr

08003170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	b0c0      	sub	sp, #256	@ 0x100
 8003176:	af00      	add	r7, sp, #0
 8003178:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800317c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318c:	68d9      	ldr	r1, [r3, #12]
 800318e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	ea40 0301 	orr.w	r3, r0, r1
 8003198:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800319a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	431a      	orrs	r2, r3
 80031b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031c8:	f021 010c 	bic.w	r1, r1, #12
 80031cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031d6:	430b      	orrs	r3, r1
 80031d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	695b      	ldr	r3, [r3, #20]
 80031e2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ea:	6999      	ldr	r1, [r3, #24]
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	ea40 0301 	orr.w	r3, r0, r1
 80031f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	4b8f      	ldr	r3, [pc, #572]	@ (800343c <UART_SetConfig+0x2cc>)
 8003200:	429a      	cmp	r2, r3
 8003202:	d005      	beq.n	8003210 <UART_SetConfig+0xa0>
 8003204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	4b8d      	ldr	r3, [pc, #564]	@ (8003440 <UART_SetConfig+0x2d0>)
 800320c:	429a      	cmp	r2, r3
 800320e:	d104      	bne.n	800321a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003210:	f7ff f8b2 	bl	8002378 <HAL_RCC_GetPCLK2Freq>
 8003214:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003218:	e003      	b.n	8003222 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800321a:	f7ff f899 	bl	8002350 <HAL_RCC_GetPCLK1Freq>
 800321e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003226:	69db      	ldr	r3, [r3, #28]
 8003228:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800322c:	f040 810c 	bne.w	8003448 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003230:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003234:	2200      	movs	r2, #0
 8003236:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800323a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800323e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003242:	4622      	mov	r2, r4
 8003244:	462b      	mov	r3, r5
 8003246:	1891      	adds	r1, r2, r2
 8003248:	65b9      	str	r1, [r7, #88]	@ 0x58
 800324a:	415b      	adcs	r3, r3
 800324c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800324e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003252:	4621      	mov	r1, r4
 8003254:	eb12 0801 	adds.w	r8, r2, r1
 8003258:	4629      	mov	r1, r5
 800325a:	eb43 0901 	adc.w	r9, r3, r1
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800326a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800326e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003272:	4690      	mov	r8, r2
 8003274:	4699      	mov	r9, r3
 8003276:	4623      	mov	r3, r4
 8003278:	eb18 0303 	adds.w	r3, r8, r3
 800327c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003280:	462b      	mov	r3, r5
 8003282:	eb49 0303 	adc.w	r3, r9, r3
 8003286:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800328a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003296:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800329a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800329e:	460b      	mov	r3, r1
 80032a0:	18db      	adds	r3, r3, r3
 80032a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032a4:	4613      	mov	r3, r2
 80032a6:	eb42 0303 	adc.w	r3, r2, r3
 80032aa:	657b      	str	r3, [r7, #84]	@ 0x54
 80032ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032b4:	f7fd f804 	bl	80002c0 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4b61      	ldr	r3, [pc, #388]	@ (8003444 <UART_SetConfig+0x2d4>)
 80032be:	fba3 2302 	umull	r2, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	011c      	lsls	r4, r3, #4
 80032c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032d0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032d8:	4642      	mov	r2, r8
 80032da:	464b      	mov	r3, r9
 80032dc:	1891      	adds	r1, r2, r2
 80032de:	64b9      	str	r1, [r7, #72]	@ 0x48
 80032e0:	415b      	adcs	r3, r3
 80032e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032e8:	4641      	mov	r1, r8
 80032ea:	eb12 0a01 	adds.w	sl, r2, r1
 80032ee:	4649      	mov	r1, r9
 80032f0:	eb43 0b01 	adc.w	fp, r3, r1
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003300:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003304:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003308:	4692      	mov	sl, r2
 800330a:	469b      	mov	fp, r3
 800330c:	4643      	mov	r3, r8
 800330e:	eb1a 0303 	adds.w	r3, sl, r3
 8003312:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003316:	464b      	mov	r3, r9
 8003318:	eb4b 0303 	adc.w	r3, fp, r3
 800331c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800332c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003330:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003334:	460b      	mov	r3, r1
 8003336:	18db      	adds	r3, r3, r3
 8003338:	643b      	str	r3, [r7, #64]	@ 0x40
 800333a:	4613      	mov	r3, r2
 800333c:	eb42 0303 	adc.w	r3, r2, r3
 8003340:	647b      	str	r3, [r7, #68]	@ 0x44
 8003342:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003346:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800334a:	f7fc ffb9 	bl	80002c0 <__aeabi_uldivmod>
 800334e:	4602      	mov	r2, r0
 8003350:	460b      	mov	r3, r1
 8003352:	4611      	mov	r1, r2
 8003354:	4b3b      	ldr	r3, [pc, #236]	@ (8003444 <UART_SetConfig+0x2d4>)
 8003356:	fba3 2301 	umull	r2, r3, r3, r1
 800335a:	095b      	lsrs	r3, r3, #5
 800335c:	2264      	movs	r2, #100	@ 0x64
 800335e:	fb02 f303 	mul.w	r3, r2, r3
 8003362:	1acb      	subs	r3, r1, r3
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800336a:	4b36      	ldr	r3, [pc, #216]	@ (8003444 <UART_SetConfig+0x2d4>)
 800336c:	fba3 2302 	umull	r2, r3, r3, r2
 8003370:	095b      	lsrs	r3, r3, #5
 8003372:	005b      	lsls	r3, r3, #1
 8003374:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003378:	441c      	add	r4, r3
 800337a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003384:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003388:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800338c:	4642      	mov	r2, r8
 800338e:	464b      	mov	r3, r9
 8003390:	1891      	adds	r1, r2, r2
 8003392:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003394:	415b      	adcs	r3, r3
 8003396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800339c:	4641      	mov	r1, r8
 800339e:	1851      	adds	r1, r2, r1
 80033a0:	6339      	str	r1, [r7, #48]	@ 0x30
 80033a2:	4649      	mov	r1, r9
 80033a4:	414b      	adcs	r3, r1
 80033a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033a8:	f04f 0200 	mov.w	r2, #0
 80033ac:	f04f 0300 	mov.w	r3, #0
 80033b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033b4:	4659      	mov	r1, fp
 80033b6:	00cb      	lsls	r3, r1, #3
 80033b8:	4651      	mov	r1, sl
 80033ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033be:	4651      	mov	r1, sl
 80033c0:	00ca      	lsls	r2, r1, #3
 80033c2:	4610      	mov	r0, r2
 80033c4:	4619      	mov	r1, r3
 80033c6:	4603      	mov	r3, r0
 80033c8:	4642      	mov	r2, r8
 80033ca:	189b      	adds	r3, r3, r2
 80033cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033d0:	464b      	mov	r3, r9
 80033d2:	460a      	mov	r2, r1
 80033d4:	eb42 0303 	adc.w	r3, r2, r3
 80033d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033e8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033f0:	460b      	mov	r3, r1
 80033f2:	18db      	adds	r3, r3, r3
 80033f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033f6:	4613      	mov	r3, r2
 80033f8:	eb42 0303 	adc.w	r3, r2, r3
 80033fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003402:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003406:	f7fc ff5b 	bl	80002c0 <__aeabi_uldivmod>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4b0d      	ldr	r3, [pc, #52]	@ (8003444 <UART_SetConfig+0x2d4>)
 8003410:	fba3 1302 	umull	r1, r3, r3, r2
 8003414:	095b      	lsrs	r3, r3, #5
 8003416:	2164      	movs	r1, #100	@ 0x64
 8003418:	fb01 f303 	mul.w	r3, r1, r3
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	00db      	lsls	r3, r3, #3
 8003420:	3332      	adds	r3, #50	@ 0x32
 8003422:	4a08      	ldr	r2, [pc, #32]	@ (8003444 <UART_SetConfig+0x2d4>)
 8003424:	fba2 2303 	umull	r2, r3, r2, r3
 8003428:	095b      	lsrs	r3, r3, #5
 800342a:	f003 0207 	and.w	r2, r3, #7
 800342e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4422      	add	r2, r4
 8003436:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003438:	e106      	b.n	8003648 <UART_SetConfig+0x4d8>
 800343a:	bf00      	nop
 800343c:	40011000 	.word	0x40011000
 8003440:	40011400 	.word	0x40011400
 8003444:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003448:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800344c:	2200      	movs	r2, #0
 800344e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003452:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003456:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800345a:	4642      	mov	r2, r8
 800345c:	464b      	mov	r3, r9
 800345e:	1891      	adds	r1, r2, r2
 8003460:	6239      	str	r1, [r7, #32]
 8003462:	415b      	adcs	r3, r3
 8003464:	627b      	str	r3, [r7, #36]	@ 0x24
 8003466:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800346a:	4641      	mov	r1, r8
 800346c:	1854      	adds	r4, r2, r1
 800346e:	4649      	mov	r1, r9
 8003470:	eb43 0501 	adc.w	r5, r3, r1
 8003474:	f04f 0200 	mov.w	r2, #0
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	00eb      	lsls	r3, r5, #3
 800347e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003482:	00e2      	lsls	r2, r4, #3
 8003484:	4614      	mov	r4, r2
 8003486:	461d      	mov	r5, r3
 8003488:	4643      	mov	r3, r8
 800348a:	18e3      	adds	r3, r4, r3
 800348c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003490:	464b      	mov	r3, r9
 8003492:	eb45 0303 	adc.w	r3, r5, r3
 8003496:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800349a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034b6:	4629      	mov	r1, r5
 80034b8:	008b      	lsls	r3, r1, #2
 80034ba:	4621      	mov	r1, r4
 80034bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034c0:	4621      	mov	r1, r4
 80034c2:	008a      	lsls	r2, r1, #2
 80034c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034c8:	f7fc fefa 	bl	80002c0 <__aeabi_uldivmod>
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	4b60      	ldr	r3, [pc, #384]	@ (8003654 <UART_SetConfig+0x4e4>)
 80034d2:	fba3 2302 	umull	r2, r3, r3, r2
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	011c      	lsls	r4, r3, #4
 80034da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034de:	2200      	movs	r2, #0
 80034e0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034e4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034ec:	4642      	mov	r2, r8
 80034ee:	464b      	mov	r3, r9
 80034f0:	1891      	adds	r1, r2, r2
 80034f2:	61b9      	str	r1, [r7, #24]
 80034f4:	415b      	adcs	r3, r3
 80034f6:	61fb      	str	r3, [r7, #28]
 80034f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034fc:	4641      	mov	r1, r8
 80034fe:	1851      	adds	r1, r2, r1
 8003500:	6139      	str	r1, [r7, #16]
 8003502:	4649      	mov	r1, r9
 8003504:	414b      	adcs	r3, r1
 8003506:	617b      	str	r3, [r7, #20]
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003514:	4659      	mov	r1, fp
 8003516:	00cb      	lsls	r3, r1, #3
 8003518:	4651      	mov	r1, sl
 800351a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800351e:	4651      	mov	r1, sl
 8003520:	00ca      	lsls	r2, r1, #3
 8003522:	4610      	mov	r0, r2
 8003524:	4619      	mov	r1, r3
 8003526:	4603      	mov	r3, r0
 8003528:	4642      	mov	r2, r8
 800352a:	189b      	adds	r3, r3, r2
 800352c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003530:	464b      	mov	r3, r9
 8003532:	460a      	mov	r2, r1
 8003534:	eb42 0303 	adc.w	r3, r2, r3
 8003538:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800353c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003546:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003548:	f04f 0200 	mov.w	r2, #0
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003554:	4649      	mov	r1, r9
 8003556:	008b      	lsls	r3, r1, #2
 8003558:	4641      	mov	r1, r8
 800355a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800355e:	4641      	mov	r1, r8
 8003560:	008a      	lsls	r2, r1, #2
 8003562:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003566:	f7fc feab 	bl	80002c0 <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4611      	mov	r1, r2
 8003570:	4b38      	ldr	r3, [pc, #224]	@ (8003654 <UART_SetConfig+0x4e4>)
 8003572:	fba3 2301 	umull	r2, r3, r3, r1
 8003576:	095b      	lsrs	r3, r3, #5
 8003578:	2264      	movs	r2, #100	@ 0x64
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	1acb      	subs	r3, r1, r3
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	3332      	adds	r3, #50	@ 0x32
 8003584:	4a33      	ldr	r2, [pc, #204]	@ (8003654 <UART_SetConfig+0x4e4>)
 8003586:	fba2 2303 	umull	r2, r3, r2, r3
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003590:	441c      	add	r4, r3
 8003592:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003596:	2200      	movs	r2, #0
 8003598:	673b      	str	r3, [r7, #112]	@ 0x70
 800359a:	677a      	str	r2, [r7, #116]	@ 0x74
 800359c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	1891      	adds	r1, r2, r2
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	415b      	adcs	r3, r3
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035b0:	4641      	mov	r1, r8
 80035b2:	1851      	adds	r1, r2, r1
 80035b4:	6039      	str	r1, [r7, #0]
 80035b6:	4649      	mov	r1, r9
 80035b8:	414b      	adcs	r3, r1
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035c8:	4659      	mov	r1, fp
 80035ca:	00cb      	lsls	r3, r1, #3
 80035cc:	4651      	mov	r1, sl
 80035ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035d2:	4651      	mov	r1, sl
 80035d4:	00ca      	lsls	r2, r1, #3
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	4603      	mov	r3, r0
 80035dc:	4642      	mov	r2, r8
 80035de:	189b      	adds	r3, r3, r2
 80035e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80035e2:	464b      	mov	r3, r9
 80035e4:	460a      	mov	r2, r1
 80035e6:	eb42 0303 	adc.w	r3, r2, r3
 80035ea:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	663b      	str	r3, [r7, #96]	@ 0x60
 80035f6:	667a      	str	r2, [r7, #100]	@ 0x64
 80035f8:	f04f 0200 	mov.w	r2, #0
 80035fc:	f04f 0300 	mov.w	r3, #0
 8003600:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003604:	4649      	mov	r1, r9
 8003606:	008b      	lsls	r3, r1, #2
 8003608:	4641      	mov	r1, r8
 800360a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800360e:	4641      	mov	r1, r8
 8003610:	008a      	lsls	r2, r1, #2
 8003612:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003616:	f7fc fe53 	bl	80002c0 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <UART_SetConfig+0x4e4>)
 8003620:	fba3 1302 	umull	r1, r3, r3, r2
 8003624:	095b      	lsrs	r3, r3, #5
 8003626:	2164      	movs	r1, #100	@ 0x64
 8003628:	fb01 f303 	mul.w	r3, r1, r3
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	011b      	lsls	r3, r3, #4
 8003630:	3332      	adds	r3, #50	@ 0x32
 8003632:	4a08      	ldr	r2, [pc, #32]	@ (8003654 <UART_SetConfig+0x4e4>)
 8003634:	fba2 2303 	umull	r2, r3, r2, r3
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	f003 020f 	and.w	r2, r3, #15
 800363e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4422      	add	r2, r4
 8003646:	609a      	str	r2, [r3, #8]
}
 8003648:	bf00      	nop
 800364a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800364e:	46bd      	mov	sp, r7
 8003650:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003654:	51eb851f 	.word	0x51eb851f

08003658 <siprintf>:
 8003658:	b40e      	push	{r1, r2, r3}
 800365a:	b510      	push	{r4, lr}
 800365c:	b09d      	sub	sp, #116	@ 0x74
 800365e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8003660:	9002      	str	r0, [sp, #8]
 8003662:	9006      	str	r0, [sp, #24]
 8003664:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003668:	480a      	ldr	r0, [pc, #40]	@ (8003694 <siprintf+0x3c>)
 800366a:	9107      	str	r1, [sp, #28]
 800366c:	9104      	str	r1, [sp, #16]
 800366e:	490a      	ldr	r1, [pc, #40]	@ (8003698 <siprintf+0x40>)
 8003670:	f853 2b04 	ldr.w	r2, [r3], #4
 8003674:	9105      	str	r1, [sp, #20]
 8003676:	2400      	movs	r4, #0
 8003678:	a902      	add	r1, sp, #8
 800367a:	6800      	ldr	r0, [r0, #0]
 800367c:	9301      	str	r3, [sp, #4]
 800367e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8003680:	f000 f994 	bl	80039ac <_svfiprintf_r>
 8003684:	9b02      	ldr	r3, [sp, #8]
 8003686:	701c      	strb	r4, [r3, #0]
 8003688:	b01d      	add	sp, #116	@ 0x74
 800368a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800368e:	b003      	add	sp, #12
 8003690:	4770      	bx	lr
 8003692:	bf00      	nop
 8003694:	2000000c 	.word	0x2000000c
 8003698:	ffff0208 	.word	0xffff0208

0800369c <memset>:
 800369c:	4402      	add	r2, r0
 800369e:	4603      	mov	r3, r0
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d100      	bne.n	80036a6 <memset+0xa>
 80036a4:	4770      	bx	lr
 80036a6:	f803 1b01 	strb.w	r1, [r3], #1
 80036aa:	e7f9      	b.n	80036a0 <memset+0x4>

080036ac <__errno>:
 80036ac:	4b01      	ldr	r3, [pc, #4]	@ (80036b4 <__errno+0x8>)
 80036ae:	6818      	ldr	r0, [r3, #0]
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	2000000c 	.word	0x2000000c

080036b8 <__libc_init_array>:
 80036b8:	b570      	push	{r4, r5, r6, lr}
 80036ba:	4d0d      	ldr	r5, [pc, #52]	@ (80036f0 <__libc_init_array+0x38>)
 80036bc:	4c0d      	ldr	r4, [pc, #52]	@ (80036f4 <__libc_init_array+0x3c>)
 80036be:	1b64      	subs	r4, r4, r5
 80036c0:	10a4      	asrs	r4, r4, #2
 80036c2:	2600      	movs	r6, #0
 80036c4:	42a6      	cmp	r6, r4
 80036c6:	d109      	bne.n	80036dc <__libc_init_array+0x24>
 80036c8:	4d0b      	ldr	r5, [pc, #44]	@ (80036f8 <__libc_init_array+0x40>)
 80036ca:	4c0c      	ldr	r4, [pc, #48]	@ (80036fc <__libc_init_array+0x44>)
 80036cc:	f000 fc64 	bl	8003f98 <_init>
 80036d0:	1b64      	subs	r4, r4, r5
 80036d2:	10a4      	asrs	r4, r4, #2
 80036d4:	2600      	movs	r6, #0
 80036d6:	42a6      	cmp	r6, r4
 80036d8:	d105      	bne.n	80036e6 <__libc_init_array+0x2e>
 80036da:	bd70      	pop	{r4, r5, r6, pc}
 80036dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80036e0:	4798      	blx	r3
 80036e2:	3601      	adds	r6, #1
 80036e4:	e7ee      	b.n	80036c4 <__libc_init_array+0xc>
 80036e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036ea:	4798      	blx	r3
 80036ec:	3601      	adds	r6, #1
 80036ee:	e7f2      	b.n	80036d6 <__libc_init_array+0x1e>
 80036f0:	08004018 	.word	0x08004018
 80036f4:	08004018 	.word	0x08004018
 80036f8:	08004018 	.word	0x08004018
 80036fc:	0800401c 	.word	0x0800401c

08003700 <__retarget_lock_acquire_recursive>:
 8003700:	4770      	bx	lr

08003702 <__retarget_lock_release_recursive>:
 8003702:	4770      	bx	lr

08003704 <_free_r>:
 8003704:	b538      	push	{r3, r4, r5, lr}
 8003706:	4605      	mov	r5, r0
 8003708:	2900      	cmp	r1, #0
 800370a:	d041      	beq.n	8003790 <_free_r+0x8c>
 800370c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003710:	1f0c      	subs	r4, r1, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	bfb8      	it	lt
 8003716:	18e4      	addlt	r4, r4, r3
 8003718:	f000 f8e0 	bl	80038dc <__malloc_lock>
 800371c:	4a1d      	ldr	r2, [pc, #116]	@ (8003794 <_free_r+0x90>)
 800371e:	6813      	ldr	r3, [r2, #0]
 8003720:	b933      	cbnz	r3, 8003730 <_free_r+0x2c>
 8003722:	6063      	str	r3, [r4, #4]
 8003724:	6014      	str	r4, [r2, #0]
 8003726:	4628      	mov	r0, r5
 8003728:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800372c:	f000 b8dc 	b.w	80038e8 <__malloc_unlock>
 8003730:	42a3      	cmp	r3, r4
 8003732:	d908      	bls.n	8003746 <_free_r+0x42>
 8003734:	6820      	ldr	r0, [r4, #0]
 8003736:	1821      	adds	r1, r4, r0
 8003738:	428b      	cmp	r3, r1
 800373a:	bf01      	itttt	eq
 800373c:	6819      	ldreq	r1, [r3, #0]
 800373e:	685b      	ldreq	r3, [r3, #4]
 8003740:	1809      	addeq	r1, r1, r0
 8003742:	6021      	streq	r1, [r4, #0]
 8003744:	e7ed      	b.n	8003722 <_free_r+0x1e>
 8003746:	461a      	mov	r2, r3
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	b10b      	cbz	r3, 8003750 <_free_r+0x4c>
 800374c:	42a3      	cmp	r3, r4
 800374e:	d9fa      	bls.n	8003746 <_free_r+0x42>
 8003750:	6811      	ldr	r1, [r2, #0]
 8003752:	1850      	adds	r0, r2, r1
 8003754:	42a0      	cmp	r0, r4
 8003756:	d10b      	bne.n	8003770 <_free_r+0x6c>
 8003758:	6820      	ldr	r0, [r4, #0]
 800375a:	4401      	add	r1, r0
 800375c:	1850      	adds	r0, r2, r1
 800375e:	4283      	cmp	r3, r0
 8003760:	6011      	str	r1, [r2, #0]
 8003762:	d1e0      	bne.n	8003726 <_free_r+0x22>
 8003764:	6818      	ldr	r0, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	6053      	str	r3, [r2, #4]
 800376a:	4408      	add	r0, r1
 800376c:	6010      	str	r0, [r2, #0]
 800376e:	e7da      	b.n	8003726 <_free_r+0x22>
 8003770:	d902      	bls.n	8003778 <_free_r+0x74>
 8003772:	230c      	movs	r3, #12
 8003774:	602b      	str	r3, [r5, #0]
 8003776:	e7d6      	b.n	8003726 <_free_r+0x22>
 8003778:	6820      	ldr	r0, [r4, #0]
 800377a:	1821      	adds	r1, r4, r0
 800377c:	428b      	cmp	r3, r1
 800377e:	bf04      	itt	eq
 8003780:	6819      	ldreq	r1, [r3, #0]
 8003782:	685b      	ldreq	r3, [r3, #4]
 8003784:	6063      	str	r3, [r4, #4]
 8003786:	bf04      	itt	eq
 8003788:	1809      	addeq	r1, r1, r0
 800378a:	6021      	streq	r1, [r4, #0]
 800378c:	6054      	str	r4, [r2, #4]
 800378e:	e7ca      	b.n	8003726 <_free_r+0x22>
 8003790:	bd38      	pop	{r3, r4, r5, pc}
 8003792:	bf00      	nop
 8003794:	20000334 	.word	0x20000334

08003798 <sbrk_aligned>:
 8003798:	b570      	push	{r4, r5, r6, lr}
 800379a:	4e0f      	ldr	r6, [pc, #60]	@ (80037d8 <sbrk_aligned+0x40>)
 800379c:	460c      	mov	r4, r1
 800379e:	6831      	ldr	r1, [r6, #0]
 80037a0:	4605      	mov	r5, r0
 80037a2:	b911      	cbnz	r1, 80037aa <sbrk_aligned+0x12>
 80037a4:	f000 fba4 	bl	8003ef0 <_sbrk_r>
 80037a8:	6030      	str	r0, [r6, #0]
 80037aa:	4621      	mov	r1, r4
 80037ac:	4628      	mov	r0, r5
 80037ae:	f000 fb9f 	bl	8003ef0 <_sbrk_r>
 80037b2:	1c43      	adds	r3, r0, #1
 80037b4:	d103      	bne.n	80037be <sbrk_aligned+0x26>
 80037b6:	f04f 34ff 	mov.w	r4, #4294967295
 80037ba:	4620      	mov	r0, r4
 80037bc:	bd70      	pop	{r4, r5, r6, pc}
 80037be:	1cc4      	adds	r4, r0, #3
 80037c0:	f024 0403 	bic.w	r4, r4, #3
 80037c4:	42a0      	cmp	r0, r4
 80037c6:	d0f8      	beq.n	80037ba <sbrk_aligned+0x22>
 80037c8:	1a21      	subs	r1, r4, r0
 80037ca:	4628      	mov	r0, r5
 80037cc:	f000 fb90 	bl	8003ef0 <_sbrk_r>
 80037d0:	3001      	adds	r0, #1
 80037d2:	d1f2      	bne.n	80037ba <sbrk_aligned+0x22>
 80037d4:	e7ef      	b.n	80037b6 <sbrk_aligned+0x1e>
 80037d6:	bf00      	nop
 80037d8:	20000330 	.word	0x20000330

080037dc <_malloc_r>:
 80037dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037e0:	1ccd      	adds	r5, r1, #3
 80037e2:	f025 0503 	bic.w	r5, r5, #3
 80037e6:	3508      	adds	r5, #8
 80037e8:	2d0c      	cmp	r5, #12
 80037ea:	bf38      	it	cc
 80037ec:	250c      	movcc	r5, #12
 80037ee:	2d00      	cmp	r5, #0
 80037f0:	4606      	mov	r6, r0
 80037f2:	db01      	blt.n	80037f8 <_malloc_r+0x1c>
 80037f4:	42a9      	cmp	r1, r5
 80037f6:	d904      	bls.n	8003802 <_malloc_r+0x26>
 80037f8:	230c      	movs	r3, #12
 80037fa:	6033      	str	r3, [r6, #0]
 80037fc:	2000      	movs	r0, #0
 80037fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003802:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80038d8 <_malloc_r+0xfc>
 8003806:	f000 f869 	bl	80038dc <__malloc_lock>
 800380a:	f8d8 3000 	ldr.w	r3, [r8]
 800380e:	461c      	mov	r4, r3
 8003810:	bb44      	cbnz	r4, 8003864 <_malloc_r+0x88>
 8003812:	4629      	mov	r1, r5
 8003814:	4630      	mov	r0, r6
 8003816:	f7ff ffbf 	bl	8003798 <sbrk_aligned>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	4604      	mov	r4, r0
 800381e:	d158      	bne.n	80038d2 <_malloc_r+0xf6>
 8003820:	f8d8 4000 	ldr.w	r4, [r8]
 8003824:	4627      	mov	r7, r4
 8003826:	2f00      	cmp	r7, #0
 8003828:	d143      	bne.n	80038b2 <_malloc_r+0xd6>
 800382a:	2c00      	cmp	r4, #0
 800382c:	d04b      	beq.n	80038c6 <_malloc_r+0xea>
 800382e:	6823      	ldr	r3, [r4, #0]
 8003830:	4639      	mov	r1, r7
 8003832:	4630      	mov	r0, r6
 8003834:	eb04 0903 	add.w	r9, r4, r3
 8003838:	f000 fb5a 	bl	8003ef0 <_sbrk_r>
 800383c:	4581      	cmp	r9, r0
 800383e:	d142      	bne.n	80038c6 <_malloc_r+0xea>
 8003840:	6821      	ldr	r1, [r4, #0]
 8003842:	1a6d      	subs	r5, r5, r1
 8003844:	4629      	mov	r1, r5
 8003846:	4630      	mov	r0, r6
 8003848:	f7ff ffa6 	bl	8003798 <sbrk_aligned>
 800384c:	3001      	adds	r0, #1
 800384e:	d03a      	beq.n	80038c6 <_malloc_r+0xea>
 8003850:	6823      	ldr	r3, [r4, #0]
 8003852:	442b      	add	r3, r5
 8003854:	6023      	str	r3, [r4, #0]
 8003856:	f8d8 3000 	ldr.w	r3, [r8]
 800385a:	685a      	ldr	r2, [r3, #4]
 800385c:	bb62      	cbnz	r2, 80038b8 <_malloc_r+0xdc>
 800385e:	f8c8 7000 	str.w	r7, [r8]
 8003862:	e00f      	b.n	8003884 <_malloc_r+0xa8>
 8003864:	6822      	ldr	r2, [r4, #0]
 8003866:	1b52      	subs	r2, r2, r5
 8003868:	d420      	bmi.n	80038ac <_malloc_r+0xd0>
 800386a:	2a0b      	cmp	r2, #11
 800386c:	d917      	bls.n	800389e <_malloc_r+0xc2>
 800386e:	1961      	adds	r1, r4, r5
 8003870:	42a3      	cmp	r3, r4
 8003872:	6025      	str	r5, [r4, #0]
 8003874:	bf18      	it	ne
 8003876:	6059      	strne	r1, [r3, #4]
 8003878:	6863      	ldr	r3, [r4, #4]
 800387a:	bf08      	it	eq
 800387c:	f8c8 1000 	streq.w	r1, [r8]
 8003880:	5162      	str	r2, [r4, r5]
 8003882:	604b      	str	r3, [r1, #4]
 8003884:	4630      	mov	r0, r6
 8003886:	f000 f82f 	bl	80038e8 <__malloc_unlock>
 800388a:	f104 000b 	add.w	r0, r4, #11
 800388e:	1d23      	adds	r3, r4, #4
 8003890:	f020 0007 	bic.w	r0, r0, #7
 8003894:	1ac2      	subs	r2, r0, r3
 8003896:	bf1c      	itt	ne
 8003898:	1a1b      	subne	r3, r3, r0
 800389a:	50a3      	strne	r3, [r4, r2]
 800389c:	e7af      	b.n	80037fe <_malloc_r+0x22>
 800389e:	6862      	ldr	r2, [r4, #4]
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	bf0c      	ite	eq
 80038a4:	f8c8 2000 	streq.w	r2, [r8]
 80038a8:	605a      	strne	r2, [r3, #4]
 80038aa:	e7eb      	b.n	8003884 <_malloc_r+0xa8>
 80038ac:	4623      	mov	r3, r4
 80038ae:	6864      	ldr	r4, [r4, #4]
 80038b0:	e7ae      	b.n	8003810 <_malloc_r+0x34>
 80038b2:	463c      	mov	r4, r7
 80038b4:	687f      	ldr	r7, [r7, #4]
 80038b6:	e7b6      	b.n	8003826 <_malloc_r+0x4a>
 80038b8:	461a      	mov	r2, r3
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d1fb      	bne.n	80038b8 <_malloc_r+0xdc>
 80038c0:	2300      	movs	r3, #0
 80038c2:	6053      	str	r3, [r2, #4]
 80038c4:	e7de      	b.n	8003884 <_malloc_r+0xa8>
 80038c6:	230c      	movs	r3, #12
 80038c8:	6033      	str	r3, [r6, #0]
 80038ca:	4630      	mov	r0, r6
 80038cc:	f000 f80c 	bl	80038e8 <__malloc_unlock>
 80038d0:	e794      	b.n	80037fc <_malloc_r+0x20>
 80038d2:	6005      	str	r5, [r0, #0]
 80038d4:	e7d6      	b.n	8003884 <_malloc_r+0xa8>
 80038d6:	bf00      	nop
 80038d8:	20000334 	.word	0x20000334

080038dc <__malloc_lock>:
 80038dc:	4801      	ldr	r0, [pc, #4]	@ (80038e4 <__malloc_lock+0x8>)
 80038de:	f7ff bf0f 	b.w	8003700 <__retarget_lock_acquire_recursive>
 80038e2:	bf00      	nop
 80038e4:	2000032c 	.word	0x2000032c

080038e8 <__malloc_unlock>:
 80038e8:	4801      	ldr	r0, [pc, #4]	@ (80038f0 <__malloc_unlock+0x8>)
 80038ea:	f7ff bf0a 	b.w	8003702 <__retarget_lock_release_recursive>
 80038ee:	bf00      	nop
 80038f0:	2000032c 	.word	0x2000032c

080038f4 <__ssputs_r>:
 80038f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038f8:	688e      	ldr	r6, [r1, #8]
 80038fa:	461f      	mov	r7, r3
 80038fc:	42be      	cmp	r6, r7
 80038fe:	680b      	ldr	r3, [r1, #0]
 8003900:	4682      	mov	sl, r0
 8003902:	460c      	mov	r4, r1
 8003904:	4690      	mov	r8, r2
 8003906:	d82d      	bhi.n	8003964 <__ssputs_r+0x70>
 8003908:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800390c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003910:	d026      	beq.n	8003960 <__ssputs_r+0x6c>
 8003912:	6965      	ldr	r5, [r4, #20]
 8003914:	6909      	ldr	r1, [r1, #16]
 8003916:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800391a:	eba3 0901 	sub.w	r9, r3, r1
 800391e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003922:	1c7b      	adds	r3, r7, #1
 8003924:	444b      	add	r3, r9
 8003926:	106d      	asrs	r5, r5, #1
 8003928:	429d      	cmp	r5, r3
 800392a:	bf38      	it	cc
 800392c:	461d      	movcc	r5, r3
 800392e:	0553      	lsls	r3, r2, #21
 8003930:	d527      	bpl.n	8003982 <__ssputs_r+0x8e>
 8003932:	4629      	mov	r1, r5
 8003934:	f7ff ff52 	bl	80037dc <_malloc_r>
 8003938:	4606      	mov	r6, r0
 800393a:	b360      	cbz	r0, 8003996 <__ssputs_r+0xa2>
 800393c:	6921      	ldr	r1, [r4, #16]
 800393e:	464a      	mov	r2, r9
 8003940:	f000 fae6 	bl	8003f10 <memcpy>
 8003944:	89a3      	ldrh	r3, [r4, #12]
 8003946:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800394a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800394e:	81a3      	strh	r3, [r4, #12]
 8003950:	6126      	str	r6, [r4, #16]
 8003952:	6165      	str	r5, [r4, #20]
 8003954:	444e      	add	r6, r9
 8003956:	eba5 0509 	sub.w	r5, r5, r9
 800395a:	6026      	str	r6, [r4, #0]
 800395c:	60a5      	str	r5, [r4, #8]
 800395e:	463e      	mov	r6, r7
 8003960:	42be      	cmp	r6, r7
 8003962:	d900      	bls.n	8003966 <__ssputs_r+0x72>
 8003964:	463e      	mov	r6, r7
 8003966:	6820      	ldr	r0, [r4, #0]
 8003968:	4632      	mov	r2, r6
 800396a:	4641      	mov	r1, r8
 800396c:	f000 faa6 	bl	8003ebc <memmove>
 8003970:	68a3      	ldr	r3, [r4, #8]
 8003972:	1b9b      	subs	r3, r3, r6
 8003974:	60a3      	str	r3, [r4, #8]
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	4433      	add	r3, r6
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	2000      	movs	r0, #0
 800397e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003982:	462a      	mov	r2, r5
 8003984:	f000 fad2 	bl	8003f2c <_realloc_r>
 8003988:	4606      	mov	r6, r0
 800398a:	2800      	cmp	r0, #0
 800398c:	d1e0      	bne.n	8003950 <__ssputs_r+0x5c>
 800398e:	6921      	ldr	r1, [r4, #16]
 8003990:	4650      	mov	r0, sl
 8003992:	f7ff feb7 	bl	8003704 <_free_r>
 8003996:	230c      	movs	r3, #12
 8003998:	f8ca 3000 	str.w	r3, [sl]
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	e7e9      	b.n	800397e <__ssputs_r+0x8a>
	...

080039ac <_svfiprintf_r>:
 80039ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039b0:	4698      	mov	r8, r3
 80039b2:	898b      	ldrh	r3, [r1, #12]
 80039b4:	061b      	lsls	r3, r3, #24
 80039b6:	b09d      	sub	sp, #116	@ 0x74
 80039b8:	4607      	mov	r7, r0
 80039ba:	460d      	mov	r5, r1
 80039bc:	4614      	mov	r4, r2
 80039be:	d510      	bpl.n	80039e2 <_svfiprintf_r+0x36>
 80039c0:	690b      	ldr	r3, [r1, #16]
 80039c2:	b973      	cbnz	r3, 80039e2 <_svfiprintf_r+0x36>
 80039c4:	2140      	movs	r1, #64	@ 0x40
 80039c6:	f7ff ff09 	bl	80037dc <_malloc_r>
 80039ca:	6028      	str	r0, [r5, #0]
 80039cc:	6128      	str	r0, [r5, #16]
 80039ce:	b930      	cbnz	r0, 80039de <_svfiprintf_r+0x32>
 80039d0:	230c      	movs	r3, #12
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	f04f 30ff 	mov.w	r0, #4294967295
 80039d8:	b01d      	add	sp, #116	@ 0x74
 80039da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039de:	2340      	movs	r3, #64	@ 0x40
 80039e0:	616b      	str	r3, [r5, #20]
 80039e2:	2300      	movs	r3, #0
 80039e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80039e6:	2320      	movs	r3, #32
 80039e8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80039ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80039f0:	2330      	movs	r3, #48	@ 0x30
 80039f2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003b90 <_svfiprintf_r+0x1e4>
 80039f6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80039fa:	f04f 0901 	mov.w	r9, #1
 80039fe:	4623      	mov	r3, r4
 8003a00:	469a      	mov	sl, r3
 8003a02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a06:	b10a      	cbz	r2, 8003a0c <_svfiprintf_r+0x60>
 8003a08:	2a25      	cmp	r2, #37	@ 0x25
 8003a0a:	d1f9      	bne.n	8003a00 <_svfiprintf_r+0x54>
 8003a0c:	ebba 0b04 	subs.w	fp, sl, r4
 8003a10:	d00b      	beq.n	8003a2a <_svfiprintf_r+0x7e>
 8003a12:	465b      	mov	r3, fp
 8003a14:	4622      	mov	r2, r4
 8003a16:	4629      	mov	r1, r5
 8003a18:	4638      	mov	r0, r7
 8003a1a:	f7ff ff6b 	bl	80038f4 <__ssputs_r>
 8003a1e:	3001      	adds	r0, #1
 8003a20:	f000 80a7 	beq.w	8003b72 <_svfiprintf_r+0x1c6>
 8003a24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003a26:	445a      	add	r2, fp
 8003a28:	9209      	str	r2, [sp, #36]	@ 0x24
 8003a2a:	f89a 3000 	ldrb.w	r3, [sl]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	f000 809f 	beq.w	8003b72 <_svfiprintf_r+0x1c6>
 8003a34:	2300      	movs	r3, #0
 8003a36:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a3e:	f10a 0a01 	add.w	sl, sl, #1
 8003a42:	9304      	str	r3, [sp, #16]
 8003a44:	9307      	str	r3, [sp, #28]
 8003a46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003a4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8003a4c:	4654      	mov	r4, sl
 8003a4e:	2205      	movs	r2, #5
 8003a50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a54:	484e      	ldr	r0, [pc, #312]	@ (8003b90 <_svfiprintf_r+0x1e4>)
 8003a56:	f7fc fbe3 	bl	8000220 <memchr>
 8003a5a:	9a04      	ldr	r2, [sp, #16]
 8003a5c:	b9d8      	cbnz	r0, 8003a96 <_svfiprintf_r+0xea>
 8003a5e:	06d0      	lsls	r0, r2, #27
 8003a60:	bf44      	itt	mi
 8003a62:	2320      	movmi	r3, #32
 8003a64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a68:	0711      	lsls	r1, r2, #28
 8003a6a:	bf44      	itt	mi
 8003a6c:	232b      	movmi	r3, #43	@ 0x2b
 8003a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003a72:	f89a 3000 	ldrb.w	r3, [sl]
 8003a76:	2b2a      	cmp	r3, #42	@ 0x2a
 8003a78:	d015      	beq.n	8003aa6 <_svfiprintf_r+0xfa>
 8003a7a:	9a07      	ldr	r2, [sp, #28]
 8003a7c:	4654      	mov	r4, sl
 8003a7e:	2000      	movs	r0, #0
 8003a80:	f04f 0c0a 	mov.w	ip, #10
 8003a84:	4621      	mov	r1, r4
 8003a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a8a:	3b30      	subs	r3, #48	@ 0x30
 8003a8c:	2b09      	cmp	r3, #9
 8003a8e:	d94b      	bls.n	8003b28 <_svfiprintf_r+0x17c>
 8003a90:	b1b0      	cbz	r0, 8003ac0 <_svfiprintf_r+0x114>
 8003a92:	9207      	str	r2, [sp, #28]
 8003a94:	e014      	b.n	8003ac0 <_svfiprintf_r+0x114>
 8003a96:	eba0 0308 	sub.w	r3, r0, r8
 8003a9a:	fa09 f303 	lsl.w	r3, r9, r3
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	9304      	str	r3, [sp, #16]
 8003aa2:	46a2      	mov	sl, r4
 8003aa4:	e7d2      	b.n	8003a4c <_svfiprintf_r+0xa0>
 8003aa6:	9b03      	ldr	r3, [sp, #12]
 8003aa8:	1d19      	adds	r1, r3, #4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	9103      	str	r1, [sp, #12]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bfbb      	ittet	lt
 8003ab2:	425b      	neglt	r3, r3
 8003ab4:	f042 0202 	orrlt.w	r2, r2, #2
 8003ab8:	9307      	strge	r3, [sp, #28]
 8003aba:	9307      	strlt	r3, [sp, #28]
 8003abc:	bfb8      	it	lt
 8003abe:	9204      	strlt	r2, [sp, #16]
 8003ac0:	7823      	ldrb	r3, [r4, #0]
 8003ac2:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ac4:	d10a      	bne.n	8003adc <_svfiprintf_r+0x130>
 8003ac6:	7863      	ldrb	r3, [r4, #1]
 8003ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003aca:	d132      	bne.n	8003b32 <_svfiprintf_r+0x186>
 8003acc:	9b03      	ldr	r3, [sp, #12]
 8003ace:	1d1a      	adds	r2, r3, #4
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	9203      	str	r2, [sp, #12]
 8003ad4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ad8:	3402      	adds	r4, #2
 8003ada:	9305      	str	r3, [sp, #20]
 8003adc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003ba0 <_svfiprintf_r+0x1f4>
 8003ae0:	7821      	ldrb	r1, [r4, #0]
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	4650      	mov	r0, sl
 8003ae6:	f7fc fb9b 	bl	8000220 <memchr>
 8003aea:	b138      	cbz	r0, 8003afc <_svfiprintf_r+0x150>
 8003aec:	9b04      	ldr	r3, [sp, #16]
 8003aee:	eba0 000a 	sub.w	r0, r0, sl
 8003af2:	2240      	movs	r2, #64	@ 0x40
 8003af4:	4082      	lsls	r2, r0
 8003af6:	4313      	orrs	r3, r2
 8003af8:	3401      	adds	r4, #1
 8003afa:	9304      	str	r3, [sp, #16]
 8003afc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b00:	4824      	ldr	r0, [pc, #144]	@ (8003b94 <_svfiprintf_r+0x1e8>)
 8003b02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b06:	2206      	movs	r2, #6
 8003b08:	f7fc fb8a 	bl	8000220 <memchr>
 8003b0c:	2800      	cmp	r0, #0
 8003b0e:	d036      	beq.n	8003b7e <_svfiprintf_r+0x1d2>
 8003b10:	4b21      	ldr	r3, [pc, #132]	@ (8003b98 <_svfiprintf_r+0x1ec>)
 8003b12:	bb1b      	cbnz	r3, 8003b5c <_svfiprintf_r+0x1b0>
 8003b14:	9b03      	ldr	r3, [sp, #12]
 8003b16:	3307      	adds	r3, #7
 8003b18:	f023 0307 	bic.w	r3, r3, #7
 8003b1c:	3308      	adds	r3, #8
 8003b1e:	9303      	str	r3, [sp, #12]
 8003b20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003b22:	4433      	add	r3, r6
 8003b24:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b26:	e76a      	b.n	80039fe <_svfiprintf_r+0x52>
 8003b28:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	2001      	movs	r0, #1
 8003b30:	e7a8      	b.n	8003a84 <_svfiprintf_r+0xd8>
 8003b32:	2300      	movs	r3, #0
 8003b34:	3401      	adds	r4, #1
 8003b36:	9305      	str	r3, [sp, #20]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	f04f 0c0a 	mov.w	ip, #10
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b44:	3a30      	subs	r2, #48	@ 0x30
 8003b46:	2a09      	cmp	r2, #9
 8003b48:	d903      	bls.n	8003b52 <_svfiprintf_r+0x1a6>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0c6      	beq.n	8003adc <_svfiprintf_r+0x130>
 8003b4e:	9105      	str	r1, [sp, #20]
 8003b50:	e7c4      	b.n	8003adc <_svfiprintf_r+0x130>
 8003b52:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b56:	4604      	mov	r4, r0
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e7f0      	b.n	8003b3e <_svfiprintf_r+0x192>
 8003b5c:	ab03      	add	r3, sp, #12
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	462a      	mov	r2, r5
 8003b62:	4b0e      	ldr	r3, [pc, #56]	@ (8003b9c <_svfiprintf_r+0x1f0>)
 8003b64:	a904      	add	r1, sp, #16
 8003b66:	4638      	mov	r0, r7
 8003b68:	f3af 8000 	nop.w
 8003b6c:	1c42      	adds	r2, r0, #1
 8003b6e:	4606      	mov	r6, r0
 8003b70:	d1d6      	bne.n	8003b20 <_svfiprintf_r+0x174>
 8003b72:	89ab      	ldrh	r3, [r5, #12]
 8003b74:	065b      	lsls	r3, r3, #25
 8003b76:	f53f af2d 	bmi.w	80039d4 <_svfiprintf_r+0x28>
 8003b7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003b7c:	e72c      	b.n	80039d8 <_svfiprintf_r+0x2c>
 8003b7e:	ab03      	add	r3, sp, #12
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	462a      	mov	r2, r5
 8003b84:	4b05      	ldr	r3, [pc, #20]	@ (8003b9c <_svfiprintf_r+0x1f0>)
 8003b86:	a904      	add	r1, sp, #16
 8003b88:	4638      	mov	r0, r7
 8003b8a:	f000 f879 	bl	8003c80 <_printf_i>
 8003b8e:	e7ed      	b.n	8003b6c <_svfiprintf_r+0x1c0>
 8003b90:	08003fdc 	.word	0x08003fdc
 8003b94:	08003fe6 	.word	0x08003fe6
 8003b98:	00000000 	.word	0x00000000
 8003b9c:	080038f5 	.word	0x080038f5
 8003ba0:	08003fe2 	.word	0x08003fe2

08003ba4 <_printf_common>:
 8003ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ba8:	4616      	mov	r6, r2
 8003baa:	4698      	mov	r8, r3
 8003bac:	688a      	ldr	r2, [r1, #8]
 8003bae:	690b      	ldr	r3, [r1, #16]
 8003bb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	bfb8      	it	lt
 8003bb8:	4613      	movlt	r3, r2
 8003bba:	6033      	str	r3, [r6, #0]
 8003bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003bc0:	4607      	mov	r7, r0
 8003bc2:	460c      	mov	r4, r1
 8003bc4:	b10a      	cbz	r2, 8003bca <_printf_common+0x26>
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	6033      	str	r3, [r6, #0]
 8003bca:	6823      	ldr	r3, [r4, #0]
 8003bcc:	0699      	lsls	r1, r3, #26
 8003bce:	bf42      	ittt	mi
 8003bd0:	6833      	ldrmi	r3, [r6, #0]
 8003bd2:	3302      	addmi	r3, #2
 8003bd4:	6033      	strmi	r3, [r6, #0]
 8003bd6:	6825      	ldr	r5, [r4, #0]
 8003bd8:	f015 0506 	ands.w	r5, r5, #6
 8003bdc:	d106      	bne.n	8003bec <_printf_common+0x48>
 8003bde:	f104 0a19 	add.w	sl, r4, #25
 8003be2:	68e3      	ldr	r3, [r4, #12]
 8003be4:	6832      	ldr	r2, [r6, #0]
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	42ab      	cmp	r3, r5
 8003bea:	dc26      	bgt.n	8003c3a <_printf_common+0x96>
 8003bec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003bf0:	6822      	ldr	r2, [r4, #0]
 8003bf2:	3b00      	subs	r3, #0
 8003bf4:	bf18      	it	ne
 8003bf6:	2301      	movne	r3, #1
 8003bf8:	0692      	lsls	r2, r2, #26
 8003bfa:	d42b      	bmi.n	8003c54 <_printf_common+0xb0>
 8003bfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c00:	4641      	mov	r1, r8
 8003c02:	4638      	mov	r0, r7
 8003c04:	47c8      	blx	r9
 8003c06:	3001      	adds	r0, #1
 8003c08:	d01e      	beq.n	8003c48 <_printf_common+0xa4>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	6922      	ldr	r2, [r4, #16]
 8003c0e:	f003 0306 	and.w	r3, r3, #6
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	bf02      	ittt	eq
 8003c16:	68e5      	ldreq	r5, [r4, #12]
 8003c18:	6833      	ldreq	r3, [r6, #0]
 8003c1a:	1aed      	subeq	r5, r5, r3
 8003c1c:	68a3      	ldr	r3, [r4, #8]
 8003c1e:	bf0c      	ite	eq
 8003c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c24:	2500      	movne	r5, #0
 8003c26:	4293      	cmp	r3, r2
 8003c28:	bfc4      	itt	gt
 8003c2a:	1a9b      	subgt	r3, r3, r2
 8003c2c:	18ed      	addgt	r5, r5, r3
 8003c2e:	2600      	movs	r6, #0
 8003c30:	341a      	adds	r4, #26
 8003c32:	42b5      	cmp	r5, r6
 8003c34:	d11a      	bne.n	8003c6c <_printf_common+0xc8>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e008      	b.n	8003c4c <_printf_common+0xa8>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	4652      	mov	r2, sl
 8003c3e:	4641      	mov	r1, r8
 8003c40:	4638      	mov	r0, r7
 8003c42:	47c8      	blx	r9
 8003c44:	3001      	adds	r0, #1
 8003c46:	d103      	bne.n	8003c50 <_printf_common+0xac>
 8003c48:	f04f 30ff 	mov.w	r0, #4294967295
 8003c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c50:	3501      	adds	r5, #1
 8003c52:	e7c6      	b.n	8003be2 <_printf_common+0x3e>
 8003c54:	18e1      	adds	r1, r4, r3
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	2030      	movs	r0, #48	@ 0x30
 8003c5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003c5e:	4422      	add	r2, r4
 8003c60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003c64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003c68:	3302      	adds	r3, #2
 8003c6a:	e7c7      	b.n	8003bfc <_printf_common+0x58>
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	4622      	mov	r2, r4
 8003c70:	4641      	mov	r1, r8
 8003c72:	4638      	mov	r0, r7
 8003c74:	47c8      	blx	r9
 8003c76:	3001      	adds	r0, #1
 8003c78:	d0e6      	beq.n	8003c48 <_printf_common+0xa4>
 8003c7a:	3601      	adds	r6, #1
 8003c7c:	e7d9      	b.n	8003c32 <_printf_common+0x8e>
	...

08003c80 <_printf_i>:
 8003c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c84:	7e0f      	ldrb	r7, [r1, #24]
 8003c86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003c88:	2f78      	cmp	r7, #120	@ 0x78
 8003c8a:	4691      	mov	r9, r2
 8003c8c:	4680      	mov	r8, r0
 8003c8e:	460c      	mov	r4, r1
 8003c90:	469a      	mov	sl, r3
 8003c92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003c96:	d807      	bhi.n	8003ca8 <_printf_i+0x28>
 8003c98:	2f62      	cmp	r7, #98	@ 0x62
 8003c9a:	d80a      	bhi.n	8003cb2 <_printf_i+0x32>
 8003c9c:	2f00      	cmp	r7, #0
 8003c9e:	f000 80d1 	beq.w	8003e44 <_printf_i+0x1c4>
 8003ca2:	2f58      	cmp	r7, #88	@ 0x58
 8003ca4:	f000 80b8 	beq.w	8003e18 <_printf_i+0x198>
 8003ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003cac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003cb0:	e03a      	b.n	8003d28 <_printf_i+0xa8>
 8003cb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003cb6:	2b15      	cmp	r3, #21
 8003cb8:	d8f6      	bhi.n	8003ca8 <_printf_i+0x28>
 8003cba:	a101      	add	r1, pc, #4	@ (adr r1, 8003cc0 <_printf_i+0x40>)
 8003cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cc0:	08003d19 	.word	0x08003d19
 8003cc4:	08003d2d 	.word	0x08003d2d
 8003cc8:	08003ca9 	.word	0x08003ca9
 8003ccc:	08003ca9 	.word	0x08003ca9
 8003cd0:	08003ca9 	.word	0x08003ca9
 8003cd4:	08003ca9 	.word	0x08003ca9
 8003cd8:	08003d2d 	.word	0x08003d2d
 8003cdc:	08003ca9 	.word	0x08003ca9
 8003ce0:	08003ca9 	.word	0x08003ca9
 8003ce4:	08003ca9 	.word	0x08003ca9
 8003ce8:	08003ca9 	.word	0x08003ca9
 8003cec:	08003e2b 	.word	0x08003e2b
 8003cf0:	08003d57 	.word	0x08003d57
 8003cf4:	08003de5 	.word	0x08003de5
 8003cf8:	08003ca9 	.word	0x08003ca9
 8003cfc:	08003ca9 	.word	0x08003ca9
 8003d00:	08003e4d 	.word	0x08003e4d
 8003d04:	08003ca9 	.word	0x08003ca9
 8003d08:	08003d57 	.word	0x08003d57
 8003d0c:	08003ca9 	.word	0x08003ca9
 8003d10:	08003ca9 	.word	0x08003ca9
 8003d14:	08003ded 	.word	0x08003ded
 8003d18:	6833      	ldr	r3, [r6, #0]
 8003d1a:	1d1a      	adds	r2, r3, #4
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6032      	str	r2, [r6, #0]
 8003d20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e09c      	b.n	8003e66 <_printf_i+0x1e6>
 8003d2c:	6833      	ldr	r3, [r6, #0]
 8003d2e:	6820      	ldr	r0, [r4, #0]
 8003d30:	1d19      	adds	r1, r3, #4
 8003d32:	6031      	str	r1, [r6, #0]
 8003d34:	0606      	lsls	r6, r0, #24
 8003d36:	d501      	bpl.n	8003d3c <_printf_i+0xbc>
 8003d38:	681d      	ldr	r5, [r3, #0]
 8003d3a:	e003      	b.n	8003d44 <_printf_i+0xc4>
 8003d3c:	0645      	lsls	r5, r0, #25
 8003d3e:	d5fb      	bpl.n	8003d38 <_printf_i+0xb8>
 8003d40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003d44:	2d00      	cmp	r5, #0
 8003d46:	da03      	bge.n	8003d50 <_printf_i+0xd0>
 8003d48:	232d      	movs	r3, #45	@ 0x2d
 8003d4a:	426d      	negs	r5, r5
 8003d4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003d50:	4858      	ldr	r0, [pc, #352]	@ (8003eb4 <_printf_i+0x234>)
 8003d52:	230a      	movs	r3, #10
 8003d54:	e011      	b.n	8003d7a <_printf_i+0xfa>
 8003d56:	6821      	ldr	r1, [r4, #0]
 8003d58:	6833      	ldr	r3, [r6, #0]
 8003d5a:	0608      	lsls	r0, r1, #24
 8003d5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003d60:	d402      	bmi.n	8003d68 <_printf_i+0xe8>
 8003d62:	0649      	lsls	r1, r1, #25
 8003d64:	bf48      	it	mi
 8003d66:	b2ad      	uxthmi	r5, r5
 8003d68:	2f6f      	cmp	r7, #111	@ 0x6f
 8003d6a:	4852      	ldr	r0, [pc, #328]	@ (8003eb4 <_printf_i+0x234>)
 8003d6c:	6033      	str	r3, [r6, #0]
 8003d6e:	bf14      	ite	ne
 8003d70:	230a      	movne	r3, #10
 8003d72:	2308      	moveq	r3, #8
 8003d74:	2100      	movs	r1, #0
 8003d76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003d7a:	6866      	ldr	r6, [r4, #4]
 8003d7c:	60a6      	str	r6, [r4, #8]
 8003d7e:	2e00      	cmp	r6, #0
 8003d80:	db05      	blt.n	8003d8e <_printf_i+0x10e>
 8003d82:	6821      	ldr	r1, [r4, #0]
 8003d84:	432e      	orrs	r6, r5
 8003d86:	f021 0104 	bic.w	r1, r1, #4
 8003d8a:	6021      	str	r1, [r4, #0]
 8003d8c:	d04b      	beq.n	8003e26 <_printf_i+0x1a6>
 8003d8e:	4616      	mov	r6, r2
 8003d90:	fbb5 f1f3 	udiv	r1, r5, r3
 8003d94:	fb03 5711 	mls	r7, r3, r1, r5
 8003d98:	5dc7      	ldrb	r7, [r0, r7]
 8003d9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003d9e:	462f      	mov	r7, r5
 8003da0:	42bb      	cmp	r3, r7
 8003da2:	460d      	mov	r5, r1
 8003da4:	d9f4      	bls.n	8003d90 <_printf_i+0x110>
 8003da6:	2b08      	cmp	r3, #8
 8003da8:	d10b      	bne.n	8003dc2 <_printf_i+0x142>
 8003daa:	6823      	ldr	r3, [r4, #0]
 8003dac:	07df      	lsls	r7, r3, #31
 8003dae:	d508      	bpl.n	8003dc2 <_printf_i+0x142>
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	6861      	ldr	r1, [r4, #4]
 8003db4:	4299      	cmp	r1, r3
 8003db6:	bfde      	ittt	le
 8003db8:	2330      	movle	r3, #48	@ 0x30
 8003dba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003dbe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003dc2:	1b92      	subs	r2, r2, r6
 8003dc4:	6122      	str	r2, [r4, #16]
 8003dc6:	f8cd a000 	str.w	sl, [sp]
 8003dca:	464b      	mov	r3, r9
 8003dcc:	aa03      	add	r2, sp, #12
 8003dce:	4621      	mov	r1, r4
 8003dd0:	4640      	mov	r0, r8
 8003dd2:	f7ff fee7 	bl	8003ba4 <_printf_common>
 8003dd6:	3001      	adds	r0, #1
 8003dd8:	d14a      	bne.n	8003e70 <_printf_i+0x1f0>
 8003dda:	f04f 30ff 	mov.w	r0, #4294967295
 8003dde:	b004      	add	sp, #16
 8003de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	f043 0320 	orr.w	r3, r3, #32
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	4832      	ldr	r0, [pc, #200]	@ (8003eb8 <_printf_i+0x238>)
 8003dee:	2778      	movs	r7, #120	@ 0x78
 8003df0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003df4:	6823      	ldr	r3, [r4, #0]
 8003df6:	6831      	ldr	r1, [r6, #0]
 8003df8:	061f      	lsls	r7, r3, #24
 8003dfa:	f851 5b04 	ldr.w	r5, [r1], #4
 8003dfe:	d402      	bmi.n	8003e06 <_printf_i+0x186>
 8003e00:	065f      	lsls	r7, r3, #25
 8003e02:	bf48      	it	mi
 8003e04:	b2ad      	uxthmi	r5, r5
 8003e06:	6031      	str	r1, [r6, #0]
 8003e08:	07d9      	lsls	r1, r3, #31
 8003e0a:	bf44      	itt	mi
 8003e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e10:	6023      	strmi	r3, [r4, #0]
 8003e12:	b11d      	cbz	r5, 8003e1c <_printf_i+0x19c>
 8003e14:	2310      	movs	r3, #16
 8003e16:	e7ad      	b.n	8003d74 <_printf_i+0xf4>
 8003e18:	4826      	ldr	r0, [pc, #152]	@ (8003eb4 <_printf_i+0x234>)
 8003e1a:	e7e9      	b.n	8003df0 <_printf_i+0x170>
 8003e1c:	6823      	ldr	r3, [r4, #0]
 8003e1e:	f023 0320 	bic.w	r3, r3, #32
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	e7f6      	b.n	8003e14 <_printf_i+0x194>
 8003e26:	4616      	mov	r6, r2
 8003e28:	e7bd      	b.n	8003da6 <_printf_i+0x126>
 8003e2a:	6833      	ldr	r3, [r6, #0]
 8003e2c:	6825      	ldr	r5, [r4, #0]
 8003e2e:	6961      	ldr	r1, [r4, #20]
 8003e30:	1d18      	adds	r0, r3, #4
 8003e32:	6030      	str	r0, [r6, #0]
 8003e34:	062e      	lsls	r6, r5, #24
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	d501      	bpl.n	8003e3e <_printf_i+0x1be>
 8003e3a:	6019      	str	r1, [r3, #0]
 8003e3c:	e002      	b.n	8003e44 <_printf_i+0x1c4>
 8003e3e:	0668      	lsls	r0, r5, #25
 8003e40:	d5fb      	bpl.n	8003e3a <_printf_i+0x1ba>
 8003e42:	8019      	strh	r1, [r3, #0]
 8003e44:	2300      	movs	r3, #0
 8003e46:	6123      	str	r3, [r4, #16]
 8003e48:	4616      	mov	r6, r2
 8003e4a:	e7bc      	b.n	8003dc6 <_printf_i+0x146>
 8003e4c:	6833      	ldr	r3, [r6, #0]
 8003e4e:	1d1a      	adds	r2, r3, #4
 8003e50:	6032      	str	r2, [r6, #0]
 8003e52:	681e      	ldr	r6, [r3, #0]
 8003e54:	6862      	ldr	r2, [r4, #4]
 8003e56:	2100      	movs	r1, #0
 8003e58:	4630      	mov	r0, r6
 8003e5a:	f7fc f9e1 	bl	8000220 <memchr>
 8003e5e:	b108      	cbz	r0, 8003e64 <_printf_i+0x1e4>
 8003e60:	1b80      	subs	r0, r0, r6
 8003e62:	6060      	str	r0, [r4, #4]
 8003e64:	6863      	ldr	r3, [r4, #4]
 8003e66:	6123      	str	r3, [r4, #16]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e6e:	e7aa      	b.n	8003dc6 <_printf_i+0x146>
 8003e70:	6923      	ldr	r3, [r4, #16]
 8003e72:	4632      	mov	r2, r6
 8003e74:	4649      	mov	r1, r9
 8003e76:	4640      	mov	r0, r8
 8003e78:	47d0      	blx	sl
 8003e7a:	3001      	adds	r0, #1
 8003e7c:	d0ad      	beq.n	8003dda <_printf_i+0x15a>
 8003e7e:	6823      	ldr	r3, [r4, #0]
 8003e80:	079b      	lsls	r3, r3, #30
 8003e82:	d413      	bmi.n	8003eac <_printf_i+0x22c>
 8003e84:	68e0      	ldr	r0, [r4, #12]
 8003e86:	9b03      	ldr	r3, [sp, #12]
 8003e88:	4298      	cmp	r0, r3
 8003e8a:	bfb8      	it	lt
 8003e8c:	4618      	movlt	r0, r3
 8003e8e:	e7a6      	b.n	8003dde <_printf_i+0x15e>
 8003e90:	2301      	movs	r3, #1
 8003e92:	4632      	mov	r2, r6
 8003e94:	4649      	mov	r1, r9
 8003e96:	4640      	mov	r0, r8
 8003e98:	47d0      	blx	sl
 8003e9a:	3001      	adds	r0, #1
 8003e9c:	d09d      	beq.n	8003dda <_printf_i+0x15a>
 8003e9e:	3501      	adds	r5, #1
 8003ea0:	68e3      	ldr	r3, [r4, #12]
 8003ea2:	9903      	ldr	r1, [sp, #12]
 8003ea4:	1a5b      	subs	r3, r3, r1
 8003ea6:	42ab      	cmp	r3, r5
 8003ea8:	dcf2      	bgt.n	8003e90 <_printf_i+0x210>
 8003eaa:	e7eb      	b.n	8003e84 <_printf_i+0x204>
 8003eac:	2500      	movs	r5, #0
 8003eae:	f104 0619 	add.w	r6, r4, #25
 8003eb2:	e7f5      	b.n	8003ea0 <_printf_i+0x220>
 8003eb4:	08003fed 	.word	0x08003fed
 8003eb8:	08003ffe 	.word	0x08003ffe

08003ebc <memmove>:
 8003ebc:	4288      	cmp	r0, r1
 8003ebe:	b510      	push	{r4, lr}
 8003ec0:	eb01 0402 	add.w	r4, r1, r2
 8003ec4:	d902      	bls.n	8003ecc <memmove+0x10>
 8003ec6:	4284      	cmp	r4, r0
 8003ec8:	4623      	mov	r3, r4
 8003eca:	d807      	bhi.n	8003edc <memmove+0x20>
 8003ecc:	1e43      	subs	r3, r0, #1
 8003ece:	42a1      	cmp	r1, r4
 8003ed0:	d008      	beq.n	8003ee4 <memmove+0x28>
 8003ed2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003ed6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003eda:	e7f8      	b.n	8003ece <memmove+0x12>
 8003edc:	4402      	add	r2, r0
 8003ede:	4601      	mov	r1, r0
 8003ee0:	428a      	cmp	r2, r1
 8003ee2:	d100      	bne.n	8003ee6 <memmove+0x2a>
 8003ee4:	bd10      	pop	{r4, pc}
 8003ee6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003eea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003eee:	e7f7      	b.n	8003ee0 <memmove+0x24>

08003ef0 <_sbrk_r>:
 8003ef0:	b538      	push	{r3, r4, r5, lr}
 8003ef2:	4d06      	ldr	r5, [pc, #24]	@ (8003f0c <_sbrk_r+0x1c>)
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	4604      	mov	r4, r0
 8003ef8:	4608      	mov	r0, r1
 8003efa:	602b      	str	r3, [r5, #0]
 8003efc:	f7fc fe2a 	bl	8000b54 <_sbrk>
 8003f00:	1c43      	adds	r3, r0, #1
 8003f02:	d102      	bne.n	8003f0a <_sbrk_r+0x1a>
 8003f04:	682b      	ldr	r3, [r5, #0]
 8003f06:	b103      	cbz	r3, 8003f0a <_sbrk_r+0x1a>
 8003f08:	6023      	str	r3, [r4, #0]
 8003f0a:	bd38      	pop	{r3, r4, r5, pc}
 8003f0c:	20000328 	.word	0x20000328

08003f10 <memcpy>:
 8003f10:	440a      	add	r2, r1
 8003f12:	4291      	cmp	r1, r2
 8003f14:	f100 33ff 	add.w	r3, r0, #4294967295
 8003f18:	d100      	bne.n	8003f1c <memcpy+0xc>
 8003f1a:	4770      	bx	lr
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003f26:	4291      	cmp	r1, r2
 8003f28:	d1f9      	bne.n	8003f1e <memcpy+0xe>
 8003f2a:	bd10      	pop	{r4, pc}

08003f2c <_realloc_r>:
 8003f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f30:	4607      	mov	r7, r0
 8003f32:	4614      	mov	r4, r2
 8003f34:	460d      	mov	r5, r1
 8003f36:	b921      	cbnz	r1, 8003f42 <_realloc_r+0x16>
 8003f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	f7ff bc4d 	b.w	80037dc <_malloc_r>
 8003f42:	b92a      	cbnz	r2, 8003f50 <_realloc_r+0x24>
 8003f44:	f7ff fbde 	bl	8003704 <_free_r>
 8003f48:	4625      	mov	r5, r4
 8003f4a:	4628      	mov	r0, r5
 8003f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f50:	f000 f81a 	bl	8003f88 <_malloc_usable_size_r>
 8003f54:	4284      	cmp	r4, r0
 8003f56:	4606      	mov	r6, r0
 8003f58:	d802      	bhi.n	8003f60 <_realloc_r+0x34>
 8003f5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003f5e:	d8f4      	bhi.n	8003f4a <_realloc_r+0x1e>
 8003f60:	4621      	mov	r1, r4
 8003f62:	4638      	mov	r0, r7
 8003f64:	f7ff fc3a 	bl	80037dc <_malloc_r>
 8003f68:	4680      	mov	r8, r0
 8003f6a:	b908      	cbnz	r0, 8003f70 <_realloc_r+0x44>
 8003f6c:	4645      	mov	r5, r8
 8003f6e:	e7ec      	b.n	8003f4a <_realloc_r+0x1e>
 8003f70:	42b4      	cmp	r4, r6
 8003f72:	4622      	mov	r2, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	bf28      	it	cs
 8003f78:	4632      	movcs	r2, r6
 8003f7a:	f7ff ffc9 	bl	8003f10 <memcpy>
 8003f7e:	4629      	mov	r1, r5
 8003f80:	4638      	mov	r0, r7
 8003f82:	f7ff fbbf 	bl	8003704 <_free_r>
 8003f86:	e7f1      	b.n	8003f6c <_realloc_r+0x40>

08003f88 <_malloc_usable_size_r>:
 8003f88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f8c:	1f18      	subs	r0, r3, #4
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	bfbc      	itt	lt
 8003f92:	580b      	ldrlt	r3, [r1, r0]
 8003f94:	18c0      	addlt	r0, r0, r3
 8003f96:	4770      	bx	lr

08003f98 <_init>:
 8003f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9a:	bf00      	nop
 8003f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f9e:	bc08      	pop	{r3}
 8003fa0:	469e      	mov	lr, r3
 8003fa2:	4770      	bx	lr

08003fa4 <_fini>:
 8003fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa6:	bf00      	nop
 8003fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003faa:	bc08      	pop	{r3}
 8003fac:	469e      	mov	lr, r3
 8003fae:	4770      	bx	lr
