
project1-NucleoF446RE-blinkingLed.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08002ab4  08002ab4  00003ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b08  08002b08  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002b08  08002b08  00003b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b10  08002b10  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b10  08002b10  00003b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002b14  08002b14  00003b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002b18  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  20000068  08002b80  00004068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08002b80  000041dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004b91  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013e0  00000000  00000000  00008c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000558  00000000  00000000  0000a010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000003da  00000000  00000000  0000a568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021709  00000000  00000000  0000a942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000072fb  00000000  00000000  0002c04b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c78a4  00000000  00000000  00033346  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fabea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b20  00000000  00000000  000fac30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fc750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002a9c 	.word	0x08002a9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08002a9c 	.word	0x08002a9c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005e4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d013      	beq.n	800061c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005f4:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80005f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 80005fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000600:	2b00      	cmp	r3, #0
 8000602:	d00b      	beq.n	800061c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000604:	e000      	b.n	8000608 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000606:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000608:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d0f9      	beq.n	8000606 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000612:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	370c      	adds	r7, #12
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr

0800062a <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b086      	sub	sp, #24
 800062e:	af00      	add	r7, sp, #0
 8000630:	60f8      	str	r0, [r7, #12]
 8000632:	60b9      	str	r1, [r7, #8]
 8000634:	607a      	str	r2, [r7, #4]
	int i=0;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
	for (i=0; i<len; i++){
 800063a:	2300      	movs	r3, #0
 800063c:	617b      	str	r3, [r7, #20]
 800063e:	e009      	b.n	8000654 <_write+0x2a>
		ITM_SendChar((*ptr++));
 8000640:	68bb      	ldr	r3, [r7, #8]
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	60ba      	str	r2, [r7, #8]
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4618      	mov	r0, r3
 800064a:	f7ff ffc7 	bl	80005dc <ITM_SendChar>
	for (i=0; i<len; i++){
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	697a      	ldr	r2, [r7, #20]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	429a      	cmp	r2, r3
 800065a:	dbf1      	blt.n	8000640 <_write+0x16>
	}
	return len;
 800065c:	687b      	ldr	r3, [r7, #4]
}
 800065e:	4618      	mov	r0, r3
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
	...

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066c:	f000 f9f0 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000670:	f000 f81e 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000674:	f000 f88a 	bl	800078c <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000678:	2120      	movs	r1, #32
 800067a:	480a      	ldr	r0, [pc, #40]	@ (80006a4 <main+0x3c>)
 800067c:	f000 fd11 	bl	80010a2 <HAL_GPIO_TogglePin>
	  count++;
 8000680:	4b09      	ldr	r3, [pc, #36]	@ (80006a8 <main+0x40>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	3301      	adds	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <main+0x40>)
 800068a:	701a      	strb	r2, [r3, #0]
	  printf("Hello ....=%d \n", count);
 800068c:	4b06      	ldr	r3, [pc, #24]	@ (80006a8 <main+0x40>)
 800068e:	781b      	ldrb	r3, [r3, #0]
 8000690:	4619      	mov	r1, r3
 8000692:	4806      	ldr	r0, [pc, #24]	@ (80006ac <main+0x44>)
 8000694:	f001 fb96 	bl	8001dc4 <iprintf>
	  HAL_Delay(3000);
 8000698:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800069c:	f000 fa4a 	bl	8000b34 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80006a0:	bf00      	nop
 80006a2:	e7e9      	b.n	8000678 <main+0x10>
 80006a4:	40020000 	.word	0x40020000
 80006a8:	20000084 	.word	0x20000084
 80006ac:	08002ab4 	.word	0x08002ab4

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	@ 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	2234      	movs	r2, #52	@ 0x34
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fbd5 	bl	8001e6e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 0308 	add.w	r3, r7, #8
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b2a      	ldr	r3, [pc, #168]	@ (8000784 <SystemClock_Config+0xd4>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006dc:	4a29      	ldr	r2, [pc, #164]	@ (8000784 <SystemClock_Config+0xd4>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e4:	4b27      	ldr	r3, [pc, #156]	@ (8000784 <SystemClock_Config+0xd4>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006f0:	2300      	movs	r3, #0
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	4b24      	ldr	r3, [pc, #144]	@ (8000788 <SystemClock_Config+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006fc:	4a22      	ldr	r2, [pc, #136]	@ (8000788 <SystemClock_Config+0xd8>)
 80006fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b20      	ldr	r3, [pc, #128]	@ (8000788 <SystemClock_Config+0xd8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	603b      	str	r3, [r7, #0]
 800070e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000724:	2310      	movs	r3, #16
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000728:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800072c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072e:	2304      	movs	r3, #4
 8000730:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000732:	2302      	movs	r3, #2
 8000734:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000736:	2302      	movs	r3, #2
 8000738:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4618      	mov	r0, r3
 8000740:	f000 ffe0 	bl	8001704 <HAL_RCC_OscConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800074a:	f000 f861 	bl	8000810 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074e:	230f      	movs	r3, #15
 8000750:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000752:	2302      	movs	r3, #2
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800075a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800075e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000764:	f107 0308 	add.w	r3, r7, #8
 8000768:	2102      	movs	r1, #2
 800076a:	4618      	mov	r0, r3
 800076c:	f000 fcb4 	bl	80010d8 <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000776:	f000 f84b 	bl	8000810 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	@ 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b088      	sub	sp, #32
 8000790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000792:	f107 030c 	add.w	r3, r7, #12
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]
 800079c:	609a      	str	r2, [r3, #8]
 800079e:	60da      	str	r2, [r3, #12]
 80007a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b18      	ldr	r3, [pc, #96]	@ (8000808 <MX_GPIO_Init+0x7c>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a17      	ldr	r2, [pc, #92]	@ (8000808 <MX_GPIO_Init+0x7c>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <MX_GPIO_Init+0x7c>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_GPIO_Init+0x7c>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a10      	ldr	r2, [pc, #64]	@ (8000808 <MX_GPIO_Init+0x7c>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_GPIO_Init+0x7c>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	2120      	movs	r1, #32
 80007de:	480b      	ldr	r0, [pc, #44]	@ (800080c <MX_GPIO_Init+0x80>)
 80007e0:	f000 fc46 	bl	8001070 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007e4:	2320      	movs	r3, #32
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4804      	ldr	r0, [pc, #16]	@ (800080c <MX_GPIO_Init+0x80>)
 80007fc:	f000 faa4 	bl	8000d48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000800:	bf00      	nop
 8000802:	3720      	adds	r7, #32
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40023800 	.word	0x40023800
 800080c:	40020000 	.word	0x40020000

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	bf00      	nop
 800081a:	e7fd      	b.n	8000818 <Error_Handler+0x8>

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b10      	ldr	r3, [pc, #64]	@ (8000868 <HAL_MspInit+0x4c>)
 8000828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800082a:	4a0f      	ldr	r2, [pc, #60]	@ (8000868 <HAL_MspInit+0x4c>)
 800082c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000830:	6453      	str	r3, [r2, #68]	@ 0x44
 8000832:	4b0d      	ldr	r3, [pc, #52]	@ (8000868 <HAL_MspInit+0x4c>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000836:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <HAL_MspInit+0x4c>)
 8000844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000846:	4a08      	ldr	r2, [pc, #32]	@ (8000868 <HAL_MspInit+0x4c>)
 8000848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800084c:	6413      	str	r3, [r2, #64]	@ 0x40
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <HAL_MspInit+0x4c>)
 8000850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800085a:	2007      	movs	r0, #7
 800085c:	f000 fa40 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40023800 	.word	0x40023800

0800086c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000870:	bf00      	nop
 8000872:	e7fd      	b.n	8000870 <NMI_Handler+0x4>

08000874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000878:	bf00      	nop
 800087a:	e7fd      	b.n	8000878 <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <MemManage_Handler+0x4>

08000884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	bf00      	nop
 8000892:	e7fd      	b.n	8000890 <UsageFault_Handler+0x4>

08000894 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008b4:	bf00      	nop
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr

080008be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008be:	b580      	push	{r7, lr}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008c2:	f000 f917 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}

080008ca <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008ca:	b580      	push	{r7, lr}
 80008cc:	b086      	sub	sp, #24
 80008ce:	af00      	add	r7, sp, #0
 80008d0:	60f8      	str	r0, [r7, #12]
 80008d2:	60b9      	str	r1, [r7, #8]
 80008d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008d6:	2300      	movs	r3, #0
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	e00a      	b.n	80008f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80008dc:	f3af 8000 	nop.w
 80008e0:	4601      	mov	r1, r0
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	1c5a      	adds	r2, r3, #1
 80008e6:	60ba      	str	r2, [r7, #8]
 80008e8:	b2ca      	uxtb	r2, r1
 80008ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ec:	697b      	ldr	r3, [r7, #20]
 80008ee:	3301      	adds	r3, #1
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	697a      	ldr	r2, [r7, #20]
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	dbf0      	blt.n	80008dc <_read+0x12>
  }

  return len;
 80008fa:	687b      	ldr	r3, [r7, #4]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}

08000904 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800090c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000910:	4618      	mov	r0, r3
 8000912:	370c      	adds	r7, #12
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800092c:	605a      	str	r2, [r3, #4]
  return 0;
 800092e:	2300      	movs	r3, #0
}
 8000930:	4618      	mov	r0, r3
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <_isatty>:

int _isatty(int file)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000944:	2301      	movs	r3, #1
}
 8000946:	4618      	mov	r0, r3
 8000948:	370c      	adds	r7, #12
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000952:	b480      	push	{r7}
 8000954:	b085      	sub	sp, #20
 8000956:	af00      	add	r7, sp, #0
 8000958:	60f8      	str	r0, [r7, #12]
 800095a:	60b9      	str	r1, [r7, #8]
 800095c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800095e:	2300      	movs	r3, #0
}
 8000960:	4618      	mov	r0, r3
 8000962:	3714      	adds	r7, #20
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	@ (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	@ (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800099c:	f001 fab6 	bl	8001f0c <__errno>
 80009a0:	4603      	mov	r3, r0
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	@ (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	@ (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	@ (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20020000 	.word	0x20020000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	20000088 	.word	0x20000088
 80009d4:	200001e0 	.word	0x200001e0

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	@ (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	@ (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a00:	f7ff ffea 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	@ (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	@ (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f001 fa75 	bl	8001f18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fe1b 	bl	8000668 <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a40:	08002b18 	.word	0x08002b18
  ldr r2, =_sbss
 8000a44:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a48:	200001dc 	.word	0x200001dc

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	@ (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	@ (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	@ (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f931 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff feca 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	@ (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f93b 	bl	8000d2e <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f911 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	@ (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	@ (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	@ (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	@ (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	2000008c 	.word	0x2000008c

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	@ (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000008c 	.word	0x2000008c

08000b34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b3c:	f7ff ffee 	bl	8000b1c <HAL_GetTick>
 8000b40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b4c:	d005      	beq.n	8000b5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b78 <HAL_Delay+0x44>)
 8000b50:	781b      	ldrb	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	4413      	add	r3, r2
 8000b58:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b5a:	bf00      	nop
 8000b5c:	f7ff ffde 	bl	8000b1c <HAL_GetTick>
 8000b60:	4602      	mov	r2, r0
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	68fa      	ldr	r2, [r7, #12]
 8000b68:	429a      	cmp	r2, r3
 8000b6a:	d8f7      	bhi.n	8000b5c <HAL_Delay+0x28>
  {
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	20000008 	.word	0x20000008

08000b7c <__NVIC_SetPriorityGrouping>:
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_SetPriority>:
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	@ 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff47 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff5c 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e165      	b.n	8001030 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8154 	bne.w	800102a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80ae 	beq.w	800102a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a5c      	ldr	r2, [pc, #368]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b5a      	ldr	r3, [pc, #360]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a58      	ldr	r2, [pc, #352]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4f      	ldr	r2, [pc, #316]	@ (8001050 <HAL_GPIO_Init+0x308>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d025      	beq.n	8000f62 <HAL_GPIO_Init+0x21a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4e      	ldr	r2, [pc, #312]	@ (8001054 <HAL_GPIO_Init+0x30c>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d01f      	beq.n	8000f5e <HAL_GPIO_Init+0x216>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4d      	ldr	r2, [pc, #308]	@ (8001058 <HAL_GPIO_Init+0x310>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d019      	beq.n	8000f5a <HAL_GPIO_Init+0x212>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4c      	ldr	r2, [pc, #304]	@ (800105c <HAL_GPIO_Init+0x314>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d013      	beq.n	8000f56 <HAL_GPIO_Init+0x20e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4b      	ldr	r2, [pc, #300]	@ (8001060 <HAL_GPIO_Init+0x318>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d00d      	beq.n	8000f52 <HAL_GPIO_Init+0x20a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4a      	ldr	r2, [pc, #296]	@ (8001064 <HAL_GPIO_Init+0x31c>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d007      	beq.n	8000f4e <HAL_GPIO_Init+0x206>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a49      	ldr	r2, [pc, #292]	@ (8001068 <HAL_GPIO_Init+0x320>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d101      	bne.n	8000f4a <HAL_GPIO_Init+0x202>
 8000f46:	2306      	movs	r3, #6
 8000f48:	e00c      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f4a:	2307      	movs	r3, #7
 8000f4c:	e00a      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f4e:	2305      	movs	r3, #5
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f52:	2304      	movs	r3, #4
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x21c>
 8000f62:	2300      	movs	r3, #0
 8000f64:	69fa      	ldr	r2, [r7, #28]
 8000f66:	f002 0203 	and.w	r2, r2, #3
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	69ba      	ldr	r2, [r7, #24]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f82:	4b3a      	ldr	r3, [pc, #232]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fa6:	4a31      	ldr	r2, [pc, #196]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fac:	4b2f      	ldr	r3, [pc, #188]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd0:	4a26      	ldr	r2, [pc, #152]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fd6:	4b25      	ldr	r3, [pc, #148]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800106c <HAL_GPIO_Init+0x324>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001000:	4b1a      	ldr	r3, [pc, #104]	@ (800106c <HAL_GPIO_Init+0x324>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001024:	4a11      	ldr	r2, [pc, #68]	@ (800106c <HAL_GPIO_Init+0x324>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3301      	adds	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0f      	cmp	r3, #15
 8001034:	f67f ae96 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001038:	bf00      	nop
 800103a:	bf00      	nop
 800103c:	3724      	adds	r7, #36	@ 0x24
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40013800 	.word	0x40013800
 8001050:	40020000 	.word	0x40020000
 8001054:	40020400 	.word	0x40020400
 8001058:	40020800 	.word	0x40020800
 800105c:	40020c00 	.word	0x40020c00
 8001060:	40021000 	.word	0x40021000
 8001064:	40021400 	.word	0x40021400
 8001068:	40021800 	.word	0x40021800
 800106c:	40013c00 	.word	0x40013c00

08001070 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	460b      	mov	r3, r1
 800107a:	807b      	strh	r3, [r7, #2]
 800107c:	4613      	mov	r3, r2
 800107e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001080:	787b      	ldrb	r3, [r7, #1]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001086:	887a      	ldrh	r2, [r7, #2]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800108c:	e003      	b.n	8001096 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108e:	887b      	ldrh	r3, [r7, #2]
 8001090:	041a      	lsls	r2, r3, #16
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	619a      	str	r2, [r3, #24]
}
 8001096:	bf00      	nop
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a2:	b480      	push	{r7}
 80010a4:	b085      	sub	sp, #20
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
 80010aa:	460b      	mov	r3, r1
 80010ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010b4:	887a      	ldrh	r2, [r7, #2]
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	4013      	ands	r3, r2
 80010ba:	041a      	lsls	r2, r3, #16
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	43d9      	mvns	r1, r3
 80010c0:	887b      	ldrh	r3, [r7, #2]
 80010c2:	400b      	ands	r3, r1
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	619a      	str	r2, [r3, #24]
}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
	...

080010d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d101      	bne.n	80010ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e0cc      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010ec:	4b68      	ldr	r3, [pc, #416]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 030f 	and.w	r3, r3, #15
 80010f4:	683a      	ldr	r2, [r7, #0]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d90c      	bls.n	8001114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010fa:	4b65      	ldr	r3, [pc, #404]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80010fc:	683a      	ldr	r2, [r7, #0]
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001102:	4b63      	ldr	r3, [pc, #396]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 030f 	and.w	r3, r3, #15
 800110a:	683a      	ldr	r2, [r7, #0]
 800110c:	429a      	cmp	r2, r3
 800110e:	d001      	beq.n	8001114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001110:	2301      	movs	r3, #1
 8001112:	e0b8      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 0302 	and.w	r3, r3, #2
 800111c:	2b00      	cmp	r3, #0
 800111e:	d020      	beq.n	8001162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800112c:	4b59      	ldr	r3, [pc, #356]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a58      	ldr	r2, [pc, #352]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001132:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001136:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	2b00      	cmp	r3, #0
 8001142:	d005      	beq.n	8001150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001144:	4b53      	ldr	r3, [pc, #332]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	4a52      	ldr	r2, [pc, #328]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800114a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800114e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001150:	4b50      	ldr	r3, [pc, #320]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	494d      	ldr	r1, [pc, #308]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800115e:	4313      	orrs	r3, r2
 8001160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d044      	beq.n	80011f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b01      	cmp	r3, #1
 8001174:	d107      	bne.n	8001186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001176:	4b47      	ldr	r3, [pc, #284]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d119      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e07f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2b02      	cmp	r3, #2
 800118c:	d003      	beq.n	8001196 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001192:	2b03      	cmp	r3, #3
 8001194:	d107      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001196:	4b3f      	ldr	r3, [pc, #252]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d109      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e067      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011b6:	4b37      	ldr	r3, [pc, #220]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	f023 0203 	bic.w	r2, r3, #3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	4934      	ldr	r1, [pc, #208]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011c8:	f7ff fca8 	bl	8000b1c <HAL_GetTick>
 80011cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	e00a      	b.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011d0:	f7ff fca4 	bl	8000b1c <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011de:	4293      	cmp	r3, r2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e04f      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 020c 	and.w	r2, r3, #12
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d1eb      	bne.n	80011d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011f8:	4b25      	ldr	r3, [pc, #148]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 030f 	and.w	r3, r3, #15
 8001200:	683a      	ldr	r2, [r7, #0]
 8001202:	429a      	cmp	r2, r3
 8001204:	d20c      	bcs.n	8001220 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001206:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001208:	683a      	ldr	r2, [r7, #0]
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <HAL_RCC_ClockConfig+0x1b8>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d001      	beq.n	8001220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e032      	b.n	8001286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d008      	beq.n	800123e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800122c:	4b19      	ldr	r3, [pc, #100]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	4916      	ldr	r1, [pc, #88]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	4313      	orrs	r3, r2
 800123c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0308 	and.w	r3, r3, #8
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800124a:	4b12      	ldr	r3, [pc, #72]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	691b      	ldr	r3, [r3, #16]
 8001256:	00db      	lsls	r3, r3, #3
 8001258:	490e      	ldr	r1, [pc, #56]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800125e:	f000 f821 	bl	80012a4 <HAL_RCC_GetSysClockFreq>
 8001262:	4602      	mov	r2, r0
 8001264:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	490a      	ldr	r1, [pc, #40]	@ (8001298 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	5ccb      	ldrb	r3, [r1, r3]
 8001272:	fa22 f303 	lsr.w	r3, r2, r3
 8001276:	4a09      	ldr	r2, [pc, #36]	@ (800129c <HAL_RCC_ClockConfig+0x1c4>)
 8001278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800127a:	4b09      	ldr	r3, [pc, #36]	@ (80012a0 <HAL_RCC_ClockConfig+0x1c8>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fc08 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023c00 	.word	0x40023c00
 8001294:	40023800 	.word	0x40023800
 8001298:	08002ac4 	.word	0x08002ac4
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000004 	.word	0x20000004

080012a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012a8:	b0ae      	sub	sp, #184	@ 0xb8
 80012aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012ac:	2300      	movs	r3, #0
 80012ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012ca:	4bcb      	ldr	r3, [pc, #812]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	f200 8206 	bhi.w	80016e4 <HAL_RCC_GetSysClockFreq+0x440>
 80012d8:	a201      	add	r2, pc, #4	@ (adr r2, 80012e0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012de:	bf00      	nop
 80012e0:	08001315 	.word	0x08001315
 80012e4:	080016e5 	.word	0x080016e5
 80012e8:	080016e5 	.word	0x080016e5
 80012ec:	080016e5 	.word	0x080016e5
 80012f0:	0800131d 	.word	0x0800131d
 80012f4:	080016e5 	.word	0x080016e5
 80012f8:	080016e5 	.word	0x080016e5
 80012fc:	080016e5 	.word	0x080016e5
 8001300:	08001325 	.word	0x08001325
 8001304:	080016e5 	.word	0x080016e5
 8001308:	080016e5 	.word	0x080016e5
 800130c:	080016e5 	.word	0x080016e5
 8001310:	08001515 	.word	0x08001515
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001314:	4bb9      	ldr	r3, [pc, #740]	@ (80015fc <HAL_RCC_GetSysClockFreq+0x358>)
 8001316:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800131a:	e1e7      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800131c:	4bb8      	ldr	r3, [pc, #736]	@ (8001600 <HAL_RCC_GetSysClockFreq+0x35c>)
 800131e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001322:	e1e3      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001324:	4bb4      	ldr	r3, [pc, #720]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800132c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001330:	4bb1      	ldr	r3, [pc, #708]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d071      	beq.n	8001420 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800133c:	4bae      	ldr	r3, [pc, #696]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	099b      	lsrs	r3, r3, #6
 8001342:	2200      	movs	r2, #0
 8001344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001348:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800134c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001350:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001354:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001358:	2300      	movs	r3, #0
 800135a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800135e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001362:	4622      	mov	r2, r4
 8001364:	462b      	mov	r3, r5
 8001366:	f04f 0000 	mov.w	r0, #0
 800136a:	f04f 0100 	mov.w	r1, #0
 800136e:	0159      	lsls	r1, r3, #5
 8001370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001374:	0150      	lsls	r0, r2, #5
 8001376:	4602      	mov	r2, r0
 8001378:	460b      	mov	r3, r1
 800137a:	4621      	mov	r1, r4
 800137c:	1a51      	subs	r1, r2, r1
 800137e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001380:	4629      	mov	r1, r5
 8001382:	eb63 0301 	sbc.w	r3, r3, r1
 8001386:	647b      	str	r3, [r7, #68]	@ 0x44
 8001388:	f04f 0200 	mov.w	r2, #0
 800138c:	f04f 0300 	mov.w	r3, #0
 8001390:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001394:	4649      	mov	r1, r9
 8001396:	018b      	lsls	r3, r1, #6
 8001398:	4641      	mov	r1, r8
 800139a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800139e:	4641      	mov	r1, r8
 80013a0:	018a      	lsls	r2, r1, #6
 80013a2:	4641      	mov	r1, r8
 80013a4:	1a51      	subs	r1, r2, r1
 80013a6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80013a8:	4649      	mov	r1, r9
 80013aa:	eb63 0301 	sbc.w	r3, r3, r1
 80013ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80013bc:	4649      	mov	r1, r9
 80013be:	00cb      	lsls	r3, r1, #3
 80013c0:	4641      	mov	r1, r8
 80013c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013c6:	4641      	mov	r1, r8
 80013c8:	00ca      	lsls	r2, r1, #3
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	4603      	mov	r3, r0
 80013d0:	4622      	mov	r2, r4
 80013d2:	189b      	adds	r3, r3, r2
 80013d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80013d6:	462b      	mov	r3, r5
 80013d8:	460a      	mov	r2, r1
 80013da:	eb42 0303 	adc.w	r3, r2, r3
 80013de:	637b      	str	r3, [r7, #52]	@ 0x34
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	f04f 0300 	mov.w	r3, #0
 80013e8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80013ec:	4629      	mov	r1, r5
 80013ee:	024b      	lsls	r3, r1, #9
 80013f0:	4621      	mov	r1, r4
 80013f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013f6:	4621      	mov	r1, r4
 80013f8:	024a      	lsls	r2, r1, #9
 80013fa:	4610      	mov	r0, r2
 80013fc:	4619      	mov	r1, r3
 80013fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001402:	2200      	movs	r2, #0
 8001404:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001408:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800140c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001410:	f7fe ff4e 	bl	80002b0 <__aeabi_uldivmod>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4613      	mov	r3, r2
 800141a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800141e:	e067      	b.n	80014f0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001420:	4b75      	ldr	r3, [pc, #468]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	099b      	lsrs	r3, r3, #6
 8001426:	2200      	movs	r2, #0
 8001428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800142c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001430:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001438:	67bb      	str	r3, [r7, #120]	@ 0x78
 800143a:	2300      	movs	r3, #0
 800143c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800143e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001442:	4622      	mov	r2, r4
 8001444:	462b      	mov	r3, r5
 8001446:	f04f 0000 	mov.w	r0, #0
 800144a:	f04f 0100 	mov.w	r1, #0
 800144e:	0159      	lsls	r1, r3, #5
 8001450:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001454:	0150      	lsls	r0, r2, #5
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4621      	mov	r1, r4
 800145c:	1a51      	subs	r1, r2, r1
 800145e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001460:	4629      	mov	r1, r5
 8001462:	eb63 0301 	sbc.w	r3, r3, r1
 8001466:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001474:	4649      	mov	r1, r9
 8001476:	018b      	lsls	r3, r1, #6
 8001478:	4641      	mov	r1, r8
 800147a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800147e:	4641      	mov	r1, r8
 8001480:	018a      	lsls	r2, r1, #6
 8001482:	4641      	mov	r1, r8
 8001484:	ebb2 0a01 	subs.w	sl, r2, r1
 8001488:	4649      	mov	r1, r9
 800148a:	eb63 0b01 	sbc.w	fp, r3, r1
 800148e:	f04f 0200 	mov.w	r2, #0
 8001492:	f04f 0300 	mov.w	r3, #0
 8001496:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800149a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800149e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014a2:	4692      	mov	sl, r2
 80014a4:	469b      	mov	fp, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	eb1a 0303 	adds.w	r3, sl, r3
 80014ac:	623b      	str	r3, [r7, #32]
 80014ae:	462b      	mov	r3, r5
 80014b0:	eb4b 0303 	adc.w	r3, fp, r3
 80014b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014c2:	4629      	mov	r1, r5
 80014c4:	028b      	lsls	r3, r1, #10
 80014c6:	4621      	mov	r1, r4
 80014c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014cc:	4621      	mov	r1, r4
 80014ce:	028a      	lsls	r2, r1, #10
 80014d0:	4610      	mov	r0, r2
 80014d2:	4619      	mov	r1, r3
 80014d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014d8:	2200      	movs	r2, #0
 80014da:	673b      	str	r3, [r7, #112]	@ 0x70
 80014dc:	677a      	str	r2, [r7, #116]	@ 0x74
 80014de:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014e2:	f7fe fee5 	bl	80002b0 <__aeabi_uldivmod>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4613      	mov	r3, r2
 80014ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80014f0:	4b41      	ldr	r3, [pc, #260]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	0c1b      	lsrs	r3, r3, #16
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	3301      	adds	r3, #1
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001506:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800150a:	fbb2 f3f3 	udiv	r3, r2, r3
 800150e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001512:	e0eb      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001514:	4b38      	ldr	r3, [pc, #224]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800151c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001520:	4b35      	ldr	r3, [pc, #212]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d06b      	beq.n	8001604 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800152c:	4b32      	ldr	r3, [pc, #200]	@ (80015f8 <HAL_RCC_GetSysClockFreq+0x354>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	099b      	lsrs	r3, r3, #6
 8001532:	2200      	movs	r2, #0
 8001534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001536:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001538:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800153a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800153e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001540:	2300      	movs	r3, #0
 8001542:	667b      	str	r3, [r7, #100]	@ 0x64
 8001544:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001548:	4622      	mov	r2, r4
 800154a:	462b      	mov	r3, r5
 800154c:	f04f 0000 	mov.w	r0, #0
 8001550:	f04f 0100 	mov.w	r1, #0
 8001554:	0159      	lsls	r1, r3, #5
 8001556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800155a:	0150      	lsls	r0, r2, #5
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4621      	mov	r1, r4
 8001562:	1a51      	subs	r1, r2, r1
 8001564:	61b9      	str	r1, [r7, #24]
 8001566:	4629      	mov	r1, r5
 8001568:	eb63 0301 	sbc.w	r3, r3, r1
 800156c:	61fb      	str	r3, [r7, #28]
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800157a:	4659      	mov	r1, fp
 800157c:	018b      	lsls	r3, r1, #6
 800157e:	4651      	mov	r1, sl
 8001580:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001584:	4651      	mov	r1, sl
 8001586:	018a      	lsls	r2, r1, #6
 8001588:	4651      	mov	r1, sl
 800158a:	ebb2 0801 	subs.w	r8, r2, r1
 800158e:	4659      	mov	r1, fp
 8001590:	eb63 0901 	sbc.w	r9, r3, r1
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015a0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015a4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015a8:	4690      	mov	r8, r2
 80015aa:	4699      	mov	r9, r3
 80015ac:	4623      	mov	r3, r4
 80015ae:	eb18 0303 	adds.w	r3, r8, r3
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	462b      	mov	r3, r5
 80015b6:	eb49 0303 	adc.w	r3, r9, r3
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	f04f 0300 	mov.w	r3, #0
 80015c4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015c8:	4629      	mov	r1, r5
 80015ca:	024b      	lsls	r3, r1, #9
 80015cc:	4621      	mov	r1, r4
 80015ce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015d2:	4621      	mov	r1, r4
 80015d4:	024a      	lsls	r2, r1, #9
 80015d6:	4610      	mov	r0, r2
 80015d8:	4619      	mov	r1, r3
 80015da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015de:	2200      	movs	r2, #0
 80015e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015e2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015e4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80015e8:	f7fe fe62 	bl	80002b0 <__aeabi_uldivmod>
 80015ec:	4602      	mov	r2, r0
 80015ee:	460b      	mov	r3, r1
 80015f0:	4613      	mov	r3, r2
 80015f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015f6:	e065      	b.n	80016c4 <HAL_RCC_GetSysClockFreq+0x420>
 80015f8:	40023800 	.word	0x40023800
 80015fc:	00f42400 	.word	0x00f42400
 8001600:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001604:	4b3d      	ldr	r3, [pc, #244]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x458>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	099b      	lsrs	r3, r3, #6
 800160a:	2200      	movs	r2, #0
 800160c:	4618      	mov	r0, r3
 800160e:	4611      	mov	r1, r2
 8001610:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001614:	653b      	str	r3, [r7, #80]	@ 0x50
 8001616:	2300      	movs	r3, #0
 8001618:	657b      	str	r3, [r7, #84]	@ 0x54
 800161a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800161e:	4642      	mov	r2, r8
 8001620:	464b      	mov	r3, r9
 8001622:	f04f 0000 	mov.w	r0, #0
 8001626:	f04f 0100 	mov.w	r1, #0
 800162a:	0159      	lsls	r1, r3, #5
 800162c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001630:	0150      	lsls	r0, r2, #5
 8001632:	4602      	mov	r2, r0
 8001634:	460b      	mov	r3, r1
 8001636:	4641      	mov	r1, r8
 8001638:	1a51      	subs	r1, r2, r1
 800163a:	60b9      	str	r1, [r7, #8]
 800163c:	4649      	mov	r1, r9
 800163e:	eb63 0301 	sbc.w	r3, r3, r1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001650:	4659      	mov	r1, fp
 8001652:	018b      	lsls	r3, r1, #6
 8001654:	4651      	mov	r1, sl
 8001656:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800165a:	4651      	mov	r1, sl
 800165c:	018a      	lsls	r2, r1, #6
 800165e:	4651      	mov	r1, sl
 8001660:	1a54      	subs	r4, r2, r1
 8001662:	4659      	mov	r1, fp
 8001664:	eb63 0501 	sbc.w	r5, r3, r1
 8001668:	f04f 0200 	mov.w	r2, #0
 800166c:	f04f 0300 	mov.w	r3, #0
 8001670:	00eb      	lsls	r3, r5, #3
 8001672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001676:	00e2      	lsls	r2, r4, #3
 8001678:	4614      	mov	r4, r2
 800167a:	461d      	mov	r5, r3
 800167c:	4643      	mov	r3, r8
 800167e:	18e3      	adds	r3, r4, r3
 8001680:	603b      	str	r3, [r7, #0]
 8001682:	464b      	mov	r3, r9
 8001684:	eb45 0303 	adc.w	r3, r5, r3
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001696:	4629      	mov	r1, r5
 8001698:	028b      	lsls	r3, r1, #10
 800169a:	4621      	mov	r1, r4
 800169c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016a0:	4621      	mov	r1, r4
 80016a2:	028a      	lsls	r2, r1, #10
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016ac:	2200      	movs	r2, #0
 80016ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016b0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016b6:	f7fe fdfb 	bl	80002b0 <__aeabi_uldivmod>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4613      	mov	r3, r2
 80016c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016c4:	4b0d      	ldr	r3, [pc, #52]	@ (80016fc <HAL_RCC_GetSysClockFreq+0x458>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	0f1b      	lsrs	r3, r3, #28
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80016d2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016d6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016da:	fbb2 f3f3 	udiv	r3, r2, r3
 80016de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016e2:	e003      	b.n	80016ec <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e4:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016ea:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	37b8      	adds	r7, #184	@ 0xb8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	00f42400 	.word	0x00f42400

08001704 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e28d      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	2b00      	cmp	r3, #0
 8001720:	f000 8083 	beq.w	800182a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001724:	4b94      	ldr	r3, [pc, #592]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f003 030c 	and.w	r3, r3, #12
 800172c:	2b04      	cmp	r3, #4
 800172e:	d019      	beq.n	8001764 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001730:	4b91      	ldr	r3, [pc, #580]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	f003 030c 	and.w	r3, r3, #12
        || \
 8001738:	2b08      	cmp	r3, #8
 800173a:	d106      	bne.n	800174a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800173c:	4b8e      	ldr	r3, [pc, #568]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001744:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001748:	d00c      	beq.n	8001764 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174a:	4b8b      	ldr	r3, [pc, #556]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d112      	bne.n	800177c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001756:	4b88      	ldr	r3, [pc, #544]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001762:	d10b      	bne.n	800177c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001764:	4b84      	ldr	r3, [pc, #528]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176c:	2b00      	cmp	r3, #0
 800176e:	d05b      	beq.n	8001828 <HAL_RCC_OscConfig+0x124>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d157      	bne.n	8001828 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e25a      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x90>
 8001786:	4b7c      	ldr	r3, [pc, #496]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a7b      	ldr	r2, [pc, #492]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800178c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001790:	6013      	str	r3, [r2, #0]
 8001792:	e01d      	b.n	80017d0 <HAL_RCC_OscConfig+0xcc>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800179c:	d10c      	bne.n	80017b8 <HAL_RCC_OscConfig+0xb4>
 800179e:	4b76      	ldr	r3, [pc, #472]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a75      	ldr	r2, [pc, #468]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a72      	ldr	r2, [pc, #456]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017b4:	6013      	str	r3, [r2, #0]
 80017b6:	e00b      	b.n	80017d0 <HAL_RCC_OscConfig+0xcc>
 80017b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a6e      	ldr	r2, [pc, #440]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b6c      	ldr	r3, [pc, #432]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a6b      	ldr	r2, [pc, #428]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d013      	beq.n	8001800 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d8:	f7ff f9a0 	bl	8000b1c <HAL_GetTick>
 80017dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff f99c 	bl	8000b1c <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	@ 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e21f      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f2:	4b61      	ldr	r3, [pc, #388]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xdc>
 80017fe:	e014      	b.n	800182a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff f98c 	bl	8000b1c <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001808:	f7ff f988 	bl	8000b1c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	@ 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e20b      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181a:	4b57      	ldr	r3, [pc, #348]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x104>
 8001826:	e000      	b.n	800182a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d06f      	beq.n	8001916 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001836:	4b50      	ldr	r3, [pc, #320]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
 800183e:	2b00      	cmp	r3, #0
 8001840:	d017      	beq.n	8001872 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001842:	4b4d      	ldr	r3, [pc, #308]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
        || \
 800184a:	2b08      	cmp	r3, #8
 800184c:	d105      	bne.n	800185a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800184e:	4b4a      	ldr	r3, [pc, #296]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d00b      	beq.n	8001872 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800185a:	4b47      	ldr	r3, [pc, #284]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001862:	2b0c      	cmp	r3, #12
 8001864:	d11c      	bne.n	80018a0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001866:	4b44      	ldr	r3, [pc, #272]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d116      	bne.n	80018a0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001872:	4b41      	ldr	r3, [pc, #260]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d005      	beq.n	800188a <HAL_RCC_OscConfig+0x186>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68db      	ldr	r3, [r3, #12]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d001      	beq.n	800188a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e1d3      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188a:	4b3b      	ldr	r3, [pc, #236]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	00db      	lsls	r3, r3, #3
 8001898:	4937      	ldr	r1, [pc, #220]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800189a:	4313      	orrs	r3, r2
 800189c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189e:	e03a      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d020      	beq.n	80018ea <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018a8:	4b34      	ldr	r3, [pc, #208]	@ (800197c <HAL_RCC_OscConfig+0x278>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ae:	f7ff f935 	bl	8000b1c <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b6:	f7ff f931 	bl	8000b1c <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e1b4      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0f0      	beq.n	80018b6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018d4:	4b28      	ldr	r3, [pc, #160]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691b      	ldr	r3, [r3, #16]
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4925      	ldr	r1, [pc, #148]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]
 80018e8:	e015      	b.n	8001916 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ea:	4b24      	ldr	r3, [pc, #144]	@ (800197c <HAL_RCC_OscConfig+0x278>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f0:	f7ff f914 	bl	8000b1c <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f8:	f7ff f910 	bl	8000b1c <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e193      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190a:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d036      	beq.n	8001990 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d016      	beq.n	8001958 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_RCC_OscConfig+0x27c>)
 800192c:	2201      	movs	r2, #1
 800192e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff f8f4 	bl	8000b1c <HAL_GetTick>
 8001934:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001936:	e008      	b.n	800194a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001938:	f7ff f8f0 	bl	8000b1c <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	2b02      	cmp	r3, #2
 8001944:	d901      	bls.n	800194a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001946:	2303      	movs	r3, #3
 8001948:	e173      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194a:	4b0b      	ldr	r3, [pc, #44]	@ (8001978 <HAL_RCC_OscConfig+0x274>)
 800194c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f0      	beq.n	8001938 <HAL_RCC_OscConfig+0x234>
 8001956:	e01b      	b.n	8001990 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001958:	4b09      	ldr	r3, [pc, #36]	@ (8001980 <HAL_RCC_OscConfig+0x27c>)
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800195e:	f7ff f8dd 	bl	8000b1c <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001964:	e00e      	b.n	8001984 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001966:	f7ff f8d9 	bl	8000b1c <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d907      	bls.n	8001984 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e15c      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
 8001978:	40023800 	.word	0x40023800
 800197c:	42470000 	.word	0x42470000
 8001980:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001984:	4b8a      	ldr	r3, [pc, #552]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d1ea      	bne.n	8001966 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	f000 8097 	beq.w	8001acc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800199e:	2300      	movs	r3, #0
 80019a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a2:	4b83      	ldr	r3, [pc, #524]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 80019a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d10f      	bne.n	80019ce <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ae:	2300      	movs	r3, #0
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	4b7f      	ldr	r3, [pc, #508]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 80019b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b6:	4a7e      	ldr	r2, [pc, #504]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 80019b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80019be:	4b7c      	ldr	r3, [pc, #496]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c6:	60bb      	str	r3, [r7, #8]
 80019c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ca:	2301      	movs	r3, #1
 80019cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ce:	4b79      	ldr	r3, [pc, #484]	@ (8001bb4 <HAL_RCC_OscConfig+0x4b0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019da:	4b76      	ldr	r3, [pc, #472]	@ (8001bb4 <HAL_RCC_OscConfig+0x4b0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a75      	ldr	r2, [pc, #468]	@ (8001bb4 <HAL_RCC_OscConfig+0x4b0>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019e6:	f7ff f899 	bl	8000b1c <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ee:	f7ff f895 	bl	8000b1c <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e118      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a00:	4b6c      	ldr	r3, [pc, #432]	@ (8001bb4 <HAL_RCC_OscConfig+0x4b0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d106      	bne.n	8001a22 <HAL_RCC_OscConfig+0x31e>
 8001a14:	4b66      	ldr	r3, [pc, #408]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a18:	4a65      	ldr	r2, [pc, #404]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a20:	e01c      	b.n	8001a5c <HAL_RCC_OscConfig+0x358>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b05      	cmp	r3, #5
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x340>
 8001a2a:	4b61      	ldr	r3, [pc, #388]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a2e:	4a60      	ldr	r2, [pc, #384]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a30:	f043 0304 	orr.w	r3, r3, #4
 8001a34:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a36:	4b5e      	ldr	r3, [pc, #376]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3a:	4a5d      	ldr	r2, [pc, #372]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0x358>
 8001a44:	4b5a      	ldr	r3, [pc, #360]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a59      	ldr	r2, [pc, #356]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a4a:	f023 0301 	bic.w	r3, r3, #1
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a50:	4b57      	ldr	r3, [pc, #348]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a54:	4a56      	ldr	r2, [pc, #344]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a56:	f023 0304 	bic.w	r3, r3, #4
 8001a5a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d015      	beq.n	8001a90 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a64:	f7ff f85a 	bl	8000b1c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a6a:	e00a      	b.n	8001a82 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f856 	bl	8000b1c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e0d7      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	4b4b      	ldr	r3, [pc, #300]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001a84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0ee      	beq.n	8001a6c <HAL_RCC_OscConfig+0x368>
 8001a8e:	e014      	b.n	8001aba <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff f844 	bl	8000b1c <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a96:	e00a      	b.n	8001aae <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff f840 	bl	8000b1c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e0c1      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aae:	4b40      	ldr	r3, [pc, #256]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ab0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1ee      	bne.n	8001a98 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d105      	bne.n	8001acc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac4:	4a3a      	ldr	r2, [pc, #232]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001aca:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	f000 80ad 	beq.w	8001c30 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ad6:	4b36      	ldr	r3, [pc, #216]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	2b08      	cmp	r3, #8
 8001ae0:	d060      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d145      	bne.n	8001b76 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aea:	4b33      	ldr	r3, [pc, #204]	@ (8001bb8 <HAL_RCC_OscConfig+0x4b4>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af0:	f7ff f814 	bl	8000b1c <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7ff f810 	bl	8000b1c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e093      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0a:	4b29      	ldr	r3, [pc, #164]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d1f0      	bne.n	8001af8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	69da      	ldr	r2, [r3, #28]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a1b      	ldr	r3, [r3, #32]
 8001b1e:	431a      	orrs	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b24:	019b      	lsls	r3, r3, #6
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b2c:	085b      	lsrs	r3, r3, #1
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	041b      	lsls	r3, r3, #16
 8001b32:	431a      	orrs	r2, r3
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b38:	061b      	lsls	r3, r3, #24
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b40:	071b      	lsls	r3, r3, #28
 8001b42:	491b      	ldr	r1, [pc, #108]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	4313      	orrs	r3, r2
 8001b46:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b48:	4b1b      	ldr	r3, [pc, #108]	@ (8001bb8 <HAL_RCC_OscConfig+0x4b4>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4e:	f7fe ffe5 	bl	8000b1c <HAL_GetTick>
 8001b52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b54:	e008      	b.n	8001b68 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b56:	f7fe ffe1 	bl	8000b1c <HAL_GetTick>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	1ad3      	subs	r3, r2, r3
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e064      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b68:	4b11      	ldr	r3, [pc, #68]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0f0      	beq.n	8001b56 <HAL_RCC_OscConfig+0x452>
 8001b74:	e05c      	b.n	8001c30 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b76:	4b10      	ldr	r3, [pc, #64]	@ (8001bb8 <HAL_RCC_OscConfig+0x4b4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7fe ffce 	bl	8000b1c <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7fe ffca 	bl	8000b1c <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e04d      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_RCC_OscConfig+0x4ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x480>
 8001ba2:	e045      	b.n	8001c30 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e040      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
 8001bb0:	40023800 	.word	0x40023800
 8001bb4:	40007000 	.word	0x40007000
 8001bb8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bbc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c3c <HAL_RCC_OscConfig+0x538>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d030      	beq.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d129      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d122      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001bec:	4013      	ands	r3, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001bf2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d119      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c02:	085b      	lsrs	r3, r3, #1
 8001c04:	3b01      	subs	r3, #1
 8001c06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10f      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d107      	bne.n	8001c2c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c26:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e000      	b.n	8001c32 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c30:	2300      	movs	r3, #0
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800

08001c40 <std>:
 8001c40:	2300      	movs	r3, #0
 8001c42:	b510      	push	{r4, lr}
 8001c44:	4604      	mov	r4, r0
 8001c46:	e9c0 3300 	strd	r3, r3, [r0]
 8001c4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001c4e:	6083      	str	r3, [r0, #8]
 8001c50:	8181      	strh	r1, [r0, #12]
 8001c52:	6643      	str	r3, [r0, #100]	@ 0x64
 8001c54:	81c2      	strh	r2, [r0, #14]
 8001c56:	6183      	str	r3, [r0, #24]
 8001c58:	4619      	mov	r1, r3
 8001c5a:	2208      	movs	r2, #8
 8001c5c:	305c      	adds	r0, #92	@ 0x5c
 8001c5e:	f000 f906 	bl	8001e6e <memset>
 8001c62:	4b0d      	ldr	r3, [pc, #52]	@ (8001c98 <std+0x58>)
 8001c64:	6263      	str	r3, [r4, #36]	@ 0x24
 8001c66:	4b0d      	ldr	r3, [pc, #52]	@ (8001c9c <std+0x5c>)
 8001c68:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca0 <std+0x60>)
 8001c6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <std+0x64>)
 8001c70:	6323      	str	r3, [r4, #48]	@ 0x30
 8001c72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca8 <std+0x68>)
 8001c74:	6224      	str	r4, [r4, #32]
 8001c76:	429c      	cmp	r4, r3
 8001c78:	d006      	beq.n	8001c88 <std+0x48>
 8001c7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001c7e:	4294      	cmp	r4, r2
 8001c80:	d002      	beq.n	8001c88 <std+0x48>
 8001c82:	33d0      	adds	r3, #208	@ 0xd0
 8001c84:	429c      	cmp	r4, r3
 8001c86:	d105      	bne.n	8001c94 <std+0x54>
 8001c88:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001c90:	f000 b966 	b.w	8001f60 <__retarget_lock_init_recursive>
 8001c94:	bd10      	pop	{r4, pc}
 8001c96:	bf00      	nop
 8001c98:	08001de9 	.word	0x08001de9
 8001c9c:	08001e0b 	.word	0x08001e0b
 8001ca0:	08001e43 	.word	0x08001e43
 8001ca4:	08001e67 	.word	0x08001e67
 8001ca8:	20000090 	.word	0x20000090

08001cac <stdio_exit_handler>:
 8001cac:	4a02      	ldr	r2, [pc, #8]	@ (8001cb8 <stdio_exit_handler+0xc>)
 8001cae:	4903      	ldr	r1, [pc, #12]	@ (8001cbc <stdio_exit_handler+0x10>)
 8001cb0:	4803      	ldr	r0, [pc, #12]	@ (8001cc0 <stdio_exit_handler+0x14>)
 8001cb2:	f000 b869 	b.w	8001d88 <_fwalk_sglue>
 8001cb6:	bf00      	nop
 8001cb8:	2000000c 	.word	0x2000000c
 8001cbc:	080027fd 	.word	0x080027fd
 8001cc0:	2000001c 	.word	0x2000001c

08001cc4 <cleanup_stdio>:
 8001cc4:	6841      	ldr	r1, [r0, #4]
 8001cc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <cleanup_stdio+0x34>)
 8001cc8:	4299      	cmp	r1, r3
 8001cca:	b510      	push	{r4, lr}
 8001ccc:	4604      	mov	r4, r0
 8001cce:	d001      	beq.n	8001cd4 <cleanup_stdio+0x10>
 8001cd0:	f000 fd94 	bl	80027fc <_fflush_r>
 8001cd4:	68a1      	ldr	r1, [r4, #8]
 8001cd6:	4b09      	ldr	r3, [pc, #36]	@ (8001cfc <cleanup_stdio+0x38>)
 8001cd8:	4299      	cmp	r1, r3
 8001cda:	d002      	beq.n	8001ce2 <cleanup_stdio+0x1e>
 8001cdc:	4620      	mov	r0, r4
 8001cde:	f000 fd8d 	bl	80027fc <_fflush_r>
 8001ce2:	68e1      	ldr	r1, [r4, #12]
 8001ce4:	4b06      	ldr	r3, [pc, #24]	@ (8001d00 <cleanup_stdio+0x3c>)
 8001ce6:	4299      	cmp	r1, r3
 8001ce8:	d004      	beq.n	8001cf4 <cleanup_stdio+0x30>
 8001cea:	4620      	mov	r0, r4
 8001cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001cf0:	f000 bd84 	b.w	80027fc <_fflush_r>
 8001cf4:	bd10      	pop	{r4, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000090 	.word	0x20000090
 8001cfc:	200000f8 	.word	0x200000f8
 8001d00:	20000160 	.word	0x20000160

08001d04 <global_stdio_init.part.0>:
 8001d04:	b510      	push	{r4, lr}
 8001d06:	4b0b      	ldr	r3, [pc, #44]	@ (8001d34 <global_stdio_init.part.0+0x30>)
 8001d08:	4c0b      	ldr	r4, [pc, #44]	@ (8001d38 <global_stdio_init.part.0+0x34>)
 8001d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001d3c <global_stdio_init.part.0+0x38>)
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	4620      	mov	r0, r4
 8001d10:	2200      	movs	r2, #0
 8001d12:	2104      	movs	r1, #4
 8001d14:	f7ff ff94 	bl	8001c40 <std>
 8001d18:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	2109      	movs	r1, #9
 8001d20:	f7ff ff8e 	bl	8001c40 <std>
 8001d24:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001d28:	2202      	movs	r2, #2
 8001d2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d2e:	2112      	movs	r1, #18
 8001d30:	f7ff bf86 	b.w	8001c40 <std>
 8001d34:	200001c8 	.word	0x200001c8
 8001d38:	20000090 	.word	0x20000090
 8001d3c:	08001cad 	.word	0x08001cad

08001d40 <__sfp_lock_acquire>:
 8001d40:	4801      	ldr	r0, [pc, #4]	@ (8001d48 <__sfp_lock_acquire+0x8>)
 8001d42:	f000 b90e 	b.w	8001f62 <__retarget_lock_acquire_recursive>
 8001d46:	bf00      	nop
 8001d48:	200001d1 	.word	0x200001d1

08001d4c <__sfp_lock_release>:
 8001d4c:	4801      	ldr	r0, [pc, #4]	@ (8001d54 <__sfp_lock_release+0x8>)
 8001d4e:	f000 b909 	b.w	8001f64 <__retarget_lock_release_recursive>
 8001d52:	bf00      	nop
 8001d54:	200001d1 	.word	0x200001d1

08001d58 <__sinit>:
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	f7ff fff0 	bl	8001d40 <__sfp_lock_acquire>
 8001d60:	6a23      	ldr	r3, [r4, #32]
 8001d62:	b11b      	cbz	r3, 8001d6c <__sinit+0x14>
 8001d64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001d68:	f7ff bff0 	b.w	8001d4c <__sfp_lock_release>
 8001d6c:	4b04      	ldr	r3, [pc, #16]	@ (8001d80 <__sinit+0x28>)
 8001d6e:	6223      	str	r3, [r4, #32]
 8001d70:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <__sinit+0x2c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1f5      	bne.n	8001d64 <__sinit+0xc>
 8001d78:	f7ff ffc4 	bl	8001d04 <global_stdio_init.part.0>
 8001d7c:	e7f2      	b.n	8001d64 <__sinit+0xc>
 8001d7e:	bf00      	nop
 8001d80:	08001cc5 	.word	0x08001cc5
 8001d84:	200001c8 	.word	0x200001c8

08001d88 <_fwalk_sglue>:
 8001d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d8c:	4607      	mov	r7, r0
 8001d8e:	4688      	mov	r8, r1
 8001d90:	4614      	mov	r4, r2
 8001d92:	2600      	movs	r6, #0
 8001d94:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001d98:	f1b9 0901 	subs.w	r9, r9, #1
 8001d9c:	d505      	bpl.n	8001daa <_fwalk_sglue+0x22>
 8001d9e:	6824      	ldr	r4, [r4, #0]
 8001da0:	2c00      	cmp	r4, #0
 8001da2:	d1f7      	bne.n	8001d94 <_fwalk_sglue+0xc>
 8001da4:	4630      	mov	r0, r6
 8001da6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001daa:	89ab      	ldrh	r3, [r5, #12]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d907      	bls.n	8001dc0 <_fwalk_sglue+0x38>
 8001db0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001db4:	3301      	adds	r3, #1
 8001db6:	d003      	beq.n	8001dc0 <_fwalk_sglue+0x38>
 8001db8:	4629      	mov	r1, r5
 8001dba:	4638      	mov	r0, r7
 8001dbc:	47c0      	blx	r8
 8001dbe:	4306      	orrs	r6, r0
 8001dc0:	3568      	adds	r5, #104	@ 0x68
 8001dc2:	e7e9      	b.n	8001d98 <_fwalk_sglue+0x10>

08001dc4 <iprintf>:
 8001dc4:	b40f      	push	{r0, r1, r2, r3}
 8001dc6:	b507      	push	{r0, r1, r2, lr}
 8001dc8:	4906      	ldr	r1, [pc, #24]	@ (8001de4 <iprintf+0x20>)
 8001dca:	ab04      	add	r3, sp, #16
 8001dcc:	6808      	ldr	r0, [r1, #0]
 8001dce:	f853 2b04 	ldr.w	r2, [r3], #4
 8001dd2:	6881      	ldr	r1, [r0, #8]
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	f000 f9e9 	bl	80021ac <_vfiprintf_r>
 8001dda:	b003      	add	sp, #12
 8001ddc:	f85d eb04 	ldr.w	lr, [sp], #4
 8001de0:	b004      	add	sp, #16
 8001de2:	4770      	bx	lr
 8001de4:	20000018 	.word	0x20000018

08001de8 <__sread>:
 8001de8:	b510      	push	{r4, lr}
 8001dea:	460c      	mov	r4, r1
 8001dec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001df0:	f000 f868 	bl	8001ec4 <_read_r>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	bfab      	itete	ge
 8001df8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001dfa:	89a3      	ldrhlt	r3, [r4, #12]
 8001dfc:	181b      	addge	r3, r3, r0
 8001dfe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001e02:	bfac      	ite	ge
 8001e04:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001e06:	81a3      	strhlt	r3, [r4, #12]
 8001e08:	bd10      	pop	{r4, pc}

08001e0a <__swrite>:
 8001e0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e0e:	461f      	mov	r7, r3
 8001e10:	898b      	ldrh	r3, [r1, #12]
 8001e12:	05db      	lsls	r3, r3, #23
 8001e14:	4605      	mov	r5, r0
 8001e16:	460c      	mov	r4, r1
 8001e18:	4616      	mov	r6, r2
 8001e1a:	d505      	bpl.n	8001e28 <__swrite+0x1e>
 8001e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e20:	2302      	movs	r3, #2
 8001e22:	2200      	movs	r2, #0
 8001e24:	f000 f83c 	bl	8001ea0 <_lseek_r>
 8001e28:	89a3      	ldrh	r3, [r4, #12]
 8001e2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e2e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e32:	81a3      	strh	r3, [r4, #12]
 8001e34:	4632      	mov	r2, r6
 8001e36:	463b      	mov	r3, r7
 8001e38:	4628      	mov	r0, r5
 8001e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001e3e:	f000 b853 	b.w	8001ee8 <_write_r>

08001e42 <__sseek>:
 8001e42:	b510      	push	{r4, lr}
 8001e44:	460c      	mov	r4, r1
 8001e46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e4a:	f000 f829 	bl	8001ea0 <_lseek_r>
 8001e4e:	1c43      	adds	r3, r0, #1
 8001e50:	89a3      	ldrh	r3, [r4, #12]
 8001e52:	bf15      	itete	ne
 8001e54:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001e56:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001e5a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001e5e:	81a3      	strheq	r3, [r4, #12]
 8001e60:	bf18      	it	ne
 8001e62:	81a3      	strhne	r3, [r4, #12]
 8001e64:	bd10      	pop	{r4, pc}

08001e66 <__sclose>:
 8001e66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e6a:	f000 b809 	b.w	8001e80 <_close_r>

08001e6e <memset>:
 8001e6e:	4402      	add	r2, r0
 8001e70:	4603      	mov	r3, r0
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d100      	bne.n	8001e78 <memset+0xa>
 8001e76:	4770      	bx	lr
 8001e78:	f803 1b01 	strb.w	r1, [r3], #1
 8001e7c:	e7f9      	b.n	8001e72 <memset+0x4>
	...

08001e80 <_close_r>:
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	4d06      	ldr	r5, [pc, #24]	@ (8001e9c <_close_r+0x1c>)
 8001e84:	2300      	movs	r3, #0
 8001e86:	4604      	mov	r4, r0
 8001e88:	4608      	mov	r0, r1
 8001e8a:	602b      	str	r3, [r5, #0]
 8001e8c:	f7fe fd3a 	bl	8000904 <_close>
 8001e90:	1c43      	adds	r3, r0, #1
 8001e92:	d102      	bne.n	8001e9a <_close_r+0x1a>
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	b103      	cbz	r3, 8001e9a <_close_r+0x1a>
 8001e98:	6023      	str	r3, [r4, #0]
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	200001cc 	.word	0x200001cc

08001ea0 <_lseek_r>:
 8001ea0:	b538      	push	{r3, r4, r5, lr}
 8001ea2:	4d07      	ldr	r5, [pc, #28]	@ (8001ec0 <_lseek_r+0x20>)
 8001ea4:	4604      	mov	r4, r0
 8001ea6:	4608      	mov	r0, r1
 8001ea8:	4611      	mov	r1, r2
 8001eaa:	2200      	movs	r2, #0
 8001eac:	602a      	str	r2, [r5, #0]
 8001eae:	461a      	mov	r2, r3
 8001eb0:	f7fe fd4f 	bl	8000952 <_lseek>
 8001eb4:	1c43      	adds	r3, r0, #1
 8001eb6:	d102      	bne.n	8001ebe <_lseek_r+0x1e>
 8001eb8:	682b      	ldr	r3, [r5, #0]
 8001eba:	b103      	cbz	r3, 8001ebe <_lseek_r+0x1e>
 8001ebc:	6023      	str	r3, [r4, #0]
 8001ebe:	bd38      	pop	{r3, r4, r5, pc}
 8001ec0:	200001cc 	.word	0x200001cc

08001ec4 <_read_r>:
 8001ec4:	b538      	push	{r3, r4, r5, lr}
 8001ec6:	4d07      	ldr	r5, [pc, #28]	@ (8001ee4 <_read_r+0x20>)
 8001ec8:	4604      	mov	r4, r0
 8001eca:	4608      	mov	r0, r1
 8001ecc:	4611      	mov	r1, r2
 8001ece:	2200      	movs	r2, #0
 8001ed0:	602a      	str	r2, [r5, #0]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	f7fe fcf9 	bl	80008ca <_read>
 8001ed8:	1c43      	adds	r3, r0, #1
 8001eda:	d102      	bne.n	8001ee2 <_read_r+0x1e>
 8001edc:	682b      	ldr	r3, [r5, #0]
 8001ede:	b103      	cbz	r3, 8001ee2 <_read_r+0x1e>
 8001ee0:	6023      	str	r3, [r4, #0]
 8001ee2:	bd38      	pop	{r3, r4, r5, pc}
 8001ee4:	200001cc 	.word	0x200001cc

08001ee8 <_write_r>:
 8001ee8:	b538      	push	{r3, r4, r5, lr}
 8001eea:	4d07      	ldr	r5, [pc, #28]	@ (8001f08 <_write_r+0x20>)
 8001eec:	4604      	mov	r4, r0
 8001eee:	4608      	mov	r0, r1
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	602a      	str	r2, [r5, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f7fe fb97 	bl	800062a <_write>
 8001efc:	1c43      	adds	r3, r0, #1
 8001efe:	d102      	bne.n	8001f06 <_write_r+0x1e>
 8001f00:	682b      	ldr	r3, [r5, #0]
 8001f02:	b103      	cbz	r3, 8001f06 <_write_r+0x1e>
 8001f04:	6023      	str	r3, [r4, #0]
 8001f06:	bd38      	pop	{r3, r4, r5, pc}
 8001f08:	200001cc 	.word	0x200001cc

08001f0c <__errno>:
 8001f0c:	4b01      	ldr	r3, [pc, #4]	@ (8001f14 <__errno+0x8>)
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	20000018 	.word	0x20000018

08001f18 <__libc_init_array>:
 8001f18:	b570      	push	{r4, r5, r6, lr}
 8001f1a:	4d0d      	ldr	r5, [pc, #52]	@ (8001f50 <__libc_init_array+0x38>)
 8001f1c:	4c0d      	ldr	r4, [pc, #52]	@ (8001f54 <__libc_init_array+0x3c>)
 8001f1e:	1b64      	subs	r4, r4, r5
 8001f20:	10a4      	asrs	r4, r4, #2
 8001f22:	2600      	movs	r6, #0
 8001f24:	42a6      	cmp	r6, r4
 8001f26:	d109      	bne.n	8001f3c <__libc_init_array+0x24>
 8001f28:	4d0b      	ldr	r5, [pc, #44]	@ (8001f58 <__libc_init_array+0x40>)
 8001f2a:	4c0c      	ldr	r4, [pc, #48]	@ (8001f5c <__libc_init_array+0x44>)
 8001f2c:	f000 fdb6 	bl	8002a9c <_init>
 8001f30:	1b64      	subs	r4, r4, r5
 8001f32:	10a4      	asrs	r4, r4, #2
 8001f34:	2600      	movs	r6, #0
 8001f36:	42a6      	cmp	r6, r4
 8001f38:	d105      	bne.n	8001f46 <__libc_init_array+0x2e>
 8001f3a:	bd70      	pop	{r4, r5, r6, pc}
 8001f3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f40:	4798      	blx	r3
 8001f42:	3601      	adds	r6, #1
 8001f44:	e7ee      	b.n	8001f24 <__libc_init_array+0xc>
 8001f46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f4a:	4798      	blx	r3
 8001f4c:	3601      	adds	r6, #1
 8001f4e:	e7f2      	b.n	8001f36 <__libc_init_array+0x1e>
 8001f50:	08002b10 	.word	0x08002b10
 8001f54:	08002b10 	.word	0x08002b10
 8001f58:	08002b10 	.word	0x08002b10
 8001f5c:	08002b14 	.word	0x08002b14

08001f60 <__retarget_lock_init_recursive>:
 8001f60:	4770      	bx	lr

08001f62 <__retarget_lock_acquire_recursive>:
 8001f62:	4770      	bx	lr

08001f64 <__retarget_lock_release_recursive>:
 8001f64:	4770      	bx	lr
	...

08001f68 <_free_r>:
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4605      	mov	r5, r0
 8001f6c:	2900      	cmp	r1, #0
 8001f6e:	d041      	beq.n	8001ff4 <_free_r+0x8c>
 8001f70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f74:	1f0c      	subs	r4, r1, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	bfb8      	it	lt
 8001f7a:	18e4      	addlt	r4, r4, r3
 8001f7c:	f000 f8e0 	bl	8002140 <__malloc_lock>
 8001f80:	4a1d      	ldr	r2, [pc, #116]	@ (8001ff8 <_free_r+0x90>)
 8001f82:	6813      	ldr	r3, [r2, #0]
 8001f84:	b933      	cbnz	r3, 8001f94 <_free_r+0x2c>
 8001f86:	6063      	str	r3, [r4, #4]
 8001f88:	6014      	str	r4, [r2, #0]
 8001f8a:	4628      	mov	r0, r5
 8001f8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f90:	f000 b8dc 	b.w	800214c <__malloc_unlock>
 8001f94:	42a3      	cmp	r3, r4
 8001f96:	d908      	bls.n	8001faa <_free_r+0x42>
 8001f98:	6820      	ldr	r0, [r4, #0]
 8001f9a:	1821      	adds	r1, r4, r0
 8001f9c:	428b      	cmp	r3, r1
 8001f9e:	bf01      	itttt	eq
 8001fa0:	6819      	ldreq	r1, [r3, #0]
 8001fa2:	685b      	ldreq	r3, [r3, #4]
 8001fa4:	1809      	addeq	r1, r1, r0
 8001fa6:	6021      	streq	r1, [r4, #0]
 8001fa8:	e7ed      	b.n	8001f86 <_free_r+0x1e>
 8001faa:	461a      	mov	r2, r3
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	b10b      	cbz	r3, 8001fb4 <_free_r+0x4c>
 8001fb0:	42a3      	cmp	r3, r4
 8001fb2:	d9fa      	bls.n	8001faa <_free_r+0x42>
 8001fb4:	6811      	ldr	r1, [r2, #0]
 8001fb6:	1850      	adds	r0, r2, r1
 8001fb8:	42a0      	cmp	r0, r4
 8001fba:	d10b      	bne.n	8001fd4 <_free_r+0x6c>
 8001fbc:	6820      	ldr	r0, [r4, #0]
 8001fbe:	4401      	add	r1, r0
 8001fc0:	1850      	adds	r0, r2, r1
 8001fc2:	4283      	cmp	r3, r0
 8001fc4:	6011      	str	r1, [r2, #0]
 8001fc6:	d1e0      	bne.n	8001f8a <_free_r+0x22>
 8001fc8:	6818      	ldr	r0, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	6053      	str	r3, [r2, #4]
 8001fce:	4408      	add	r0, r1
 8001fd0:	6010      	str	r0, [r2, #0]
 8001fd2:	e7da      	b.n	8001f8a <_free_r+0x22>
 8001fd4:	d902      	bls.n	8001fdc <_free_r+0x74>
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	602b      	str	r3, [r5, #0]
 8001fda:	e7d6      	b.n	8001f8a <_free_r+0x22>
 8001fdc:	6820      	ldr	r0, [r4, #0]
 8001fde:	1821      	adds	r1, r4, r0
 8001fe0:	428b      	cmp	r3, r1
 8001fe2:	bf04      	itt	eq
 8001fe4:	6819      	ldreq	r1, [r3, #0]
 8001fe6:	685b      	ldreq	r3, [r3, #4]
 8001fe8:	6063      	str	r3, [r4, #4]
 8001fea:	bf04      	itt	eq
 8001fec:	1809      	addeq	r1, r1, r0
 8001fee:	6021      	streq	r1, [r4, #0]
 8001ff0:	6054      	str	r4, [r2, #4]
 8001ff2:	e7ca      	b.n	8001f8a <_free_r+0x22>
 8001ff4:	bd38      	pop	{r3, r4, r5, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200001d8 	.word	0x200001d8

08001ffc <sbrk_aligned>:
 8001ffc:	b570      	push	{r4, r5, r6, lr}
 8001ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800203c <sbrk_aligned+0x40>)
 8002000:	460c      	mov	r4, r1
 8002002:	6831      	ldr	r1, [r6, #0]
 8002004:	4605      	mov	r5, r0
 8002006:	b911      	cbnz	r1, 800200e <sbrk_aligned+0x12>
 8002008:	f000 fcb4 	bl	8002974 <_sbrk_r>
 800200c:	6030      	str	r0, [r6, #0]
 800200e:	4621      	mov	r1, r4
 8002010:	4628      	mov	r0, r5
 8002012:	f000 fcaf 	bl	8002974 <_sbrk_r>
 8002016:	1c43      	adds	r3, r0, #1
 8002018:	d103      	bne.n	8002022 <sbrk_aligned+0x26>
 800201a:	f04f 34ff 	mov.w	r4, #4294967295
 800201e:	4620      	mov	r0, r4
 8002020:	bd70      	pop	{r4, r5, r6, pc}
 8002022:	1cc4      	adds	r4, r0, #3
 8002024:	f024 0403 	bic.w	r4, r4, #3
 8002028:	42a0      	cmp	r0, r4
 800202a:	d0f8      	beq.n	800201e <sbrk_aligned+0x22>
 800202c:	1a21      	subs	r1, r4, r0
 800202e:	4628      	mov	r0, r5
 8002030:	f000 fca0 	bl	8002974 <_sbrk_r>
 8002034:	3001      	adds	r0, #1
 8002036:	d1f2      	bne.n	800201e <sbrk_aligned+0x22>
 8002038:	e7ef      	b.n	800201a <sbrk_aligned+0x1e>
 800203a:	bf00      	nop
 800203c:	200001d4 	.word	0x200001d4

08002040 <_malloc_r>:
 8002040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002044:	1ccd      	adds	r5, r1, #3
 8002046:	f025 0503 	bic.w	r5, r5, #3
 800204a:	3508      	adds	r5, #8
 800204c:	2d0c      	cmp	r5, #12
 800204e:	bf38      	it	cc
 8002050:	250c      	movcc	r5, #12
 8002052:	2d00      	cmp	r5, #0
 8002054:	4606      	mov	r6, r0
 8002056:	db01      	blt.n	800205c <_malloc_r+0x1c>
 8002058:	42a9      	cmp	r1, r5
 800205a:	d904      	bls.n	8002066 <_malloc_r+0x26>
 800205c:	230c      	movs	r3, #12
 800205e:	6033      	str	r3, [r6, #0]
 8002060:	2000      	movs	r0, #0
 8002062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800213c <_malloc_r+0xfc>
 800206a:	f000 f869 	bl	8002140 <__malloc_lock>
 800206e:	f8d8 3000 	ldr.w	r3, [r8]
 8002072:	461c      	mov	r4, r3
 8002074:	bb44      	cbnz	r4, 80020c8 <_malloc_r+0x88>
 8002076:	4629      	mov	r1, r5
 8002078:	4630      	mov	r0, r6
 800207a:	f7ff ffbf 	bl	8001ffc <sbrk_aligned>
 800207e:	1c43      	adds	r3, r0, #1
 8002080:	4604      	mov	r4, r0
 8002082:	d158      	bne.n	8002136 <_malloc_r+0xf6>
 8002084:	f8d8 4000 	ldr.w	r4, [r8]
 8002088:	4627      	mov	r7, r4
 800208a:	2f00      	cmp	r7, #0
 800208c:	d143      	bne.n	8002116 <_malloc_r+0xd6>
 800208e:	2c00      	cmp	r4, #0
 8002090:	d04b      	beq.n	800212a <_malloc_r+0xea>
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	4639      	mov	r1, r7
 8002096:	4630      	mov	r0, r6
 8002098:	eb04 0903 	add.w	r9, r4, r3
 800209c:	f000 fc6a 	bl	8002974 <_sbrk_r>
 80020a0:	4581      	cmp	r9, r0
 80020a2:	d142      	bne.n	800212a <_malloc_r+0xea>
 80020a4:	6821      	ldr	r1, [r4, #0]
 80020a6:	1a6d      	subs	r5, r5, r1
 80020a8:	4629      	mov	r1, r5
 80020aa:	4630      	mov	r0, r6
 80020ac:	f7ff ffa6 	bl	8001ffc <sbrk_aligned>
 80020b0:	3001      	adds	r0, #1
 80020b2:	d03a      	beq.n	800212a <_malloc_r+0xea>
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	442b      	add	r3, r5
 80020b8:	6023      	str	r3, [r4, #0]
 80020ba:	f8d8 3000 	ldr.w	r3, [r8]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	bb62      	cbnz	r2, 800211c <_malloc_r+0xdc>
 80020c2:	f8c8 7000 	str.w	r7, [r8]
 80020c6:	e00f      	b.n	80020e8 <_malloc_r+0xa8>
 80020c8:	6822      	ldr	r2, [r4, #0]
 80020ca:	1b52      	subs	r2, r2, r5
 80020cc:	d420      	bmi.n	8002110 <_malloc_r+0xd0>
 80020ce:	2a0b      	cmp	r2, #11
 80020d0:	d917      	bls.n	8002102 <_malloc_r+0xc2>
 80020d2:	1961      	adds	r1, r4, r5
 80020d4:	42a3      	cmp	r3, r4
 80020d6:	6025      	str	r5, [r4, #0]
 80020d8:	bf18      	it	ne
 80020da:	6059      	strne	r1, [r3, #4]
 80020dc:	6863      	ldr	r3, [r4, #4]
 80020de:	bf08      	it	eq
 80020e0:	f8c8 1000 	streq.w	r1, [r8]
 80020e4:	5162      	str	r2, [r4, r5]
 80020e6:	604b      	str	r3, [r1, #4]
 80020e8:	4630      	mov	r0, r6
 80020ea:	f000 f82f 	bl	800214c <__malloc_unlock>
 80020ee:	f104 000b 	add.w	r0, r4, #11
 80020f2:	1d23      	adds	r3, r4, #4
 80020f4:	f020 0007 	bic.w	r0, r0, #7
 80020f8:	1ac2      	subs	r2, r0, r3
 80020fa:	bf1c      	itt	ne
 80020fc:	1a1b      	subne	r3, r3, r0
 80020fe:	50a3      	strne	r3, [r4, r2]
 8002100:	e7af      	b.n	8002062 <_malloc_r+0x22>
 8002102:	6862      	ldr	r2, [r4, #4]
 8002104:	42a3      	cmp	r3, r4
 8002106:	bf0c      	ite	eq
 8002108:	f8c8 2000 	streq.w	r2, [r8]
 800210c:	605a      	strne	r2, [r3, #4]
 800210e:	e7eb      	b.n	80020e8 <_malloc_r+0xa8>
 8002110:	4623      	mov	r3, r4
 8002112:	6864      	ldr	r4, [r4, #4]
 8002114:	e7ae      	b.n	8002074 <_malloc_r+0x34>
 8002116:	463c      	mov	r4, r7
 8002118:	687f      	ldr	r7, [r7, #4]
 800211a:	e7b6      	b.n	800208a <_malloc_r+0x4a>
 800211c:	461a      	mov	r2, r3
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	42a3      	cmp	r3, r4
 8002122:	d1fb      	bne.n	800211c <_malloc_r+0xdc>
 8002124:	2300      	movs	r3, #0
 8002126:	6053      	str	r3, [r2, #4]
 8002128:	e7de      	b.n	80020e8 <_malloc_r+0xa8>
 800212a:	230c      	movs	r3, #12
 800212c:	6033      	str	r3, [r6, #0]
 800212e:	4630      	mov	r0, r6
 8002130:	f000 f80c 	bl	800214c <__malloc_unlock>
 8002134:	e794      	b.n	8002060 <_malloc_r+0x20>
 8002136:	6005      	str	r5, [r0, #0]
 8002138:	e7d6      	b.n	80020e8 <_malloc_r+0xa8>
 800213a:	bf00      	nop
 800213c:	200001d8 	.word	0x200001d8

08002140 <__malloc_lock>:
 8002140:	4801      	ldr	r0, [pc, #4]	@ (8002148 <__malloc_lock+0x8>)
 8002142:	f7ff bf0e 	b.w	8001f62 <__retarget_lock_acquire_recursive>
 8002146:	bf00      	nop
 8002148:	200001d0 	.word	0x200001d0

0800214c <__malloc_unlock>:
 800214c:	4801      	ldr	r0, [pc, #4]	@ (8002154 <__malloc_unlock+0x8>)
 800214e:	f7ff bf09 	b.w	8001f64 <__retarget_lock_release_recursive>
 8002152:	bf00      	nop
 8002154:	200001d0 	.word	0x200001d0

08002158 <__sfputc_r>:
 8002158:	6893      	ldr	r3, [r2, #8]
 800215a:	3b01      	subs	r3, #1
 800215c:	2b00      	cmp	r3, #0
 800215e:	b410      	push	{r4}
 8002160:	6093      	str	r3, [r2, #8]
 8002162:	da08      	bge.n	8002176 <__sfputc_r+0x1e>
 8002164:	6994      	ldr	r4, [r2, #24]
 8002166:	42a3      	cmp	r3, r4
 8002168:	db01      	blt.n	800216e <__sfputc_r+0x16>
 800216a:	290a      	cmp	r1, #10
 800216c:	d103      	bne.n	8002176 <__sfputc_r+0x1e>
 800216e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002172:	f000 bb6b 	b.w	800284c <__swbuf_r>
 8002176:	6813      	ldr	r3, [r2, #0]
 8002178:	1c58      	adds	r0, r3, #1
 800217a:	6010      	str	r0, [r2, #0]
 800217c:	7019      	strb	r1, [r3, #0]
 800217e:	4608      	mov	r0, r1
 8002180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002184:	4770      	bx	lr

08002186 <__sfputs_r>:
 8002186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002188:	4606      	mov	r6, r0
 800218a:	460f      	mov	r7, r1
 800218c:	4614      	mov	r4, r2
 800218e:	18d5      	adds	r5, r2, r3
 8002190:	42ac      	cmp	r4, r5
 8002192:	d101      	bne.n	8002198 <__sfputs_r+0x12>
 8002194:	2000      	movs	r0, #0
 8002196:	e007      	b.n	80021a8 <__sfputs_r+0x22>
 8002198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800219c:	463a      	mov	r2, r7
 800219e:	4630      	mov	r0, r6
 80021a0:	f7ff ffda 	bl	8002158 <__sfputc_r>
 80021a4:	1c43      	adds	r3, r0, #1
 80021a6:	d1f3      	bne.n	8002190 <__sfputs_r+0xa>
 80021a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080021ac <_vfiprintf_r>:
 80021ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80021b0:	460d      	mov	r5, r1
 80021b2:	b09d      	sub	sp, #116	@ 0x74
 80021b4:	4614      	mov	r4, r2
 80021b6:	4698      	mov	r8, r3
 80021b8:	4606      	mov	r6, r0
 80021ba:	b118      	cbz	r0, 80021c4 <_vfiprintf_r+0x18>
 80021bc:	6a03      	ldr	r3, [r0, #32]
 80021be:	b90b      	cbnz	r3, 80021c4 <_vfiprintf_r+0x18>
 80021c0:	f7ff fdca 	bl	8001d58 <__sinit>
 80021c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021c6:	07d9      	lsls	r1, r3, #31
 80021c8:	d405      	bmi.n	80021d6 <_vfiprintf_r+0x2a>
 80021ca:	89ab      	ldrh	r3, [r5, #12]
 80021cc:	059a      	lsls	r2, r3, #22
 80021ce:	d402      	bmi.n	80021d6 <_vfiprintf_r+0x2a>
 80021d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80021d2:	f7ff fec6 	bl	8001f62 <__retarget_lock_acquire_recursive>
 80021d6:	89ab      	ldrh	r3, [r5, #12]
 80021d8:	071b      	lsls	r3, r3, #28
 80021da:	d501      	bpl.n	80021e0 <_vfiprintf_r+0x34>
 80021dc:	692b      	ldr	r3, [r5, #16]
 80021de:	b99b      	cbnz	r3, 8002208 <_vfiprintf_r+0x5c>
 80021e0:	4629      	mov	r1, r5
 80021e2:	4630      	mov	r0, r6
 80021e4:	f000 fb70 	bl	80028c8 <__swsetup_r>
 80021e8:	b170      	cbz	r0, 8002208 <_vfiprintf_r+0x5c>
 80021ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80021ec:	07dc      	lsls	r4, r3, #31
 80021ee:	d504      	bpl.n	80021fa <_vfiprintf_r+0x4e>
 80021f0:	f04f 30ff 	mov.w	r0, #4294967295
 80021f4:	b01d      	add	sp, #116	@ 0x74
 80021f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021fa:	89ab      	ldrh	r3, [r5, #12]
 80021fc:	0598      	lsls	r0, r3, #22
 80021fe:	d4f7      	bmi.n	80021f0 <_vfiprintf_r+0x44>
 8002200:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002202:	f7ff feaf 	bl	8001f64 <__retarget_lock_release_recursive>
 8002206:	e7f3      	b.n	80021f0 <_vfiprintf_r+0x44>
 8002208:	2300      	movs	r3, #0
 800220a:	9309      	str	r3, [sp, #36]	@ 0x24
 800220c:	2320      	movs	r3, #32
 800220e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002212:	f8cd 800c 	str.w	r8, [sp, #12]
 8002216:	2330      	movs	r3, #48	@ 0x30
 8002218:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80023c8 <_vfiprintf_r+0x21c>
 800221c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002220:	f04f 0901 	mov.w	r9, #1
 8002224:	4623      	mov	r3, r4
 8002226:	469a      	mov	sl, r3
 8002228:	f813 2b01 	ldrb.w	r2, [r3], #1
 800222c:	b10a      	cbz	r2, 8002232 <_vfiprintf_r+0x86>
 800222e:	2a25      	cmp	r2, #37	@ 0x25
 8002230:	d1f9      	bne.n	8002226 <_vfiprintf_r+0x7a>
 8002232:	ebba 0b04 	subs.w	fp, sl, r4
 8002236:	d00b      	beq.n	8002250 <_vfiprintf_r+0xa4>
 8002238:	465b      	mov	r3, fp
 800223a:	4622      	mov	r2, r4
 800223c:	4629      	mov	r1, r5
 800223e:	4630      	mov	r0, r6
 8002240:	f7ff ffa1 	bl	8002186 <__sfputs_r>
 8002244:	3001      	adds	r0, #1
 8002246:	f000 80a7 	beq.w	8002398 <_vfiprintf_r+0x1ec>
 800224a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800224c:	445a      	add	r2, fp
 800224e:	9209      	str	r2, [sp, #36]	@ 0x24
 8002250:	f89a 3000 	ldrb.w	r3, [sl]
 8002254:	2b00      	cmp	r3, #0
 8002256:	f000 809f 	beq.w	8002398 <_vfiprintf_r+0x1ec>
 800225a:	2300      	movs	r3, #0
 800225c:	f04f 32ff 	mov.w	r2, #4294967295
 8002260:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002264:	f10a 0a01 	add.w	sl, sl, #1
 8002268:	9304      	str	r3, [sp, #16]
 800226a:	9307      	str	r3, [sp, #28]
 800226c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002270:	931a      	str	r3, [sp, #104]	@ 0x68
 8002272:	4654      	mov	r4, sl
 8002274:	2205      	movs	r2, #5
 8002276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800227a:	4853      	ldr	r0, [pc, #332]	@ (80023c8 <_vfiprintf_r+0x21c>)
 800227c:	f7fd ffc8 	bl	8000210 <memchr>
 8002280:	9a04      	ldr	r2, [sp, #16]
 8002282:	b9d8      	cbnz	r0, 80022bc <_vfiprintf_r+0x110>
 8002284:	06d1      	lsls	r1, r2, #27
 8002286:	bf44      	itt	mi
 8002288:	2320      	movmi	r3, #32
 800228a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800228e:	0713      	lsls	r3, r2, #28
 8002290:	bf44      	itt	mi
 8002292:	232b      	movmi	r3, #43	@ 0x2b
 8002294:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002298:	f89a 3000 	ldrb.w	r3, [sl]
 800229c:	2b2a      	cmp	r3, #42	@ 0x2a
 800229e:	d015      	beq.n	80022cc <_vfiprintf_r+0x120>
 80022a0:	9a07      	ldr	r2, [sp, #28]
 80022a2:	4654      	mov	r4, sl
 80022a4:	2000      	movs	r0, #0
 80022a6:	f04f 0c0a 	mov.w	ip, #10
 80022aa:	4621      	mov	r1, r4
 80022ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80022b0:	3b30      	subs	r3, #48	@ 0x30
 80022b2:	2b09      	cmp	r3, #9
 80022b4:	d94b      	bls.n	800234e <_vfiprintf_r+0x1a2>
 80022b6:	b1b0      	cbz	r0, 80022e6 <_vfiprintf_r+0x13a>
 80022b8:	9207      	str	r2, [sp, #28]
 80022ba:	e014      	b.n	80022e6 <_vfiprintf_r+0x13a>
 80022bc:	eba0 0308 	sub.w	r3, r0, r8
 80022c0:	fa09 f303 	lsl.w	r3, r9, r3
 80022c4:	4313      	orrs	r3, r2
 80022c6:	9304      	str	r3, [sp, #16]
 80022c8:	46a2      	mov	sl, r4
 80022ca:	e7d2      	b.n	8002272 <_vfiprintf_r+0xc6>
 80022cc:	9b03      	ldr	r3, [sp, #12]
 80022ce:	1d19      	adds	r1, r3, #4
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	9103      	str	r1, [sp, #12]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bfbb      	ittet	lt
 80022d8:	425b      	neglt	r3, r3
 80022da:	f042 0202 	orrlt.w	r2, r2, #2
 80022de:	9307      	strge	r3, [sp, #28]
 80022e0:	9307      	strlt	r3, [sp, #28]
 80022e2:	bfb8      	it	lt
 80022e4:	9204      	strlt	r2, [sp, #16]
 80022e6:	7823      	ldrb	r3, [r4, #0]
 80022e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80022ea:	d10a      	bne.n	8002302 <_vfiprintf_r+0x156>
 80022ec:	7863      	ldrb	r3, [r4, #1]
 80022ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80022f0:	d132      	bne.n	8002358 <_vfiprintf_r+0x1ac>
 80022f2:	9b03      	ldr	r3, [sp, #12]
 80022f4:	1d1a      	adds	r2, r3, #4
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	9203      	str	r2, [sp, #12]
 80022fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80022fe:	3402      	adds	r4, #2
 8002300:	9305      	str	r3, [sp, #20]
 8002302:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80023d8 <_vfiprintf_r+0x22c>
 8002306:	7821      	ldrb	r1, [r4, #0]
 8002308:	2203      	movs	r2, #3
 800230a:	4650      	mov	r0, sl
 800230c:	f7fd ff80 	bl	8000210 <memchr>
 8002310:	b138      	cbz	r0, 8002322 <_vfiprintf_r+0x176>
 8002312:	9b04      	ldr	r3, [sp, #16]
 8002314:	eba0 000a 	sub.w	r0, r0, sl
 8002318:	2240      	movs	r2, #64	@ 0x40
 800231a:	4082      	lsls	r2, r0
 800231c:	4313      	orrs	r3, r2
 800231e:	3401      	adds	r4, #1
 8002320:	9304      	str	r3, [sp, #16]
 8002322:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002326:	4829      	ldr	r0, [pc, #164]	@ (80023cc <_vfiprintf_r+0x220>)
 8002328:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800232c:	2206      	movs	r2, #6
 800232e:	f7fd ff6f 	bl	8000210 <memchr>
 8002332:	2800      	cmp	r0, #0
 8002334:	d03f      	beq.n	80023b6 <_vfiprintf_r+0x20a>
 8002336:	4b26      	ldr	r3, [pc, #152]	@ (80023d0 <_vfiprintf_r+0x224>)
 8002338:	bb1b      	cbnz	r3, 8002382 <_vfiprintf_r+0x1d6>
 800233a:	9b03      	ldr	r3, [sp, #12]
 800233c:	3307      	adds	r3, #7
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	3308      	adds	r3, #8
 8002344:	9303      	str	r3, [sp, #12]
 8002346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002348:	443b      	add	r3, r7
 800234a:	9309      	str	r3, [sp, #36]	@ 0x24
 800234c:	e76a      	b.n	8002224 <_vfiprintf_r+0x78>
 800234e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002352:	460c      	mov	r4, r1
 8002354:	2001      	movs	r0, #1
 8002356:	e7a8      	b.n	80022aa <_vfiprintf_r+0xfe>
 8002358:	2300      	movs	r3, #0
 800235a:	3401      	adds	r4, #1
 800235c:	9305      	str	r3, [sp, #20]
 800235e:	4619      	mov	r1, r3
 8002360:	f04f 0c0a 	mov.w	ip, #10
 8002364:	4620      	mov	r0, r4
 8002366:	f810 2b01 	ldrb.w	r2, [r0], #1
 800236a:	3a30      	subs	r2, #48	@ 0x30
 800236c:	2a09      	cmp	r2, #9
 800236e:	d903      	bls.n	8002378 <_vfiprintf_r+0x1cc>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0c6      	beq.n	8002302 <_vfiprintf_r+0x156>
 8002374:	9105      	str	r1, [sp, #20]
 8002376:	e7c4      	b.n	8002302 <_vfiprintf_r+0x156>
 8002378:	fb0c 2101 	mla	r1, ip, r1, r2
 800237c:	4604      	mov	r4, r0
 800237e:	2301      	movs	r3, #1
 8002380:	e7f0      	b.n	8002364 <_vfiprintf_r+0x1b8>
 8002382:	ab03      	add	r3, sp, #12
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	462a      	mov	r2, r5
 8002388:	4b12      	ldr	r3, [pc, #72]	@ (80023d4 <_vfiprintf_r+0x228>)
 800238a:	a904      	add	r1, sp, #16
 800238c:	4630      	mov	r0, r6
 800238e:	f3af 8000 	nop.w
 8002392:	4607      	mov	r7, r0
 8002394:	1c78      	adds	r0, r7, #1
 8002396:	d1d6      	bne.n	8002346 <_vfiprintf_r+0x19a>
 8002398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800239a:	07d9      	lsls	r1, r3, #31
 800239c:	d405      	bmi.n	80023aa <_vfiprintf_r+0x1fe>
 800239e:	89ab      	ldrh	r3, [r5, #12]
 80023a0:	059a      	lsls	r2, r3, #22
 80023a2:	d402      	bmi.n	80023aa <_vfiprintf_r+0x1fe>
 80023a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80023a6:	f7ff fddd 	bl	8001f64 <__retarget_lock_release_recursive>
 80023aa:	89ab      	ldrh	r3, [r5, #12]
 80023ac:	065b      	lsls	r3, r3, #25
 80023ae:	f53f af1f 	bmi.w	80021f0 <_vfiprintf_r+0x44>
 80023b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80023b4:	e71e      	b.n	80021f4 <_vfiprintf_r+0x48>
 80023b6:	ab03      	add	r3, sp, #12
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	462a      	mov	r2, r5
 80023bc:	4b05      	ldr	r3, [pc, #20]	@ (80023d4 <_vfiprintf_r+0x228>)
 80023be:	a904      	add	r1, sp, #16
 80023c0:	4630      	mov	r0, r6
 80023c2:	f000 f879 	bl	80024b8 <_printf_i>
 80023c6:	e7e4      	b.n	8002392 <_vfiprintf_r+0x1e6>
 80023c8:	08002ad4 	.word	0x08002ad4
 80023cc:	08002ade 	.word	0x08002ade
 80023d0:	00000000 	.word	0x00000000
 80023d4:	08002187 	.word	0x08002187
 80023d8:	08002ada 	.word	0x08002ada

080023dc <_printf_common>:
 80023dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023e0:	4616      	mov	r6, r2
 80023e2:	4698      	mov	r8, r3
 80023e4:	688a      	ldr	r2, [r1, #8]
 80023e6:	690b      	ldr	r3, [r1, #16]
 80023e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bfb8      	it	lt
 80023f0:	4613      	movlt	r3, r2
 80023f2:	6033      	str	r3, [r6, #0]
 80023f4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80023f8:	4607      	mov	r7, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	b10a      	cbz	r2, 8002402 <_printf_common+0x26>
 80023fe:	3301      	adds	r3, #1
 8002400:	6033      	str	r3, [r6, #0]
 8002402:	6823      	ldr	r3, [r4, #0]
 8002404:	0699      	lsls	r1, r3, #26
 8002406:	bf42      	ittt	mi
 8002408:	6833      	ldrmi	r3, [r6, #0]
 800240a:	3302      	addmi	r3, #2
 800240c:	6033      	strmi	r3, [r6, #0]
 800240e:	6825      	ldr	r5, [r4, #0]
 8002410:	f015 0506 	ands.w	r5, r5, #6
 8002414:	d106      	bne.n	8002424 <_printf_common+0x48>
 8002416:	f104 0a19 	add.w	sl, r4, #25
 800241a:	68e3      	ldr	r3, [r4, #12]
 800241c:	6832      	ldr	r2, [r6, #0]
 800241e:	1a9b      	subs	r3, r3, r2
 8002420:	42ab      	cmp	r3, r5
 8002422:	dc26      	bgt.n	8002472 <_printf_common+0x96>
 8002424:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002428:	6822      	ldr	r2, [r4, #0]
 800242a:	3b00      	subs	r3, #0
 800242c:	bf18      	it	ne
 800242e:	2301      	movne	r3, #1
 8002430:	0692      	lsls	r2, r2, #26
 8002432:	d42b      	bmi.n	800248c <_printf_common+0xb0>
 8002434:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002438:	4641      	mov	r1, r8
 800243a:	4638      	mov	r0, r7
 800243c:	47c8      	blx	r9
 800243e:	3001      	adds	r0, #1
 8002440:	d01e      	beq.n	8002480 <_printf_common+0xa4>
 8002442:	6823      	ldr	r3, [r4, #0]
 8002444:	6922      	ldr	r2, [r4, #16]
 8002446:	f003 0306 	and.w	r3, r3, #6
 800244a:	2b04      	cmp	r3, #4
 800244c:	bf02      	ittt	eq
 800244e:	68e5      	ldreq	r5, [r4, #12]
 8002450:	6833      	ldreq	r3, [r6, #0]
 8002452:	1aed      	subeq	r5, r5, r3
 8002454:	68a3      	ldr	r3, [r4, #8]
 8002456:	bf0c      	ite	eq
 8002458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800245c:	2500      	movne	r5, #0
 800245e:	4293      	cmp	r3, r2
 8002460:	bfc4      	itt	gt
 8002462:	1a9b      	subgt	r3, r3, r2
 8002464:	18ed      	addgt	r5, r5, r3
 8002466:	2600      	movs	r6, #0
 8002468:	341a      	adds	r4, #26
 800246a:	42b5      	cmp	r5, r6
 800246c:	d11a      	bne.n	80024a4 <_printf_common+0xc8>
 800246e:	2000      	movs	r0, #0
 8002470:	e008      	b.n	8002484 <_printf_common+0xa8>
 8002472:	2301      	movs	r3, #1
 8002474:	4652      	mov	r2, sl
 8002476:	4641      	mov	r1, r8
 8002478:	4638      	mov	r0, r7
 800247a:	47c8      	blx	r9
 800247c:	3001      	adds	r0, #1
 800247e:	d103      	bne.n	8002488 <_printf_common+0xac>
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002488:	3501      	adds	r5, #1
 800248a:	e7c6      	b.n	800241a <_printf_common+0x3e>
 800248c:	18e1      	adds	r1, r4, r3
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	2030      	movs	r0, #48	@ 0x30
 8002492:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002496:	4422      	add	r2, r4
 8002498:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800249c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80024a0:	3302      	adds	r3, #2
 80024a2:	e7c7      	b.n	8002434 <_printf_common+0x58>
 80024a4:	2301      	movs	r3, #1
 80024a6:	4622      	mov	r2, r4
 80024a8:	4641      	mov	r1, r8
 80024aa:	4638      	mov	r0, r7
 80024ac:	47c8      	blx	r9
 80024ae:	3001      	adds	r0, #1
 80024b0:	d0e6      	beq.n	8002480 <_printf_common+0xa4>
 80024b2:	3601      	adds	r6, #1
 80024b4:	e7d9      	b.n	800246a <_printf_common+0x8e>
	...

080024b8 <_printf_i>:
 80024b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80024bc:	7e0f      	ldrb	r7, [r1, #24]
 80024be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80024c0:	2f78      	cmp	r7, #120	@ 0x78
 80024c2:	4691      	mov	r9, r2
 80024c4:	4680      	mov	r8, r0
 80024c6:	460c      	mov	r4, r1
 80024c8:	469a      	mov	sl, r3
 80024ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80024ce:	d807      	bhi.n	80024e0 <_printf_i+0x28>
 80024d0:	2f62      	cmp	r7, #98	@ 0x62
 80024d2:	d80a      	bhi.n	80024ea <_printf_i+0x32>
 80024d4:	2f00      	cmp	r7, #0
 80024d6:	f000 80d1 	beq.w	800267c <_printf_i+0x1c4>
 80024da:	2f58      	cmp	r7, #88	@ 0x58
 80024dc:	f000 80b8 	beq.w	8002650 <_printf_i+0x198>
 80024e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80024e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80024e8:	e03a      	b.n	8002560 <_printf_i+0xa8>
 80024ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80024ee:	2b15      	cmp	r3, #21
 80024f0:	d8f6      	bhi.n	80024e0 <_printf_i+0x28>
 80024f2:	a101      	add	r1, pc, #4	@ (adr r1, 80024f8 <_printf_i+0x40>)
 80024f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80024f8:	08002551 	.word	0x08002551
 80024fc:	08002565 	.word	0x08002565
 8002500:	080024e1 	.word	0x080024e1
 8002504:	080024e1 	.word	0x080024e1
 8002508:	080024e1 	.word	0x080024e1
 800250c:	080024e1 	.word	0x080024e1
 8002510:	08002565 	.word	0x08002565
 8002514:	080024e1 	.word	0x080024e1
 8002518:	080024e1 	.word	0x080024e1
 800251c:	080024e1 	.word	0x080024e1
 8002520:	080024e1 	.word	0x080024e1
 8002524:	08002663 	.word	0x08002663
 8002528:	0800258f 	.word	0x0800258f
 800252c:	0800261d 	.word	0x0800261d
 8002530:	080024e1 	.word	0x080024e1
 8002534:	080024e1 	.word	0x080024e1
 8002538:	08002685 	.word	0x08002685
 800253c:	080024e1 	.word	0x080024e1
 8002540:	0800258f 	.word	0x0800258f
 8002544:	080024e1 	.word	0x080024e1
 8002548:	080024e1 	.word	0x080024e1
 800254c:	08002625 	.word	0x08002625
 8002550:	6833      	ldr	r3, [r6, #0]
 8002552:	1d1a      	adds	r2, r3, #4
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6032      	str	r2, [r6, #0]
 8002558:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800255c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002560:	2301      	movs	r3, #1
 8002562:	e09c      	b.n	800269e <_printf_i+0x1e6>
 8002564:	6833      	ldr	r3, [r6, #0]
 8002566:	6820      	ldr	r0, [r4, #0]
 8002568:	1d19      	adds	r1, r3, #4
 800256a:	6031      	str	r1, [r6, #0]
 800256c:	0606      	lsls	r6, r0, #24
 800256e:	d501      	bpl.n	8002574 <_printf_i+0xbc>
 8002570:	681d      	ldr	r5, [r3, #0]
 8002572:	e003      	b.n	800257c <_printf_i+0xc4>
 8002574:	0645      	lsls	r5, r0, #25
 8002576:	d5fb      	bpl.n	8002570 <_printf_i+0xb8>
 8002578:	f9b3 5000 	ldrsh.w	r5, [r3]
 800257c:	2d00      	cmp	r5, #0
 800257e:	da03      	bge.n	8002588 <_printf_i+0xd0>
 8002580:	232d      	movs	r3, #45	@ 0x2d
 8002582:	426d      	negs	r5, r5
 8002584:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002588:	4858      	ldr	r0, [pc, #352]	@ (80026ec <_printf_i+0x234>)
 800258a:	230a      	movs	r3, #10
 800258c:	e011      	b.n	80025b2 <_printf_i+0xfa>
 800258e:	6821      	ldr	r1, [r4, #0]
 8002590:	6833      	ldr	r3, [r6, #0]
 8002592:	0608      	lsls	r0, r1, #24
 8002594:	f853 5b04 	ldr.w	r5, [r3], #4
 8002598:	d402      	bmi.n	80025a0 <_printf_i+0xe8>
 800259a:	0649      	lsls	r1, r1, #25
 800259c:	bf48      	it	mi
 800259e:	b2ad      	uxthmi	r5, r5
 80025a0:	2f6f      	cmp	r7, #111	@ 0x6f
 80025a2:	4852      	ldr	r0, [pc, #328]	@ (80026ec <_printf_i+0x234>)
 80025a4:	6033      	str	r3, [r6, #0]
 80025a6:	bf14      	ite	ne
 80025a8:	230a      	movne	r3, #10
 80025aa:	2308      	moveq	r3, #8
 80025ac:	2100      	movs	r1, #0
 80025ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80025b2:	6866      	ldr	r6, [r4, #4]
 80025b4:	60a6      	str	r6, [r4, #8]
 80025b6:	2e00      	cmp	r6, #0
 80025b8:	db05      	blt.n	80025c6 <_printf_i+0x10e>
 80025ba:	6821      	ldr	r1, [r4, #0]
 80025bc:	432e      	orrs	r6, r5
 80025be:	f021 0104 	bic.w	r1, r1, #4
 80025c2:	6021      	str	r1, [r4, #0]
 80025c4:	d04b      	beq.n	800265e <_printf_i+0x1a6>
 80025c6:	4616      	mov	r6, r2
 80025c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80025cc:	fb03 5711 	mls	r7, r3, r1, r5
 80025d0:	5dc7      	ldrb	r7, [r0, r7]
 80025d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80025d6:	462f      	mov	r7, r5
 80025d8:	42bb      	cmp	r3, r7
 80025da:	460d      	mov	r5, r1
 80025dc:	d9f4      	bls.n	80025c8 <_printf_i+0x110>
 80025de:	2b08      	cmp	r3, #8
 80025e0:	d10b      	bne.n	80025fa <_printf_i+0x142>
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	07df      	lsls	r7, r3, #31
 80025e6:	d508      	bpl.n	80025fa <_printf_i+0x142>
 80025e8:	6923      	ldr	r3, [r4, #16]
 80025ea:	6861      	ldr	r1, [r4, #4]
 80025ec:	4299      	cmp	r1, r3
 80025ee:	bfde      	ittt	le
 80025f0:	2330      	movle	r3, #48	@ 0x30
 80025f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80025f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80025fa:	1b92      	subs	r2, r2, r6
 80025fc:	6122      	str	r2, [r4, #16]
 80025fe:	f8cd a000 	str.w	sl, [sp]
 8002602:	464b      	mov	r3, r9
 8002604:	aa03      	add	r2, sp, #12
 8002606:	4621      	mov	r1, r4
 8002608:	4640      	mov	r0, r8
 800260a:	f7ff fee7 	bl	80023dc <_printf_common>
 800260e:	3001      	adds	r0, #1
 8002610:	d14a      	bne.n	80026a8 <_printf_i+0x1f0>
 8002612:	f04f 30ff 	mov.w	r0, #4294967295
 8002616:	b004      	add	sp, #16
 8002618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800261c:	6823      	ldr	r3, [r4, #0]
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	6023      	str	r3, [r4, #0]
 8002624:	4832      	ldr	r0, [pc, #200]	@ (80026f0 <_printf_i+0x238>)
 8002626:	2778      	movs	r7, #120	@ 0x78
 8002628:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800262c:	6823      	ldr	r3, [r4, #0]
 800262e:	6831      	ldr	r1, [r6, #0]
 8002630:	061f      	lsls	r7, r3, #24
 8002632:	f851 5b04 	ldr.w	r5, [r1], #4
 8002636:	d402      	bmi.n	800263e <_printf_i+0x186>
 8002638:	065f      	lsls	r7, r3, #25
 800263a:	bf48      	it	mi
 800263c:	b2ad      	uxthmi	r5, r5
 800263e:	6031      	str	r1, [r6, #0]
 8002640:	07d9      	lsls	r1, r3, #31
 8002642:	bf44      	itt	mi
 8002644:	f043 0320 	orrmi.w	r3, r3, #32
 8002648:	6023      	strmi	r3, [r4, #0]
 800264a:	b11d      	cbz	r5, 8002654 <_printf_i+0x19c>
 800264c:	2310      	movs	r3, #16
 800264e:	e7ad      	b.n	80025ac <_printf_i+0xf4>
 8002650:	4826      	ldr	r0, [pc, #152]	@ (80026ec <_printf_i+0x234>)
 8002652:	e7e9      	b.n	8002628 <_printf_i+0x170>
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	f023 0320 	bic.w	r3, r3, #32
 800265a:	6023      	str	r3, [r4, #0]
 800265c:	e7f6      	b.n	800264c <_printf_i+0x194>
 800265e:	4616      	mov	r6, r2
 8002660:	e7bd      	b.n	80025de <_printf_i+0x126>
 8002662:	6833      	ldr	r3, [r6, #0]
 8002664:	6825      	ldr	r5, [r4, #0]
 8002666:	6961      	ldr	r1, [r4, #20]
 8002668:	1d18      	adds	r0, r3, #4
 800266a:	6030      	str	r0, [r6, #0]
 800266c:	062e      	lsls	r6, r5, #24
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	d501      	bpl.n	8002676 <_printf_i+0x1be>
 8002672:	6019      	str	r1, [r3, #0]
 8002674:	e002      	b.n	800267c <_printf_i+0x1c4>
 8002676:	0668      	lsls	r0, r5, #25
 8002678:	d5fb      	bpl.n	8002672 <_printf_i+0x1ba>
 800267a:	8019      	strh	r1, [r3, #0]
 800267c:	2300      	movs	r3, #0
 800267e:	6123      	str	r3, [r4, #16]
 8002680:	4616      	mov	r6, r2
 8002682:	e7bc      	b.n	80025fe <_printf_i+0x146>
 8002684:	6833      	ldr	r3, [r6, #0]
 8002686:	1d1a      	adds	r2, r3, #4
 8002688:	6032      	str	r2, [r6, #0]
 800268a:	681e      	ldr	r6, [r3, #0]
 800268c:	6862      	ldr	r2, [r4, #4]
 800268e:	2100      	movs	r1, #0
 8002690:	4630      	mov	r0, r6
 8002692:	f7fd fdbd 	bl	8000210 <memchr>
 8002696:	b108      	cbz	r0, 800269c <_printf_i+0x1e4>
 8002698:	1b80      	subs	r0, r0, r6
 800269a:	6060      	str	r0, [r4, #4]
 800269c:	6863      	ldr	r3, [r4, #4]
 800269e:	6123      	str	r3, [r4, #16]
 80026a0:	2300      	movs	r3, #0
 80026a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80026a6:	e7aa      	b.n	80025fe <_printf_i+0x146>
 80026a8:	6923      	ldr	r3, [r4, #16]
 80026aa:	4632      	mov	r2, r6
 80026ac:	4649      	mov	r1, r9
 80026ae:	4640      	mov	r0, r8
 80026b0:	47d0      	blx	sl
 80026b2:	3001      	adds	r0, #1
 80026b4:	d0ad      	beq.n	8002612 <_printf_i+0x15a>
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	079b      	lsls	r3, r3, #30
 80026ba:	d413      	bmi.n	80026e4 <_printf_i+0x22c>
 80026bc:	68e0      	ldr	r0, [r4, #12]
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	4298      	cmp	r0, r3
 80026c2:	bfb8      	it	lt
 80026c4:	4618      	movlt	r0, r3
 80026c6:	e7a6      	b.n	8002616 <_printf_i+0x15e>
 80026c8:	2301      	movs	r3, #1
 80026ca:	4632      	mov	r2, r6
 80026cc:	4649      	mov	r1, r9
 80026ce:	4640      	mov	r0, r8
 80026d0:	47d0      	blx	sl
 80026d2:	3001      	adds	r0, #1
 80026d4:	d09d      	beq.n	8002612 <_printf_i+0x15a>
 80026d6:	3501      	adds	r5, #1
 80026d8:	68e3      	ldr	r3, [r4, #12]
 80026da:	9903      	ldr	r1, [sp, #12]
 80026dc:	1a5b      	subs	r3, r3, r1
 80026de:	42ab      	cmp	r3, r5
 80026e0:	dcf2      	bgt.n	80026c8 <_printf_i+0x210>
 80026e2:	e7eb      	b.n	80026bc <_printf_i+0x204>
 80026e4:	2500      	movs	r5, #0
 80026e6:	f104 0619 	add.w	r6, r4, #25
 80026ea:	e7f5      	b.n	80026d8 <_printf_i+0x220>
 80026ec:	08002ae5 	.word	0x08002ae5
 80026f0:	08002af6 	.word	0x08002af6

080026f4 <__sflush_r>:
 80026f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80026f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026fc:	0716      	lsls	r6, r2, #28
 80026fe:	4605      	mov	r5, r0
 8002700:	460c      	mov	r4, r1
 8002702:	d454      	bmi.n	80027ae <__sflush_r+0xba>
 8002704:	684b      	ldr	r3, [r1, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	dc02      	bgt.n	8002710 <__sflush_r+0x1c>
 800270a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800270c:	2b00      	cmp	r3, #0
 800270e:	dd48      	ble.n	80027a2 <__sflush_r+0xae>
 8002710:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002712:	2e00      	cmp	r6, #0
 8002714:	d045      	beq.n	80027a2 <__sflush_r+0xae>
 8002716:	2300      	movs	r3, #0
 8002718:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800271c:	682f      	ldr	r7, [r5, #0]
 800271e:	6a21      	ldr	r1, [r4, #32]
 8002720:	602b      	str	r3, [r5, #0]
 8002722:	d030      	beq.n	8002786 <__sflush_r+0x92>
 8002724:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002726:	89a3      	ldrh	r3, [r4, #12]
 8002728:	0759      	lsls	r1, r3, #29
 800272a:	d505      	bpl.n	8002738 <__sflush_r+0x44>
 800272c:	6863      	ldr	r3, [r4, #4]
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002732:	b10b      	cbz	r3, 8002738 <__sflush_r+0x44>
 8002734:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002736:	1ad2      	subs	r2, r2, r3
 8002738:	2300      	movs	r3, #0
 800273a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800273c:	6a21      	ldr	r1, [r4, #32]
 800273e:	4628      	mov	r0, r5
 8002740:	47b0      	blx	r6
 8002742:	1c43      	adds	r3, r0, #1
 8002744:	89a3      	ldrh	r3, [r4, #12]
 8002746:	d106      	bne.n	8002756 <__sflush_r+0x62>
 8002748:	6829      	ldr	r1, [r5, #0]
 800274a:	291d      	cmp	r1, #29
 800274c:	d82b      	bhi.n	80027a6 <__sflush_r+0xb2>
 800274e:	4a2a      	ldr	r2, [pc, #168]	@ (80027f8 <__sflush_r+0x104>)
 8002750:	40ca      	lsrs	r2, r1
 8002752:	07d6      	lsls	r6, r2, #31
 8002754:	d527      	bpl.n	80027a6 <__sflush_r+0xb2>
 8002756:	2200      	movs	r2, #0
 8002758:	6062      	str	r2, [r4, #4]
 800275a:	04d9      	lsls	r1, r3, #19
 800275c:	6922      	ldr	r2, [r4, #16]
 800275e:	6022      	str	r2, [r4, #0]
 8002760:	d504      	bpl.n	800276c <__sflush_r+0x78>
 8002762:	1c42      	adds	r2, r0, #1
 8002764:	d101      	bne.n	800276a <__sflush_r+0x76>
 8002766:	682b      	ldr	r3, [r5, #0]
 8002768:	b903      	cbnz	r3, 800276c <__sflush_r+0x78>
 800276a:	6560      	str	r0, [r4, #84]	@ 0x54
 800276c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800276e:	602f      	str	r7, [r5, #0]
 8002770:	b1b9      	cbz	r1, 80027a2 <__sflush_r+0xae>
 8002772:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002776:	4299      	cmp	r1, r3
 8002778:	d002      	beq.n	8002780 <__sflush_r+0x8c>
 800277a:	4628      	mov	r0, r5
 800277c:	f7ff fbf4 	bl	8001f68 <_free_r>
 8002780:	2300      	movs	r3, #0
 8002782:	6363      	str	r3, [r4, #52]	@ 0x34
 8002784:	e00d      	b.n	80027a2 <__sflush_r+0xae>
 8002786:	2301      	movs	r3, #1
 8002788:	4628      	mov	r0, r5
 800278a:	47b0      	blx	r6
 800278c:	4602      	mov	r2, r0
 800278e:	1c50      	adds	r0, r2, #1
 8002790:	d1c9      	bne.n	8002726 <__sflush_r+0x32>
 8002792:	682b      	ldr	r3, [r5, #0]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d0c6      	beq.n	8002726 <__sflush_r+0x32>
 8002798:	2b1d      	cmp	r3, #29
 800279a:	d001      	beq.n	80027a0 <__sflush_r+0xac>
 800279c:	2b16      	cmp	r3, #22
 800279e:	d11e      	bne.n	80027de <__sflush_r+0xea>
 80027a0:	602f      	str	r7, [r5, #0]
 80027a2:	2000      	movs	r0, #0
 80027a4:	e022      	b.n	80027ec <__sflush_r+0xf8>
 80027a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027aa:	b21b      	sxth	r3, r3
 80027ac:	e01b      	b.n	80027e6 <__sflush_r+0xf2>
 80027ae:	690f      	ldr	r7, [r1, #16]
 80027b0:	2f00      	cmp	r7, #0
 80027b2:	d0f6      	beq.n	80027a2 <__sflush_r+0xae>
 80027b4:	0793      	lsls	r3, r2, #30
 80027b6:	680e      	ldr	r6, [r1, #0]
 80027b8:	bf08      	it	eq
 80027ba:	694b      	ldreq	r3, [r1, #20]
 80027bc:	600f      	str	r7, [r1, #0]
 80027be:	bf18      	it	ne
 80027c0:	2300      	movne	r3, #0
 80027c2:	eba6 0807 	sub.w	r8, r6, r7
 80027c6:	608b      	str	r3, [r1, #8]
 80027c8:	f1b8 0f00 	cmp.w	r8, #0
 80027cc:	dde9      	ble.n	80027a2 <__sflush_r+0xae>
 80027ce:	6a21      	ldr	r1, [r4, #32]
 80027d0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80027d2:	4643      	mov	r3, r8
 80027d4:	463a      	mov	r2, r7
 80027d6:	4628      	mov	r0, r5
 80027d8:	47b0      	blx	r6
 80027da:	2800      	cmp	r0, #0
 80027dc:	dc08      	bgt.n	80027f0 <__sflush_r+0xfc>
 80027de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027e6:	81a3      	strh	r3, [r4, #12]
 80027e8:	f04f 30ff 	mov.w	r0, #4294967295
 80027ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80027f0:	4407      	add	r7, r0
 80027f2:	eba8 0800 	sub.w	r8, r8, r0
 80027f6:	e7e7      	b.n	80027c8 <__sflush_r+0xd4>
 80027f8:	20400001 	.word	0x20400001

080027fc <_fflush_r>:
 80027fc:	b538      	push	{r3, r4, r5, lr}
 80027fe:	690b      	ldr	r3, [r1, #16]
 8002800:	4605      	mov	r5, r0
 8002802:	460c      	mov	r4, r1
 8002804:	b913      	cbnz	r3, 800280c <_fflush_r+0x10>
 8002806:	2500      	movs	r5, #0
 8002808:	4628      	mov	r0, r5
 800280a:	bd38      	pop	{r3, r4, r5, pc}
 800280c:	b118      	cbz	r0, 8002816 <_fflush_r+0x1a>
 800280e:	6a03      	ldr	r3, [r0, #32]
 8002810:	b90b      	cbnz	r3, 8002816 <_fflush_r+0x1a>
 8002812:	f7ff faa1 	bl	8001d58 <__sinit>
 8002816:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f3      	beq.n	8002806 <_fflush_r+0xa>
 800281e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002820:	07d0      	lsls	r0, r2, #31
 8002822:	d404      	bmi.n	800282e <_fflush_r+0x32>
 8002824:	0599      	lsls	r1, r3, #22
 8002826:	d402      	bmi.n	800282e <_fflush_r+0x32>
 8002828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800282a:	f7ff fb9a 	bl	8001f62 <__retarget_lock_acquire_recursive>
 800282e:	4628      	mov	r0, r5
 8002830:	4621      	mov	r1, r4
 8002832:	f7ff ff5f 	bl	80026f4 <__sflush_r>
 8002836:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002838:	07da      	lsls	r2, r3, #31
 800283a:	4605      	mov	r5, r0
 800283c:	d4e4      	bmi.n	8002808 <_fflush_r+0xc>
 800283e:	89a3      	ldrh	r3, [r4, #12]
 8002840:	059b      	lsls	r3, r3, #22
 8002842:	d4e1      	bmi.n	8002808 <_fflush_r+0xc>
 8002844:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002846:	f7ff fb8d 	bl	8001f64 <__retarget_lock_release_recursive>
 800284a:	e7dd      	b.n	8002808 <_fflush_r+0xc>

0800284c <__swbuf_r>:
 800284c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284e:	460e      	mov	r6, r1
 8002850:	4614      	mov	r4, r2
 8002852:	4605      	mov	r5, r0
 8002854:	b118      	cbz	r0, 800285e <__swbuf_r+0x12>
 8002856:	6a03      	ldr	r3, [r0, #32]
 8002858:	b90b      	cbnz	r3, 800285e <__swbuf_r+0x12>
 800285a:	f7ff fa7d 	bl	8001d58 <__sinit>
 800285e:	69a3      	ldr	r3, [r4, #24]
 8002860:	60a3      	str	r3, [r4, #8]
 8002862:	89a3      	ldrh	r3, [r4, #12]
 8002864:	071a      	lsls	r2, r3, #28
 8002866:	d501      	bpl.n	800286c <__swbuf_r+0x20>
 8002868:	6923      	ldr	r3, [r4, #16]
 800286a:	b943      	cbnz	r3, 800287e <__swbuf_r+0x32>
 800286c:	4621      	mov	r1, r4
 800286e:	4628      	mov	r0, r5
 8002870:	f000 f82a 	bl	80028c8 <__swsetup_r>
 8002874:	b118      	cbz	r0, 800287e <__swbuf_r+0x32>
 8002876:	f04f 37ff 	mov.w	r7, #4294967295
 800287a:	4638      	mov	r0, r7
 800287c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800287e:	6823      	ldr	r3, [r4, #0]
 8002880:	6922      	ldr	r2, [r4, #16]
 8002882:	1a98      	subs	r0, r3, r2
 8002884:	6963      	ldr	r3, [r4, #20]
 8002886:	b2f6      	uxtb	r6, r6
 8002888:	4283      	cmp	r3, r0
 800288a:	4637      	mov	r7, r6
 800288c:	dc05      	bgt.n	800289a <__swbuf_r+0x4e>
 800288e:	4621      	mov	r1, r4
 8002890:	4628      	mov	r0, r5
 8002892:	f7ff ffb3 	bl	80027fc <_fflush_r>
 8002896:	2800      	cmp	r0, #0
 8002898:	d1ed      	bne.n	8002876 <__swbuf_r+0x2a>
 800289a:	68a3      	ldr	r3, [r4, #8]
 800289c:	3b01      	subs	r3, #1
 800289e:	60a3      	str	r3, [r4, #8]
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	6022      	str	r2, [r4, #0]
 80028a6:	701e      	strb	r6, [r3, #0]
 80028a8:	6962      	ldr	r2, [r4, #20]
 80028aa:	1c43      	adds	r3, r0, #1
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d004      	beq.n	80028ba <__swbuf_r+0x6e>
 80028b0:	89a3      	ldrh	r3, [r4, #12]
 80028b2:	07db      	lsls	r3, r3, #31
 80028b4:	d5e1      	bpl.n	800287a <__swbuf_r+0x2e>
 80028b6:	2e0a      	cmp	r6, #10
 80028b8:	d1df      	bne.n	800287a <__swbuf_r+0x2e>
 80028ba:	4621      	mov	r1, r4
 80028bc:	4628      	mov	r0, r5
 80028be:	f7ff ff9d 	bl	80027fc <_fflush_r>
 80028c2:	2800      	cmp	r0, #0
 80028c4:	d0d9      	beq.n	800287a <__swbuf_r+0x2e>
 80028c6:	e7d6      	b.n	8002876 <__swbuf_r+0x2a>

080028c8 <__swsetup_r>:
 80028c8:	b538      	push	{r3, r4, r5, lr}
 80028ca:	4b29      	ldr	r3, [pc, #164]	@ (8002970 <__swsetup_r+0xa8>)
 80028cc:	4605      	mov	r5, r0
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	460c      	mov	r4, r1
 80028d2:	b118      	cbz	r0, 80028dc <__swsetup_r+0x14>
 80028d4:	6a03      	ldr	r3, [r0, #32]
 80028d6:	b90b      	cbnz	r3, 80028dc <__swsetup_r+0x14>
 80028d8:	f7ff fa3e 	bl	8001d58 <__sinit>
 80028dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028e0:	0719      	lsls	r1, r3, #28
 80028e2:	d422      	bmi.n	800292a <__swsetup_r+0x62>
 80028e4:	06da      	lsls	r2, r3, #27
 80028e6:	d407      	bmi.n	80028f8 <__swsetup_r+0x30>
 80028e8:	2209      	movs	r2, #9
 80028ea:	602a      	str	r2, [r5, #0]
 80028ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028f0:	81a3      	strh	r3, [r4, #12]
 80028f2:	f04f 30ff 	mov.w	r0, #4294967295
 80028f6:	e033      	b.n	8002960 <__swsetup_r+0x98>
 80028f8:	0758      	lsls	r0, r3, #29
 80028fa:	d512      	bpl.n	8002922 <__swsetup_r+0x5a>
 80028fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80028fe:	b141      	cbz	r1, 8002912 <__swsetup_r+0x4a>
 8002900:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002904:	4299      	cmp	r1, r3
 8002906:	d002      	beq.n	800290e <__swsetup_r+0x46>
 8002908:	4628      	mov	r0, r5
 800290a:	f7ff fb2d 	bl	8001f68 <_free_r>
 800290e:	2300      	movs	r3, #0
 8002910:	6363      	str	r3, [r4, #52]	@ 0x34
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002918:	81a3      	strh	r3, [r4, #12]
 800291a:	2300      	movs	r3, #0
 800291c:	6063      	str	r3, [r4, #4]
 800291e:	6923      	ldr	r3, [r4, #16]
 8002920:	6023      	str	r3, [r4, #0]
 8002922:	89a3      	ldrh	r3, [r4, #12]
 8002924:	f043 0308 	orr.w	r3, r3, #8
 8002928:	81a3      	strh	r3, [r4, #12]
 800292a:	6923      	ldr	r3, [r4, #16]
 800292c:	b94b      	cbnz	r3, 8002942 <__swsetup_r+0x7a>
 800292e:	89a3      	ldrh	r3, [r4, #12]
 8002930:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002934:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002938:	d003      	beq.n	8002942 <__swsetup_r+0x7a>
 800293a:	4621      	mov	r1, r4
 800293c:	4628      	mov	r0, r5
 800293e:	f000 f84f 	bl	80029e0 <__smakebuf_r>
 8002942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002946:	f013 0201 	ands.w	r2, r3, #1
 800294a:	d00a      	beq.n	8002962 <__swsetup_r+0x9a>
 800294c:	2200      	movs	r2, #0
 800294e:	60a2      	str	r2, [r4, #8]
 8002950:	6962      	ldr	r2, [r4, #20]
 8002952:	4252      	negs	r2, r2
 8002954:	61a2      	str	r2, [r4, #24]
 8002956:	6922      	ldr	r2, [r4, #16]
 8002958:	b942      	cbnz	r2, 800296c <__swsetup_r+0xa4>
 800295a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800295e:	d1c5      	bne.n	80028ec <__swsetup_r+0x24>
 8002960:	bd38      	pop	{r3, r4, r5, pc}
 8002962:	0799      	lsls	r1, r3, #30
 8002964:	bf58      	it	pl
 8002966:	6962      	ldrpl	r2, [r4, #20]
 8002968:	60a2      	str	r2, [r4, #8]
 800296a:	e7f4      	b.n	8002956 <__swsetup_r+0x8e>
 800296c:	2000      	movs	r0, #0
 800296e:	e7f7      	b.n	8002960 <__swsetup_r+0x98>
 8002970:	20000018 	.word	0x20000018

08002974 <_sbrk_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4d06      	ldr	r5, [pc, #24]	@ (8002990 <_sbrk_r+0x1c>)
 8002978:	2300      	movs	r3, #0
 800297a:	4604      	mov	r4, r0
 800297c:	4608      	mov	r0, r1
 800297e:	602b      	str	r3, [r5, #0]
 8002980:	f7fd fff4 	bl	800096c <_sbrk>
 8002984:	1c43      	adds	r3, r0, #1
 8002986:	d102      	bne.n	800298e <_sbrk_r+0x1a>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	b103      	cbz	r3, 800298e <_sbrk_r+0x1a>
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	bd38      	pop	{r3, r4, r5, pc}
 8002990:	200001cc 	.word	0x200001cc

08002994 <__swhatbuf_r>:
 8002994:	b570      	push	{r4, r5, r6, lr}
 8002996:	460c      	mov	r4, r1
 8002998:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800299c:	2900      	cmp	r1, #0
 800299e:	b096      	sub	sp, #88	@ 0x58
 80029a0:	4615      	mov	r5, r2
 80029a2:	461e      	mov	r6, r3
 80029a4:	da0d      	bge.n	80029c2 <__swhatbuf_r+0x2e>
 80029a6:	89a3      	ldrh	r3, [r4, #12]
 80029a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80029ac:	f04f 0100 	mov.w	r1, #0
 80029b0:	bf14      	ite	ne
 80029b2:	2340      	movne	r3, #64	@ 0x40
 80029b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80029b8:	2000      	movs	r0, #0
 80029ba:	6031      	str	r1, [r6, #0]
 80029bc:	602b      	str	r3, [r5, #0]
 80029be:	b016      	add	sp, #88	@ 0x58
 80029c0:	bd70      	pop	{r4, r5, r6, pc}
 80029c2:	466a      	mov	r2, sp
 80029c4:	f000 f848 	bl	8002a58 <_fstat_r>
 80029c8:	2800      	cmp	r0, #0
 80029ca:	dbec      	blt.n	80029a6 <__swhatbuf_r+0x12>
 80029cc:	9901      	ldr	r1, [sp, #4]
 80029ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80029d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80029d6:	4259      	negs	r1, r3
 80029d8:	4159      	adcs	r1, r3
 80029da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80029de:	e7eb      	b.n	80029b8 <__swhatbuf_r+0x24>

080029e0 <__smakebuf_r>:
 80029e0:	898b      	ldrh	r3, [r1, #12]
 80029e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80029e4:	079d      	lsls	r5, r3, #30
 80029e6:	4606      	mov	r6, r0
 80029e8:	460c      	mov	r4, r1
 80029ea:	d507      	bpl.n	80029fc <__smakebuf_r+0x1c>
 80029ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	6123      	str	r3, [r4, #16]
 80029f4:	2301      	movs	r3, #1
 80029f6:	6163      	str	r3, [r4, #20]
 80029f8:	b003      	add	sp, #12
 80029fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029fc:	ab01      	add	r3, sp, #4
 80029fe:	466a      	mov	r2, sp
 8002a00:	f7ff ffc8 	bl	8002994 <__swhatbuf_r>
 8002a04:	9f00      	ldr	r7, [sp, #0]
 8002a06:	4605      	mov	r5, r0
 8002a08:	4639      	mov	r1, r7
 8002a0a:	4630      	mov	r0, r6
 8002a0c:	f7ff fb18 	bl	8002040 <_malloc_r>
 8002a10:	b948      	cbnz	r0, 8002a26 <__smakebuf_r+0x46>
 8002a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a16:	059a      	lsls	r2, r3, #22
 8002a18:	d4ee      	bmi.n	80029f8 <__smakebuf_r+0x18>
 8002a1a:	f023 0303 	bic.w	r3, r3, #3
 8002a1e:	f043 0302 	orr.w	r3, r3, #2
 8002a22:	81a3      	strh	r3, [r4, #12]
 8002a24:	e7e2      	b.n	80029ec <__smakebuf_r+0xc>
 8002a26:	89a3      	ldrh	r3, [r4, #12]
 8002a28:	6020      	str	r0, [r4, #0]
 8002a2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2e:	81a3      	strh	r3, [r4, #12]
 8002a30:	9b01      	ldr	r3, [sp, #4]
 8002a32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002a36:	b15b      	cbz	r3, 8002a50 <__smakebuf_r+0x70>
 8002a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	f000 f81d 	bl	8002a7c <_isatty_r>
 8002a42:	b128      	cbz	r0, 8002a50 <__smakebuf_r+0x70>
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	81a3      	strh	r3, [r4, #12]
 8002a50:	89a3      	ldrh	r3, [r4, #12]
 8002a52:	431d      	orrs	r5, r3
 8002a54:	81a5      	strh	r5, [r4, #12]
 8002a56:	e7cf      	b.n	80029f8 <__smakebuf_r+0x18>

08002a58 <_fstat_r>:
 8002a58:	b538      	push	{r3, r4, r5, lr}
 8002a5a:	4d07      	ldr	r5, [pc, #28]	@ (8002a78 <_fstat_r+0x20>)
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	4604      	mov	r4, r0
 8002a60:	4608      	mov	r0, r1
 8002a62:	4611      	mov	r1, r2
 8002a64:	602b      	str	r3, [r5, #0]
 8002a66:	f7fd ff59 	bl	800091c <_fstat>
 8002a6a:	1c43      	adds	r3, r0, #1
 8002a6c:	d102      	bne.n	8002a74 <_fstat_r+0x1c>
 8002a6e:	682b      	ldr	r3, [r5, #0]
 8002a70:	b103      	cbz	r3, 8002a74 <_fstat_r+0x1c>
 8002a72:	6023      	str	r3, [r4, #0]
 8002a74:	bd38      	pop	{r3, r4, r5, pc}
 8002a76:	bf00      	nop
 8002a78:	200001cc 	.word	0x200001cc

08002a7c <_isatty_r>:
 8002a7c:	b538      	push	{r3, r4, r5, lr}
 8002a7e:	4d06      	ldr	r5, [pc, #24]	@ (8002a98 <_isatty_r+0x1c>)
 8002a80:	2300      	movs	r3, #0
 8002a82:	4604      	mov	r4, r0
 8002a84:	4608      	mov	r0, r1
 8002a86:	602b      	str	r3, [r5, #0]
 8002a88:	f7fd ff58 	bl	800093c <_isatty>
 8002a8c:	1c43      	adds	r3, r0, #1
 8002a8e:	d102      	bne.n	8002a96 <_isatty_r+0x1a>
 8002a90:	682b      	ldr	r3, [r5, #0]
 8002a92:	b103      	cbz	r3, 8002a96 <_isatty_r+0x1a>
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	bd38      	pop	{r3, r4, r5, pc}
 8002a98:	200001cc 	.word	0x200001cc

08002a9c <_init>:
 8002a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a9e:	bf00      	nop
 8002aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa2:	bc08      	pop	{r3}
 8002aa4:	469e      	mov	lr, r3
 8002aa6:	4770      	bx	lr

08002aa8 <_fini>:
 8002aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aaa:	bf00      	nop
 8002aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aae:	bc08      	pop	{r3}
 8002ab0:	469e      	mov	lr, r3
 8002ab2:	4770      	bx	lr
