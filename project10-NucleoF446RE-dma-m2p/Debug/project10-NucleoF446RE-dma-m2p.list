
project10-NucleoF446RE-dma-m2p.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002adc  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ca0  08002ca0  00003ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002cc0  08002cc0  0000402c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002cc0  08002cc0  00003cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002cc8  08002cc8  0000402c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002cc8  08002cc8  00003cc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002ccc  08002ccc  00003ccc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08002cd0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  2000002c  08002cfc  0000402c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000f4  08002cfc  000040f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000402c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a47  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000184e  00000000  00000000  0000caa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000740  00000000  00000000  0000e2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000058c  00000000  00000000  0000ea38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020355  00000000  00000000  0000efc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009963  00000000  00000000  0002f319  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4bff  00000000  00000000  00038c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd87b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cb4  00000000  00000000  000fd8c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000ff574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000002c 	.word	0x2000002c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08002c88 	.word	0x08002c88

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000030 	.word	0x20000030
 8000200:	08002c88 	.word	0x08002c88

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b988 	b.w	800052c <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	468e      	mov	lr, r1
 800023c:	4604      	mov	r4, r0
 800023e:	4688      	mov	r8, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d962      	bls.n	8000310 <__udivmoddi4+0xdc>
 800024a:	fab2 f682 	clz	r6, r2
 800024e:	b14e      	cbz	r6, 8000264 <__udivmoddi4+0x30>
 8000250:	f1c6 0320 	rsb	r3, r6, #32
 8000254:	fa01 f806 	lsl.w	r8, r1, r6
 8000258:	fa20 f303 	lsr.w	r3, r0, r3
 800025c:	40b7      	lsls	r7, r6
 800025e:	ea43 0808 	orr.w	r8, r3, r8
 8000262:	40b4      	lsls	r4, r6
 8000264:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000268:	fa1f fc87 	uxth.w	ip, r7
 800026c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000270:	0c23      	lsrs	r3, r4, #16
 8000272:	fb0e 8811 	mls	r8, lr, r1, r8
 8000276:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800027a:	fb01 f20c 	mul.w	r2, r1, ip
 800027e:	429a      	cmp	r2, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x62>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f101 30ff 	add.w	r0, r1, #4294967295
 8000288:	f080 80ea 	bcs.w	8000460 <__udivmoddi4+0x22c>
 800028c:	429a      	cmp	r2, r3
 800028e:	f240 80e7 	bls.w	8000460 <__udivmoddi4+0x22c>
 8000292:	3902      	subs	r1, #2
 8000294:	443b      	add	r3, r7
 8000296:	1a9a      	subs	r2, r3, r2
 8000298:	b2a3      	uxth	r3, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002a6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002aa:	459c      	cmp	ip, r3
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0x8e>
 80002ae:	18fb      	adds	r3, r7, r3
 80002b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b4:	f080 80d6 	bcs.w	8000464 <__udivmoddi4+0x230>
 80002b8:	459c      	cmp	ip, r3
 80002ba:	f240 80d3 	bls.w	8000464 <__udivmoddi4+0x230>
 80002be:	443b      	add	r3, r7
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c6:	eba3 030c 	sub.w	r3, r3, ip
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11d      	cbz	r5, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40f3      	lsrs	r3, r6
 80002d0:	2200      	movs	r2, #0
 80002d2:	e9c5 3200 	strd	r3, r2, [r5]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d905      	bls.n	80002ea <__udivmoddi4+0xb6>
 80002de:	b10d      	cbz	r5, 80002e4 <__udivmoddi4+0xb0>
 80002e0:	e9c5 0100 	strd	r0, r1, [r5]
 80002e4:	2100      	movs	r1, #0
 80002e6:	4608      	mov	r0, r1
 80002e8:	e7f5      	b.n	80002d6 <__udivmoddi4+0xa2>
 80002ea:	fab3 f183 	clz	r1, r3
 80002ee:	2900      	cmp	r1, #0
 80002f0:	d146      	bne.n	8000380 <__udivmoddi4+0x14c>
 80002f2:	4573      	cmp	r3, lr
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xc8>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 8105 	bhi.w	8000506 <__udivmoddi4+0x2d2>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000302:	2001      	movs	r0, #1
 8000304:	4690      	mov	r8, r2
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e5      	beq.n	80002d6 <__udivmoddi4+0xa2>
 800030a:	e9c5 4800 	strd	r4, r8, [r5]
 800030e:	e7e2      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	2a00      	cmp	r2, #0
 8000312:	f000 8090 	beq.w	8000436 <__udivmoddi4+0x202>
 8000316:	fab2 f682 	clz	r6, r2
 800031a:	2e00      	cmp	r6, #0
 800031c:	f040 80a4 	bne.w	8000468 <__udivmoddi4+0x234>
 8000320:	1a8a      	subs	r2, r1, r2
 8000322:	0c03      	lsrs	r3, r0, #16
 8000324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000328:	b280      	uxth	r0, r0
 800032a:	b2bc      	uxth	r4, r7
 800032c:	2101      	movs	r1, #1
 800032e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000332:	fb0e 221c 	mls	r2, lr, ip, r2
 8000336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033a:	fb04 f20c 	mul.w	r2, r4, ip
 800033e:	429a      	cmp	r2, r3
 8000340:	d907      	bls.n	8000352 <__udivmoddi4+0x11e>
 8000342:	18fb      	adds	r3, r7, r3
 8000344:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x11c>
 800034a:	429a      	cmp	r2, r3
 800034c:	f200 80e0 	bhi.w	8000510 <__udivmoddi4+0x2dc>
 8000350:	46c4      	mov	ip, r8
 8000352:	1a9b      	subs	r3, r3, r2
 8000354:	fbb3 f2fe 	udiv	r2, r3, lr
 8000358:	fb0e 3312 	mls	r3, lr, r2, r3
 800035c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000360:	fb02 f404 	mul.w	r4, r2, r4
 8000364:	429c      	cmp	r4, r3
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0x144>
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	f102 30ff 	add.w	r0, r2, #4294967295
 800036e:	d202      	bcs.n	8000376 <__udivmoddi4+0x142>
 8000370:	429c      	cmp	r4, r3
 8000372:	f200 80ca 	bhi.w	800050a <__udivmoddi4+0x2d6>
 8000376:	4602      	mov	r2, r0
 8000378:	1b1b      	subs	r3, r3, r4
 800037a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0x98>
 8000380:	f1c1 0620 	rsb	r6, r1, #32
 8000384:	408b      	lsls	r3, r1
 8000386:	fa22 f706 	lsr.w	r7, r2, r6
 800038a:	431f      	orrs	r7, r3
 800038c:	fa0e f401 	lsl.w	r4, lr, r1
 8000390:	fa20 f306 	lsr.w	r3, r0, r6
 8000394:	fa2e fe06 	lsr.w	lr, lr, r6
 8000398:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800039c:	4323      	orrs	r3, r4
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	fa1f fc87 	uxth.w	ip, r7
 80003a6:	fbbe f0f9 	udiv	r0, lr, r9
 80003aa:	0c1c      	lsrs	r4, r3, #16
 80003ac:	fb09 ee10 	mls	lr, r9, r0, lr
 80003b0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003b4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x1a0>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003c6:	f080 809c 	bcs.w	8000502 <__udivmoddi4+0x2ce>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	f240 8099 	bls.w	8000502 <__udivmoddi4+0x2ce>
 80003d0:	3802      	subs	r0, #2
 80003d2:	443c      	add	r4, r7
 80003d4:	eba4 040e 	sub.w	r4, r4, lr
 80003d8:	fa1f fe83 	uxth.w	lr, r3
 80003dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003e0:	fb09 4413 	mls	r4, r9, r3, r4
 80003e4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ec:	45a4      	cmp	ip, r4
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1ce>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003f6:	f080 8082 	bcs.w	80004fe <__udivmoddi4+0x2ca>
 80003fa:	45a4      	cmp	ip, r4
 80003fc:	d97f      	bls.n	80004fe <__udivmoddi4+0x2ca>
 80003fe:	3b02      	subs	r3, #2
 8000400:	443c      	add	r4, r7
 8000402:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000406:	eba4 040c 	sub.w	r4, r4, ip
 800040a:	fba0 ec02 	umull	lr, ip, r0, r2
 800040e:	4564      	cmp	r4, ip
 8000410:	4673      	mov	r3, lr
 8000412:	46e1      	mov	r9, ip
 8000414:	d362      	bcc.n	80004dc <__udivmoddi4+0x2a8>
 8000416:	d05f      	beq.n	80004d8 <__udivmoddi4+0x2a4>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x1fe>
 800041a:	ebb8 0203 	subs.w	r2, r8, r3
 800041e:	eb64 0409 	sbc.w	r4, r4, r9
 8000422:	fa04 f606 	lsl.w	r6, r4, r6
 8000426:	fa22 f301 	lsr.w	r3, r2, r1
 800042a:	431e      	orrs	r6, r3
 800042c:	40cc      	lsrs	r4, r1
 800042e:	e9c5 6400 	strd	r6, r4, [r5]
 8000432:	2100      	movs	r1, #0
 8000434:	e74f      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000436:	fbb1 fcf2 	udiv	ip, r1, r2
 800043a:	0c01      	lsrs	r1, r0, #16
 800043c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000440:	b280      	uxth	r0, r0
 8000442:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000446:	463b      	mov	r3, r7
 8000448:	4638      	mov	r0, r7
 800044a:	463c      	mov	r4, r7
 800044c:	46b8      	mov	r8, r7
 800044e:	46be      	mov	lr, r7
 8000450:	2620      	movs	r6, #32
 8000452:	fbb1 f1f7 	udiv	r1, r1, r7
 8000456:	eba2 0208 	sub.w	r2, r2, r8
 800045a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800045e:	e766      	b.n	800032e <__udivmoddi4+0xfa>
 8000460:	4601      	mov	r1, r0
 8000462:	e718      	b.n	8000296 <__udivmoddi4+0x62>
 8000464:	4610      	mov	r0, r2
 8000466:	e72c      	b.n	80002c2 <__udivmoddi4+0x8e>
 8000468:	f1c6 0220 	rsb	r2, r6, #32
 800046c:	fa2e f302 	lsr.w	r3, lr, r2
 8000470:	40b7      	lsls	r7, r6
 8000472:	40b1      	lsls	r1, r6
 8000474:	fa20 f202 	lsr.w	r2, r0, r2
 8000478:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800047c:	430a      	orrs	r2, r1
 800047e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000482:	b2bc      	uxth	r4, r7
 8000484:	fb0e 3318 	mls	r3, lr, r8, r3
 8000488:	0c11      	lsrs	r1, r2, #16
 800048a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048e:	fb08 f904 	mul.w	r9, r8, r4
 8000492:	40b0      	lsls	r0, r6
 8000494:	4589      	cmp	r9, r1
 8000496:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800049a:	b280      	uxth	r0, r0
 800049c:	d93e      	bls.n	800051c <__udivmoddi4+0x2e8>
 800049e:	1879      	adds	r1, r7, r1
 80004a0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004a4:	d201      	bcs.n	80004aa <__udivmoddi4+0x276>
 80004a6:	4589      	cmp	r9, r1
 80004a8:	d81f      	bhi.n	80004ea <__udivmoddi4+0x2b6>
 80004aa:	eba1 0109 	sub.w	r1, r1, r9
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fb09 f804 	mul.w	r8, r9, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	b292      	uxth	r2, r2
 80004bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c0:	4542      	cmp	r2, r8
 80004c2:	d229      	bcs.n	8000518 <__udivmoddi4+0x2e4>
 80004c4:	18ba      	adds	r2, r7, r2
 80004c6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ca:	d2c4      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d2c2      	bcs.n	8000456 <__udivmoddi4+0x222>
 80004d0:	f1a9 0102 	sub.w	r1, r9, #2
 80004d4:	443a      	add	r2, r7
 80004d6:	e7be      	b.n	8000456 <__udivmoddi4+0x222>
 80004d8:	45f0      	cmp	r8, lr
 80004da:	d29d      	bcs.n	8000418 <__udivmoddi4+0x1e4>
 80004dc:	ebbe 0302 	subs.w	r3, lr, r2
 80004e0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004e4:	3801      	subs	r0, #1
 80004e6:	46e1      	mov	r9, ip
 80004e8:	e796      	b.n	8000418 <__udivmoddi4+0x1e4>
 80004ea:	eba7 0909 	sub.w	r9, r7, r9
 80004ee:	4449      	add	r1, r9
 80004f0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004f4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f8:	fb09 f804 	mul.w	r8, r9, r4
 80004fc:	e7db      	b.n	80004b6 <__udivmoddi4+0x282>
 80004fe:	4673      	mov	r3, lr
 8000500:	e77f      	b.n	8000402 <__udivmoddi4+0x1ce>
 8000502:	4650      	mov	r0, sl
 8000504:	e766      	b.n	80003d4 <__udivmoddi4+0x1a0>
 8000506:	4608      	mov	r0, r1
 8000508:	e6fd      	b.n	8000306 <__udivmoddi4+0xd2>
 800050a:	443b      	add	r3, r7
 800050c:	3a02      	subs	r2, #2
 800050e:	e733      	b.n	8000378 <__udivmoddi4+0x144>
 8000510:	f1ac 0c02 	sub.w	ip, ip, #2
 8000514:	443b      	add	r3, r7
 8000516:	e71c      	b.n	8000352 <__udivmoddi4+0x11e>
 8000518:	4649      	mov	r1, r9
 800051a:	e79c      	b.n	8000456 <__udivmoddi4+0x222>
 800051c:	eba1 0109 	sub.w	r1, r1, r9
 8000520:	46c4      	mov	ip, r8
 8000522:	fbb1 f9fe 	udiv	r9, r1, lr
 8000526:	fb09 f804 	mul.w	r8, r9, r4
 800052a:	e7c4      	b.n	80004b6 <__udivmoddi4+0x282>

0800052c <__aeabi_idiv0>:
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripher als, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 fa26 	bl	8000984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f81c 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f8d2 	bl	80006e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000540:	f000 f8b0 	bl	80006a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000544:	f000 f884 	bl	8000650 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_DMA(&huart2, txBuffer, Buffer_Size);
 8000548:	221e      	movs	r2, #30
 800054a:	4907      	ldr	r1, [pc, #28]	@ (8000568 <main+0x38>)
 800054c:	4807      	ldr	r0, [pc, #28]	@ (800056c <main+0x3c>)
 800054e:	f001 ff31 	bl	80023b4 <HAL_UART_Transmit_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000552:	2120      	movs	r1, #32
 8000554:	4806      	ldr	r0, [pc, #24]	@ (8000570 <main+0x40>)
 8000556:	f001 f8da 	bl	800170e <HAL_GPIO_TogglePin>
	HAL_Delay(500);
 800055a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800055e:	f000 fa83 	bl	8000a68 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000562:	bf00      	nop
 8000564:	e7f5      	b.n	8000552 <main+0x22>
 8000566:	bf00      	nop
 8000568:	20000000 	.word	0x20000000
 800056c:	20000048 	.word	0x20000048
 8000570:	40020000 	.word	0x40020000

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	@ 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 031c 	add.w	r3, r7, #28
 800057e:	2234      	movs	r2, #52	@ 0x34
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fb54 	bl	8002c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	4b2a      	ldr	r3, [pc, #168]	@ (8000648 <SystemClock_Config+0xd4>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a0:	4a29      	ldr	r2, [pc, #164]	@ (8000648 <SystemClock_Config+0xd4>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a8:	4b27      	ldr	r3, [pc, #156]	@ (8000648 <SystemClock_Config+0xd4>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
 80005b8:	4b24      	ldr	r3, [pc, #144]	@ (800064c <SystemClock_Config+0xd8>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005c0:	4a22      	ldr	r2, [pc, #136]	@ (800064c <SystemClock_Config+0xd8>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b20      	ldr	r3, [pc, #128]	@ (800064c <SystemClock_Config+0xd8>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005d0:	603b      	str	r3, [r7, #0]
 80005d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005e8:	2310      	movs	r3, #16
 80005ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005ec:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005f0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f2:	2304      	movs	r3, #4
 80005f4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80005f6:	2302      	movs	r3, #2
 80005f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005fa:	2302      	movs	r3, #2
 80005fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 031c 	add.w	r3, r7, #28
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fbe8 	bl	8001dd8 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800060e:	f000 f89b 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 0308 	add.w	r3, r7, #8
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f001 f888 	bl	8001744 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800063a:	f000 f885 	bl	8000748 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	@ 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000654:	4b11      	ldr	r3, [pc, #68]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 8000656:	4a12      	ldr	r2, [pc, #72]	@ (80006a0 <MX_USART2_UART_Init+0x50>)
 8000658:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800065a:	4b10      	ldr	r3, [pc, #64]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 800065c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000660:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000662:	4b0e      	ldr	r3, [pc, #56]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000668:	4b0c      	ldr	r3, [pc, #48]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 800066a:	2200      	movs	r2, #0
 800066c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 8000670:	2200      	movs	r2, #0
 8000672:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000674:	4b09      	ldr	r3, [pc, #36]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 8000676:	220c      	movs	r2, #12
 8000678:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067a:	4b08      	ldr	r3, [pc, #32]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	@ (800069c <MX_USART2_UART_Init+0x4c>)
 8000688:	f001 fe44 	bl	8002314 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000692:	f000 f859 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000048 	.word	0x20000048
 80006a0:	40004400 	.word	0x40004400

080006a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_DMA_Init+0x3c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a0b      	ldr	r2, [pc, #44]	@ (80006e0 <MX_DMA_Init+0x3c>)
 80006b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b09      	ldr	r3, [pc, #36]	@ (80006e0 <MX_DMA_Init+0x3c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2100      	movs	r1, #0
 80006ca:	2011      	movs	r0, #17
 80006cc:	f000 facb 	bl	8000c66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006d0:	2011      	movs	r0, #17
 80006d2:	f000 fae4 	bl	8000c9e <HAL_NVIC_EnableIRQ>

}
 80006d6:	bf00      	nop
 80006d8:	3708      	adds	r7, #8
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <MX_GPIO_Init+0x5c>)
 80006fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000700:	4a0f      	ldr	r2, [pc, #60]	@ (8000740 <MX_GPIO_Init+0x5c>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	6313      	str	r3, [r2, #48]	@ 0x30
 8000708:	4b0d      	ldr	r3, [pc, #52]	@ (8000740 <MX_GPIO_Init+0x5c>)
 800070a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070c:	f003 0301 	and.w	r3, r3, #1
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000714:	2200      	movs	r2, #0
 8000716:	2120      	movs	r1, #32
 8000718:	480a      	ldr	r0, [pc, #40]	@ (8000744 <MX_GPIO_Init+0x60>)
 800071a:	f000 ffdf 	bl	80016dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800071e:	2320      	movs	r3, #32
 8000720:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000722:	2301      	movs	r3, #1
 8000724:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000726:	2300      	movs	r3, #0
 8000728:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072a:	2300      	movs	r3, #0
 800072c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072e:	1d3b      	adds	r3, r7, #4
 8000730:	4619      	mov	r1, r3
 8000732:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_GPIO_Init+0x60>)
 8000734:	f000 fe3e 	bl	80013b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000738:	bf00      	nop
 800073a:	3718      	adds	r7, #24
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	40023800 	.word	0x40023800
 8000744:	40020000 	.word	0x40020000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	bf00      	nop
 8000752:	e7fd      	b.n	8000750 <Error_Handler+0x8>

08000754 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <HAL_MspInit+0x4c>)
 8000760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000762:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <HAL_MspInit+0x4c>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000768:	6453      	str	r3, [r2, #68]	@ 0x44
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <HAL_MspInit+0x4c>)
 800076c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800076e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	603b      	str	r3, [r7, #0]
 800077a:	4b09      	ldr	r3, [pc, #36]	@ (80007a0 <HAL_MspInit+0x4c>)
 800077c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800077e:	4a08      	ldr	r2, [pc, #32]	@ (80007a0 <HAL_MspInit+0x4c>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000784:	6413      	str	r3, [r2, #64]	@ 0x40
 8000786:	4b06      	ldr	r3, [pc, #24]	@ (80007a0 <HAL_MspInit+0x4c>)
 8000788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800078a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800078e:	603b      	str	r3, [r7, #0]
 8000790:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000792:	2007      	movs	r0, #7
 8000794:	f000 fa5c 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40023800 	.word	0x40023800

080007a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	@ 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a30      	ldr	r2, [pc, #192]	@ (8000884 <HAL_UART_MspInit+0xe0>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d159      	bne.n	800087a <HAL_UART_MspInit+0xd6>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b2f      	ldr	r3, [pc, #188]	@ (8000888 <HAL_UART_MspInit+0xe4>)
 80007cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ce:	4a2e      	ldr	r2, [pc, #184]	@ (8000888 <HAL_UART_MspInit+0xe4>)
 80007d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d6:	4b2c      	ldr	r3, [pc, #176]	@ (8000888 <HAL_UART_MspInit+0xe4>)
 80007d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e2:	2300      	movs	r3, #0
 80007e4:	60fb      	str	r3, [r7, #12]
 80007e6:	4b28      	ldr	r3, [pc, #160]	@ (8000888 <HAL_UART_MspInit+0xe4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	4a27      	ldr	r2, [pc, #156]	@ (8000888 <HAL_UART_MspInit+0xe4>)
 80007ec:	f043 0301 	orr.w	r3, r3, #1
 80007f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f2:	4b25      	ldr	r3, [pc, #148]	@ (8000888 <HAL_UART_MspInit+0xe4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007fe:	230c      	movs	r3, #12
 8000800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080a:	2303      	movs	r3, #3
 800080c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800080e:	2307      	movs	r3, #7
 8000810:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	4619      	mov	r1, r3
 8000818:	481c      	ldr	r0, [pc, #112]	@ (800088c <HAL_UART_MspInit+0xe8>)
 800081a:	f000 fdcb 	bl	80013b4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800081e:	4b1c      	ldr	r3, [pc, #112]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000820:	4a1c      	ldr	r2, [pc, #112]	@ (8000894 <HAL_UART_MspInit+0xf0>)
 8000822:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000826:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800082a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <HAL_UART_MspInit+0xec>)
 800082e:	2240      	movs	r2, #64	@ 0x40
 8000830:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000832:	4b17      	ldr	r3, [pc, #92]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000838:	4b15      	ldr	r3, [pc, #84]	@ (8000890 <HAL_UART_MspInit+0xec>)
 800083a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800083e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000840:	4b13      	ldr	r3, [pc, #76]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000846:	4b12      	ldr	r3, [pc, #72]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800084c:	4b10      	ldr	r3, [pc, #64]	@ (8000890 <HAL_UART_MspInit+0xec>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000852:	4b0f      	ldr	r3, [pc, #60]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000858:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <HAL_UART_MspInit+0xec>)
 800085a:	2200      	movs	r2, #0
 800085c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800085e:	480c      	ldr	r0, [pc, #48]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000860:	f000 fa38 	bl	8000cd4 <HAL_DMA_Init>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800086a:	f7ff ff6d 	bl	8000748 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	4a07      	ldr	r2, [pc, #28]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000872:	639a      	str	r2, [r3, #56]	@ 0x38
 8000874:	4a06      	ldr	r2, [pc, #24]	@ (8000890 <HAL_UART_MspInit+0xec>)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800087a:	bf00      	nop
 800087c:	3728      	adds	r7, #40	@ 0x28
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40004400 	.word	0x40004400
 8000888:	40023800 	.word	0x40023800
 800088c:	40020000 	.word	0x40020000
 8000890:	20000090 	.word	0x20000090
 8000894:	400260a0 	.word	0x400260a0

08000898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <NMI_Handler+0x4>

080008a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <HardFault_Handler+0x4>

080008a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <MemManage_Handler+0x4>

080008b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <UsageFault_Handler+0x4>

080008c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ee:	f000 f89b 	bl	8000a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80008fc:	4802      	ldr	r0, [pc, #8]	@ (8000908 <DMA1_Stream6_IRQHandler+0x10>)
 80008fe:	f000 faef 	bl	8000ee0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000090 	.word	0x20000090

0800090c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000910:	4b06      	ldr	r3, [pc, #24]	@ (800092c <SystemInit+0x20>)
 8000912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000916:	4a05      	ldr	r2, [pc, #20]	@ (800092c <SystemInit+0x20>)
 8000918:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800091c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000ed00 	.word	0xe000ed00

08000930 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000930:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000968 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000934:	f7ff ffea 	bl	800090c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000938:	480c      	ldr	r0, [pc, #48]	@ (800096c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800093a:	490d      	ldr	r1, [pc, #52]	@ (8000970 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800093c:	4a0d      	ldr	r2, [pc, #52]	@ (8000974 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000940:	e002      	b.n	8000948 <LoopCopyDataInit>

08000942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000946:	3304      	adds	r3, #4

08000948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800094a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800094c:	d3f9      	bcc.n	8000942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800094e:	4a0a      	ldr	r2, [pc, #40]	@ (8000978 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000950:	4c0a      	ldr	r4, [pc, #40]	@ (800097c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000954:	e001      	b.n	800095a <LoopFillZerobss>

08000956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000958:	3204      	adds	r2, #4

0800095a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800095a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800095c:	d3fb      	bcc.n	8000956 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800095e:	f002 f96f 	bl	8002c40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000962:	f7ff fde5 	bl	8000530 <main>
  bx  lr    
 8000966:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000968:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800096c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000970:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000974:	08002cd0 	.word	0x08002cd0
  ldr r2, =_sbss
 8000978:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 800097c:	200000f4 	.word	0x200000f4

08000980 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000980:	e7fe      	b.n	8000980 <ADC_IRQHandler>
	...

08000984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <HAL_Init+0x40>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0d      	ldr	r2, [pc, #52]	@ (80009c4 <HAL_Init+0x40>)
 800098e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0a      	ldr	r2, [pc, #40]	@ (80009c4 <HAL_Init+0x40>)
 800099a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800099e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a07      	ldr	r2, [pc, #28]	@ (80009c4 <HAL_Init+0x40>)
 80009a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ac:	2003      	movs	r0, #3
 80009ae:	f000 f94f 	bl	8000c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f808 	bl	80009c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009b8:	f7ff fecc 	bl	8000754 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009bc:	2300      	movs	r3, #0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023c00 	.word	0x40023c00

080009c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009d0:	4b12      	ldr	r3, [pc, #72]	@ (8000a1c <HAL_InitTick+0x54>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b12      	ldr	r3, [pc, #72]	@ (8000a20 <HAL_InitTick+0x58>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	4619      	mov	r1, r3
 80009da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009de:	fbb3 f3f1 	udiv	r3, r3, r1
 80009e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80009e6:	4618      	mov	r0, r3
 80009e8:	f000 f967 	bl	8000cba <HAL_SYSTICK_Config>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00e      	b.n	8000a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	2b0f      	cmp	r3, #15
 80009fa:	d80a      	bhi.n	8000a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009fc:	2200      	movs	r2, #0
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f000 f92f 	bl	8000c66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a08:	4a06      	ldr	r2, [pc, #24]	@ (8000a24 <HAL_InitTick+0x5c>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e000      	b.n	8000a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3708      	adds	r7, #8
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	20000020 	.word	0x20000020
 8000a20:	20000028 	.word	0x20000028
 8000a24:	20000024 	.word	0x20000024

08000a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a2c:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <HAL_IncTick+0x20>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <HAL_IncTick+0x24>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4413      	add	r3, r2
 8000a38:	4a04      	ldr	r2, [pc, #16]	@ (8000a4c <HAL_IncTick+0x24>)
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000028 	.word	0x20000028
 8000a4c:	200000f0 	.word	0x200000f0

08000a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return uwTick;
 8000a54:	4b03      	ldr	r3, [pc, #12]	@ (8000a64 <HAL_GetTick+0x14>)
 8000a56:	681b      	ldr	r3, [r3, #0]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	200000f0 	.word	0x200000f0

08000a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a70:	f7ff ffee 	bl	8000a50 <HAL_GetTick>
 8000a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a80:	d005      	beq.n	8000a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a82:	4b0a      	ldr	r3, [pc, #40]	@ (8000aac <HAL_Delay+0x44>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	461a      	mov	r2, r3
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	4413      	add	r3, r2
 8000a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a8e:	bf00      	nop
 8000a90:	f7ff ffde 	bl	8000a50 <HAL_GetTick>
 8000a94:	4602      	mov	r2, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	68fa      	ldr	r2, [r7, #12]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d8f7      	bhi.n	8000a90 <HAL_Delay+0x28>
  {
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20000028 	.word	0x20000028

08000ab0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0307 	and.w	r3, r3, #7
 8000abe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ac2:	68db      	ldr	r3, [r3, #12]
 8000ac4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac6:	68ba      	ldr	r2, [r7, #8]
 8000ac8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000acc:	4013      	ands	r3, r2
 8000ace:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad4:	68bb      	ldr	r3, [r7, #8]
 8000ad6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000adc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ae2:	4a04      	ldr	r2, [pc, #16]	@ (8000af4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	60d3      	str	r3, [r2, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	e000ed00 	.word	0xe000ed00

08000af8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000afc:	4b04      	ldr	r3, [pc, #16]	@ (8000b10 <__NVIC_GetPriorityGrouping+0x18>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	0a1b      	lsrs	r3, r3, #8
 8000b02:	f003 0307 	and.w	r3, r3, #7
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db0b      	blt.n	8000b3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	f003 021f 	and.w	r2, r3, #31
 8000b2c:	4907      	ldr	r1, [pc, #28]	@ (8000b4c <__NVIC_EnableIRQ+0x38>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	095b      	lsrs	r3, r3, #5
 8000b34:	2001      	movs	r0, #1
 8000b36:	fa00 f202 	lsl.w	r2, r0, r2
 8000b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	e000e100 	.word	0xe000e100

08000b50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	db0a      	blt.n	8000b7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	b2da      	uxtb	r2, r3
 8000b68:	490c      	ldr	r1, [pc, #48]	@ (8000b9c <__NVIC_SetPriority+0x4c>)
 8000b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6e:	0112      	lsls	r2, r2, #4
 8000b70:	b2d2      	uxtb	r2, r2
 8000b72:	440b      	add	r3, r1
 8000b74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b78:	e00a      	b.n	8000b90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4908      	ldr	r1, [pc, #32]	@ (8000ba0 <__NVIC_SetPriority+0x50>)
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	f003 030f 	and.w	r3, r3, #15
 8000b86:	3b04      	subs	r3, #4
 8000b88:	0112      	lsls	r2, r2, #4
 8000b8a:	b2d2      	uxtb	r2, r2
 8000b8c:	440b      	add	r3, r1
 8000b8e:	761a      	strb	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b089      	sub	sp, #36	@ 0x24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f003 0307 	and.w	r3, r3, #7
 8000bb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb8:	69fb      	ldr	r3, [r7, #28]
 8000bba:	f1c3 0307 	rsb	r3, r3, #7
 8000bbe:	2b04      	cmp	r3, #4
 8000bc0:	bf28      	it	cs
 8000bc2:	2304      	movcs	r3, #4
 8000bc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	2b06      	cmp	r3, #6
 8000bcc:	d902      	bls.n	8000bd4 <NVIC_EncodePriority+0x30>
 8000bce:	69fb      	ldr	r3, [r7, #28]
 8000bd0:	3b03      	subs	r3, #3
 8000bd2:	e000      	b.n	8000bd6 <NVIC_EncodePriority+0x32>
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43da      	mvns	r2, r3
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	401a      	ands	r2, r3
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bec:	f04f 31ff 	mov.w	r1, #4294967295
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf6:	43d9      	mvns	r1, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bfc:	4313      	orrs	r3, r2
         );
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3724      	adds	r7, #36	@ 0x24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
	...

08000c0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c1c:	d301      	bcc.n	8000c22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00f      	b.n	8000c42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c22:	4a0a      	ldr	r2, [pc, #40]	@ (8000c4c <SysTick_Config+0x40>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c2a:	210f      	movs	r1, #15
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f7ff ff8e 	bl	8000b50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <SysTick_Config+0x40>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <SysTick_Config+0x40>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c58:	6878      	ldr	r0, [r7, #4]
 8000c5a:	f7ff ff29 	bl	8000ab0 <__NVIC_SetPriorityGrouping>
}
 8000c5e:	bf00      	nop
 8000c60:	3708      	adds	r7, #8
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}

08000c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c66:	b580      	push	{r7, lr}
 8000c68:	b086      	sub	sp, #24
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	60b9      	str	r1, [r7, #8]
 8000c70:	607a      	str	r2, [r7, #4]
 8000c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c74:	2300      	movs	r3, #0
 8000c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c78:	f7ff ff3e 	bl	8000af8 <__NVIC_GetPriorityGrouping>
 8000c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	68b9      	ldr	r1, [r7, #8]
 8000c82:	6978      	ldr	r0, [r7, #20]
 8000c84:	f7ff ff8e 	bl	8000ba4 <NVIC_EncodePriority>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c8e:	4611      	mov	r1, r2
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff ff5d 	bl	8000b50 <__NVIC_SetPriority>
}
 8000c96:	bf00      	nop
 8000c98:	3718      	adds	r7, #24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff ff31 	bl	8000b14 <__NVIC_EnableIRQ>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b082      	sub	sp, #8
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff ffa2 	bl	8000c0c <SysTick_Config>
 8000cc8:	4603      	mov	r3, r0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff feb6 	bl	8000a50 <HAL_GetTick>
 8000ce4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d101      	bne.n	8000cf0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000cec:	2301      	movs	r3, #1
 8000cee:	e099      	b.n	8000e24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	f022 0201 	bic.w	r2, r2, #1
 8000d0e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d10:	e00f      	b.n	8000d32 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d12:	f7ff fe9d 	bl	8000a50 <HAL_GetTick>
 8000d16:	4602      	mov	r2, r0
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	1ad3      	subs	r3, r2, r3
 8000d1c:	2b05      	cmp	r3, #5
 8000d1e:	d908      	bls.n	8000d32 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2220      	movs	r2, #32
 8000d24:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2203      	movs	r2, #3
 8000d2a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000d2e:	2303      	movs	r3, #3
 8000d30:	e078      	b.n	8000e24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f003 0301 	and.w	r3, r3, #1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e8      	bne.n	8000d12 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	4b38      	ldr	r3, [pc, #224]	@ (8000e2c <HAL_DMA_Init+0x158>)
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	691b      	ldr	r3, [r3, #16]
 8000d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000d6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000d76:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a1b      	ldr	r3, [r3, #32]
 8000d7c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000d7e:	697a      	ldr	r2, [r7, #20]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d88:	2b04      	cmp	r3, #4
 8000d8a:	d107      	bne.n	8000d9c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d94:	4313      	orrs	r3, r2
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	4313      	orrs	r3, r2
 8000d9a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	695b      	ldr	r3, [r3, #20]
 8000daa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	f023 0307 	bic.w	r3, r3, #7
 8000db2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db8:	697a      	ldr	r2, [r7, #20]
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	d117      	bne.n	8000df6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00e      	beq.n	8000df6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f000 fa6f 	bl	80012bc <DMA_CheckFifoParam>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d008      	beq.n	8000df6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2240      	movs	r2, #64	@ 0x40
 8000de8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	2201      	movs	r2, #1
 8000dee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000df2:	2301      	movs	r3, #1
 8000df4:	e016      	b.n	8000e24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 fa26 	bl	8001250 <DMA_CalcBaseAndBitshift>
 8000e04:	4603      	mov	r3, r0
 8000e06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e0c:	223f      	movs	r2, #63	@ 0x3f
 8000e0e:	409a      	lsls	r2, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	f010803f 	.word	0xf010803f

08000e30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
 8000e3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d101      	bne.n	8000e56 <HAL_DMA_Start_IT+0x26>
 8000e52:	2302      	movs	r3, #2
 8000e54:	e040      	b.n	8000ed8 <HAL_DMA_Start_IT+0xa8>
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d12f      	bne.n	8000eca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2202      	movs	r2, #2
 8000e6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	2200      	movs	r2, #0
 8000e76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	68f8      	ldr	r0, [r7, #12]
 8000e80:	f000 f9b8 	bl	80011f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e88:	223f      	movs	r2, #63	@ 0x3f
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f042 0216 	orr.w	r2, r2, #22
 8000e9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d007      	beq.n	8000eb8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681a      	ldr	r2, [r3, #0]
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f042 0208 	orr.w	r2, r2, #8
 8000eb6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0201 	orr.w	r2, r2, #1
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	e005      	b.n	8000ed6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2200      	movs	r2, #0
 8000ece:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8000ed6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000eec:	4b8e      	ldr	r3, [pc, #568]	@ (8001128 <HAL_DMA_IRQHandler+0x248>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a8e      	ldr	r2, [pc, #568]	@ (800112c <HAL_DMA_IRQHandler+0x24c>)
 8000ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef6:	0a9b      	lsrs	r3, r3, #10
 8000ef8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000efe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8000f00:	693b      	ldr	r3, [r7, #16]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f0a:	2208      	movs	r2, #8
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	4013      	ands	r3, r2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d01a      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f003 0304 	and.w	r3, r3, #4
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d013      	beq.n	8000f4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f022 0204 	bic.w	r2, r2, #4
 8000f32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f38:	2208      	movs	r2, #8
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	693b      	ldr	r3, [r7, #16]
 8000f3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f44:	f043 0201 	orr.w	r2, r3, #1
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f50:	2201      	movs	r2, #1
 8000f52:	409a      	lsls	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d012      	beq.n	8000f82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	695b      	ldr	r3, [r3, #20]
 8000f62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00b      	beq.n	8000f82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f6e:	2201      	movs	r2, #1
 8000f70:	409a      	lsls	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f7a:	f043 0202 	orr.w	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f86:	2204      	movs	r2, #4
 8000f88:	409a      	lsls	r2, r3
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d012      	beq.n	8000fb8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 0302 	and.w	r3, r3, #2
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d00b      	beq.n	8000fb8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000fb0:	f043 0204 	orr.w	r2, r3, #4
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d043      	beq.n	8001050 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0308 	and.w	r3, r3, #8
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d03c      	beq.n	8001050 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fda:	2210      	movs	r2, #16
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d018      	beq.n	8001022 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d108      	bne.n	8001010 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	2b00      	cmp	r3, #0
 8001004:	d024      	beq.n	8001050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	4798      	blx	r3
 800100e:	e01f      	b.n	8001050 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001014:	2b00      	cmp	r3, #0
 8001016:	d01b      	beq.n	8001050 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	4798      	blx	r3
 8001020:	e016      	b.n	8001050 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800102c:	2b00      	cmp	r3, #0
 800102e:	d107      	bne.n	8001040 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f022 0208 	bic.w	r2, r2, #8
 800103e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001054:	2220      	movs	r2, #32
 8001056:	409a      	lsls	r2, r3
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 808f 	beq.w	8001180 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0310 	and.w	r3, r3, #16
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 8087 	beq.w	8001180 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001076:	2220      	movs	r2, #32
 8001078:	409a      	lsls	r2, r3
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b05      	cmp	r3, #5
 8001088:	d136      	bne.n	80010f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f022 0216 	bic.w	r2, r2, #22
 8001098:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80010a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <HAL_DMA_IRQHandler+0x1da>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d007      	beq.n	80010ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f022 0208 	bic.w	r2, r2, #8
 80010c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80010ce:	223f      	movs	r2, #63	@ 0x3f
 80010d0:	409a      	lsls	r2, r3
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d07e      	beq.n	80011ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	4798      	blx	r3
        }
        return;
 80010f6:	e079      	b.n	80011ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d01d      	beq.n	8001142 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d10d      	bne.n	8001130 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001118:	2b00      	cmp	r3, #0
 800111a:	d031      	beq.n	8001180 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	4798      	blx	r3
 8001124:	e02c      	b.n	8001180 <HAL_DMA_IRQHandler+0x2a0>
 8001126:	bf00      	nop
 8001128:	20000020 	.word	0x20000020
 800112c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001134:	2b00      	cmp	r3, #0
 8001136:	d023      	beq.n	8001180 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	4798      	blx	r3
 8001140:	e01e      	b.n	8001180 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800114c:	2b00      	cmp	r3, #0
 800114e:	d10f      	bne.n	8001170 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f022 0210 	bic.w	r2, r2, #16
 800115e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2201      	movs	r2, #1
 8001164:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001184:	2b00      	cmp	r3, #0
 8001186:	d032      	beq.n	80011ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800118c:	f003 0301 	and.w	r3, r3, #1
 8001190:	2b00      	cmp	r3, #0
 8001192:	d022      	beq.n	80011da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2205      	movs	r2, #5
 8001198:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f022 0201 	bic.w	r2, r2, #1
 80011aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	3301      	adds	r3, #1
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	697a      	ldr	r2, [r7, #20]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d307      	bcc.n	80011c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0301 	and.w	r3, r3, #1
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f2      	bne.n	80011ac <HAL_DMA_IRQHandler+0x2cc>
 80011c6:	e000      	b.n	80011ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80011c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2201      	movs	r2, #1
 80011ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2200      	movs	r2, #0
 80011d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	4798      	blx	r3
 80011ea:	e000      	b.n	80011ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80011ec:	bf00      	nop
    }
  }
}
 80011ee:	3718      	adds	r7, #24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
 8001200:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001210:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	683a      	ldr	r2, [r7, #0]
 8001218:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	2b40      	cmp	r3, #64	@ 0x40
 8001220:	d108      	bne.n	8001234 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001232:	e007      	b.n	8001244 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	68ba      	ldr	r2, [r7, #8]
 800123a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
}
 8001244:	bf00      	nop
 8001246:	3714      	adds	r7, #20
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001250:	b480      	push	{r7}
 8001252:	b085      	sub	sp, #20
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	b2db      	uxtb	r3, r3
 800125e:	3b10      	subs	r3, #16
 8001260:	4a14      	ldr	r2, [pc, #80]	@ (80012b4 <DMA_CalcBaseAndBitshift+0x64>)
 8001262:	fba2 2303 	umull	r2, r3, r2, r3
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800126a:	4a13      	ldr	r2, [pc, #76]	@ (80012b8 <DMA_CalcBaseAndBitshift+0x68>)
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	461a      	mov	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d909      	bls.n	8001292 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001286:	f023 0303 	bic.w	r3, r3, #3
 800128a:	1d1a      	adds	r2, r3, #4
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001290:	e007      	b.n	80012a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800129a:	f023 0303 	bic.w	r3, r3, #3
 800129e:	687a      	ldr	r2, [r7, #4]
 80012a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	aaaaaaab 	.word	0xaaaaaaab
 80012b8:	08002cb8 	.word	0x08002cb8

080012bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d11f      	bne.n	8001316 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	2b03      	cmp	r3, #3
 80012da:	d856      	bhi.n	800138a <DMA_CheckFifoParam+0xce>
 80012dc:	a201      	add	r2, pc, #4	@ (adr r2, 80012e4 <DMA_CheckFifoParam+0x28>)
 80012de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e2:	bf00      	nop
 80012e4:	080012f5 	.word	0x080012f5
 80012e8:	08001307 	.word	0x08001307
 80012ec:	080012f5 	.word	0x080012f5
 80012f0:	0800138b 	.word	0x0800138b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d046      	beq.n	800138e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001304:	e043      	b.n	800138e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800130a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800130e:	d140      	bne.n	8001392 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001314:	e03d      	b.n	8001392 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800131e:	d121      	bne.n	8001364 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d837      	bhi.n	8001396 <DMA_CheckFifoParam+0xda>
 8001326:	a201      	add	r2, pc, #4	@ (adr r2, 800132c <DMA_CheckFifoParam+0x70>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	0800133d 	.word	0x0800133d
 8001330:	08001343 	.word	0x08001343
 8001334:	0800133d 	.word	0x0800133d
 8001338:	08001355 	.word	0x08001355
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	73fb      	strb	r3, [r7, #15]
      break;
 8001340:	e030      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001346:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d025      	beq.n	800139a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001352:	e022      	b.n	800139a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001358:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800135c:	d11f      	bne.n	800139e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800135e:	2301      	movs	r3, #1
 8001360:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001362:	e01c      	b.n	800139e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b02      	cmp	r3, #2
 8001368:	d903      	bls.n	8001372 <DMA_CheckFifoParam+0xb6>
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	2b03      	cmp	r3, #3
 800136e:	d003      	beq.n	8001378 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001370:	e018      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	73fb      	strb	r3, [r7, #15]
      break;
 8001376:	e015      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800137c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d00e      	beq.n	80013a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	73fb      	strb	r3, [r7, #15]
      break;
 8001388:	e00b      	b.n	80013a2 <DMA_CheckFifoParam+0xe6>
      break;
 800138a:	bf00      	nop
 800138c:	e00a      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
      break;
 800138e:	bf00      	nop
 8001390:	e008      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001392:	bf00      	nop
 8001394:	e006      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
      break;
 8001396:	bf00      	nop
 8001398:	e004      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
      break;
 800139a:	bf00      	nop
 800139c:	e002      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800139e:	bf00      	nop
 80013a0:	e000      	b.n	80013a4 <DMA_CheckFifoParam+0xe8>
      break;
 80013a2:	bf00      	nop
    }
  } 
  
  return status; 
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop

080013b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
 80013ce:	e165      	b.n	800169c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	f040 8154 	bne.w	8001696 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 0303 	and.w	r3, r3, #3
 80013f6:	2b01      	cmp	r3, #1
 80013f8:	d005      	beq.n	8001406 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001402:	2b02      	cmp	r3, #2
 8001404:	d130      	bne.n	8001468 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	2203      	movs	r2, #3
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	68da      	ldr	r2, [r3, #12]
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	005b      	lsls	r3, r3, #1
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4313      	orrs	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	69ba      	ldr	r2, [r7, #24]
 8001434:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800143c:	2201      	movs	r2, #1
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	43db      	mvns	r3, r3
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	4013      	ands	r3, r2
 800144a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	091b      	lsrs	r3, r3, #4
 8001452:	f003 0201 	and.w	r2, r3, #1
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	69ba      	ldr	r2, [r7, #24]
 800145e:	4313      	orrs	r3, r2
 8001460:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 0303 	and.w	r3, r3, #3
 8001470:	2b03      	cmp	r3, #3
 8001472:	d017      	beq.n	80014a4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	43db      	mvns	r3, r3
 8001486:	69ba      	ldr	r2, [r7, #24]
 8001488:	4013      	ands	r3, r2
 800148a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fa02 f303 	lsl.w	r3, r2, r3
 8001498:	69ba      	ldr	r2, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d123      	bne.n	80014f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	08da      	lsrs	r2, r3, #3
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	3208      	adds	r2, #8
 80014b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	f003 0307 	and.w	r3, r3, #7
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	220f      	movs	r2, #15
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43db      	mvns	r3, r3
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4013      	ands	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	691a      	ldr	r2, [r3, #16]
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	08da      	lsrs	r2, r3, #3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3208      	adds	r2, #8
 80014f2:	69b9      	ldr	r1, [r7, #24]
 80014f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	2203      	movs	r2, #3
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 0203 	and.w	r2, r3, #3
 8001518:	69fb      	ldr	r3, [r7, #28]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	fa02 f303 	lsl.w	r3, r2, r3
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	4313      	orrs	r3, r2
 8001524:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 80ae 	beq.w	8001696 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	4b5d      	ldr	r3, [pc, #372]	@ (80016b4 <HAL_GPIO_Init+0x300>)
 8001540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001542:	4a5c      	ldr	r2, [pc, #368]	@ (80016b4 <HAL_GPIO_Init+0x300>)
 8001544:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001548:	6453      	str	r3, [r2, #68]	@ 0x44
 800154a:	4b5a      	ldr	r3, [pc, #360]	@ (80016b4 <HAL_GPIO_Init+0x300>)
 800154c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001552:	60fb      	str	r3, [r7, #12]
 8001554:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001556:	4a58      	ldr	r2, [pc, #352]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	3302      	adds	r3, #2
 800155e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	220f      	movs	r2, #15
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	69ba      	ldr	r2, [r7, #24]
 8001576:	4013      	ands	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a4f      	ldr	r2, [pc, #316]	@ (80016bc <HAL_GPIO_Init+0x308>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d025      	beq.n	80015ce <HAL_GPIO_Init+0x21a>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a4e      	ldr	r2, [pc, #312]	@ (80016c0 <HAL_GPIO_Init+0x30c>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d01f      	beq.n	80015ca <HAL_GPIO_Init+0x216>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	4a4d      	ldr	r2, [pc, #308]	@ (80016c4 <HAL_GPIO_Init+0x310>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d019      	beq.n	80015c6 <HAL_GPIO_Init+0x212>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	4a4c      	ldr	r2, [pc, #304]	@ (80016c8 <HAL_GPIO_Init+0x314>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d013      	beq.n	80015c2 <HAL_GPIO_Init+0x20e>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4a4b      	ldr	r2, [pc, #300]	@ (80016cc <HAL_GPIO_Init+0x318>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d00d      	beq.n	80015be <HAL_GPIO_Init+0x20a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4a4a      	ldr	r2, [pc, #296]	@ (80016d0 <HAL_GPIO_Init+0x31c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d007      	beq.n	80015ba <HAL_GPIO_Init+0x206>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a49      	ldr	r2, [pc, #292]	@ (80016d4 <HAL_GPIO_Init+0x320>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d101      	bne.n	80015b6 <HAL_GPIO_Init+0x202>
 80015b2:	2306      	movs	r3, #6
 80015b4:	e00c      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015b6:	2307      	movs	r3, #7
 80015b8:	e00a      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015ba:	2305      	movs	r3, #5
 80015bc:	e008      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015be:	2304      	movs	r3, #4
 80015c0:	e006      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015c2:	2303      	movs	r3, #3
 80015c4:	e004      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015c6:	2302      	movs	r3, #2
 80015c8:	e002      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_GPIO_Init+0x21c>
 80015ce:	2300      	movs	r3, #0
 80015d0:	69fa      	ldr	r2, [r7, #28]
 80015d2:	f002 0203 	and.w	r2, r2, #3
 80015d6:	0092      	lsls	r2, r2, #2
 80015d8:	4093      	lsls	r3, r2
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015e0:	4935      	ldr	r1, [pc, #212]	@ (80016b8 <HAL_GPIO_Init+0x304>)
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	089b      	lsrs	r3, r3, #2
 80015e6:	3302      	adds	r3, #2
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015ee:	4b3a      	ldr	r3, [pc, #232]	@ (80016d8 <HAL_GPIO_Init+0x324>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	43db      	mvns	r3, r3
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4013      	ands	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	693b      	ldr	r3, [r7, #16]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001612:	4a31      	ldr	r2, [pc, #196]	@ (80016d8 <HAL_GPIO_Init+0x324>)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001618:	4b2f      	ldr	r3, [pc, #188]	@ (80016d8 <HAL_GPIO_Init+0x324>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	43db      	mvns	r3, r3
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	4013      	ands	r3, r2
 8001626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d003      	beq.n	800163c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001634:	69ba      	ldr	r2, [r7, #24]
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	4313      	orrs	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800163c:	4a26      	ldr	r2, [pc, #152]	@ (80016d8 <HAL_GPIO_Init+0x324>)
 800163e:	69bb      	ldr	r3, [r7, #24]
 8001640:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001642:	4b25      	ldr	r3, [pc, #148]	@ (80016d8 <HAL_GPIO_Init+0x324>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	43db      	mvns	r3, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4013      	ands	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800165e:	69ba      	ldr	r2, [r7, #24]
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001666:	4a1c      	ldr	r2, [pc, #112]	@ (80016d8 <HAL_GPIO_Init+0x324>)
 8001668:	69bb      	ldr	r3, [r7, #24]
 800166a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800166c:	4b1a      	ldr	r3, [pc, #104]	@ (80016d8 <HAL_GPIO_Init+0x324>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	43db      	mvns	r3, r3
 8001676:	69ba      	ldr	r2, [r7, #24]
 8001678:	4013      	ands	r3, r2
 800167a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	4313      	orrs	r3, r2
 800168e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001690:	4a11      	ldr	r2, [pc, #68]	@ (80016d8 <HAL_GPIO_Init+0x324>)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3301      	adds	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
 800169c:	69fb      	ldr	r3, [r7, #28]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	f67f ae96 	bls.w	80013d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3724      	adds	r7, #36	@ 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40020000 	.word	0x40020000
 80016c0:	40020400 	.word	0x40020400
 80016c4:	40020800 	.word	0x40020800
 80016c8:	40020c00 	.word	0x40020c00
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40021400 	.word	0x40021400
 80016d4:	40021800 	.word	0x40021800
 80016d8:	40013c00 	.word	0x40013c00

080016dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	807b      	strh	r3, [r7, #2]
 80016e8:	4613      	mov	r3, r2
 80016ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016ec:	787b      	ldrb	r3, [r7, #1]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d003      	beq.n	80016fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f2:	887a      	ldrh	r2, [r7, #2]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016f8:	e003      	b.n	8001702 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fa:	887b      	ldrh	r3, [r7, #2]
 80016fc:	041a      	lsls	r2, r3, #16
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	619a      	str	r2, [r3, #24]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800170e:	b480      	push	{r7}
 8001710:	b085      	sub	sp, #20
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	460b      	mov	r3, r1
 8001718:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001720:	887a      	ldrh	r2, [r7, #2]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4013      	ands	r3, r2
 8001726:	041a      	lsls	r2, r3, #16
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	43d9      	mvns	r1, r3
 800172c:	887b      	ldrh	r3, [r7, #2]
 800172e:	400b      	ands	r3, r1
 8001730:	431a      	orrs	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	619a      	str	r2, [r3, #24]
}
 8001736:	bf00      	nop
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
	...

08001744 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d101      	bne.n	8001758 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e0cc      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001758:	4b68      	ldr	r3, [pc, #416]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 030f 	and.w	r3, r3, #15
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d90c      	bls.n	8001780 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001766:	4b65      	ldr	r3, [pc, #404]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	b2d2      	uxtb	r2, r2
 800176c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800176e:	4b63      	ldr	r3, [pc, #396]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	683a      	ldr	r2, [r7, #0]
 8001778:	429a      	cmp	r2, r3
 800177a:	d001      	beq.n	8001780 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e0b8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d020      	beq.n	80017ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001798:	4b59      	ldr	r3, [pc, #356]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	4a58      	ldr	r2, [pc, #352]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d005      	beq.n	80017bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017b0:	4b53      	ldr	r3, [pc, #332]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	4a52      	ldr	r2, [pc, #328]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017bc:	4b50      	ldr	r3, [pc, #320]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	494d      	ldr	r1, [pc, #308]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d044      	beq.n	8001864 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d107      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e2:	4b47      	ldr	r3, [pc, #284]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d119      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e07f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d003      	beq.n	8001802 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001802:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001812:	4b3b      	ldr	r3, [pc, #236]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e067      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001822:	4b37      	ldr	r3, [pc, #220]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f023 0203 	bic.w	r2, r3, #3
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4934      	ldr	r1, [pc, #208]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	4313      	orrs	r3, r2
 8001832:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001834:	f7ff f90c 	bl	8000a50 <HAL_GetTick>
 8001838:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	e00a      	b.n	8001852 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800183c:	f7ff f908 	bl	8000a50 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184a:	4293      	cmp	r3, r2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e04f      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001852:	4b2b      	ldr	r3, [pc, #172]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 8001854:	689b      	ldr	r3, [r3, #8]
 8001856:	f003 020c 	and.w	r2, r3, #12
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	429a      	cmp	r2, r3
 8001862:	d1eb      	bne.n	800183c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001864:	4b25      	ldr	r3, [pc, #148]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 030f 	and.w	r3, r3, #15
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d20c      	bcs.n	800188c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001872:	4b22      	ldr	r3, [pc, #136]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	683a      	ldr	r2, [r7, #0]
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800187a:	4b20      	ldr	r3, [pc, #128]	@ (80018fc <HAL_RCC_ClockConfig+0x1b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	429a      	cmp	r2, r3
 8001886:	d001      	beq.n	800188c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e032      	b.n	80018f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d008      	beq.n	80018aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001898:	4b19      	ldr	r3, [pc, #100]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	4916      	ldr	r1, [pc, #88]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018a6:	4313      	orrs	r3, r2
 80018a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0308 	and.w	r3, r3, #8
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d009      	beq.n	80018ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018b6:	4b12      	ldr	r3, [pc, #72]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	490e      	ldr	r1, [pc, #56]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ca:	f000 f855 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 80018ce:	4602      	mov	r2, r0
 80018d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001900 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	091b      	lsrs	r3, r3, #4
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	490a      	ldr	r1, [pc, #40]	@ (8001904 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	5ccb      	ldrb	r3, [r1, r3]
 80018de:	fa22 f303 	lsr.w	r3, r2, r3
 80018e2:	4a09      	ldr	r2, [pc, #36]	@ (8001908 <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_ClockConfig+0x1c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff f86c 	bl	80009c8 <HAL_InitTick>

  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00
 8001900:	40023800 	.word	0x40023800
 8001904:	08002ca0 	.word	0x08002ca0
 8001908:	20000020 	.word	0x20000020
 800190c:	20000024 	.word	0x20000024

08001910 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001914:	4b03      	ldr	r3, [pc, #12]	@ (8001924 <HAL_RCC_GetHCLKFreq+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	20000020 	.word	0x20000020

08001928 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800192c:	f7ff fff0 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001930:	4602      	mov	r2, r0
 8001932:	4b05      	ldr	r3, [pc, #20]	@ (8001948 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	0a9b      	lsrs	r3, r3, #10
 8001938:	f003 0307 	and.w	r3, r3, #7
 800193c:	4903      	ldr	r1, [pc, #12]	@ (800194c <HAL_RCC_GetPCLK1Freq+0x24>)
 800193e:	5ccb      	ldrb	r3, [r1, r3]
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001944:	4618      	mov	r0, r3
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40023800 	.word	0x40023800
 800194c:	08002cb0 	.word	0x08002cb0

08001950 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001954:	f7ff ffdc 	bl	8001910 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_RCC_GetPCLK2Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0b5b      	lsrs	r3, r3, #13
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	@ (8001974 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	08002cb0 	.word	0x08002cb0

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b0ae      	sub	sp, #184	@ 0xb8
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001992:	2300      	movs	r3, #0
 8001994:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001998:	2300      	movs	r3, #0
 800199a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800199e:	4bcb      	ldr	r3, [pc, #812]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f003 030c 	and.w	r3, r3, #12
 80019a6:	2b0c      	cmp	r3, #12
 80019a8:	f200 8206 	bhi.w	8001db8 <HAL_RCC_GetSysClockFreq+0x440>
 80019ac:	a201      	add	r2, pc, #4	@ (adr r2, 80019b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80019ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b2:	bf00      	nop
 80019b4:	080019e9 	.word	0x080019e9
 80019b8:	08001db9 	.word	0x08001db9
 80019bc:	08001db9 	.word	0x08001db9
 80019c0:	08001db9 	.word	0x08001db9
 80019c4:	080019f1 	.word	0x080019f1
 80019c8:	08001db9 	.word	0x08001db9
 80019cc:	08001db9 	.word	0x08001db9
 80019d0:	08001db9 	.word	0x08001db9
 80019d4:	080019f9 	.word	0x080019f9
 80019d8:	08001db9 	.word	0x08001db9
 80019dc:	08001db9 	.word	0x08001db9
 80019e0:	08001db9 	.word	0x08001db9
 80019e4:	08001be9 	.word	0x08001be9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4bb9      	ldr	r3, [pc, #740]	@ (8001cd0 <HAL_RCC_GetSysClockFreq+0x358>)
 80019ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019ee:	e1e7      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019f0:	4bb8      	ldr	r3, [pc, #736]	@ (8001cd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80019f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80019f6:	e1e3      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019f8:	4bb4      	ldr	r3, [pc, #720]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a04:	4bb1      	ldr	r3, [pc, #708]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d071      	beq.n	8001af4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a10:	4bae      	ldr	r3, [pc, #696]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	099b      	lsrs	r3, r3, #6
 8001a16:	2200      	movs	r2, #0
 8001a18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001a1c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001a32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001a36:	4622      	mov	r2, r4
 8001a38:	462b      	mov	r3, r5
 8001a3a:	f04f 0000 	mov.w	r0, #0
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	0159      	lsls	r1, r3, #5
 8001a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a48:	0150      	lsls	r0, r2, #5
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4621      	mov	r1, r4
 8001a50:	1a51      	subs	r1, r2, r1
 8001a52:	6439      	str	r1, [r7, #64]	@ 0x40
 8001a54:	4629      	mov	r1, r5
 8001a56:	eb63 0301 	sbc.w	r3, r3, r1
 8001a5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001a68:	4649      	mov	r1, r9
 8001a6a:	018b      	lsls	r3, r1, #6
 8001a6c:	4641      	mov	r1, r8
 8001a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a72:	4641      	mov	r1, r8
 8001a74:	018a      	lsls	r2, r1, #6
 8001a76:	4641      	mov	r1, r8
 8001a78:	1a51      	subs	r1, r2, r1
 8001a7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001a90:	4649      	mov	r1, r9
 8001a92:	00cb      	lsls	r3, r1, #3
 8001a94:	4641      	mov	r1, r8
 8001a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a9a:	4641      	mov	r1, r8
 8001a9c:	00ca      	lsls	r2, r1, #3
 8001a9e:	4610      	mov	r0, r2
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	4622      	mov	r2, r4
 8001aa6:	189b      	adds	r3, r3, r2
 8001aa8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001aaa:	462b      	mov	r3, r5
 8001aac:	460a      	mov	r2, r1
 8001aae:	eb42 0303 	adc.w	r3, r2, r3
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001ab4:	f04f 0200 	mov.w	r2, #0
 8001ab8:	f04f 0300 	mov.w	r3, #0
 8001abc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ac0:	4629      	mov	r1, r5
 8001ac2:	024b      	lsls	r3, r1, #9
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aca:	4621      	mov	r1, r4
 8001acc:	024a      	lsls	r2, r1, #9
 8001ace:	4610      	mov	r0, r2
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001adc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001ae0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001ae4:	f7fe fb8e 	bl	8000204 <__aeabi_uldivmod>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4613      	mov	r3, r2
 8001aee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001af2:	e067      	b.n	8001bc4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af4:	4b75      	ldr	r3, [pc, #468]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	099b      	lsrs	r3, r3, #6
 8001afa:	2200      	movs	r2, #0
 8001afc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001b00:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001b04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001b0e:	2300      	movs	r3, #0
 8001b10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001b12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001b16:	4622      	mov	r2, r4
 8001b18:	462b      	mov	r3, r5
 8001b1a:	f04f 0000 	mov.w	r0, #0
 8001b1e:	f04f 0100 	mov.w	r1, #0
 8001b22:	0159      	lsls	r1, r3, #5
 8001b24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b28:	0150      	lsls	r0, r2, #5
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	460b      	mov	r3, r1
 8001b2e:	4621      	mov	r1, r4
 8001b30:	1a51      	subs	r1, r2, r1
 8001b32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001b34:	4629      	mov	r1, r5
 8001b36:	eb63 0301 	sbc.w	r3, r3, r1
 8001b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b3c:	f04f 0200 	mov.w	r2, #0
 8001b40:	f04f 0300 	mov.w	r3, #0
 8001b44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001b48:	4649      	mov	r1, r9
 8001b4a:	018b      	lsls	r3, r1, #6
 8001b4c:	4641      	mov	r1, r8
 8001b4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b52:	4641      	mov	r1, r8
 8001b54:	018a      	lsls	r2, r1, #6
 8001b56:	4641      	mov	r1, r8
 8001b58:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b5c:	4649      	mov	r1, r9
 8001b5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b62:	f04f 0200 	mov.w	r2, #0
 8001b66:	f04f 0300 	mov.w	r3, #0
 8001b6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b76:	4692      	mov	sl, r2
 8001b78:	469b      	mov	fp, r3
 8001b7a:	4623      	mov	r3, r4
 8001b7c:	eb1a 0303 	adds.w	r3, sl, r3
 8001b80:	623b      	str	r3, [r7, #32]
 8001b82:	462b      	mov	r3, r5
 8001b84:	eb4b 0303 	adc.w	r3, fp, r3
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	f04f 0300 	mov.w	r3, #0
 8001b92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b96:	4629      	mov	r1, r5
 8001b98:	028b      	lsls	r3, r1, #10
 8001b9a:	4621      	mov	r1, r4
 8001b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ba0:	4621      	mov	r1, r4
 8001ba2:	028a      	lsls	r2, r1, #10
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001bac:	2200      	movs	r2, #0
 8001bae:	673b      	str	r3, [r7, #112]	@ 0x70
 8001bb0:	677a      	str	r2, [r7, #116]	@ 0x74
 8001bb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001bb6:	f7fe fb25 	bl	8000204 <__aeabi_uldivmod>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	4613      	mov	r3, r2
 8001bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001bc4:	4b41      	ldr	r3, [pc, #260]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	3301      	adds	r3, #1
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001bd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001bda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001be6:	e0eb      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be8:	4b38      	ldr	r3, [pc, #224]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf4:	4b35      	ldr	r3, [pc, #212]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d06b      	beq.n	8001cd8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c00:	4b32      	ldr	r3, [pc, #200]	@ (8001ccc <HAL_RCC_GetSysClockFreq+0x354>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	099b      	lsrs	r3, r3, #6
 8001c06:	2200      	movs	r2, #0
 8001c08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001c0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001c0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001c0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c12:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c14:	2300      	movs	r3, #0
 8001c16:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001c1c:	4622      	mov	r2, r4
 8001c1e:	462b      	mov	r3, r5
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2e:	0150      	lsls	r0, r2, #5
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4621      	mov	r1, r4
 8001c36:	1a51      	subs	r1, r2, r1
 8001c38:	61b9      	str	r1, [r7, #24]
 8001c3a:	4629      	mov	r1, r5
 8001c3c:	eb63 0301 	sbc.w	r3, r3, r1
 8001c40:	61fb      	str	r3, [r7, #28]
 8001c42:	f04f 0200 	mov.w	r2, #0
 8001c46:	f04f 0300 	mov.w	r3, #0
 8001c4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001c4e:	4659      	mov	r1, fp
 8001c50:	018b      	lsls	r3, r1, #6
 8001c52:	4651      	mov	r1, sl
 8001c54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c58:	4651      	mov	r1, sl
 8001c5a:	018a      	lsls	r2, r1, #6
 8001c5c:	4651      	mov	r1, sl
 8001c5e:	ebb2 0801 	subs.w	r8, r2, r1
 8001c62:	4659      	mov	r1, fp
 8001c64:	eb63 0901 	sbc.w	r9, r3, r1
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7c:	4690      	mov	r8, r2
 8001c7e:	4699      	mov	r9, r3
 8001c80:	4623      	mov	r3, r4
 8001c82:	eb18 0303 	adds.w	r3, r8, r3
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	462b      	mov	r3, r5
 8001c8a:	eb49 0303 	adc.w	r3, r9, r3
 8001c8e:	617b      	str	r3, [r7, #20]
 8001c90:	f04f 0200 	mov.w	r2, #0
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c9c:	4629      	mov	r1, r5
 8001c9e:	024b      	lsls	r3, r1, #9
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001ca6:	4621      	mov	r1, r4
 8001ca8:	024a      	lsls	r2, r1, #9
 8001caa:	4610      	mov	r0, r2
 8001cac:	4619      	mov	r1, r3
 8001cae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001cb6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001cb8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001cbc:	f7fe faa2 	bl	8000204 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001cca:	e065      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x420>
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	00f42400 	.word	0x00f42400
 8001cd4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cd8:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	099b      	lsrs	r3, r3, #6
 8001cde:	2200      	movs	r2, #0
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	4611      	mov	r1, r2
 8001ce4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ce8:	653b      	str	r3, [r7, #80]	@ 0x50
 8001cea:	2300      	movs	r3, #0
 8001cec:	657b      	str	r3, [r7, #84]	@ 0x54
 8001cee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001cf2:	4642      	mov	r2, r8
 8001cf4:	464b      	mov	r3, r9
 8001cf6:	f04f 0000 	mov.w	r0, #0
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	0159      	lsls	r1, r3, #5
 8001d00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d04:	0150      	lsls	r0, r2, #5
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4641      	mov	r1, r8
 8001d0c:	1a51      	subs	r1, r2, r1
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	4649      	mov	r1, r9
 8001d12:	eb63 0301 	sbc.w	r3, r3, r1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	f04f 0200 	mov.w	r2, #0
 8001d1c:	f04f 0300 	mov.w	r3, #0
 8001d20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001d24:	4659      	mov	r1, fp
 8001d26:	018b      	lsls	r3, r1, #6
 8001d28:	4651      	mov	r1, sl
 8001d2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d2e:	4651      	mov	r1, sl
 8001d30:	018a      	lsls	r2, r1, #6
 8001d32:	4651      	mov	r1, sl
 8001d34:	1a54      	subs	r4, r2, r1
 8001d36:	4659      	mov	r1, fp
 8001d38:	eb63 0501 	sbc.w	r5, r3, r1
 8001d3c:	f04f 0200 	mov.w	r2, #0
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	00eb      	lsls	r3, r5, #3
 8001d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d4a:	00e2      	lsls	r2, r4, #3
 8001d4c:	4614      	mov	r4, r2
 8001d4e:	461d      	mov	r5, r3
 8001d50:	4643      	mov	r3, r8
 8001d52:	18e3      	adds	r3, r4, r3
 8001d54:	603b      	str	r3, [r7, #0]
 8001d56:	464b      	mov	r3, r9
 8001d58:	eb45 0303 	adc.w	r3, r5, r3
 8001d5c:	607b      	str	r3, [r7, #4]
 8001d5e:	f04f 0200 	mov.w	r2, #0
 8001d62:	f04f 0300 	mov.w	r3, #0
 8001d66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d6a:	4629      	mov	r1, r5
 8001d6c:	028b      	lsls	r3, r1, #10
 8001d6e:	4621      	mov	r1, r4
 8001d70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d74:	4621      	mov	r1, r4
 8001d76:	028a      	lsls	r2, r1, #10
 8001d78:	4610      	mov	r0, r2
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d80:	2200      	movs	r2, #0
 8001d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001d86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d8a:	f7fe fa3b 	bl	8000204 <__aeabi_uldivmod>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	460b      	mov	r3, r1
 8001d92:	4613      	mov	r3, r2
 8001d94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d98:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	0f1b      	lsrs	r3, r3, #28
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001da6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001daa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001db6:	e003      	b.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001db8:	4b06      	ldr	r3, [pc, #24]	@ (8001dd4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001dba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001dbe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dc0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	37b8      	adds	r7, #184	@ 0xb8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	00f42400 	.word	0x00f42400

08001dd8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d101      	bne.n	8001dea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e28d      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 8083 	beq.w	8001efe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001df8:	4b94      	ldr	r3, [pc, #592]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 030c 	and.w	r3, r3, #12
 8001e00:	2b04      	cmp	r3, #4
 8001e02:	d019      	beq.n	8001e38 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e04:	4b91      	ldr	r3, [pc, #580]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 030c 	and.w	r3, r3, #12
        || \
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e10:	4b8e      	ldr	r3, [pc, #568]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e1c:	d00c      	beq.n	8001e38 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e1e:	4b8b      	ldr	r3, [pc, #556]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001e26:	2b0c      	cmp	r3, #12
 8001e28:	d112      	bne.n	8001e50 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e2a:	4b88      	ldr	r3, [pc, #544]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e36:	d10b      	bne.n	8001e50 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e38:	4b84      	ldr	r3, [pc, #528]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d05b      	beq.n	8001efc <HAL_RCC_OscConfig+0x124>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d157      	bne.n	8001efc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e25a      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e58:	d106      	bne.n	8001e68 <HAL_RCC_OscConfig+0x90>
 8001e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a7b      	ldr	r2, [pc, #492]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	e01d      	b.n	8001ea4 <HAL_RCC_OscConfig+0xcc>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e70:	d10c      	bne.n	8001e8c <HAL_RCC_OscConfig+0xb4>
 8001e72:	4b76      	ldr	r3, [pc, #472]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a75      	ldr	r2, [pc, #468]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4b73      	ldr	r3, [pc, #460]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a72      	ldr	r2, [pc, #456]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	e00b      	b.n	8001ea4 <HAL_RCC_OscConfig+0xcc>
 8001e8c:	4b6f      	ldr	r3, [pc, #444]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a6e      	ldr	r2, [pc, #440]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e96:	6013      	str	r3, [r2, #0]
 8001e98:	4b6c      	ldr	r3, [pc, #432]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a6b      	ldr	r2, [pc, #428]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d013      	beq.n	8001ed4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eac:	f7fe fdd0 	bl	8000a50 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7fe fdcc 	bl	8000a50 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e21f      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ec6:	4b61      	ldr	r3, [pc, #388]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0xdc>
 8001ed2:	e014      	b.n	8001efe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7fe fdbc 	bl	8000a50 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001edc:	f7fe fdb8 	bl	8000a50 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b64      	cmp	r3, #100	@ 0x64
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e20b      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eee:	4b57      	ldr	r3, [pc, #348]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f0      	bne.n	8001edc <HAL_RCC_OscConfig+0x104>
 8001efa:	e000      	b.n	8001efe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d06f      	beq.n	8001fea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f0a:	4b50      	ldr	r3, [pc, #320]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 030c 	and.w	r3, r3, #12
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d017      	beq.n	8001f46 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f16:	4b4d      	ldr	r3, [pc, #308]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 030c 	and.w	r3, r3, #12
        || \
 8001f1e:	2b08      	cmp	r3, #8
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f22:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f2e:	4b47      	ldr	r3, [pc, #284]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d11c      	bne.n	8001f74 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f3a:	4b44      	ldr	r3, [pc, #272]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d116      	bne.n	8001f74 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	4b41      	ldr	r3, [pc, #260]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d005      	beq.n	8001f5e <HAL_RCC_OscConfig+0x186>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d001      	beq.n	8001f5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e1d3      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4937      	ldr	r1, [pc, #220]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f72:	e03a      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d020      	beq.n	8001fbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f7c:	4b34      	ldr	r3, [pc, #208]	@ (8002050 <HAL_RCC_OscConfig+0x278>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7fe fd65 	bl	8000a50 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7fe fd61 	bl	8000a50 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e1b4      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0302 	and.w	r3, r3, #2
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b28      	ldr	r3, [pc, #160]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	00db      	lsls	r3, r3, #3
 8001fb6:	4925      	ldr	r1, [pc, #148]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
 8001fbc:	e015      	b.n	8001fea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_RCC_OscConfig+0x278>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7fe fd44 	bl	8000a50 <HAL_GetTick>
 8001fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fca:	e008      	b.n	8001fde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fcc:	f7fe fd40 	bl	8000a50 <HAL_GetTick>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d901      	bls.n	8001fde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e193      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f0      	bne.n	8001fcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0308 	and.w	r3, r3, #8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d036      	beq.n	8002064 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d016      	beq.n	800202c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ffe:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_RCC_OscConfig+0x27c>)
 8002000:	2201      	movs	r2, #1
 8002002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe fd24 	bl	8000a50 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7fe fd20 	bl	8000a50 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e173      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <HAL_RCC_OscConfig+0x274>)
 8002020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002022:	f003 0302 	and.w	r3, r3, #2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d0f0      	beq.n	800200c <HAL_RCC_OscConfig+0x234>
 800202a:	e01b      	b.n	8002064 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202c:	4b09      	ldr	r3, [pc, #36]	@ (8002054 <HAL_RCC_OscConfig+0x27c>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002032:	f7fe fd0d 	bl	8000a50 <HAL_GetTick>
 8002036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002038:	e00e      	b.n	8002058 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800203a:	f7fe fd09 	bl	8000a50 <HAL_GetTick>
 800203e:	4602      	mov	r2, r0
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d907      	bls.n	8002058 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002048:	2303      	movs	r3, #3
 800204a:	e15c      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
 800204c:	40023800 	.word	0x40023800
 8002050:	42470000 	.word	0x42470000
 8002054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002058:	4b8a      	ldr	r3, [pc, #552]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800205a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1ea      	bne.n	800203a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0304 	and.w	r3, r3, #4
 800206c:	2b00      	cmp	r3, #0
 800206e:	f000 8097 	beq.w	80021a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002072:	2300      	movs	r3, #0
 8002074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002076:	4b83      	ldr	r3, [pc, #524]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800207a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10f      	bne.n	80020a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	4b7f      	ldr	r3, [pc, #508]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208a:	4a7e      	ldr	r2, [pc, #504]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002090:	6413      	str	r3, [r2, #64]	@ 0x40
 8002092:	4b7c      	ldr	r3, [pc, #496]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a2:	4b79      	ldr	r3, [pc, #484]	@ (8002288 <HAL_RCC_OscConfig+0x4b0>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d118      	bne.n	80020e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020ae:	4b76      	ldr	r3, [pc, #472]	@ (8002288 <HAL_RCC_OscConfig+0x4b0>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a75      	ldr	r2, [pc, #468]	@ (8002288 <HAL_RCC_OscConfig+0x4b0>)
 80020b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ba:	f7fe fcc9 	bl	8000a50 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c2:	f7fe fcc5 	bl	8000a50 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e118      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	4b6c      	ldr	r3, [pc, #432]	@ (8002288 <HAL_RCC_OscConfig+0x4b0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d106      	bne.n	80020f6 <HAL_RCC_OscConfig+0x31e>
 80020e8:	4b66      	ldr	r3, [pc, #408]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 80020ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ec:	4a65      	ldr	r2, [pc, #404]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020f4:	e01c      	b.n	8002130 <HAL_RCC_OscConfig+0x358>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	689b      	ldr	r3, [r3, #8]
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0x340>
 80020fe:	4b61      	ldr	r3, [pc, #388]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002102:	4a60      	ldr	r2, [pc, #384]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002104:	f043 0304 	orr.w	r3, r3, #4
 8002108:	6713      	str	r3, [r2, #112]	@ 0x70
 800210a:	4b5e      	ldr	r3, [pc, #376]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800210c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800210e:	4a5d      	ldr	r2, [pc, #372]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6713      	str	r3, [r2, #112]	@ 0x70
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0x358>
 8002118:	4b5a      	ldr	r3, [pc, #360]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	4a59      	ldr	r2, [pc, #356]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800211e:	f023 0301 	bic.w	r3, r3, #1
 8002122:	6713      	str	r3, [r2, #112]	@ 0x70
 8002124:	4b57      	ldr	r3, [pc, #348]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002128:	4a56      	ldr	r2, [pc, #344]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800212a:	f023 0304 	bic.w	r3, r3, #4
 800212e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d015      	beq.n	8002164 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002138:	f7fe fc8a 	bl	8000a50 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe fc86 	bl	8000a50 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e0d7      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ee      	beq.n	8002140 <HAL_RCC_OscConfig+0x368>
 8002162:	e014      	b.n	800218e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7fe fc74 	bl	8000a50 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7fe fc70 	bl	8000a50 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e0c1      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002182:	4b40      	ldr	r3, [pc, #256]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1ee      	bne.n	800216c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800218e:	7dfb      	ldrb	r3, [r7, #23]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d105      	bne.n	80021a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002194:	4b3b      	ldr	r3, [pc, #236]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002198:	4a3a      	ldr	r2, [pc, #232]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800219a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800219e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ad 	beq.w	8002304 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021aa:	4b36      	ldr	r3, [pc, #216]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	f003 030c 	and.w	r3, r3, #12
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d060      	beq.n	8002278 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d145      	bne.n	800224a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021be:	4b33      	ldr	r3, [pc, #204]	@ (800228c <HAL_RCC_OscConfig+0x4b4>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c4:	f7fe fc44 	bl	8000a50 <HAL_GetTick>
 80021c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021ca:	e008      	b.n	80021de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021cc:	f7fe fc40 	bl	8000a50 <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e093      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	4b29      	ldr	r3, [pc, #164]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d1f0      	bne.n	80021cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	69da      	ldr	r2, [r3, #28]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f8:	019b      	lsls	r3, r3, #6
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002214:	071b      	lsls	r3, r3, #28
 8002216:	491b      	ldr	r1, [pc, #108]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 8002218:	4313      	orrs	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800221c:	4b1b      	ldr	r3, [pc, #108]	@ (800228c <HAL_RCC_OscConfig+0x4b4>)
 800221e:	2201      	movs	r2, #1
 8002220:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7fe fc15 	bl	8000a50 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800222a:	f7fe fc11 	bl	8000a50 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e064      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x452>
 8002248:	e05c      	b.n	8002304 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224a:	4b10      	ldr	r3, [pc, #64]	@ (800228c <HAL_RCC_OscConfig+0x4b4>)
 800224c:	2200      	movs	r2, #0
 800224e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fbfe 	bl	8000a50 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002258:	f7fe fbfa 	bl	8000a50 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e04d      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_RCC_OscConfig+0x4ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f0      	bne.n	8002258 <HAL_RCC_OscConfig+0x480>
 8002276:	e045      	b.n	8002304 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d107      	bne.n	8002290 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e040      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
 8002284:	40023800 	.word	0x40023800
 8002288:	40007000 	.word	0x40007000
 800228c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002290:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <HAL_RCC_OscConfig+0x538>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d030      	beq.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d129      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d122      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80022c0:	4013      	ands	r3, r2
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80022c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d119      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d6:	085b      	lsrs	r3, r3, #1
 80022d8:	3b01      	subs	r3, #1
 80022da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022dc:	429a      	cmp	r2, r3
 80022de:	d10f      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d107      	bne.n	8002300 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800

08002314 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d101      	bne.n	8002326 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e042      	b.n	80023ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f7fe fa32 	bl	80007a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2224      	movs	r2, #36	@ 0x24
 8002344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002356:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f9f5 	bl	8002748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	691a      	ldr	r2, [r3, #16]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800236c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	695a      	ldr	r2, [r3, #20]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800237c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800238c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b08c      	sub	sp, #48	@ 0x30
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b20      	cmp	r3, #32
 80023cc:	d162      	bne.n	8002494 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d002      	beq.n	80023da <HAL_UART_Transmit_DMA+0x26>
 80023d4:	88fb      	ldrh	r3, [r7, #6]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e05b      	b.n	8002496 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	88fa      	ldrh	r2, [r7, #6]
 80023e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	88fa      	ldrh	r2, [r7, #6]
 80023ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2221      	movs	r2, #33	@ 0x21
 80023fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002402:	4a27      	ldr	r2, [pc, #156]	@ (80024a0 <HAL_UART_Transmit_DMA+0xec>)
 8002404:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240a:	4a26      	ldr	r2, [pc, #152]	@ (80024a4 <HAL_UART_Transmit_DMA+0xf0>)
 800240c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	4a25      	ldr	r2, [pc, #148]	@ (80024a8 <HAL_UART_Transmit_DMA+0xf4>)
 8002414:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800241a:	2200      	movs	r2, #0
 800241c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800241e:	f107 0308 	add.w	r3, r7, #8
 8002422:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800242a:	6819      	ldr	r1, [r3, #0]
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	3304      	adds	r3, #4
 8002432:	461a      	mov	r2, r3
 8002434:	88fb      	ldrh	r3, [r7, #6]
 8002436:	f7fe fcfb 	bl	8000e30 <HAL_DMA_Start_IT>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d008      	beq.n	8002452 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2210      	movs	r2, #16
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2220      	movs	r2, #32
 800244a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e021      	b.n	8002496 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800245a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	3314      	adds	r3, #20
 8002462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002464:	69bb      	ldr	r3, [r7, #24]
 8002466:	e853 3f00 	ldrex	r3, [r3]
 800246a:	617b      	str	r3, [r7, #20]
   return(result);
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3314      	adds	r3, #20
 800247a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800247c:	627a      	str	r2, [r7, #36]	@ 0x24
 800247e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002480:	6a39      	ldr	r1, [r7, #32]
 8002482:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002484:	e841 2300 	strex	r3, r2, [r1]
 8002488:	61fb      	str	r3, [r7, #28]
   return(result);
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d1e5      	bne.n	800245c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 8002490:	2300      	movs	r3, #0
 8002492:	e000      	b.n	8002496 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 8002494:	2302      	movs	r3, #2
  }
}
 8002496:	4618      	mov	r0, r3
 8002498:	3730      	adds	r7, #48	@ 0x30
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	080024e9 	.word	0x080024e9
 80024a4:	08002583 	.word	0x08002583
 80024a8:	0800259f 	.word	0x0800259f

080024ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b083      	sub	sp, #12
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b090      	sub	sp, #64	@ 0x40
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002500:	2b00      	cmp	r3, #0
 8002502:	d137      	bne.n	8002574 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8002504:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002506:	2200      	movs	r2, #0
 8002508:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800250a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3314      	adds	r3, #20
 8002510:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	623b      	str	r3, [r7, #32]
   return(result);
 800251a:	6a3b      	ldr	r3, [r7, #32]
 800251c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002520:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002522:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800252a:	633a      	str	r2, [r7, #48]	@ 0x30
 800252c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e5      	bne.n	800250a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800253e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	330c      	adds	r3, #12
 8002544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	60fb      	str	r3, [r7, #12]
   return(result);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002554:	637b      	str	r3, [r7, #52]	@ 0x34
 8002556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	330c      	adds	r3, #12
 800255c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800255e:	61fa      	str	r2, [r7, #28]
 8002560:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	69b9      	ldr	r1, [r7, #24]
 8002564:	69fa      	ldr	r2, [r7, #28]
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	617b      	str	r3, [r7, #20]
   return(result);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e5      	bne.n	800253e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002572:	e002      	b.n	800257a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8002574:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002576:	f7ff ff99 	bl	80024ac <HAL_UART_TxCpltCallback>
}
 800257a:	bf00      	nop
 800257c:	3740      	adds	r7, #64	@ 0x40
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b084      	sub	sp, #16
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800258e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff ff95 	bl	80024c0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002596:	bf00      	nop
 8002598:	3710      	adds	r7, #16
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b084      	sub	sp, #16
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ba:	2b80      	cmp	r3, #128	@ 0x80
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b21      	cmp	r3, #33	@ 0x21
 80025d0:	d108      	bne.n	80025e4 <UART_DMAError+0x46>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d005      	beq.n	80025e4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2200      	movs	r2, #0
 80025dc:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80025de:	68b8      	ldr	r0, [r7, #8]
 80025e0:	f000 f827 	bl	8002632 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025ee:	2b40      	cmp	r3, #64	@ 0x40
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b22      	cmp	r3, #34	@ 0x22
 8002604:	d108      	bne.n	8002618 <UART_DMAError+0x7a>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	2200      	movs	r2, #0
 8002610:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002612:	68b8      	ldr	r0, [r7, #8]
 8002614:	f000 f835 	bl	8002682 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261c:	f043 0210 	orr.w	r2, r3, #16
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002624:	68b8      	ldr	r0, [r7, #8]
 8002626:	f7ff ff55 	bl	80024d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002632:	b480      	push	{r7}
 8002634:	b089      	sub	sp, #36	@ 0x24
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	330c      	adds	r3, #12
 8002640:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	e853 3f00 	ldrex	r3, [r3]
 8002648:	60bb      	str	r3, [r7, #8]
   return(result);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002650:	61fb      	str	r3, [r7, #28]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	330c      	adds	r3, #12
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	61ba      	str	r2, [r7, #24]
 800265c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265e:	6979      	ldr	r1, [r7, #20]
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	613b      	str	r3, [r7, #16]
   return(result);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1e5      	bne.n	800263a <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2220      	movs	r2, #32
 8002672:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002676:	bf00      	nop
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr

08002682 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002682:	b480      	push	{r7}
 8002684:	b095      	sub	sp, #84	@ 0x54
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	330c      	adds	r3, #12
 8002690:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002692:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002694:	e853 3f00 	ldrex	r3, [r3]
 8002698:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800269a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800269c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80026a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	330c      	adds	r3, #12
 80026a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80026aa:	643a      	str	r2, [r7, #64]	@ 0x40
 80026ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80026b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80026b2:	e841 2300 	strex	r3, r2, [r1]
 80026b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80026b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1e5      	bne.n	800268a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	3314      	adds	r3, #20
 80026c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026c6:	6a3b      	ldr	r3, [r7, #32]
 80026c8:	e853 3f00 	ldrex	r3, [r3]
 80026cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	f023 0301 	bic.w	r3, r3, #1
 80026d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	3314      	adds	r3, #20
 80026dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80026de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80026e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80026e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80026e6:	e841 2300 	strex	r3, r2, [r1]
 80026ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80026ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1e5      	bne.n	80026be <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d119      	bne.n	800272e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	330c      	adds	r3, #12
 8002700:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	e853 3f00 	ldrex	r3, [r3]
 8002708:	60bb      	str	r3, [r7, #8]
   return(result);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f023 0310 	bic.w	r3, r3, #16
 8002710:	647b      	str	r3, [r7, #68]	@ 0x44
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	330c      	adds	r3, #12
 8002718:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800271a:	61ba      	str	r2, [r7, #24]
 800271c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	6979      	ldr	r1, [r7, #20]
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	e841 2300 	strex	r3, r2, [r1]
 8002726:	613b      	str	r3, [r7, #16]
   return(result);
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1e5      	bne.n	80026fa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800273c:	bf00      	nop
 800273e:	3754      	adds	r7, #84	@ 0x54
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800274c:	b0c0      	sub	sp, #256	@ 0x100
 800274e:	af00      	add	r7, sp, #0
 8002750:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	691b      	ldr	r3, [r3, #16]
 800275c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002764:	68d9      	ldr	r1, [r3, #12]
 8002766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	ea40 0301 	orr.w	r3, r0, r1
 8002770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	431a      	orrs	r2, r3
 8002780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	431a      	orrs	r2, r3
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80027a0:	f021 010c 	bic.w	r1, r1, #12
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80027ae:	430b      	orrs	r3, r1
 80027b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80027be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c2:	6999      	ldr	r1, [r3, #24]
 80027c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	ea40 0301 	orr.w	r3, r0, r1
 80027ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4b8f      	ldr	r3, [pc, #572]	@ (8002a14 <UART_SetConfig+0x2cc>)
 80027d8:	429a      	cmp	r2, r3
 80027da:	d005      	beq.n	80027e8 <UART_SetConfig+0xa0>
 80027dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	4b8d      	ldr	r3, [pc, #564]	@ (8002a18 <UART_SetConfig+0x2d0>)
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d104      	bne.n	80027f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027e8:	f7ff f8b2 	bl	8001950 <HAL_RCC_GetPCLK2Freq>
 80027ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80027f0:	e003      	b.n	80027fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80027f2:	f7ff f899 	bl	8001928 <HAL_RCC_GetPCLK1Freq>
 80027f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80027fe:	69db      	ldr	r3, [r3, #28]
 8002800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002804:	f040 810c 	bne.w	8002a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800280c:	2200      	movs	r2, #0
 800280e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002812:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800281a:	4622      	mov	r2, r4
 800281c:	462b      	mov	r3, r5
 800281e:	1891      	adds	r1, r2, r2
 8002820:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002822:	415b      	adcs	r3, r3
 8002824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800282a:	4621      	mov	r1, r4
 800282c:	eb12 0801 	adds.w	r8, r2, r1
 8002830:	4629      	mov	r1, r5
 8002832:	eb43 0901 	adc.w	r9, r3, r1
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800284a:	4690      	mov	r8, r2
 800284c:	4699      	mov	r9, r3
 800284e:	4623      	mov	r3, r4
 8002850:	eb18 0303 	adds.w	r3, r8, r3
 8002854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002858:	462b      	mov	r3, r5
 800285a:	eb49 0303 	adc.w	r3, r9, r3
 800285e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800286e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002876:	460b      	mov	r3, r1
 8002878:	18db      	adds	r3, r3, r3
 800287a:	653b      	str	r3, [r7, #80]	@ 0x50
 800287c:	4613      	mov	r3, r2
 800287e:	eb42 0303 	adc.w	r3, r2, r3
 8002882:	657b      	str	r3, [r7, #84]	@ 0x54
 8002884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800288c:	f7fd fcba 	bl	8000204 <__aeabi_uldivmod>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4b61      	ldr	r3, [pc, #388]	@ (8002a1c <UART_SetConfig+0x2d4>)
 8002896:	fba3 2302 	umull	r2, r3, r3, r2
 800289a:	095b      	lsrs	r3, r3, #5
 800289c:	011c      	lsls	r4, r3, #4
 800289e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80028a2:	2200      	movs	r2, #0
 80028a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80028a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80028ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	1891      	adds	r1, r2, r2
 80028b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80028b8:	415b      	adcs	r3, r3
 80028ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80028bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80028c0:	4641      	mov	r1, r8
 80028c2:	eb12 0a01 	adds.w	sl, r2, r1
 80028c6:	4649      	mov	r1, r9
 80028c8:	eb43 0b01 	adc.w	fp, r3, r1
 80028cc:	f04f 0200 	mov.w	r2, #0
 80028d0:	f04f 0300 	mov.w	r3, #0
 80028d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028e0:	4692      	mov	sl, r2
 80028e2:	469b      	mov	fp, r3
 80028e4:	4643      	mov	r3, r8
 80028e6:	eb1a 0303 	adds.w	r3, sl, r3
 80028ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80028ee:	464b      	mov	r3, r9
 80028f0:	eb4b 0303 	adc.w	r3, fp, r3
 80028f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80028f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002904:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800290c:	460b      	mov	r3, r1
 800290e:	18db      	adds	r3, r3, r3
 8002910:	643b      	str	r3, [r7, #64]	@ 0x40
 8002912:	4613      	mov	r3, r2
 8002914:	eb42 0303 	adc.w	r3, r2, r3
 8002918:	647b      	str	r3, [r7, #68]	@ 0x44
 800291a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800291e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002922:	f7fd fc6f 	bl	8000204 <__aeabi_uldivmod>
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	4611      	mov	r1, r2
 800292c:	4b3b      	ldr	r3, [pc, #236]	@ (8002a1c <UART_SetConfig+0x2d4>)
 800292e:	fba3 2301 	umull	r2, r3, r3, r1
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	2264      	movs	r2, #100	@ 0x64
 8002936:	fb02 f303 	mul.w	r3, r2, r3
 800293a:	1acb      	subs	r3, r1, r3
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002942:	4b36      	ldr	r3, [pc, #216]	@ (8002a1c <UART_SetConfig+0x2d4>)
 8002944:	fba3 2302 	umull	r2, r3, r3, r2
 8002948:	095b      	lsrs	r3, r3, #5
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002950:	441c      	add	r4, r3
 8002952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002956:	2200      	movs	r2, #0
 8002958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800295c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002964:	4642      	mov	r2, r8
 8002966:	464b      	mov	r3, r9
 8002968:	1891      	adds	r1, r2, r2
 800296a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800296c:	415b      	adcs	r3, r3
 800296e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002974:	4641      	mov	r1, r8
 8002976:	1851      	adds	r1, r2, r1
 8002978:	6339      	str	r1, [r7, #48]	@ 0x30
 800297a:	4649      	mov	r1, r9
 800297c:	414b      	adcs	r3, r1
 800297e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002980:	f04f 0200 	mov.w	r2, #0
 8002984:	f04f 0300 	mov.w	r3, #0
 8002988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800298c:	4659      	mov	r1, fp
 800298e:	00cb      	lsls	r3, r1, #3
 8002990:	4651      	mov	r1, sl
 8002992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002996:	4651      	mov	r1, sl
 8002998:	00ca      	lsls	r2, r1, #3
 800299a:	4610      	mov	r0, r2
 800299c:	4619      	mov	r1, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	4642      	mov	r2, r8
 80029a2:	189b      	adds	r3, r3, r2
 80029a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80029a8:	464b      	mov	r3, r9
 80029aa:	460a      	mov	r2, r1
 80029ac:	eb42 0303 	adc.w	r3, r2, r3
 80029b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80029c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80029c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80029c8:	460b      	mov	r3, r1
 80029ca:	18db      	adds	r3, r3, r3
 80029cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029ce:	4613      	mov	r3, r2
 80029d0:	eb42 0303 	adc.w	r3, r2, r3
 80029d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80029da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80029de:	f7fd fc11 	bl	8000204 <__aeabi_uldivmod>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a1c <UART_SetConfig+0x2d4>)
 80029e8:	fba3 1302 	umull	r1, r3, r3, r2
 80029ec:	095b      	lsrs	r3, r3, #5
 80029ee:	2164      	movs	r1, #100	@ 0x64
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	3332      	adds	r3, #50	@ 0x32
 80029fa:	4a08      	ldr	r2, [pc, #32]	@ (8002a1c <UART_SetConfig+0x2d4>)
 80029fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002a00:	095b      	lsrs	r3, r3, #5
 8002a02:	f003 0207 	and.w	r2, r3, #7
 8002a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4422      	add	r2, r4
 8002a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a10:	e106      	b.n	8002c20 <UART_SetConfig+0x4d8>
 8002a12:	bf00      	nop
 8002a14:	40011000 	.word	0x40011000
 8002a18:	40011400 	.word	0x40011400
 8002a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a24:	2200      	movs	r2, #0
 8002a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002a32:	4642      	mov	r2, r8
 8002a34:	464b      	mov	r3, r9
 8002a36:	1891      	adds	r1, r2, r2
 8002a38:	6239      	str	r1, [r7, #32]
 8002a3a:	415b      	adcs	r3, r3
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a42:	4641      	mov	r1, r8
 8002a44:	1854      	adds	r4, r2, r1
 8002a46:	4649      	mov	r1, r9
 8002a48:	eb43 0501 	adc.w	r5, r3, r1
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	00eb      	lsls	r3, r5, #3
 8002a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a5a:	00e2      	lsls	r2, r4, #3
 8002a5c:	4614      	mov	r4, r2
 8002a5e:	461d      	mov	r5, r3
 8002a60:	4643      	mov	r3, r8
 8002a62:	18e3      	adds	r3, r4, r3
 8002a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a68:	464b      	mov	r3, r9
 8002a6a:	eb45 0303 	adc.w	r3, r5, r3
 8002a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a8e:	4629      	mov	r1, r5
 8002a90:	008b      	lsls	r3, r1, #2
 8002a92:	4621      	mov	r1, r4
 8002a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a98:	4621      	mov	r1, r4
 8002a9a:	008a      	lsls	r2, r1, #2
 8002a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002aa0:	f7fd fbb0 	bl	8000204 <__aeabi_uldivmod>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4b60      	ldr	r3, [pc, #384]	@ (8002c2c <UART_SetConfig+0x4e4>)
 8002aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	011c      	lsls	r4, r3, #4
 8002ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002abc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002ac4:	4642      	mov	r2, r8
 8002ac6:	464b      	mov	r3, r9
 8002ac8:	1891      	adds	r1, r2, r2
 8002aca:	61b9      	str	r1, [r7, #24]
 8002acc:	415b      	adcs	r3, r3
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ad4:	4641      	mov	r1, r8
 8002ad6:	1851      	adds	r1, r2, r1
 8002ad8:	6139      	str	r1, [r7, #16]
 8002ada:	4649      	mov	r1, r9
 8002adc:	414b      	adcs	r3, r1
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	f04f 0300 	mov.w	r3, #0
 8002ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002aec:	4659      	mov	r1, fp
 8002aee:	00cb      	lsls	r3, r1, #3
 8002af0:	4651      	mov	r1, sl
 8002af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002af6:	4651      	mov	r1, sl
 8002af8:	00ca      	lsls	r2, r1, #3
 8002afa:	4610      	mov	r0, r2
 8002afc:	4619      	mov	r1, r3
 8002afe:	4603      	mov	r3, r0
 8002b00:	4642      	mov	r2, r8
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b08:	464b      	mov	r3, r9
 8002b0a:	460a      	mov	r2, r1
 8002b0c:	eb42 0303 	adc.w	r3, r2, r3
 8002b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002b2c:	4649      	mov	r1, r9
 8002b2e:	008b      	lsls	r3, r1, #2
 8002b30:	4641      	mov	r1, r8
 8002b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b36:	4641      	mov	r1, r8
 8002b38:	008a      	lsls	r2, r1, #2
 8002b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002b3e:	f7fd fb61 	bl	8000204 <__aeabi_uldivmod>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4611      	mov	r1, r2
 8002b48:	4b38      	ldr	r3, [pc, #224]	@ (8002c2c <UART_SetConfig+0x4e4>)
 8002b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b4e:	095b      	lsrs	r3, r3, #5
 8002b50:	2264      	movs	r2, #100	@ 0x64
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
 8002b56:	1acb      	subs	r3, r1, r3
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	3332      	adds	r3, #50	@ 0x32
 8002b5c:	4a33      	ldr	r2, [pc, #204]	@ (8002c2c <UART_SetConfig+0x4e4>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	095b      	lsrs	r3, r3, #5
 8002b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b68:	441c      	add	r4, r3
 8002b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b6e:	2200      	movs	r2, #0
 8002b70:	673b      	str	r3, [r7, #112]	@ 0x70
 8002b72:	677a      	str	r2, [r7, #116]	@ 0x74
 8002b74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002b78:	4642      	mov	r2, r8
 8002b7a:	464b      	mov	r3, r9
 8002b7c:	1891      	adds	r1, r2, r2
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	415b      	adcs	r3, r3
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b88:	4641      	mov	r1, r8
 8002b8a:	1851      	adds	r1, r2, r1
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	4649      	mov	r1, r9
 8002b90:	414b      	adcs	r3, r1
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	f04f 0200 	mov.w	r2, #0
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ba0:	4659      	mov	r1, fp
 8002ba2:	00cb      	lsls	r3, r1, #3
 8002ba4:	4651      	mov	r1, sl
 8002ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002baa:	4651      	mov	r1, sl
 8002bac:	00ca      	lsls	r2, r1, #3
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4642      	mov	r2, r8
 8002bb6:	189b      	adds	r3, r3, r2
 8002bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002bba:	464b      	mov	r3, r9
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	eb42 0303 	adc.w	r3, r2, r3
 8002bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002bce:	667a      	str	r2, [r7, #100]	@ 0x64
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002bdc:	4649      	mov	r1, r9
 8002bde:	008b      	lsls	r3, r1, #2
 8002be0:	4641      	mov	r1, r8
 8002be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002be6:	4641      	mov	r1, r8
 8002be8:	008a      	lsls	r2, r1, #2
 8002bea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002bee:	f7fd fb09 	bl	8000204 <__aeabi_uldivmod>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8002c2c <UART_SetConfig+0x4e4>)
 8002bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	2164      	movs	r1, #100	@ 0x64
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	3332      	adds	r3, #50	@ 0x32
 8002c0a:	4a08      	ldr	r2, [pc, #32]	@ (8002c2c <UART_SetConfig+0x4e4>)
 8002c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c10:	095b      	lsrs	r3, r3, #5
 8002c12:	f003 020f 	and.w	r2, r3, #15
 8002c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4422      	add	r2, r4
 8002c1e:	609a      	str	r2, [r3, #8]
}
 8002c20:	bf00      	nop
 8002c22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002c26:	46bd      	mov	sp, r7
 8002c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c2c:	51eb851f 	.word	0x51eb851f

08002c30 <memset>:
 8002c30:	4402      	add	r2, r0
 8002c32:	4603      	mov	r3, r0
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d100      	bne.n	8002c3a <memset+0xa>
 8002c38:	4770      	bx	lr
 8002c3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002c3e:	e7f9      	b.n	8002c34 <memset+0x4>

08002c40 <__libc_init_array>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	4d0d      	ldr	r5, [pc, #52]	@ (8002c78 <__libc_init_array+0x38>)
 8002c44:	4c0d      	ldr	r4, [pc, #52]	@ (8002c7c <__libc_init_array+0x3c>)
 8002c46:	1b64      	subs	r4, r4, r5
 8002c48:	10a4      	asrs	r4, r4, #2
 8002c4a:	2600      	movs	r6, #0
 8002c4c:	42a6      	cmp	r6, r4
 8002c4e:	d109      	bne.n	8002c64 <__libc_init_array+0x24>
 8002c50:	4d0b      	ldr	r5, [pc, #44]	@ (8002c80 <__libc_init_array+0x40>)
 8002c52:	4c0c      	ldr	r4, [pc, #48]	@ (8002c84 <__libc_init_array+0x44>)
 8002c54:	f000 f818 	bl	8002c88 <_init>
 8002c58:	1b64      	subs	r4, r4, r5
 8002c5a:	10a4      	asrs	r4, r4, #2
 8002c5c:	2600      	movs	r6, #0
 8002c5e:	42a6      	cmp	r6, r4
 8002c60:	d105      	bne.n	8002c6e <__libc_init_array+0x2e>
 8002c62:	bd70      	pop	{r4, r5, r6, pc}
 8002c64:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c68:	4798      	blx	r3
 8002c6a:	3601      	adds	r6, #1
 8002c6c:	e7ee      	b.n	8002c4c <__libc_init_array+0xc>
 8002c6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002c72:	4798      	blx	r3
 8002c74:	3601      	adds	r6, #1
 8002c76:	e7f2      	b.n	8002c5e <__libc_init_array+0x1e>
 8002c78:	08002cc8 	.word	0x08002cc8
 8002c7c:	08002cc8 	.word	0x08002cc8
 8002c80:	08002cc8 	.word	0x08002cc8
 8002c84:	08002ccc 	.word	0x08002ccc

08002c88 <_init>:
 8002c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c8a:	bf00      	nop
 8002c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c8e:	bc08      	pop	{r3}
 8002c90:	469e      	mov	lr, r3
 8002c92:	4770      	bx	lr

08002c94 <_fini>:
 8002c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c96:	bf00      	nop
 8002c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c9a:	bc08      	pop	{r3}
 8002c9c:	469e      	mov	lr, r3
 8002c9e:	4770      	bx	lr
