
project012-docklight-NucleoF446RE-ledControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081ec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  080083c0  080083c0  000093c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008884  08008884  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008884  08008884  00009884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800888c  0800888c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800888c  0800888c  0000988c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008890  08008890  00009890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008894  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d4  08008a68  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08008a68  0000a418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009670  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b20  00000000  00000000  00013874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00015398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000062d  00000000  00000000  00015bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021de6  00000000  00000000  000161e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa26  00000000  00000000  00037fcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ca561  00000000  00000000  000429f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010cf52  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003604  00000000  00000000  0010cf98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0011059c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080083a4 	.word	0x080083a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080083a4 	.word	0x080083a4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9be 	b.w	800107c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	@ (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9d08      	ldr	r5, [sp, #32]
 8000d8a:	468e      	mov	lr, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	4688      	mov	r8, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4617      	mov	r7, r2
 8000d98:	d962      	bls.n	8000e60 <__udivmoddi4+0xdc>
 8000d9a:	fab2 f682 	clz	r6, r2
 8000d9e:	b14e      	cbz	r6, 8000db4 <__udivmoddi4+0x30>
 8000da0:	f1c6 0320 	rsb	r3, r6, #32
 8000da4:	fa01 f806 	lsl.w	r8, r1, r6
 8000da8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dac:	40b7      	lsls	r7, r6
 8000dae:	ea43 0808 	orr.w	r8, r3, r8
 8000db2:	40b4      	lsls	r4, r6
 8000db4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000db8:	fa1f fc87 	uxth.w	ip, r7
 8000dbc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000dc6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dca:	fb01 f20c 	mul.w	r2, r1, ip
 8000dce:	429a      	cmp	r2, r3
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000dd8:	f080 80ea 	bcs.w	8000fb0 <__udivmoddi4+0x22c>
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	f240 80e7 	bls.w	8000fb0 <__udivmoddi4+0x22c>
 8000de2:	3902      	subs	r1, #2
 8000de4:	443b      	add	r3, r7
 8000de6:	1a9a      	subs	r2, r3, r2
 8000de8:	b2a3      	uxth	r3, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000df6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dfa:	459c      	cmp	ip, r3
 8000dfc:	d909      	bls.n	8000e12 <__udivmoddi4+0x8e>
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e04:	f080 80d6 	bcs.w	8000fb4 <__udivmoddi4+0x230>
 8000e08:	459c      	cmp	ip, r3
 8000e0a:	f240 80d3 	bls.w	8000fb4 <__udivmoddi4+0x230>
 8000e0e:	443b      	add	r3, r7
 8000e10:	3802      	subs	r0, #2
 8000e12:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e16:	eba3 030c 	sub.w	r3, r3, ip
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11d      	cbz	r5, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40f3      	lsrs	r3, r6
 8000e20:	2200      	movs	r2, #0
 8000e22:	e9c5 3200 	strd	r3, r2, [r5]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d905      	bls.n	8000e3a <__udivmoddi4+0xb6>
 8000e2e:	b10d      	cbz	r5, 8000e34 <__udivmoddi4+0xb0>
 8000e30:	e9c5 0100 	strd	r0, r1, [r5]
 8000e34:	2100      	movs	r1, #0
 8000e36:	4608      	mov	r0, r1
 8000e38:	e7f5      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e3a:	fab3 f183 	clz	r1, r3
 8000e3e:	2900      	cmp	r1, #0
 8000e40:	d146      	bne.n	8000ed0 <__udivmoddi4+0x14c>
 8000e42:	4573      	cmp	r3, lr
 8000e44:	d302      	bcc.n	8000e4c <__udivmoddi4+0xc8>
 8000e46:	4282      	cmp	r2, r0
 8000e48:	f200 8105 	bhi.w	8001056 <__udivmoddi4+0x2d2>
 8000e4c:	1a84      	subs	r4, r0, r2
 8000e4e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e52:	2001      	movs	r0, #1
 8000e54:	4690      	mov	r8, r2
 8000e56:	2d00      	cmp	r5, #0
 8000e58:	d0e5      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e5a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e5e:	e7e2      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	2a00      	cmp	r2, #0
 8000e62:	f000 8090 	beq.w	8000f86 <__udivmoddi4+0x202>
 8000e66:	fab2 f682 	clz	r6, r2
 8000e6a:	2e00      	cmp	r6, #0
 8000e6c:	f040 80a4 	bne.w	8000fb8 <__udivmoddi4+0x234>
 8000e70:	1a8a      	subs	r2, r1, r2
 8000e72:	0c03      	lsrs	r3, r0, #16
 8000e74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e78:	b280      	uxth	r0, r0
 8000e7a:	b2bc      	uxth	r4, r7
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e82:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e8a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x11e>
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e98:	d202      	bcs.n	8000ea0 <__udivmoddi4+0x11c>
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	f200 80e0 	bhi.w	8001060 <__udivmoddi4+0x2dc>
 8000ea0:	46c4      	mov	ip, r8
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ea8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eac:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000eb0:	fb02 f404 	mul.w	r4, r2, r4
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	d907      	bls.n	8000ec8 <__udivmoddi4+0x144>
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	f102 30ff 	add.w	r0, r2, #4294967295
 8000ebe:	d202      	bcs.n	8000ec6 <__udivmoddi4+0x142>
 8000ec0:	429c      	cmp	r4, r3
 8000ec2:	f200 80ca 	bhi.w	800105a <__udivmoddi4+0x2d6>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	1b1b      	subs	r3, r3, r4
 8000eca:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000ece:	e7a5      	b.n	8000e1c <__udivmoddi4+0x98>
 8000ed0:	f1c1 0620 	rsb	r6, r1, #32
 8000ed4:	408b      	lsls	r3, r1
 8000ed6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eda:	431f      	orrs	r7, r3
 8000edc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ee0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ee4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ee8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eec:	4323      	orrs	r3, r4
 8000eee:	fa00 f801 	lsl.w	r8, r0, r1
 8000ef2:	fa1f fc87 	uxth.w	ip, r7
 8000ef6:	fbbe f0f9 	udiv	r0, lr, r9
 8000efa:	0c1c      	lsrs	r4, r3, #16
 8000efc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f00:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f04:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f08:	45a6      	cmp	lr, r4
 8000f0a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f0e:	d909      	bls.n	8000f24 <__udivmoddi4+0x1a0>
 8000f10:	193c      	adds	r4, r7, r4
 8000f12:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f16:	f080 809c 	bcs.w	8001052 <__udivmoddi4+0x2ce>
 8000f1a:	45a6      	cmp	lr, r4
 8000f1c:	f240 8099 	bls.w	8001052 <__udivmoddi4+0x2ce>
 8000f20:	3802      	subs	r0, #2
 8000f22:	443c      	add	r4, r7
 8000f24:	eba4 040e 	sub.w	r4, r4, lr
 8000f28:	fa1f fe83 	uxth.w	lr, r3
 8000f2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f30:	fb09 4413 	mls	r4, r9, r3, r4
 8000f34:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f38:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f3c:	45a4      	cmp	ip, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1ce>
 8000f40:	193c      	adds	r4, r7, r4
 8000f42:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f46:	f080 8082 	bcs.w	800104e <__udivmoddi4+0x2ca>
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d97f      	bls.n	800104e <__udivmoddi4+0x2ca>
 8000f4e:	3b02      	subs	r3, #2
 8000f50:	443c      	add	r4, r7
 8000f52:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f56:	eba4 040c 	sub.w	r4, r4, ip
 8000f5a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f5e:	4564      	cmp	r4, ip
 8000f60:	4673      	mov	r3, lr
 8000f62:	46e1      	mov	r9, ip
 8000f64:	d362      	bcc.n	800102c <__udivmoddi4+0x2a8>
 8000f66:	d05f      	beq.n	8001028 <__udivmoddi4+0x2a4>
 8000f68:	b15d      	cbz	r5, 8000f82 <__udivmoddi4+0x1fe>
 8000f6a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f6e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f72:	fa04 f606 	lsl.w	r6, r4, r6
 8000f76:	fa22 f301 	lsr.w	r3, r2, r1
 8000f7a:	431e      	orrs	r6, r3
 8000f7c:	40cc      	lsrs	r4, r1
 8000f7e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f82:	2100      	movs	r1, #0
 8000f84:	e74f      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000f86:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f8a:	0c01      	lsrs	r1, r0, #16
 8000f8c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f90:	b280      	uxth	r0, r0
 8000f92:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f96:	463b      	mov	r3, r7
 8000f98:	4638      	mov	r0, r7
 8000f9a:	463c      	mov	r4, r7
 8000f9c:	46b8      	mov	r8, r7
 8000f9e:	46be      	mov	lr, r7
 8000fa0:	2620      	movs	r6, #32
 8000fa2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fa6:	eba2 0208 	sub.w	r2, r2, r8
 8000faa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fae:	e766      	b.n	8000e7e <__udivmoddi4+0xfa>
 8000fb0:	4601      	mov	r1, r0
 8000fb2:	e718      	b.n	8000de6 <__udivmoddi4+0x62>
 8000fb4:	4610      	mov	r0, r2
 8000fb6:	e72c      	b.n	8000e12 <__udivmoddi4+0x8e>
 8000fb8:	f1c6 0220 	rsb	r2, r6, #32
 8000fbc:	fa2e f302 	lsr.w	r3, lr, r2
 8000fc0:	40b7      	lsls	r7, r6
 8000fc2:	40b1      	lsls	r1, r6
 8000fc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fd2:	b2bc      	uxth	r4, r7
 8000fd4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fd8:	0c11      	lsrs	r1, r2, #16
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb08 f904 	mul.w	r9, r8, r4
 8000fe2:	40b0      	lsls	r0, r6
 8000fe4:	4589      	cmp	r9, r1
 8000fe6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fea:	b280      	uxth	r0, r0
 8000fec:	d93e      	bls.n	800106c <__udivmoddi4+0x2e8>
 8000fee:	1879      	adds	r1, r7, r1
 8000ff0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ff4:	d201      	bcs.n	8000ffa <__udivmoddi4+0x276>
 8000ff6:	4589      	cmp	r9, r1
 8000ff8:	d81f      	bhi.n	800103a <__udivmoddi4+0x2b6>
 8000ffa:	eba1 0109 	sub.w	r1, r1, r9
 8000ffe:	fbb1 f9fe 	udiv	r9, r1, lr
 8001002:	fb09 f804 	mul.w	r8, r9, r4
 8001006:	fb0e 1119 	mls	r1, lr, r9, r1
 800100a:	b292      	uxth	r2, r2
 800100c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001010:	4542      	cmp	r2, r8
 8001012:	d229      	bcs.n	8001068 <__udivmoddi4+0x2e4>
 8001014:	18ba      	adds	r2, r7, r2
 8001016:	f109 31ff 	add.w	r1, r9, #4294967295
 800101a:	d2c4      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 800101c:	4542      	cmp	r2, r8
 800101e:	d2c2      	bcs.n	8000fa6 <__udivmoddi4+0x222>
 8001020:	f1a9 0102 	sub.w	r1, r9, #2
 8001024:	443a      	add	r2, r7
 8001026:	e7be      	b.n	8000fa6 <__udivmoddi4+0x222>
 8001028:	45f0      	cmp	r8, lr
 800102a:	d29d      	bcs.n	8000f68 <__udivmoddi4+0x1e4>
 800102c:	ebbe 0302 	subs.w	r3, lr, r2
 8001030:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001034:	3801      	subs	r0, #1
 8001036:	46e1      	mov	r9, ip
 8001038:	e796      	b.n	8000f68 <__udivmoddi4+0x1e4>
 800103a:	eba7 0909 	sub.w	r9, r7, r9
 800103e:	4449      	add	r1, r9
 8001040:	f1a8 0c02 	sub.w	ip, r8, #2
 8001044:	fbb1 f9fe 	udiv	r9, r1, lr
 8001048:	fb09 f804 	mul.w	r8, r9, r4
 800104c:	e7db      	b.n	8001006 <__udivmoddi4+0x282>
 800104e:	4673      	mov	r3, lr
 8001050:	e77f      	b.n	8000f52 <__udivmoddi4+0x1ce>
 8001052:	4650      	mov	r0, sl
 8001054:	e766      	b.n	8000f24 <__udivmoddi4+0x1a0>
 8001056:	4608      	mov	r0, r1
 8001058:	e6fd      	b.n	8000e56 <__udivmoddi4+0xd2>
 800105a:	443b      	add	r3, r7
 800105c:	3a02      	subs	r2, #2
 800105e:	e733      	b.n	8000ec8 <__udivmoddi4+0x144>
 8001060:	f1ac 0c02 	sub.w	ip, ip, #2
 8001064:	443b      	add	r3, r7
 8001066:	e71c      	b.n	8000ea2 <__udivmoddi4+0x11e>
 8001068:	4649      	mov	r1, r9
 800106a:	e79c      	b.n	8000fa6 <__udivmoddi4+0x222>
 800106c:	eba1 0109 	sub.w	r1, r1, r9
 8001070:	46c4      	mov	ip, r8
 8001072:	fbb1 f9fe 	udiv	r9, r1, lr
 8001076:	fb09 f804 	mul.w	r8, r9, r4
 800107a:	e7c4      	b.n	8001006 <__udivmoddi4+0x282>

0800107c <__aeabi_idiv0>:
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop

08001080 <uart_start_rx_it>:
static volatile uint8_t cmd_ready = 0;
static size_t cmd_len = 0;

static char tx_buf[64];

static void uart_start_rx_it(void) {
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart2, &rx_ch, 1);
 8001084:	2201      	movs	r2, #1
 8001086:	4903      	ldr	r1, [pc, #12]	@ (8001094 <uart_start_rx_it+0x14>)
 8001088:	4803      	ldr	r0, [pc, #12]	@ (8001098 <uart_start_rx_it+0x18>)
 800108a:	f001 fe4c 	bl	8002d26 <HAL_UART_Receive_IT>
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000238 	.word	0x20000238
 8001098:	200001f0 	.word	0x200001f0

0800109c <uart_send>:

static void uart_send(const char *s) {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)s, (uint16_t)strlen(s), HAL_MAX_DELAY);
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff f913 	bl	80002d0 <strlen>
 80010aa:	4603      	mov	r3, r0
 80010ac:	b29a      	uxth	r2, r3
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	6879      	ldr	r1, [r7, #4]
 80010b4:	4803      	ldr	r0, [pc, #12]	@ (80010c4 <uart_send+0x28>)
 80010b6:	f001 fdab 	bl	8002c10 <HAL_UART_Transmit>
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	200001f0 	.word	0x200001f0

080010c8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a16      	ldr	r2, [pc, #88]	@ (8001130 <HAL_UART_RxCpltCallback+0x68>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d125      	bne.n	8001126 <HAL_UART_RxCpltCallback+0x5e>
    {
        char c = (char)rx_ch;
 80010da:	4b16      	ldr	r3, [pc, #88]	@ (8001134 <HAL_UART_RxCpltCallback+0x6c>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	73fb      	strb	r3, [r7, #15]

        if (c == '\r') { /* ignore CR */ }
 80010e0:	7bfb      	ldrb	r3, [r7, #15]
 80010e2:	2b0d      	cmp	r3, #13
 80010e4:	d01a      	beq.n	800111c <HAL_UART_RxCpltCallback+0x54>
        else if (c == '\n') {
 80010e6:	7bfb      	ldrb	r3, [r7, #15]
 80010e8:	2b0a      	cmp	r3, #10
 80010ea:	d10b      	bne.n	8001104 <HAL_UART_RxCpltCallback+0x3c>
            cmd_buf[cmd_len] = '\0';
 80010ec:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <HAL_UART_RxCpltCallback+0x70>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a12      	ldr	r2, [pc, #72]	@ (800113c <HAL_UART_RxCpltCallback+0x74>)
 80010f2:	2100      	movs	r1, #0
 80010f4:	54d1      	strb	r1, [r2, r3]
            cmd_ready = 1;               // a full line is ready
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_UART_RxCpltCallback+0x78>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
            cmd_len = 0;                 // (optional) clear here
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <HAL_UART_RxCpltCallback+0x70>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e00b      	b.n	800111c <HAL_UART_RxCpltCallback+0x54>
        } else {
            if (cmd_len < sizeof(cmd_buf) - 1)
 8001104:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <HAL_UART_RxCpltCallback+0x70>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2b3e      	cmp	r3, #62	@ 0x3e
 800110a:	d807      	bhi.n	800111c <HAL_UART_RxCpltCallback+0x54>
                cmd_buf[cmd_len++] = c;  // accumulate characters
 800110c:	4b0a      	ldr	r3, [pc, #40]	@ (8001138 <HAL_UART_RxCpltCallback+0x70>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	1c5a      	adds	r2, r3, #1
 8001112:	4909      	ldr	r1, [pc, #36]	@ (8001138 <HAL_UART_RxCpltCallback+0x70>)
 8001114:	600a      	str	r2, [r1, #0]
 8001116:	4909      	ldr	r1, [pc, #36]	@ (800113c <HAL_UART_RxCpltCallback+0x74>)
 8001118:	7bfa      	ldrb	r2, [r7, #15]
 800111a:	54ca      	strb	r2, [r1, r3]
        }

        // re-arm for next byte
        HAL_UART_Receive_IT(&huart2, &rx_ch, 1);
 800111c:	2201      	movs	r2, #1
 800111e:	4905      	ldr	r1, [pc, #20]	@ (8001134 <HAL_UART_RxCpltCallback+0x6c>)
 8001120:	4808      	ldr	r0, [pc, #32]	@ (8001144 <HAL_UART_RxCpltCallback+0x7c>)
 8001122:	f001 fe00 	bl	8002d26 <HAL_UART_Receive_IT>
    }
}
 8001126:	bf00      	nop
 8001128:	3710      	adds	r7, #16
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	40004400 	.word	0x40004400
 8001134:	20000238 	.word	0x20000238
 8001138:	20000280 	.word	0x20000280
 800113c:	2000023c 	.word	0x2000023c
 8001140:	2000027c 	.word	0x2000027c
 8001144:	200001f0 	.word	0x200001f0

08001148 <process_command>:

static void process_command(const char *line)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b094      	sub	sp, #80	@ 0x50
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
    // Make an uppercase copy so commands are case-insensitive
    char cmd[64];
    size_t n = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (; line[n] && n < sizeof(cmd)-1; ++n)
 8001154:	e011      	b.n	800117a <process_command+0x32>
        cmd[n] = (char)toupper((unsigned char)line[n]);
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f002 fd72 	bl	8003c48 <toupper>
 8001164:	4603      	mov	r3, r0
 8001166:	b2d9      	uxtb	r1, r3
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800116e:	4413      	add	r3, r2
 8001170:	460a      	mov	r2, r1
 8001172:	701a      	strb	r2, [r3, #0]
    for (; line[n] && n < sizeof(cmd)-1; ++n)
 8001174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001176:	3301      	adds	r3, #1
 8001178:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <process_command+0x44>
 8001186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001188:	2b3e      	cmp	r3, #62	@ 0x3e
 800118a:	d9e4      	bls.n	8001156 <process_command+0xe>
    cmd[n] = '\0';
 800118c:	f107 0208 	add.w	r2, r7, #8
 8001190:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001192:	4413      	add	r3, r2
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]

    if (strcmp(cmd, "LED ON") == 0)
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	4929      	ldr	r1, [pc, #164]	@ (8001244 <process_command+0xfc>)
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f836 	bl	8000210 <strcmp>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10d      	bne.n	80011c6 <process_command+0x7e>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80011aa:	2201      	movs	r2, #1
 80011ac:	2120      	movs	r1, #32
 80011ae:	4826      	ldr	r0, [pc, #152]	@ (8001248 <process_command+0x100>)
 80011b0:	f000 fedc 	bl	8001f6c <HAL_GPIO_WritePin>
        snprintf(tx_buf, sizeof(tx_buf), "OK LED=1\r\n");
 80011b4:	4a25      	ldr	r2, [pc, #148]	@ (800124c <process_command+0x104>)
 80011b6:	2140      	movs	r1, #64	@ 0x40
 80011b8:	4825      	ldr	r0, [pc, #148]	@ (8001250 <process_command+0x108>)
 80011ba:	f003 fc75 	bl	8004aa8 <sniprintf>
        uart_send(tx_buf);
 80011be:	4824      	ldr	r0, [pc, #144]	@ (8001250 <process_command+0x108>)
 80011c0:	f7ff ff6c 	bl	800109c <uart_send>
    }
    else
    {
        uart_send("ERR UNKNOWN CMD\r\n");
    }
}
 80011c4:	e039      	b.n	800123a <process_command+0xf2>
    else if (strcmp(cmd, "LED OFF") == 0)
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	4922      	ldr	r1, [pc, #136]	@ (8001254 <process_command+0x10c>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f81f 	bl	8000210 <strcmp>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10d      	bne.n	80011f4 <process_command+0xac>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	2120      	movs	r1, #32
 80011dc:	481a      	ldr	r0, [pc, #104]	@ (8001248 <process_command+0x100>)
 80011de:	f000 fec5 	bl	8001f6c <HAL_GPIO_WritePin>
        snprintf(tx_buf, sizeof(tx_buf), "OK LED=0\r\n");
 80011e2:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <process_command+0x110>)
 80011e4:	2140      	movs	r1, #64	@ 0x40
 80011e6:	481a      	ldr	r0, [pc, #104]	@ (8001250 <process_command+0x108>)
 80011e8:	f003 fc5e 	bl	8004aa8 <sniprintf>
        uart_send(tx_buf);
 80011ec:	4818      	ldr	r0, [pc, #96]	@ (8001250 <process_command+0x108>)
 80011ee:	f7ff ff55 	bl	800109c <uart_send>
}
 80011f2:	e022      	b.n	800123a <process_command+0xf2>
    else if (strcmp(cmd, "STATUS") == 0)
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4918      	ldr	r1, [pc, #96]	@ (800125c <process_command+0x114>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f808 	bl	8000210 <strcmp>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d116      	bne.n	8001234 <process_command+0xec>
        GPIO_PinState s = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001206:	2120      	movs	r1, #32
 8001208:	480f      	ldr	r0, [pc, #60]	@ (8001248 <process_command+0x100>)
 800120a:	f000 fe97 	bl	8001f3c <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        snprintf(tx_buf, sizeof(tx_buf), "STATUS LED=%d\r\n", (s == GPIO_PIN_SET) ? 1 : 0);
 8001214:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001218:	2b01      	cmp	r3, #1
 800121a:	bf0c      	ite	eq
 800121c:	2301      	moveq	r3, #1
 800121e:	2300      	movne	r3, #0
 8001220:	b2db      	uxtb	r3, r3
 8001222:	4a0f      	ldr	r2, [pc, #60]	@ (8001260 <process_command+0x118>)
 8001224:	2140      	movs	r1, #64	@ 0x40
 8001226:	480a      	ldr	r0, [pc, #40]	@ (8001250 <process_command+0x108>)
 8001228:	f003 fc3e 	bl	8004aa8 <sniprintf>
        uart_send(tx_buf);
 800122c:	4808      	ldr	r0, [pc, #32]	@ (8001250 <process_command+0x108>)
 800122e:	f7ff ff35 	bl	800109c <uart_send>
}
 8001232:	e002      	b.n	800123a <process_command+0xf2>
        uart_send("ERR UNKNOWN CMD\r\n");
 8001234:	480b      	ldr	r0, [pc, #44]	@ (8001264 <process_command+0x11c>)
 8001236:	f7ff ff31 	bl	800109c <uart_send>
}
 800123a:	bf00      	nop
 800123c:	3750      	adds	r7, #80	@ 0x50
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	080083c0 	.word	0x080083c0
 8001248:	40020000 	.word	0x40020000
 800124c:	080083c8 	.word	0x080083c8
 8001250:	20000284 	.word	0x20000284
 8001254:	080083d4 	.word	0x080083d4
 8001258:	080083dc 	.word	0x080083dc
 800125c:	080083e8 	.word	0x080083e8
 8001260:	080083f0 	.word	0x080083f0
 8001264:	08008400 	.word	0x08008400

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b090      	sub	sp, #64	@ 0x40
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126e:	f000 fabb 	bl	80017e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001272:	f000 f825 	bl	80012c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001276:	f000 f8bb 	bl	80013f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800127a:	f000 f88f 	bl	800139c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_start_rx_it();
 800127e:	f7ff feff 	bl	8001080 <uart_start_rx_it>
  uart_send("READY\r\nCMDS: LED ON | LED OFF | STATUS\r\n");
 8001282:	480c      	ldr	r0, [pc, #48]	@ (80012b4 <main+0x4c>)
 8001284:	f7ff ff0a 	bl	800109c <uart_send>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	    if (cmd_ready) {
 8001288:	4b0b      	ldr	r3, [pc, #44]	@ (80012b8 <main+0x50>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	b2db      	uxtb	r3, r3
 800128e:	2b00      	cmp	r3, #0
 8001290:	d0fa      	beq.n	8001288 <main+0x20>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001292:	b672      	cpsid	i
}
 8001294:	bf00      	nop
	        __disable_irq();
	        cmd_ready = 0;
 8001296:	4b08      	ldr	r3, [pc, #32]	@ (80012b8 <main+0x50>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	        char line[64];
	        strcpy(line, cmd_buf);   // take a snapshot safely
 800129c:	463b      	mov	r3, r7
 800129e:	4907      	ldr	r1, [pc, #28]	@ (80012bc <main+0x54>)
 80012a0:	4618      	mov	r0, r3
 80012a2:	f003 fd1c 	bl	8004cde <strcpy>
  __ASM volatile ("cpsie i" : : : "memory");
 80012a6:	b662      	cpsie	i
}
 80012a8:	bf00      	nop
	        __enable_irq();

	        process_command(line);
 80012aa:	463b      	mov	r3, r7
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff4b 	bl	8001148 <process_command>
	    if (cmd_ready) {
 80012b2:	e7e9      	b.n	8001288 <main+0x20>
 80012b4:	08008414 	.word	0x08008414
 80012b8:	2000027c 	.word	0x2000027c
 80012bc:	2000023c 	.word	0x2000023c

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b094      	sub	sp, #80	@ 0x50
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 031c 	add.w	r3, r7, #28
 80012ca:	2234      	movs	r2, #52	@ 0x34
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fc85 	bl	8004bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	f107 0308 	add.w	r3, r7, #8
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
 80012dc:	605a      	str	r2, [r3, #4]
 80012de:	609a      	str	r2, [r3, #8]
 80012e0:	60da      	str	r2, [r3, #12]
 80012e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001394 <SystemClock_Config+0xd4>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	4a29      	ldr	r2, [pc, #164]	@ (8001394 <SystemClock_Config+0xd4>)
 80012ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <SystemClock_Config+0xd4>)
 80012f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <SystemClock_Config+0xd8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800130c:	4a22      	ldr	r2, [pc, #136]	@ (8001398 <SystemClock_Config+0xd8>)
 800130e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <SystemClock_Config+0xd8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800131c:	603b      	str	r3, [r7, #0]
 800131e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001320:	2302      	movs	r3, #2
 8001322:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001328:	2310      	movs	r3, #16
 800132a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132c:	2302      	movs	r3, #2
 800132e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001330:	2300      	movs	r3, #0
 8001332:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001334:	2310      	movs	r3, #16
 8001336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001338:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800133c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800133e:	2304      	movs	r3, #4
 8001340:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001342:	2302      	movs	r3, #2
 8001344:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001346:	2302      	movs	r3, #2
 8001348:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	4618      	mov	r0, r3
 8001350:	f001 f970 	bl	8002634 <HAL_RCC_OscConfig>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800135a:	f000 f88b 	bl	8001474 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135e:	230f      	movs	r3, #15
 8001360:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001362:	2302      	movs	r3, #2
 8001364:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001370:	2300      	movs	r3, #0
 8001372:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2102      	movs	r1, #2
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fe10 	bl	8001fa0 <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001386:	f000 f875 	bl	8001474 <Error_Handler>
  }
}
 800138a:	bf00      	nop
 800138c:	3750      	adds	r7, #80	@ 0x50
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40007000 	.word	0x40007000

0800139c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013a0:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a2:	4a12      	ldr	r2, [pc, #72]	@ (80013ec <MX_USART2_UART_Init+0x50>)
 80013a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013c0:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c2:	220c      	movs	r2, #12
 80013c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013cc:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013d2:	4805      	ldr	r0, [pc, #20]	@ (80013e8 <MX_USART2_UART_Init+0x4c>)
 80013d4:	f001 fbcc 	bl	8002b70 <HAL_UART_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013de:	f000 f849 	bl	8001474 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	200001f0 	.word	0x200001f0
 80013ec:	40004400 	.word	0x40004400

080013f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b088      	sub	sp, #32
 80013f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2200      	movs	r2, #0
 80013fc:	601a      	str	r2, [r3, #0]
 80013fe:	605a      	str	r2, [r3, #4]
 8001400:	609a      	str	r2, [r3, #8]
 8001402:	60da      	str	r2, [r3, #12]
 8001404:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	60bb      	str	r3, [r7, #8]
 800140a:	4b18      	ldr	r3, [pc, #96]	@ (800146c <MX_GPIO_Init+0x7c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a17      	ldr	r2, [pc, #92]	@ (800146c <MX_GPIO_Init+0x7c>)
 8001410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b15      	ldr	r3, [pc, #84]	@ (800146c <MX_GPIO_Init+0x7c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
 8001426:	4b11      	ldr	r3, [pc, #68]	@ (800146c <MX_GPIO_Init+0x7c>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a10      	ldr	r2, [pc, #64]	@ (800146c <MX_GPIO_Init+0x7c>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b0e      	ldr	r3, [pc, #56]	@ (800146c <MX_GPIO_Init+0x7c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	2120      	movs	r1, #32
 8001442:	480b      	ldr	r0, [pc, #44]	@ (8001470 <MX_GPIO_Init+0x80>)
 8001444:	f000 fd92 	bl	8001f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001448:	2320      	movs	r3, #32
 800144a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144c:	2301      	movs	r3, #1
 800144e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001454:	2300      	movs	r3, #0
 8001456:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	4804      	ldr	r0, [pc, #16]	@ (8001470 <MX_GPIO_Init+0x80>)
 8001460:	f000 fbd8 	bl	8001c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40023800 	.word	0x40023800
 8001470:	40020000 	.word	0x40020000

08001474 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001478:	b672      	cpsid	i
}
 800147a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <Error_Handler+0x8>

08001480 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <HAL_MspInit+0x4c>)
 800148c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148e:	4a0f      	ldr	r2, [pc, #60]	@ (80014cc <HAL_MspInit+0x4c>)
 8001490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001494:	6453      	str	r3, [r2, #68]	@ 0x44
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_MspInit+0x4c>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	603b      	str	r3, [r7, #0]
 80014a6:	4b09      	ldr	r3, [pc, #36]	@ (80014cc <HAL_MspInit+0x4c>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	4a08      	ldr	r2, [pc, #32]	@ (80014cc <HAL_MspInit+0x4c>)
 80014ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b2:	4b06      	ldr	r3, [pc, #24]	@ (80014cc <HAL_MspInit+0x4c>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	603b      	str	r3, [r7, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014be:	2007      	movs	r0, #7
 80014c0:	f000 fad4 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_UART_MspInit+0x94>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d133      	bne.n	800155a <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <HAL_UART_MspInit+0x98>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001568 <HAL_UART_MspInit+0x98>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <HAL_UART_MspInit+0x98>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_UART_MspInit+0x98>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <HAL_UART_MspInit+0x98>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_UART_MspInit+0x98>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800152a:	230c      	movs	r3, #12
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153a:	2307      	movs	r3, #7
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4809      	ldr	r0, [pc, #36]	@ (800156c <HAL_UART_MspInit+0x9c>)
 8001546:	f000 fb65 	bl	8001c14 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2026      	movs	r0, #38	@ 0x26
 8001550:	f000 fa97 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001554:	2026      	movs	r0, #38	@ 0x26
 8001556:	f000 fab0 	bl	8001aba <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	@ 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40004400 	.word	0x40004400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000

08001570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001574:	bf00      	nop
 8001576:	e7fd      	b.n	8001574 <NMI_Handler+0x4>

08001578 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157c:	bf00      	nop
 800157e:	e7fd      	b.n	800157c <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	bf00      	nop
 8001586:	e7fd      	b.n	8001584 <MemManage_Handler+0x4>

08001588 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158c:	bf00      	nop
 800158e:	e7fd      	b.n	800158c <BusFault_Handler+0x4>

08001590 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <UsageFault_Handler+0x4>

08001598 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c6:	f000 f961 	bl	800188c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015d4:	4802      	ldr	r0, [pc, #8]	@ (80015e0 <USART2_IRQHandler+0x10>)
 80015d6:	f001 fbcb 	bl	8002d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200001f0 	.word	0x200001f0

080015e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  return 1;
 80015e8:	2301      	movs	r3, #1
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <_kill>:

int _kill(int pid, int sig)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
 80015fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fe:	f003 fb41 	bl	8004c84 <__errno>
 8001602:	4603      	mov	r3, r0
 8001604:	2216      	movs	r2, #22
 8001606:	601a      	str	r2, [r3, #0]
  return -1;
 8001608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800160c:	4618      	mov	r0, r3
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <_exit>:

void _exit (int status)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800161c:	f04f 31ff 	mov.w	r1, #4294967295
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ffe7 	bl	80015f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001626:	bf00      	nop
 8001628:	e7fd      	b.n	8001626 <_exit+0x12>

0800162a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	60f8      	str	r0, [r7, #12]
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00a      	b.n	8001652 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800163c:	f3af 8000 	nop.w
 8001640:	4601      	mov	r1, r0
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	1c5a      	adds	r2, r3, #1
 8001646:	60ba      	str	r2, [r7, #8]
 8001648:	b2ca      	uxtb	r2, r1
 800164a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	3301      	adds	r3, #1
 8001650:	617b      	str	r3, [r7, #20]
 8001652:	697a      	ldr	r2, [r7, #20]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	429a      	cmp	r2, r3
 8001658:	dbf0      	blt.n	800163c <_read+0x12>
  }

  return len;
 800165a:	687b      	ldr	r3, [r7, #4]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e009      	b.n	800168a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	1c5a      	adds	r2, r3, #1
 800167a:	60ba      	str	r2, [r7, #8]
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	4618      	mov	r0, r3
 8001680:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	3301      	adds	r3, #1
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	429a      	cmp	r2, r3
 8001690:	dbf1      	blt.n	8001676 <_write+0x12>
  }
  return len;
 8001692:	687b      	ldr	r3, [r7, #4]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_close>:

int _close(int file)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016c4:	605a      	str	r2, [r3, #4]
  return 0;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_isatty>:

int _isatty(int file)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80016dc:	2301      	movs	r3, #1
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b085      	sub	sp, #20
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3714      	adds	r7, #20
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b086      	sub	sp, #24
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800170c:	4a14      	ldr	r2, [pc, #80]	@ (8001760 <_sbrk+0x5c>)
 800170e:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <_sbrk+0x60>)
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001718:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d102      	bne.n	8001726 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <_sbrk+0x64>)
 8001722:	4a12      	ldr	r2, [pc, #72]	@ (800176c <_sbrk+0x68>)
 8001724:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001726:	4b10      	ldr	r3, [pc, #64]	@ (8001768 <_sbrk+0x64>)
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	429a      	cmp	r2, r3
 8001732:	d207      	bcs.n	8001744 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001734:	f003 faa6 	bl	8004c84 <__errno>
 8001738:	4603      	mov	r3, r0
 800173a:	220c      	movs	r2, #12
 800173c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	e009      	b.n	8001758 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001744:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800174a:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <_sbrk+0x64>)
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4413      	add	r3, r2
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <_sbrk+0x64>)
 8001754:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001756:	68fb      	ldr	r3, [r7, #12]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20020000 	.word	0x20020000
 8001764:	00000400 	.word	0x00000400
 8001768:	200002c4 	.word	0x200002c4
 800176c:	20000418 	.word	0x20000418

08001770 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <SystemInit+0x20>)
 8001776:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800177a:	4a05      	ldr	r2, [pc, #20]	@ (8001790 <SystemInit+0x20>)
 800177c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001780:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001794:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001798:	f7ff ffea 	bl	8001770 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800179c:	480c      	ldr	r0, [pc, #48]	@ (80017d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800179e:	490d      	ldr	r1, [pc, #52]	@ (80017d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017a0:	4a0d      	ldr	r2, [pc, #52]	@ (80017d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017a4:	e002      	b.n	80017ac <LoopCopyDataInit>

080017a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017aa:	3304      	adds	r3, #4

080017ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017b0:	d3f9      	bcc.n	80017a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017b2:	4a0a      	ldr	r2, [pc, #40]	@ (80017dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017b4:	4c0a      	ldr	r4, [pc, #40]	@ (80017e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b8:	e001      	b.n	80017be <LoopFillZerobss>

080017ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017bc:	3204      	adds	r2, #4

080017be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017c0:	d3fb      	bcc.n	80017ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017c2:	f003 fa65 	bl	8004c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c6:	f7ff fd4f 	bl	8001268 <main>
  bx  lr    
 80017ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017d8:	08008894 	.word	0x08008894
  ldr r2, =_sbss
 80017dc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017e0:	20000418 	.word	0x20000418

080017e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e4:	e7fe      	b.n	80017e4 <ADC_IRQHandler>
	...

080017e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001828 <HAL_Init+0x40>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001828 <HAL_Init+0x40>)
 80017f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <HAL_Init+0x40>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001828 <HAL_Init+0x40>)
 80017fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001804:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <HAL_Init+0x40>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a07      	ldr	r2, [pc, #28]	@ (8001828 <HAL_Init+0x40>)
 800180a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800180e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001810:	2003      	movs	r0, #3
 8001812:	f000 f92b 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001816:	2000      	movs	r0, #0
 8001818:	f000 f808 	bl	800182c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800181c:	f7ff fe30 	bl	8001480 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40023c00 	.word	0x40023c00

0800182c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001834:	4b12      	ldr	r3, [pc, #72]	@ (8001880 <HAL_InitTick+0x54>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4b12      	ldr	r3, [pc, #72]	@ (8001884 <HAL_InitTick+0x58>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	4619      	mov	r1, r3
 800183e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001842:	fbb3 f3f1 	udiv	r3, r3, r1
 8001846:	fbb2 f3f3 	udiv	r3, r2, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f943 	bl	8001ad6 <HAL_SYSTICK_Config>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e00e      	b.n	8001878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2b0f      	cmp	r3, #15
 800185e:	d80a      	bhi.n	8001876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001860:	2200      	movs	r2, #0
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	f04f 30ff 	mov.w	r0, #4294967295
 8001868:	f000 f90b 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800186c:	4a06      	ldr	r2, [pc, #24]	@ (8001888 <HAL_InitTick+0x5c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e000      	b.n	8001878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	20000000 	.word	0x20000000
 8001884:	20000008 	.word	0x20000008
 8001888:	20000004 	.word	0x20000004

0800188c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001890:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_IncTick+0x20>)
 8001892:	781b      	ldrb	r3, [r3, #0]
 8001894:	461a      	mov	r2, r3
 8001896:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_IncTick+0x24>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4413      	add	r3, r2
 800189c:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <HAL_IncTick+0x24>)
 800189e:	6013      	str	r3, [r2, #0]
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000008 	.word	0x20000008
 80018b0:	200002c8 	.word	0x200002c8

080018b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <HAL_GetTick+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	200002c8 	.word	0x200002c8

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	@ (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	@ (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	@ (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	@ (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	@ 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	@ (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	@ (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff29 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff3e 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff31 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}

08001aee <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001aee:	b580      	push	{r7, lr}
 8001af0:	b084      	sub	sp, #16
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001afa:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff feda 	bl	80018b4 <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d008      	beq.n	8001b20 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2280      	movs	r2, #128	@ 0x80
 8001b12:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e052      	b.n	8001bc6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0216 	bic.w	r2, r2, #22
 8001b2e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001b3e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d103      	bne.n	8001b50 <HAL_DMA_Abort+0x62>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d007      	beq.n	8001b60 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0208 	bic.w	r2, r2, #8
 8001b5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 0201 	bic.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b70:	e013      	b.n	8001b9a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b72:	f7ff fe9f 	bl	80018b4 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	d90c      	bls.n	8001b9a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2220      	movs	r2, #32
 8001b84:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2203      	movs	r2, #3
 8001b8a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e015      	b.n	8001bc6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1e4      	bne.n	8001b72 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bac:	223f      	movs	r2, #63	@ 0x3f
 8001bae:	409a      	lsls	r2, r3
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d004      	beq.n	8001bec <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2280      	movs	r2, #128	@ 0x80
 8001be6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e00c      	b.n	8001c06 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2205      	movs	r2, #5
 8001bf0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 0201 	bic.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b089      	sub	sp, #36	@ 0x24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]
 8001c2e:	e165      	b.n	8001efc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	f040 8154 	bne.w	8001ef6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d005      	beq.n	8001c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d130      	bne.n	8001cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	005b      	lsls	r3, r3, #1
 8001c70:	2203      	movs	r2, #3
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68da      	ldr	r2, [r3, #12]
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	091b      	lsrs	r3, r3, #4
 8001cb2:	f003 0201 	and.w	r2, r3, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b03      	cmp	r3, #3
 8001cd2:	d017      	beq.n	8001d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	2203      	movs	r2, #3
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689a      	ldr	r2, [r3, #8]
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d123      	bne.n	8001d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	08da      	lsrs	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3208      	adds	r2, #8
 8001d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	220f      	movs	r2, #15
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4013      	ands	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	691a      	ldr	r2, [r3, #16]
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	08da      	lsrs	r2, r3, #3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3208      	adds	r2, #8
 8001d52:	69b9      	ldr	r1, [r7, #24]
 8001d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f003 0203 	and.w	r2, r3, #3
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80ae 	beq.w	8001ef6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f14 <HAL_GPIO_Init+0x300>)
 8001da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da2:	4a5c      	ldr	r2, [pc, #368]	@ (8001f14 <HAL_GPIO_Init+0x300>)
 8001da4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001da8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001daa:	4b5a      	ldr	r3, [pc, #360]	@ (8001f14 <HAL_GPIO_Init+0x300>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001db2:	60fb      	str	r3, [r7, #12]
 8001db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001db6:	4a58      	ldr	r2, [pc, #352]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	089b      	lsrs	r3, r3, #2
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	220f      	movs	r2, #15
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4f      	ldr	r2, [pc, #316]	@ (8001f1c <HAL_GPIO_Init+0x308>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d025      	beq.n	8001e2e <HAL_GPIO_Init+0x21a>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f20 <HAL_GPIO_Init+0x30c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d01f      	beq.n	8001e2a <HAL_GPIO_Init+0x216>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4d      	ldr	r2, [pc, #308]	@ (8001f24 <HAL_GPIO_Init+0x310>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d019      	beq.n	8001e26 <HAL_GPIO_Init+0x212>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f28 <HAL_GPIO_Init+0x314>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_GPIO_Init+0x20e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4b      	ldr	r2, [pc, #300]	@ (8001f2c <HAL_GPIO_Init+0x318>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d00d      	beq.n	8001e1e <HAL_GPIO_Init+0x20a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4a      	ldr	r2, [pc, #296]	@ (8001f30 <HAL_GPIO_Init+0x31c>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d007      	beq.n	8001e1a <HAL_GPIO_Init+0x206>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a49      	ldr	r2, [pc, #292]	@ (8001f34 <HAL_GPIO_Init+0x320>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d101      	bne.n	8001e16 <HAL_GPIO_Init+0x202>
 8001e12:	2306      	movs	r3, #6
 8001e14:	e00c      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e16:	2307      	movs	r3, #7
 8001e18:	e00a      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	e008      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e1e:	2304      	movs	r3, #4
 8001e20:	e006      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e22:	2303      	movs	r3, #3
 8001e24:	e004      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e26:	2302      	movs	r3, #2
 8001e28:	e002      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <HAL_GPIO_Init+0x21c>
 8001e2e:	2300      	movs	r3, #0
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	f002 0203 	and.w	r2, r2, #3
 8001e36:	0092      	lsls	r2, r2, #2
 8001e38:	4093      	lsls	r3, r2
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e40:	4935      	ldr	r1, [pc, #212]	@ (8001f18 <HAL_GPIO_Init+0x304>)
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	089b      	lsrs	r3, r3, #2
 8001e46:	3302      	adds	r3, #2
 8001e48:	69ba      	ldr	r2, [r7, #24]
 8001e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4e:	4b3a      	ldr	r3, [pc, #232]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e72:	4a31      	ldr	r2, [pc, #196]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e78:	4b2f      	ldr	r3, [pc, #188]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e9c:	4a26      	ldr	r2, [pc, #152]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ea2:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ecc:	4b1a      	ldr	r3, [pc, #104]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4013      	ands	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d003      	beq.n	8001ef0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ef0:	4a11      	ldr	r2, [pc, #68]	@ (8001f38 <HAL_GPIO_Init+0x324>)
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	3301      	adds	r3, #1
 8001efa:	61fb      	str	r3, [r7, #28]
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	2b0f      	cmp	r3, #15
 8001f00:	f67f ae96 	bls.w	8001c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3724      	adds	r7, #36	@ 0x24
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40020000 	.word	0x40020000
 8001f20:	40020400 	.word	0x40020400
 8001f24:	40020800 	.word	0x40020800
 8001f28:	40020c00 	.word	0x40020c00
 8001f2c:	40021000 	.word	0x40021000
 8001f30:	40021400 	.word	0x40021400
 8001f34:	40021800 	.word	0x40021800
 8001f38:	40013c00 	.word	0x40013c00

08001f3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
 8001f44:	460b      	mov	r3, r1
 8001f46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	887b      	ldrh	r3, [r7, #2]
 8001f4e:	4013      	ands	r3, r2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d002      	beq.n	8001f5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
 8001f58:	e001      	b.n	8001f5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	807b      	strh	r3, [r7, #2]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f7c:	787b      	ldrb	r3, [r7, #1]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f82:	887a      	ldrh	r2, [r7, #2]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f88:	e003      	b.n	8001f92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f8a:	887b      	ldrh	r3, [r7, #2]
 8001f8c:	041a      	lsls	r2, r3, #16
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	619a      	str	r2, [r3, #24]
}
 8001f92:	bf00      	nop
 8001f94:	370c      	adds	r7, #12
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0cc      	b.n	800214e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fb4:	4b68      	ldr	r3, [pc, #416]	@ (8002158 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d90c      	bls.n	8001fdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc2:	4b65      	ldr	r3, [pc, #404]	@ (8002158 <HAL_RCC_ClockConfig+0x1b8>)
 8001fc4:	683a      	ldr	r2, [r7, #0]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b63      	ldr	r3, [pc, #396]	@ (8002158 <HAL_RCC_ClockConfig+0x1b8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0b8      	b.n	800214e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d020      	beq.n	800202a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0304 	and.w	r3, r3, #4
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ff4:	4b59      	ldr	r3, [pc, #356]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a58      	ldr	r2, [pc, #352]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001ffe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d005      	beq.n	8002018 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800200c:	4b53      	ldr	r3, [pc, #332]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	4a52      	ldr	r2, [pc, #328]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002012:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002016:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b50      	ldr	r3, [pc, #320]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	494d      	ldr	r1, [pc, #308]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d044      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d107      	bne.n	800204e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800203e:	4b47      	ldr	r3, [pc, #284]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d119      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e07f      	b.n	800214e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d003      	beq.n	800205e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800205a:	2b03      	cmp	r3, #3
 800205c:	d107      	bne.n	800206e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800205e:	4b3f      	ldr	r3, [pc, #252]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e06f      	b.n	800214e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800206e:	4b3b      	ldr	r3, [pc, #236]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e067      	b.n	800214e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800207e:	4b37      	ldr	r3, [pc, #220]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f023 0203 	bic.w	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	4934      	ldr	r1, [pc, #208]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	4313      	orrs	r3, r2
 800208e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002090:	f7ff fc10 	bl	80018b4 <HAL_GetTick>
 8002094:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	e00a      	b.n	80020ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002098:	f7ff fc0c 	bl	80018b4 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e04f      	b.n	800214e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ae:	4b2b      	ldr	r3, [pc, #172]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 020c 	and.w	r2, r3, #12
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1eb      	bne.n	8002098 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020c0:	4b25      	ldr	r3, [pc, #148]	@ (8002158 <HAL_RCC_ClockConfig+0x1b8>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 030f 	and.w	r3, r3, #15
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d20c      	bcs.n	80020e8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ce:	4b22      	ldr	r3, [pc, #136]	@ (8002158 <HAL_RCC_ClockConfig+0x1b8>)
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d6:	4b20      	ldr	r3, [pc, #128]	@ (8002158 <HAL_RCC_ClockConfig+0x1b8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 030f 	and.w	r3, r3, #15
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d001      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e032      	b.n	800214e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0304 	and.w	r3, r3, #4
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020f4:	4b19      	ldr	r3, [pc, #100]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4916      	ldr	r1, [pc, #88]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d009      	beq.n	8002126 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002112:	4b12      	ldr	r3, [pc, #72]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	490e      	ldr	r1, [pc, #56]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 8002122:	4313      	orrs	r3, r2
 8002124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002126:	f000 f855 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 800212a:	4602      	mov	r2, r0
 800212c:	4b0b      	ldr	r3, [pc, #44]	@ (800215c <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	091b      	lsrs	r3, r3, #4
 8002132:	f003 030f 	and.w	r3, r3, #15
 8002136:	490a      	ldr	r1, [pc, #40]	@ (8002160 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	5ccb      	ldrb	r3, [r1, r3]
 800213a:	fa22 f303 	lsr.w	r3, r2, r3
 800213e:	4a09      	ldr	r2, [pc, #36]	@ (8002164 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002142:	4b09      	ldr	r3, [pc, #36]	@ (8002168 <HAL_RCC_ClockConfig+0x1c8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff fb70 	bl	800182c <HAL_InitTick>

  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023c00 	.word	0x40023c00
 800215c:	40023800 	.word	0x40023800
 8002160:	08008440 	.word	0x08008440
 8002164:	20000000 	.word	0x20000000
 8002168:	20000004 	.word	0x20000004

0800216c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800216c:	b480      	push	{r7}
 800216e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002170:	4b03      	ldr	r3, [pc, #12]	@ (8002180 <HAL_RCC_GetHCLKFreq+0x14>)
 8002172:	681b      	ldr	r3, [r3, #0]
}
 8002174:	4618      	mov	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	20000000 	.word	0x20000000

08002184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002188:	f7ff fff0 	bl	800216c <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	@ (80021a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0a9b      	lsrs	r3, r3, #10
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4903      	ldr	r1, [pc, #12]	@ (80021a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08008450 	.word	0x08008450

080021ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021b0:	f7ff ffdc 	bl	800216c <HAL_RCC_GetHCLKFreq>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4b05      	ldr	r3, [pc, #20]	@ (80021cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	0b5b      	lsrs	r3, r3, #13
 80021bc:	f003 0307 	and.w	r3, r3, #7
 80021c0:	4903      	ldr	r1, [pc, #12]	@ (80021d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c2:	5ccb      	ldrb	r3, [r1, r3]
 80021c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	08008450 	.word	0x08008450

080021d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021d8:	b0ae      	sub	sp, #184	@ 0xb8
 80021da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80021e8:	2300      	movs	r3, #0
 80021ea:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021fa:	4bcb      	ldr	r3, [pc, #812]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 030c 	and.w	r3, r3, #12
 8002202:	2b0c      	cmp	r3, #12
 8002204:	f200 8206 	bhi.w	8002614 <HAL_RCC_GetSysClockFreq+0x440>
 8002208:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <HAL_RCC_GetSysClockFreq+0x3c>)
 800220a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800220e:	bf00      	nop
 8002210:	08002245 	.word	0x08002245
 8002214:	08002615 	.word	0x08002615
 8002218:	08002615 	.word	0x08002615
 800221c:	08002615 	.word	0x08002615
 8002220:	0800224d 	.word	0x0800224d
 8002224:	08002615 	.word	0x08002615
 8002228:	08002615 	.word	0x08002615
 800222c:	08002615 	.word	0x08002615
 8002230:	08002255 	.word	0x08002255
 8002234:	08002615 	.word	0x08002615
 8002238:	08002615 	.word	0x08002615
 800223c:	08002615 	.word	0x08002615
 8002240:	08002445 	.word	0x08002445
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002244:	4bb9      	ldr	r3, [pc, #740]	@ (800252c <HAL_RCC_GetSysClockFreq+0x358>)
 8002246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800224a:	e1e7      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800224c:	4bb8      	ldr	r3, [pc, #736]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x35c>)
 800224e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002252:	e1e3      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002254:	4bb4      	ldr	r3, [pc, #720]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800225c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002260:	4bb1      	ldr	r3, [pc, #708]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d071      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800226c:	4bae      	ldr	r3, [pc, #696]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	099b      	lsrs	r3, r3, #6
 8002272:	2200      	movs	r2, #0
 8002274:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002278:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800227c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002288:	2300      	movs	r3, #0
 800228a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800228e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002292:	4622      	mov	r2, r4
 8002294:	462b      	mov	r3, r5
 8002296:	f04f 0000 	mov.w	r0, #0
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	0159      	lsls	r1, r3, #5
 80022a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022a4:	0150      	lsls	r0, r2, #5
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4621      	mov	r1, r4
 80022ac:	1a51      	subs	r1, r2, r1
 80022ae:	6439      	str	r1, [r7, #64]	@ 0x40
 80022b0:	4629      	mov	r1, r5
 80022b2:	eb63 0301 	sbc.w	r3, r3, r1
 80022b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80022c4:	4649      	mov	r1, r9
 80022c6:	018b      	lsls	r3, r1, #6
 80022c8:	4641      	mov	r1, r8
 80022ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022ce:	4641      	mov	r1, r8
 80022d0:	018a      	lsls	r2, r1, #6
 80022d2:	4641      	mov	r1, r8
 80022d4:	1a51      	subs	r1, r2, r1
 80022d6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022d8:	4649      	mov	r1, r9
 80022da:	eb63 0301 	sbc.w	r3, r3, r1
 80022de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80022ec:	4649      	mov	r1, r9
 80022ee:	00cb      	lsls	r3, r1, #3
 80022f0:	4641      	mov	r1, r8
 80022f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022f6:	4641      	mov	r1, r8
 80022f8:	00ca      	lsls	r2, r1, #3
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	4603      	mov	r3, r0
 8002300:	4622      	mov	r2, r4
 8002302:	189b      	adds	r3, r3, r2
 8002304:	633b      	str	r3, [r7, #48]	@ 0x30
 8002306:	462b      	mov	r3, r5
 8002308:	460a      	mov	r2, r1
 800230a:	eb42 0303 	adc.w	r3, r2, r3
 800230e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800231c:	4629      	mov	r1, r5
 800231e:	024b      	lsls	r3, r1, #9
 8002320:	4621      	mov	r1, r4
 8002322:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002326:	4621      	mov	r1, r4
 8002328:	024a      	lsls	r2, r1, #9
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002332:	2200      	movs	r2, #0
 8002334:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002338:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800233c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002340:	f7fe fcd2 	bl	8000ce8 <__aeabi_uldivmod>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4613      	mov	r3, r2
 800234a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800234e:	e067      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002350:	4b75      	ldr	r3, [pc, #468]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	099b      	lsrs	r3, r3, #6
 8002356:	2200      	movs	r2, #0
 8002358:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800235c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002360:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002368:	67bb      	str	r3, [r7, #120]	@ 0x78
 800236a:	2300      	movs	r3, #0
 800236c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800236e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002372:	4622      	mov	r2, r4
 8002374:	462b      	mov	r3, r5
 8002376:	f04f 0000 	mov.w	r0, #0
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	0159      	lsls	r1, r3, #5
 8002380:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002384:	0150      	lsls	r0, r2, #5
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4621      	mov	r1, r4
 800238c:	1a51      	subs	r1, r2, r1
 800238e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002390:	4629      	mov	r1, r5
 8002392:	eb63 0301 	sbc.w	r3, r3, r1
 8002396:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80023a4:	4649      	mov	r1, r9
 80023a6:	018b      	lsls	r3, r1, #6
 80023a8:	4641      	mov	r1, r8
 80023aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023ae:	4641      	mov	r1, r8
 80023b0:	018a      	lsls	r2, r1, #6
 80023b2:	4641      	mov	r1, r8
 80023b4:	ebb2 0a01 	subs.w	sl, r2, r1
 80023b8:	4649      	mov	r1, r9
 80023ba:	eb63 0b01 	sbc.w	fp, r3, r1
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023ca:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023d2:	4692      	mov	sl, r2
 80023d4:	469b      	mov	fp, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	eb1a 0303 	adds.w	r3, sl, r3
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	462b      	mov	r3, r5
 80023e0:	eb4b 0303 	adc.w	r3, fp, r3
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023f2:	4629      	mov	r1, r5
 80023f4:	028b      	lsls	r3, r1, #10
 80023f6:	4621      	mov	r1, r4
 80023f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023fc:	4621      	mov	r1, r4
 80023fe:	028a      	lsls	r2, r1, #10
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002408:	2200      	movs	r2, #0
 800240a:	673b      	str	r3, [r7, #112]	@ 0x70
 800240c:	677a      	str	r2, [r7, #116]	@ 0x74
 800240e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002412:	f7fe fc69 	bl	8000ce8 <__aeabi_uldivmod>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4613      	mov	r3, r2
 800241c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002420:	4b41      	ldr	r3, [pc, #260]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	0c1b      	lsrs	r3, r3, #16
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002436:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800243a:	fbb2 f3f3 	udiv	r3, r2, r3
 800243e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002442:	e0eb      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002444:	4b38      	ldr	r3, [pc, #224]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800244c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002450:	4b35      	ldr	r3, [pc, #212]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d06b      	beq.n	8002534 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800245c:	4b32      	ldr	r3, [pc, #200]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x354>)
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	2200      	movs	r2, #0
 8002464:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002466:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002468:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800246a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002470:	2300      	movs	r3, #0
 8002472:	667b      	str	r3, [r7, #100]	@ 0x64
 8002474:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002478:	4622      	mov	r2, r4
 800247a:	462b      	mov	r3, r5
 800247c:	f04f 0000 	mov.w	r0, #0
 8002480:	f04f 0100 	mov.w	r1, #0
 8002484:	0159      	lsls	r1, r3, #5
 8002486:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800248a:	0150      	lsls	r0, r2, #5
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4621      	mov	r1, r4
 8002492:	1a51      	subs	r1, r2, r1
 8002494:	61b9      	str	r1, [r7, #24]
 8002496:	4629      	mov	r1, r5
 8002498:	eb63 0301 	sbc.w	r3, r3, r1
 800249c:	61fb      	str	r3, [r7, #28]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80024aa:	4659      	mov	r1, fp
 80024ac:	018b      	lsls	r3, r1, #6
 80024ae:	4651      	mov	r1, sl
 80024b0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024b4:	4651      	mov	r1, sl
 80024b6:	018a      	lsls	r2, r1, #6
 80024b8:	4651      	mov	r1, sl
 80024ba:	ebb2 0801 	subs.w	r8, r2, r1
 80024be:	4659      	mov	r1, fp
 80024c0:	eb63 0901 	sbc.w	r9, r3, r1
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024d8:	4690      	mov	r8, r2
 80024da:	4699      	mov	r9, r3
 80024dc:	4623      	mov	r3, r4
 80024de:	eb18 0303 	adds.w	r3, r8, r3
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	462b      	mov	r3, r5
 80024e6:	eb49 0303 	adc.w	r3, r9, r3
 80024ea:	617b      	str	r3, [r7, #20]
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	f04f 0300 	mov.w	r3, #0
 80024f4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024f8:	4629      	mov	r1, r5
 80024fa:	024b      	lsls	r3, r1, #9
 80024fc:	4621      	mov	r1, r4
 80024fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002502:	4621      	mov	r1, r4
 8002504:	024a      	lsls	r2, r1, #9
 8002506:	4610      	mov	r0, r2
 8002508:	4619      	mov	r1, r3
 800250a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800250e:	2200      	movs	r2, #0
 8002510:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002512:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002514:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002518:	f7fe fbe6 	bl	8000ce8 <__aeabi_uldivmod>
 800251c:	4602      	mov	r2, r0
 800251e:	460b      	mov	r3, r1
 8002520:	4613      	mov	r3, r2
 8002522:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002526:	e065      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x420>
 8002528:	40023800 	.word	0x40023800
 800252c:	00f42400 	.word	0x00f42400
 8002530:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002534:	4b3d      	ldr	r3, [pc, #244]	@ (800262c <HAL_RCC_GetSysClockFreq+0x458>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	099b      	lsrs	r3, r3, #6
 800253a:	2200      	movs	r2, #0
 800253c:	4618      	mov	r0, r3
 800253e:	4611      	mov	r1, r2
 8002540:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002544:	653b      	str	r3, [r7, #80]	@ 0x50
 8002546:	2300      	movs	r3, #0
 8002548:	657b      	str	r3, [r7, #84]	@ 0x54
 800254a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800254e:	4642      	mov	r2, r8
 8002550:	464b      	mov	r3, r9
 8002552:	f04f 0000 	mov.w	r0, #0
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	0159      	lsls	r1, r3, #5
 800255c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002560:	0150      	lsls	r0, r2, #5
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4641      	mov	r1, r8
 8002568:	1a51      	subs	r1, r2, r1
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	4649      	mov	r1, r9
 800256e:	eb63 0301 	sbc.w	r3, r3, r1
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002580:	4659      	mov	r1, fp
 8002582:	018b      	lsls	r3, r1, #6
 8002584:	4651      	mov	r1, sl
 8002586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800258a:	4651      	mov	r1, sl
 800258c:	018a      	lsls	r2, r1, #6
 800258e:	4651      	mov	r1, sl
 8002590:	1a54      	subs	r4, r2, r1
 8002592:	4659      	mov	r1, fp
 8002594:	eb63 0501 	sbc.w	r5, r3, r1
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	f04f 0300 	mov.w	r3, #0
 80025a0:	00eb      	lsls	r3, r5, #3
 80025a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80025a6:	00e2      	lsls	r2, r4, #3
 80025a8:	4614      	mov	r4, r2
 80025aa:	461d      	mov	r5, r3
 80025ac:	4643      	mov	r3, r8
 80025ae:	18e3      	adds	r3, r4, r3
 80025b0:	603b      	str	r3, [r7, #0]
 80025b2:	464b      	mov	r3, r9
 80025b4:	eb45 0303 	adc.w	r3, r5, r3
 80025b8:	607b      	str	r3, [r7, #4]
 80025ba:	f04f 0200 	mov.w	r2, #0
 80025be:	f04f 0300 	mov.w	r3, #0
 80025c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80025c6:	4629      	mov	r1, r5
 80025c8:	028b      	lsls	r3, r1, #10
 80025ca:	4621      	mov	r1, r4
 80025cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025d0:	4621      	mov	r1, r4
 80025d2:	028a      	lsls	r2, r1, #10
 80025d4:	4610      	mov	r0, r2
 80025d6:	4619      	mov	r1, r3
 80025d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025dc:	2200      	movs	r2, #0
 80025de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025e0:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025e2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025e6:	f7fe fb7f 	bl	8000ce8 <__aeabi_uldivmod>
 80025ea:	4602      	mov	r2, r0
 80025ec:	460b      	mov	r3, r1
 80025ee:	4613      	mov	r3, r2
 80025f0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025f4:	4b0d      	ldr	r3, [pc, #52]	@ (800262c <HAL_RCC_GetSysClockFreq+0x458>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	0f1b      	lsrs	r3, r3, #28
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002602:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002606:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800260a:	fbb2 f3f3 	udiv	r3, r2, r3
 800260e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002612:	e003      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002614:	4b06      	ldr	r3, [pc, #24]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002616:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800261a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800261c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002620:	4618      	mov	r0, r3
 8002622:	37b8      	adds	r7, #184	@ 0xb8
 8002624:	46bd      	mov	sp, r7
 8002626:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800262a:	bf00      	nop
 800262c:	40023800 	.word	0x40023800
 8002630:	00f42400 	.word	0x00f42400

08002634 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e28d      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 8083 	beq.w	800275a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002654:	4b94      	ldr	r3, [pc, #592]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 030c 	and.w	r3, r3, #12
 800265c:	2b04      	cmp	r3, #4
 800265e:	d019      	beq.n	8002694 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002660:	4b91      	ldr	r3, [pc, #580]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f003 030c 	and.w	r3, r3, #12
        || \
 8002668:	2b08      	cmp	r3, #8
 800266a:	d106      	bne.n	800267a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800266c:	4b8e      	ldr	r3, [pc, #568]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002674:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002678:	d00c      	beq.n	8002694 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267a:	4b8b      	ldr	r3, [pc, #556]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d112      	bne.n	80026ac <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002686:	4b88      	ldr	r3, [pc, #544]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800268e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002692:	d10b      	bne.n	80026ac <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	4b84      	ldr	r3, [pc, #528]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d05b      	beq.n	8002758 <HAL_RCC_OscConfig+0x124>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d157      	bne.n	8002758 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e25a      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x90>
 80026b6:	4b7c      	ldr	r3, [pc, #496]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a7b      	ldr	r2, [pc, #492]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026c0:	6013      	str	r3, [r2, #0]
 80026c2:	e01d      	b.n	8002700 <HAL_RCC_OscConfig+0xcc>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026cc:	d10c      	bne.n	80026e8 <HAL_RCC_OscConfig+0xb4>
 80026ce:	4b76      	ldr	r3, [pc, #472]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a75      	ldr	r2, [pc, #468]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b73      	ldr	r3, [pc, #460]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a72      	ldr	r2, [pc, #456]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026e4:	6013      	str	r3, [r2, #0]
 80026e6:	e00b      	b.n	8002700 <HAL_RCC_OscConfig+0xcc>
 80026e8:	4b6f      	ldr	r3, [pc, #444]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a6e      	ldr	r2, [pc, #440]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026f2:	6013      	str	r3, [r2, #0]
 80026f4:	4b6c      	ldr	r3, [pc, #432]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a6b      	ldr	r2, [pc, #428]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80026fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d013      	beq.n	8002730 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7ff f8d4 	bl	80018b4 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7ff f8d0 	bl	80018b4 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	@ 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e21f      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002722:	4b61      	ldr	r3, [pc, #388]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0xdc>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7ff f8c0 	bl	80018b4 <HAL_GetTick>
 8002734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7ff f8bc 	bl	80018b4 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	@ 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e20b      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800274a:	4b57      	ldr	r3, [pc, #348]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x104>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d06f      	beq.n	8002846 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002766:	4b50      	ldr	r3, [pc, #320]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
 800276e:	2b00      	cmp	r3, #0
 8002770:	d017      	beq.n	80027a2 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002772:	4b4d      	ldr	r3, [pc, #308]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
        || \
 800277a:	2b08      	cmp	r3, #8
 800277c:	d105      	bne.n	800278a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800277e:	4b4a      	ldr	r3, [pc, #296]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d00b      	beq.n	80027a2 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278a:	4b47      	ldr	r3, [pc, #284]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002792:	2b0c      	cmp	r3, #12
 8002794:	d11c      	bne.n	80027d0 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002796:	4b44      	ldr	r3, [pc, #272]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d116      	bne.n	80027d0 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a2:	4b41      	ldr	r3, [pc, #260]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d005      	beq.n	80027ba <HAL_RCC_OscConfig+0x186>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b01      	cmp	r3, #1
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e1d3      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027ba:	4b3b      	ldr	r3, [pc, #236]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	691b      	ldr	r3, [r3, #16]
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	4937      	ldr	r1, [pc, #220]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ce:	e03a      	b.n	8002846 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d020      	beq.n	800281a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027d8:	4b34      	ldr	r3, [pc, #208]	@ (80028ac <HAL_RCC_OscConfig+0x278>)
 80027da:	2201      	movs	r2, #1
 80027dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7ff f869 	bl	80018b4 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7ff f865 	bl	80018b4 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e1b4      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027f8:	4b2b      	ldr	r3, [pc, #172]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0f0      	beq.n	80027e6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b28      	ldr	r3, [pc, #160]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4925      	ldr	r1, [pc, #148]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
 8002818:	e015      	b.n	8002846 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281a:	4b24      	ldr	r3, [pc, #144]	@ (80028ac <HAL_RCC_OscConfig+0x278>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002820:	f7ff f848 	bl	80018b4 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002826:	e008      	b.n	800283a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002828:	f7ff f844 	bl	80018b4 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d901      	bls.n	800283a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e193      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283a:	4b1b      	ldr	r3, [pc, #108]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0302 	and.w	r3, r3, #2
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f0      	bne.n	8002828 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0308 	and.w	r3, r3, #8
 800284e:	2b00      	cmp	r3, #0
 8002850:	d036      	beq.n	80028c0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d016      	beq.n	8002888 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285a:	4b15      	ldr	r3, [pc, #84]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800285c:	2201      	movs	r2, #1
 800285e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002860:	f7ff f828 	bl	80018b4 <HAL_GetTick>
 8002864:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002866:	e008      	b.n	800287a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002868:	f7ff f824 	bl	80018b4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d901      	bls.n	800287a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e173      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287a:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_RCC_OscConfig+0x274>)
 800287c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d0f0      	beq.n	8002868 <HAL_RCC_OscConfig+0x234>
 8002886:	e01b      	b.n	80028c0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002888:	4b09      	ldr	r3, [pc, #36]	@ (80028b0 <HAL_RCC_OscConfig+0x27c>)
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800288e:	f7ff f811 	bl	80018b4 <HAL_GetTick>
 8002892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002894:	e00e      	b.n	80028b4 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002896:	f7ff f80d 	bl	80018b4 <HAL_GetTick>
 800289a:	4602      	mov	r2, r0
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d907      	bls.n	80028b4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e15c      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
 80028a8:	40023800 	.word	0x40023800
 80028ac:	42470000 	.word	0x42470000
 80028b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b4:	4b8a      	ldr	r3, [pc, #552]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80028b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b8:	f003 0302 	and.w	r3, r3, #2
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1ea      	bne.n	8002896 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 8097 	beq.w	80029fc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ce:	2300      	movs	r3, #0
 80028d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d2:	4b83      	ldr	r3, [pc, #524]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80028d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028de:	2300      	movs	r3, #0
 80028e0:	60bb      	str	r3, [r7, #8]
 80028e2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80028e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ee:	4b7c      	ldr	r3, [pc, #496]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	60bb      	str	r3, [r7, #8]
 80028f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fa:	2301      	movs	r3, #1
 80028fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fe:	4b79      	ldr	r3, [pc, #484]	@ (8002ae4 <HAL_RCC_OscConfig+0x4b0>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002906:	2b00      	cmp	r3, #0
 8002908:	d118      	bne.n	800293c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290a:	4b76      	ldr	r3, [pc, #472]	@ (8002ae4 <HAL_RCC_OscConfig+0x4b0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a75      	ldr	r2, [pc, #468]	@ (8002ae4 <HAL_RCC_OscConfig+0x4b0>)
 8002910:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002914:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002916:	f7fe ffcd 	bl	80018b4 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800291e:	f7fe ffc9 	bl	80018b4 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e118      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002930:	4b6c      	ldr	r3, [pc, #432]	@ (8002ae4 <HAL_RCC_OscConfig+0x4b0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d106      	bne.n	8002952 <HAL_RCC_OscConfig+0x31e>
 8002944:	4b66      	ldr	r3, [pc, #408]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002946:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002948:	4a65      	ldr	r2, [pc, #404]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002950:	e01c      	b.n	800298c <HAL_RCC_OscConfig+0x358>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	2b05      	cmp	r3, #5
 8002958:	d10c      	bne.n	8002974 <HAL_RCC_OscConfig+0x340>
 800295a:	4b61      	ldr	r3, [pc, #388]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 800295c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295e:	4a60      	ldr	r2, [pc, #384]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002960:	f043 0304 	orr.w	r3, r3, #4
 8002964:	6713      	str	r3, [r2, #112]	@ 0x70
 8002966:	4b5e      	ldr	r3, [pc, #376]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296a:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6713      	str	r3, [r2, #112]	@ 0x70
 8002972:	e00b      	b.n	800298c <HAL_RCC_OscConfig+0x358>
 8002974:	4b5a      	ldr	r3, [pc, #360]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002976:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002978:	4a59      	ldr	r2, [pc, #356]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 800297a:	f023 0301 	bic.w	r3, r3, #1
 800297e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002980:	4b57      	ldr	r3, [pc, #348]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002984:	4a56      	ldr	r2, [pc, #344]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002986:	f023 0304 	bic.w	r3, r3, #4
 800298a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d015      	beq.n	80029c0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002994:	f7fe ff8e 	bl	80018b4 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299a:	e00a      	b.n	80029b2 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800299c:	f7fe ff8a 	bl	80018b4 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e0d7      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b2:	4b4b      	ldr	r3, [pc, #300]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0ee      	beq.n	800299c <HAL_RCC_OscConfig+0x368>
 80029be:	e014      	b.n	80029ea <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe ff78 	bl	80018b4 <HAL_GetTick>
 80029c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c6:	e00a      	b.n	80029de <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c8:	f7fe ff74 	bl	80018b4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e0c1      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029de:	4b40      	ldr	r3, [pc, #256]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029e2:	f003 0302 	and.w	r3, r3, #2
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1ee      	bne.n	80029c8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ea:	7dfb      	ldrb	r3, [r7, #23]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b3b      	ldr	r3, [pc, #236]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	4a3a      	ldr	r2, [pc, #232]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 80029f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80ad 	beq.w	8002b60 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a06:	4b36      	ldr	r3, [pc, #216]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f003 030c 	and.w	r3, r3, #12
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d060      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d145      	bne.n	8002aa6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1a:	4b33      	ldr	r3, [pc, #204]	@ (8002ae8 <HAL_RCC_OscConfig+0x4b4>)
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a20:	f7fe ff48 	bl	80018b4 <HAL_GetTick>
 8002a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a26:	e008      	b.n	8002a3a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a28:	f7fe ff44 	bl	80018b4 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d901      	bls.n	8002a3a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	e093      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f0      	bne.n	8002a28 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	69da      	ldr	r2, [r3, #28]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	431a      	orrs	r2, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a5c:	085b      	lsrs	r3, r3, #1
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	041b      	lsls	r3, r3, #16
 8002a62:	431a      	orrs	r2, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a68:	061b      	lsls	r3, r3, #24
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	071b      	lsls	r3, r3, #28
 8002a72:	491b      	ldr	r1, [pc, #108]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a78:	4b1b      	ldr	r3, [pc, #108]	@ (8002ae8 <HAL_RCC_OscConfig+0x4b4>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe ff19 	bl	80018b4 <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe ff15 	bl	80018b4 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e064      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a98:	4b11      	ldr	r3, [pc, #68]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x452>
 8002aa4:	e05c      	b.n	8002b60 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa6:	4b10      	ldr	r3, [pc, #64]	@ (8002ae8 <HAL_RCC_OscConfig+0x4b4>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe ff02 	bl	80018b4 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab4:	f7fe fefe 	bl	80018b4 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e04d      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d1f0      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x480>
 8002ad2:	e045      	b.n	8002b60 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d107      	bne.n	8002aec <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e040      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	40007000 	.word	0x40007000
 8002ae8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aec:	4b1f      	ldr	r3, [pc, #124]	@ (8002b6c <HAL_RCC_OscConfig+0x538>)
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d030      	beq.n	8002b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d129      	bne.n	8002b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d122      	bne.n	8002b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b16:	68fa      	ldr	r2, [r7, #12]
 8002b18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d119      	bne.n	8002b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b32:	085b      	lsrs	r3, r3, #1
 8002b34:	3b01      	subs	r3, #1
 8002b36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d10f      	bne.n	8002b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d107      	bne.n	8002b5c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b56:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d001      	beq.n	8002b60 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3718      	adds	r7, #24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023800 	.word	0x40023800

08002b70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d101      	bne.n	8002b82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e042      	b.n	8002c08 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f7fe fc9a 	bl	80014d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2224      	movs	r2, #36	@ 0x24
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bb2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 fdd3 	bl	8003760 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bc8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bd8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68da      	ldr	r2, [r3, #12]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002be8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2220      	movs	r2, #32
 8002bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3708      	adds	r7, #8
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af02      	add	r7, sp, #8
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	603b      	str	r3, [r7, #0]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d175      	bne.n	8002d1c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_UART_Transmit+0x2c>
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e06e      	b.n	8002d1e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2221      	movs	r2, #33	@ 0x21
 8002c4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4e:	f7fe fe31 	bl	80018b4 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	88fa      	ldrh	r2, [r7, #6]
 8002c5e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c68:	d108      	bne.n	8002c7c <HAL_UART_Transmit+0x6c>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d104      	bne.n	8002c7c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c72:	2300      	movs	r3, #0
 8002c74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	e003      	b.n	8002c84 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c80:	2300      	movs	r3, #0
 8002c82:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c84:	e02e      	b.n	8002ce4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2180      	movs	r1, #128	@ 0x80
 8002c90:	68f8      	ldr	r0, [r7, #12]
 8002c92:	f000 fb37 	bl	8003304 <UART_WaitOnFlagUntilTimeout>
 8002c96:	4603      	mov	r3, r0
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d005      	beq.n	8002ca8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e03a      	b.n	8002d1e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	881b      	ldrh	r3, [r3, #0]
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cbc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	3302      	adds	r3, #2
 8002cc2:	61bb      	str	r3, [r7, #24]
 8002cc4:	e007      	b.n	8002cd6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1cb      	bne.n	8002c86 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2140      	movs	r1, #64	@ 0x40
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f000 fb03 	bl	8003304 <UART_WaitOnFlagUntilTimeout>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e006      	b.n	8002d1e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	e000      	b.n	8002d1e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002d1c:	2302      	movs	r3, #2
  }
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	60b9      	str	r1, [r7, #8]
 8002d30:	4613      	mov	r3, r2
 8002d32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	2b20      	cmp	r3, #32
 8002d3e:	d112      	bne.n	8002d66 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d002      	beq.n	8002d4c <HAL_UART_Receive_IT+0x26>
 8002d46:	88fb      	ldrh	r3, [r7, #6]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d101      	bne.n	8002d50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e00b      	b.n	8002d68 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002d56:	88fb      	ldrh	r3, [r7, #6]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 fb2a 	bl	80033b6 <UART_Start_Receive_IT>
 8002d62:	4603      	mov	r3, r0
 8002d64:	e000      	b.n	8002d68 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002d66:	2302      	movs	r3, #2
  }
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0ba      	sub	sp, #232	@ 0xe8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x66>
 8002dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fc07 	bl	80035e2 <UART_Receive_IT>
      return;
 8002dd4:	e273      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80de 	beq.w	8002f9c <HAL_UART_IRQHandler+0x22c>
 8002de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002df0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80d1 	beq.w	8002f9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xae>
 8002e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0xd2>
 8002e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_UART_IRQHandler+0xf6>
 8002e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f043 0204 	orr.w	r2, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d011      	beq.n	8002e96 <HAL_UART_IRQHandler+0x126>
 8002e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f043 0208 	orr.w	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 820a 	beq.w	80032b4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_UART_IRQHandler+0x14e>
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fb92 	bl	80035e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	bf0c      	ite	eq
 8002ecc:	2301      	moveq	r3, #1
 8002ece:	2300      	movne	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_UART_IRQHandler+0x17a>
 8002ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04f      	beq.n	8002f8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fa9d 	bl	800342a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b40      	cmp	r3, #64	@ 0x40
 8002efc:	d141      	bne.n	8002f82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1d9      	bne.n	8002efe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d013      	beq.n	8002f7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f56:	4a8a      	ldr	r2, [pc, #552]	@ (8003180 <HAL_UART_IRQHandler+0x410>)
 8002f58:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fe35 	bl	8001bce <HAL_DMA_Abort_IT>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f74:	4610      	mov	r0, r2
 8002f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	e00e      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 f9ac 	bl	80032d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	e00a      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f9a8 	bl	80032d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	e006      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f9a4 	bl	80032d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f96:	e18d      	b.n	80032b4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	bf00      	nop
    return;
 8002f9a:	e18b      	b.n	80032b4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 8167 	bne.w	8003274 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8160 	beq.w	8003274 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8159 	beq.w	8003274 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe2:	2b40      	cmp	r3, #64	@ 0x40
 8002fe4:	f040 80ce 	bne.w	8003184 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80a9 	beq.w	8003150 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003006:	429a      	cmp	r2, r3
 8003008:	f080 80a2 	bcs.w	8003150 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003012:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800301e:	f000 8088 	beq.w	8003132 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	330c      	adds	r3, #12
 8003028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003030:	e853 3f00 	ldrex	r3, [r3]
 8003034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800303c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800304e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003052:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003056:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800305a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800305e:	e841 2300 	strex	r3, r2, [r1]
 8003062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1d9      	bne.n	8003022 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	3314      	adds	r3, #20
 8003074:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003078:	e853 3f00 	ldrex	r3, [r3]
 800307c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800307e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003092:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003096:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003098:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800309a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800309e:	e841 2300 	strex	r3, r2, [r1]
 80030a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1e1      	bne.n	800306e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	3314      	adds	r3, #20
 80030b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030b4:	e853 3f00 	ldrex	r3, [r3]
 80030b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	3314      	adds	r3, #20
 80030ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030d6:	e841 2300 	strex	r3, r2, [r1]
 80030da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1e3      	bne.n	80030aa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2220      	movs	r2, #32
 80030e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030fa:	e853 3f00 	ldrex	r3, [r3]
 80030fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003100:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003102:	f023 0310 	bic.w	r3, r3, #16
 8003106:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	330c      	adds	r3, #12
 8003110:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003114:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003116:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800311a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003122:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e3      	bne.n	80030f0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312c:	4618      	mov	r0, r3
 800312e:	f7fe fcde 	bl	8001aee <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003140:	b29b      	uxth	r3, r3
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	b29b      	uxth	r3, r3
 8003146:	4619      	mov	r1, r3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 f8cf 	bl	80032ec <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800314e:	e0b3      	b.n	80032b8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003154:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003158:	429a      	cmp	r2, r3
 800315a:	f040 80ad 	bne.w	80032b8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003168:	f040 80a6 	bne.w	80032b8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2202      	movs	r2, #2
 8003170:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003176:	4619      	mov	r1, r3
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	f000 f8b7 	bl	80032ec <HAL_UARTEx_RxEventCallback>
      return;
 800317e:	e09b      	b.n	80032b8 <HAL_UART_IRQHandler+0x548>
 8003180:	080034f1 	.word	0x080034f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800318c:	b29b      	uxth	r3, r3
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 808e 	beq.w	80032bc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80031a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f000 8089 	beq.w	80032bc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	330c      	adds	r3, #12
 80031b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b4:	e853 3f00 	ldrex	r3, [r3]
 80031b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80031ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80031c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	330c      	adds	r3, #12
 80031ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80031ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80031d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e3      	bne.n	80031aa <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3314      	adds	r3, #20
 80031e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	623b      	str	r3, [r7, #32]
   return(result);
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3314      	adds	r3, #20
 8003202:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003206:	633a      	str	r2, [r7, #48]	@ 0x30
 8003208:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800320a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800320c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800320e:	e841 2300 	strex	r3, r2, [r1]
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d1e3      	bne.n	80031e2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	330c      	adds	r3, #12
 800322e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	e853 3f00 	ldrex	r3, [r3]
 8003236:	60fb      	str	r3, [r7, #12]
   return(result);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0310 	bic.w	r3, r3, #16
 800323e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	330c      	adds	r3, #12
 8003248:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800324c:	61fa      	str	r2, [r7, #28]
 800324e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	69b9      	ldr	r1, [r7, #24]
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	617b      	str	r3, [r7, #20]
   return(result);
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e3      	bne.n	8003228 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003266:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 f83d 	bl	80032ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003272:	e023      	b.n	80032bc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003278:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800327c:	2b00      	cmp	r3, #0
 800327e:	d009      	beq.n	8003294 <HAL_UART_IRQHandler+0x524>
 8003280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003284:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 f940 	bl	8003512 <UART_Transmit_IT>
    return;
 8003292:	e014      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00e      	beq.n	80032be <HAL_UART_IRQHandler+0x54e>
 80032a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 f980 	bl	80035b2 <UART_EndTransmit_IT>
    return;
 80032b2:	e004      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
    return;
 80032b4:	bf00      	nop
 80032b6:	e002      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
      return;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <HAL_UART_IRQHandler+0x54e>
      return;
 80032bc:	bf00      	nop
  }
}
 80032be:	37e8      	adds	r7, #232	@ 0xe8
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}

080032c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80032d8:	b480      	push	{r7}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032f8:	bf00      	nop
 80032fa:	370c      	adds	r7, #12
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr

08003304 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	60f8      	str	r0, [r7, #12]
 800330c:	60b9      	str	r1, [r7, #8]
 800330e:	603b      	str	r3, [r7, #0]
 8003310:	4613      	mov	r3, r2
 8003312:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003314:	e03b      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331c:	d037      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800331e:	f7fe fac9 	bl	80018b4 <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	6a3a      	ldr	r2, [r7, #32]
 800332a:	429a      	cmp	r2, r3
 800332c:	d302      	bcc.n	8003334 <UART_WaitOnFlagUntilTimeout+0x30>
 800332e:	6a3b      	ldr	r3, [r7, #32]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d101      	bne.n	8003338 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e03a      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	f003 0304 	and.w	r3, r3, #4
 8003342:	2b00      	cmp	r3, #0
 8003344:	d023      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b80      	cmp	r3, #128	@ 0x80
 800334a:	d020      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0x8a>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b40      	cmp	r3, #64	@ 0x40
 8003350:	d01d      	beq.n	800338e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b08      	cmp	r3, #8
 800335e:	d116      	bne.n	800338e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003360:	2300      	movs	r3, #0
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f857 	bl	800342a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2208      	movs	r2, #8
 8003380:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e00f      	b.n	80033ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4013      	ands	r3, r2
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	429a      	cmp	r2, r3
 800339c:	bf0c      	ite	eq
 800339e:	2301      	moveq	r3, #1
 80033a0:	2300      	movne	r3, #0
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	79fb      	ldrb	r3, [r7, #7]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d0b4      	beq.n	8003316 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b085      	sub	sp, #20
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	60f8      	str	r0, [r7, #12]
 80033be:	60b9      	str	r1, [r7, #8]
 80033c0:	4613      	mov	r3, r2
 80033c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	88fa      	ldrh	r2, [r7, #6]
 80033ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	88fa      	ldrh	r2, [r7, #6]
 80033d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	2200      	movs	r2, #0
 80033da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2222      	movs	r2, #34	@ 0x22
 80033e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	691b      	ldr	r3, [r3, #16]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	68da      	ldr	r2, [r3, #12]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695a      	ldr	r2, [r3, #20]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68da      	ldr	r2, [r3, #12]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0220 	orr.w	r2, r2, #32
 800341a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3714      	adds	r7, #20
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr

0800342a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800342a:	b480      	push	{r7}
 800342c:	b095      	sub	sp, #84	@ 0x54
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	330c      	adds	r3, #12
 8003438:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800343a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003444:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003448:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003452:	643a      	str	r2, [r7, #64]	@ 0x40
 8003454:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003456:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003458:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800345a:	e841 2300 	strex	r3, r2, [r1]
 800345e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1e5      	bne.n	8003432 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	3314      	adds	r3, #20
 800346c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	61fb      	str	r3, [r7, #28]
   return(result);
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	f023 0301 	bic.w	r3, r3, #1
 800347c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3314      	adds	r3, #20
 8003484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800348a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800348c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800348e:	e841 2300 	strex	r3, r2, [r1]
 8003492:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	2b00      	cmp	r3, #0
 8003498:	d1e5      	bne.n	8003466 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d119      	bne.n	80034d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	330c      	adds	r3, #12
 80034a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f023 0310 	bic.w	r3, r3, #16
 80034b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034c2:	61ba      	str	r2, [r7, #24]
 80034c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6979      	ldr	r1, [r7, #20]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	613b      	str	r3, [r7, #16]
   return(result);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e5      	bne.n	80034a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80034e4:	bf00      	nop
 80034e6:	3754      	adds	r7, #84	@ 0x54
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2200      	movs	r2, #0
 8003502:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003504:	68f8      	ldr	r0, [r7, #12]
 8003506:	f7ff fee7 	bl	80032d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800350a:	bf00      	nop
 800350c:	3710      	adds	r7, #16
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}

08003512 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003512:	b480      	push	{r7}
 8003514:	b085      	sub	sp, #20
 8003516:	af00      	add	r7, sp, #0
 8003518:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003520:	b2db      	uxtb	r3, r3
 8003522:	2b21      	cmp	r3, #33	@ 0x21
 8003524:	d13e      	bne.n	80035a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800352e:	d114      	bne.n	800355a <UART_Transmit_IT+0x48>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	691b      	ldr	r3, [r3, #16]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d110      	bne.n	800355a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	881b      	ldrh	r3, [r3, #0]
 8003542:	461a      	mov	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800354c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	1c9a      	adds	r2, r3, #2
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	621a      	str	r2, [r3, #32]
 8003558:	e008      	b.n	800356c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	1c59      	adds	r1, r3, #1
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6211      	str	r1, [r2, #32]
 8003564:	781a      	ldrb	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003570:	b29b      	uxth	r3, r3
 8003572:	3b01      	subs	r3, #1
 8003574:	b29b      	uxth	r3, r3
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4619      	mov	r1, r3
 800357a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800357c:	2b00      	cmp	r3, #0
 800357e:	d10f      	bne.n	80035a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800358e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800359e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80035a0:	2300      	movs	r3, #0
 80035a2:	e000      	b.n	80035a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80035a4:	2302      	movs	r3, #2
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3714      	adds	r7, #20
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68da      	ldr	r2, [r3, #12]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f7ff fe76 	bl	80032c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b08c      	sub	sp, #48	@ 0x30
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80035ee:	2300      	movs	r3, #0
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b22      	cmp	r3, #34	@ 0x22
 80035fc:	f040 80aa 	bne.w	8003754 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003608:	d115      	bne.n	8003636 <UART_Receive_IT+0x54>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	691b      	ldr	r3, [r3, #16]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d111      	bne.n	8003636 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003616:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	b29b      	uxth	r3, r3
 8003620:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003624:	b29a      	uxth	r2, r3
 8003626:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003628:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362e:	1c9a      	adds	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	629a      	str	r2, [r3, #40]	@ 0x28
 8003634:	e024      	b.n	8003680 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003644:	d007      	beq.n	8003656 <UART_Receive_IT+0x74>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10a      	bne.n	8003664 <UART_Receive_IT+0x82>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d106      	bne.n	8003664 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	b2da      	uxtb	r2, r3
 800365e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003660:	701a      	strb	r2, [r3, #0]
 8003662:	e008      	b.n	8003676 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003670:	b2da      	uxtb	r2, r3
 8003672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003674:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800367a:	1c5a      	adds	r2, r3, #1
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003684:	b29b      	uxth	r3, r3
 8003686:	3b01      	subs	r3, #1
 8003688:	b29b      	uxth	r3, r3
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	4619      	mov	r1, r3
 800368e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003690:	2b00      	cmp	r3, #0
 8003692:	d15d      	bne.n	8003750 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 0220 	bic.w	r2, r2, #32
 80036a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0201 	bic.w	r2, r2, #1
 80036c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d135      	bne.n	8003746 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	e853 3f00 	ldrex	r3, [r3]
 80036ee:	613b      	str	r3, [r7, #16]
   return(result);
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	f023 0310 	bic.w	r3, r3, #16
 80036f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	330c      	adds	r3, #12
 80036fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003700:	623a      	str	r2, [r7, #32]
 8003702:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	69f9      	ldr	r1, [r7, #28]
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	61bb      	str	r3, [r7, #24]
   return(result);
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e5      	bne.n	80036e0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b10      	cmp	r3, #16
 8003720:	d10a      	bne.n	8003738 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003722:	2300      	movs	r3, #0
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800373c:	4619      	mov	r1, r3
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f7ff fdd4 	bl	80032ec <HAL_UARTEx_RxEventCallback>
 8003744:	e002      	b.n	800374c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fcbe 	bl	80010c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800374c:	2300      	movs	r3, #0
 800374e:	e002      	b.n	8003756 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	e000      	b.n	8003756 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003754:	2302      	movs	r3, #2
  }
}
 8003756:	4618      	mov	r0, r3
 8003758:	3730      	adds	r7, #48	@ 0x30
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003764:	b0c0      	sub	sp, #256	@ 0x100
 8003766:	af00      	add	r7, sp, #0
 8003768:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	68d9      	ldr	r1, [r3, #12]
 800377e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003782:	681a      	ldr	r2, [r3, #0]
 8003784:	ea40 0301 	orr.w	r3, r0, r1
 8003788:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800378a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	431a      	orrs	r2, r3
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	431a      	orrs	r2, r3
 80037a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80037ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037b8:	f021 010c 	bic.w	r1, r1, #12
 80037bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037c6:	430b      	orrs	r3, r1
 80037c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037da:	6999      	ldr	r1, [r3, #24]
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	ea40 0301 	orr.w	r3, r0, r1
 80037e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b8f      	ldr	r3, [pc, #572]	@ (8003a2c <UART_SetConfig+0x2cc>)
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d005      	beq.n	8003800 <UART_SetConfig+0xa0>
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b8d      	ldr	r3, [pc, #564]	@ (8003a30 <UART_SetConfig+0x2d0>)
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d104      	bne.n	800380a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003800:	f7fe fcd4 	bl	80021ac <HAL_RCC_GetPCLK2Freq>
 8003804:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003808:	e003      	b.n	8003812 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800380a:	f7fe fcbb 	bl	8002184 <HAL_RCC_GetPCLK1Freq>
 800380e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003812:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003816:	69db      	ldr	r3, [r3, #28]
 8003818:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800381c:	f040 810c 	bne.w	8003a38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003820:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003824:	2200      	movs	r2, #0
 8003826:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800382a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800382e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003832:	4622      	mov	r2, r4
 8003834:	462b      	mov	r3, r5
 8003836:	1891      	adds	r1, r2, r2
 8003838:	65b9      	str	r1, [r7, #88]	@ 0x58
 800383a:	415b      	adcs	r3, r3
 800383c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800383e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003842:	4621      	mov	r1, r4
 8003844:	eb12 0801 	adds.w	r8, r2, r1
 8003848:	4629      	mov	r1, r5
 800384a:	eb43 0901 	adc.w	r9, r3, r1
 800384e:	f04f 0200 	mov.w	r2, #0
 8003852:	f04f 0300 	mov.w	r3, #0
 8003856:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800385a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800385e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003862:	4690      	mov	r8, r2
 8003864:	4699      	mov	r9, r3
 8003866:	4623      	mov	r3, r4
 8003868:	eb18 0303 	adds.w	r3, r8, r3
 800386c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003870:	462b      	mov	r3, r5
 8003872:	eb49 0303 	adc.w	r3, r9, r3
 8003876:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800387a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003886:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800388a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800388e:	460b      	mov	r3, r1
 8003890:	18db      	adds	r3, r3, r3
 8003892:	653b      	str	r3, [r7, #80]	@ 0x50
 8003894:	4613      	mov	r3, r2
 8003896:	eb42 0303 	adc.w	r3, r2, r3
 800389a:	657b      	str	r3, [r7, #84]	@ 0x54
 800389c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80038a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80038a4:	f7fd fa20 	bl	8000ce8 <__aeabi_uldivmod>
 80038a8:	4602      	mov	r2, r0
 80038aa:	460b      	mov	r3, r1
 80038ac:	4b61      	ldr	r3, [pc, #388]	@ (8003a34 <UART_SetConfig+0x2d4>)
 80038ae:	fba3 2302 	umull	r2, r3, r3, r2
 80038b2:	095b      	lsrs	r3, r3, #5
 80038b4:	011c      	lsls	r4, r3, #4
 80038b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038ba:	2200      	movs	r2, #0
 80038bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038c8:	4642      	mov	r2, r8
 80038ca:	464b      	mov	r3, r9
 80038cc:	1891      	adds	r1, r2, r2
 80038ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038d0:	415b      	adcs	r3, r3
 80038d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038d8:	4641      	mov	r1, r8
 80038da:	eb12 0a01 	adds.w	sl, r2, r1
 80038de:	4649      	mov	r1, r9
 80038e0:	eb43 0b01 	adc.w	fp, r3, r1
 80038e4:	f04f 0200 	mov.w	r2, #0
 80038e8:	f04f 0300 	mov.w	r3, #0
 80038ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038f8:	4692      	mov	sl, r2
 80038fa:	469b      	mov	fp, r3
 80038fc:	4643      	mov	r3, r8
 80038fe:	eb1a 0303 	adds.w	r3, sl, r3
 8003902:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003906:	464b      	mov	r3, r9
 8003908:	eb4b 0303 	adc.w	r3, fp, r3
 800390c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800391c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003920:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003924:	460b      	mov	r3, r1
 8003926:	18db      	adds	r3, r3, r3
 8003928:	643b      	str	r3, [r7, #64]	@ 0x40
 800392a:	4613      	mov	r3, r2
 800392c:	eb42 0303 	adc.w	r3, r2, r3
 8003930:	647b      	str	r3, [r7, #68]	@ 0x44
 8003932:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003936:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800393a:	f7fd f9d5 	bl	8000ce8 <__aeabi_uldivmod>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	4611      	mov	r1, r2
 8003944:	4b3b      	ldr	r3, [pc, #236]	@ (8003a34 <UART_SetConfig+0x2d4>)
 8003946:	fba3 2301 	umull	r2, r3, r3, r1
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	2264      	movs	r2, #100	@ 0x64
 800394e:	fb02 f303 	mul.w	r3, r2, r3
 8003952:	1acb      	subs	r3, r1, r3
 8003954:	00db      	lsls	r3, r3, #3
 8003956:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800395a:	4b36      	ldr	r3, [pc, #216]	@ (8003a34 <UART_SetConfig+0x2d4>)
 800395c:	fba3 2302 	umull	r2, r3, r3, r2
 8003960:	095b      	lsrs	r3, r3, #5
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003968:	441c      	add	r4, r3
 800396a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800396e:	2200      	movs	r2, #0
 8003970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003974:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003978:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800397c:	4642      	mov	r2, r8
 800397e:	464b      	mov	r3, r9
 8003980:	1891      	adds	r1, r2, r2
 8003982:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003984:	415b      	adcs	r3, r3
 8003986:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003988:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800398c:	4641      	mov	r1, r8
 800398e:	1851      	adds	r1, r2, r1
 8003990:	6339      	str	r1, [r7, #48]	@ 0x30
 8003992:	4649      	mov	r1, r9
 8003994:	414b      	adcs	r3, r1
 8003996:	637b      	str	r3, [r7, #52]	@ 0x34
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80039a4:	4659      	mov	r1, fp
 80039a6:	00cb      	lsls	r3, r1, #3
 80039a8:	4651      	mov	r1, sl
 80039aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ae:	4651      	mov	r1, sl
 80039b0:	00ca      	lsls	r2, r1, #3
 80039b2:	4610      	mov	r0, r2
 80039b4:	4619      	mov	r1, r3
 80039b6:	4603      	mov	r3, r0
 80039b8:	4642      	mov	r2, r8
 80039ba:	189b      	adds	r3, r3, r2
 80039bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039c0:	464b      	mov	r3, r9
 80039c2:	460a      	mov	r2, r1
 80039c4:	eb42 0303 	adc.w	r3, r2, r3
 80039c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039e0:	460b      	mov	r3, r1
 80039e2:	18db      	adds	r3, r3, r3
 80039e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039e6:	4613      	mov	r3, r2
 80039e8:	eb42 0303 	adc.w	r3, r2, r3
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039f6:	f7fd f977 	bl	8000ce8 <__aeabi_uldivmod>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003a34 <UART_SetConfig+0x2d4>)
 8003a00:	fba3 1302 	umull	r1, r3, r3, r2
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	2164      	movs	r1, #100	@ 0x64
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	00db      	lsls	r3, r3, #3
 8003a10:	3332      	adds	r3, #50	@ 0x32
 8003a12:	4a08      	ldr	r2, [pc, #32]	@ (8003a34 <UART_SetConfig+0x2d4>)
 8003a14:	fba2 2303 	umull	r2, r3, r2, r3
 8003a18:	095b      	lsrs	r3, r3, #5
 8003a1a:	f003 0207 	and.w	r2, r3, #7
 8003a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4422      	add	r2, r4
 8003a26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a28:	e106      	b.n	8003c38 <UART_SetConfig+0x4d8>
 8003a2a:	bf00      	nop
 8003a2c:	40011000 	.word	0x40011000
 8003a30:	40011400 	.word	0x40011400
 8003a34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a4a:	4642      	mov	r2, r8
 8003a4c:	464b      	mov	r3, r9
 8003a4e:	1891      	adds	r1, r2, r2
 8003a50:	6239      	str	r1, [r7, #32]
 8003a52:	415b      	adcs	r3, r3
 8003a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a5a:	4641      	mov	r1, r8
 8003a5c:	1854      	adds	r4, r2, r1
 8003a5e:	4649      	mov	r1, r9
 8003a60:	eb43 0501 	adc.w	r5, r3, r1
 8003a64:	f04f 0200 	mov.w	r2, #0
 8003a68:	f04f 0300 	mov.w	r3, #0
 8003a6c:	00eb      	lsls	r3, r5, #3
 8003a6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a72:	00e2      	lsls	r2, r4, #3
 8003a74:	4614      	mov	r4, r2
 8003a76:	461d      	mov	r5, r3
 8003a78:	4643      	mov	r3, r8
 8003a7a:	18e3      	adds	r3, r4, r3
 8003a7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a80:	464b      	mov	r3, r9
 8003a82:	eb45 0303 	adc.w	r3, r5, r3
 8003a86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	008b      	lsls	r3, r1, #2
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	008a      	lsls	r2, r1, #2
 8003ab4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003ab8:	f7fd f916 	bl	8000ce8 <__aeabi_uldivmod>
 8003abc:	4602      	mov	r2, r0
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4b60      	ldr	r3, [pc, #384]	@ (8003c44 <UART_SetConfig+0x4e4>)
 8003ac2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	011c      	lsls	r4, r3, #4
 8003aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003ad4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ad8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003adc:	4642      	mov	r2, r8
 8003ade:	464b      	mov	r3, r9
 8003ae0:	1891      	adds	r1, r2, r2
 8003ae2:	61b9      	str	r1, [r7, #24]
 8003ae4:	415b      	adcs	r3, r3
 8003ae6:	61fb      	str	r3, [r7, #28]
 8003ae8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003aec:	4641      	mov	r1, r8
 8003aee:	1851      	adds	r1, r2, r1
 8003af0:	6139      	str	r1, [r7, #16]
 8003af2:	4649      	mov	r1, r9
 8003af4:	414b      	adcs	r3, r1
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 0300 	mov.w	r3, #0
 8003b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b04:	4659      	mov	r1, fp
 8003b06:	00cb      	lsls	r3, r1, #3
 8003b08:	4651      	mov	r1, sl
 8003b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b0e:	4651      	mov	r1, sl
 8003b10:	00ca      	lsls	r2, r1, #3
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	4603      	mov	r3, r0
 8003b18:	4642      	mov	r2, r8
 8003b1a:	189b      	adds	r3, r3, r2
 8003b1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b20:	464b      	mov	r3, r9
 8003b22:	460a      	mov	r2, r1
 8003b24:	eb42 0303 	adc.w	r3, r2, r3
 8003b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b38:	f04f 0200 	mov.w	r2, #0
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b44:	4649      	mov	r1, r9
 8003b46:	008b      	lsls	r3, r1, #2
 8003b48:	4641      	mov	r1, r8
 8003b4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b4e:	4641      	mov	r1, r8
 8003b50:	008a      	lsls	r2, r1, #2
 8003b52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b56:	f7fd f8c7 	bl	8000ce8 <__aeabi_uldivmod>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4b38      	ldr	r3, [pc, #224]	@ (8003c44 <UART_SetConfig+0x4e4>)
 8003b62:	fba3 2301 	umull	r2, r3, r3, r1
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2264      	movs	r2, #100	@ 0x64
 8003b6a:	fb02 f303 	mul.w	r3, r2, r3
 8003b6e:	1acb      	subs	r3, r1, r3
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	3332      	adds	r3, #50	@ 0x32
 8003b74:	4a33      	ldr	r2, [pc, #204]	@ (8003c44 <UART_SetConfig+0x4e4>)
 8003b76:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7a:	095b      	lsrs	r3, r3, #5
 8003b7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b80:	441c      	add	r4, r3
 8003b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b86:	2200      	movs	r2, #0
 8003b88:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b90:	4642      	mov	r2, r8
 8003b92:	464b      	mov	r3, r9
 8003b94:	1891      	adds	r1, r2, r2
 8003b96:	60b9      	str	r1, [r7, #8]
 8003b98:	415b      	adcs	r3, r3
 8003b9a:	60fb      	str	r3, [r7, #12]
 8003b9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ba0:	4641      	mov	r1, r8
 8003ba2:	1851      	adds	r1, r2, r1
 8003ba4:	6039      	str	r1, [r7, #0]
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	414b      	adcs	r3, r1
 8003baa:	607b      	str	r3, [r7, #4]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003bb8:	4659      	mov	r1, fp
 8003bba:	00cb      	lsls	r3, r1, #3
 8003bbc:	4651      	mov	r1, sl
 8003bbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bc2:	4651      	mov	r1, sl
 8003bc4:	00ca      	lsls	r2, r1, #3
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4603      	mov	r3, r0
 8003bcc:	4642      	mov	r2, r8
 8003bce:	189b      	adds	r3, r3, r2
 8003bd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	460a      	mov	r2, r1
 8003bd6:	eb42 0303 	adc.w	r3, r2, r3
 8003bda:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003be6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bf4:	4649      	mov	r1, r9
 8003bf6:	008b      	lsls	r3, r1, #2
 8003bf8:	4641      	mov	r1, r8
 8003bfa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bfe:	4641      	mov	r1, r8
 8003c00:	008a      	lsls	r2, r1, #2
 8003c02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003c06:	f7fd f86f 	bl	8000ce8 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <UART_SetConfig+0x4e4>)
 8003c10:	fba3 1302 	umull	r1, r3, r3, r2
 8003c14:	095b      	lsrs	r3, r3, #5
 8003c16:	2164      	movs	r1, #100	@ 0x64
 8003c18:	fb01 f303 	mul.w	r3, r1, r3
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	3332      	adds	r3, #50	@ 0x32
 8003c22:	4a08      	ldr	r2, [pc, #32]	@ (8003c44 <UART_SetConfig+0x4e4>)
 8003c24:	fba2 2303 	umull	r2, r3, r2, r3
 8003c28:	095b      	lsrs	r3, r3, #5
 8003c2a:	f003 020f 	and.w	r2, r3, #15
 8003c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4422      	add	r2, r4
 8003c36:	609a      	str	r2, [r3, #8]
}
 8003c38:	bf00      	nop
 8003c3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c44:	51eb851f 	.word	0x51eb851f

08003c48 <toupper>:
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <toupper+0x10>)
 8003c4a:	5c1b      	ldrb	r3, [r3, r0]
 8003c4c:	f003 0303 	and.w	r3, r3, #3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	bf08      	it	eq
 8003c54:	3820      	subeq	r0, #32
 8003c56:	4770      	bx	lr
 8003c58:	08008781 	.word	0x08008781

08003c5c <__cvt>:
 8003c5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003c60:	ec57 6b10 	vmov	r6, r7, d0
 8003c64:	2f00      	cmp	r7, #0
 8003c66:	460c      	mov	r4, r1
 8003c68:	4619      	mov	r1, r3
 8003c6a:	463b      	mov	r3, r7
 8003c6c:	bfbb      	ittet	lt
 8003c6e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003c72:	461f      	movlt	r7, r3
 8003c74:	2300      	movge	r3, #0
 8003c76:	232d      	movlt	r3, #45	@ 0x2d
 8003c78:	700b      	strb	r3, [r1, #0]
 8003c7a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003c7c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003c80:	4691      	mov	r9, r2
 8003c82:	f023 0820 	bic.w	r8, r3, #32
 8003c86:	bfbc      	itt	lt
 8003c88:	4632      	movlt	r2, r6
 8003c8a:	4616      	movlt	r6, r2
 8003c8c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003c90:	d005      	beq.n	8003c9e <__cvt+0x42>
 8003c92:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003c96:	d100      	bne.n	8003c9a <__cvt+0x3e>
 8003c98:	3401      	adds	r4, #1
 8003c9a:	2102      	movs	r1, #2
 8003c9c:	e000      	b.n	8003ca0 <__cvt+0x44>
 8003c9e:	2103      	movs	r1, #3
 8003ca0:	ab03      	add	r3, sp, #12
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	ab02      	add	r3, sp, #8
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	ec47 6b10 	vmov	d0, r6, r7
 8003cac:	4653      	mov	r3, sl
 8003cae:	4622      	mov	r2, r4
 8003cb0:	f001 f8ae 	bl	8004e10 <_dtoa_r>
 8003cb4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003cb8:	4605      	mov	r5, r0
 8003cba:	d119      	bne.n	8003cf0 <__cvt+0x94>
 8003cbc:	f019 0f01 	tst.w	r9, #1
 8003cc0:	d00e      	beq.n	8003ce0 <__cvt+0x84>
 8003cc2:	eb00 0904 	add.w	r9, r0, r4
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	2300      	movs	r3, #0
 8003cca:	4630      	mov	r0, r6
 8003ccc:	4639      	mov	r1, r7
 8003cce:	f7fc ff2b 	bl	8000b28 <__aeabi_dcmpeq>
 8003cd2:	b108      	cbz	r0, 8003cd8 <__cvt+0x7c>
 8003cd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8003cd8:	2230      	movs	r2, #48	@ 0x30
 8003cda:	9b03      	ldr	r3, [sp, #12]
 8003cdc:	454b      	cmp	r3, r9
 8003cde:	d31e      	bcc.n	8003d1e <__cvt+0xc2>
 8003ce0:	9b03      	ldr	r3, [sp, #12]
 8003ce2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003ce4:	1b5b      	subs	r3, r3, r5
 8003ce6:	4628      	mov	r0, r5
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	b004      	add	sp, #16
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003cf4:	eb00 0904 	add.w	r9, r0, r4
 8003cf8:	d1e5      	bne.n	8003cc6 <__cvt+0x6a>
 8003cfa:	7803      	ldrb	r3, [r0, #0]
 8003cfc:	2b30      	cmp	r3, #48	@ 0x30
 8003cfe:	d10a      	bne.n	8003d16 <__cvt+0xba>
 8003d00:	2200      	movs	r2, #0
 8003d02:	2300      	movs	r3, #0
 8003d04:	4630      	mov	r0, r6
 8003d06:	4639      	mov	r1, r7
 8003d08:	f7fc ff0e 	bl	8000b28 <__aeabi_dcmpeq>
 8003d0c:	b918      	cbnz	r0, 8003d16 <__cvt+0xba>
 8003d0e:	f1c4 0401 	rsb	r4, r4, #1
 8003d12:	f8ca 4000 	str.w	r4, [sl]
 8003d16:	f8da 3000 	ldr.w	r3, [sl]
 8003d1a:	4499      	add	r9, r3
 8003d1c:	e7d3      	b.n	8003cc6 <__cvt+0x6a>
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	9103      	str	r1, [sp, #12]
 8003d22:	701a      	strb	r2, [r3, #0]
 8003d24:	e7d9      	b.n	8003cda <__cvt+0x7e>

08003d26 <__exponent>:
 8003d26:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	bfba      	itte	lt
 8003d2c:	4249      	neglt	r1, r1
 8003d2e:	232d      	movlt	r3, #45	@ 0x2d
 8003d30:	232b      	movge	r3, #43	@ 0x2b
 8003d32:	2909      	cmp	r1, #9
 8003d34:	7002      	strb	r2, [r0, #0]
 8003d36:	7043      	strb	r3, [r0, #1]
 8003d38:	dd29      	ble.n	8003d8e <__exponent+0x68>
 8003d3a:	f10d 0307 	add.w	r3, sp, #7
 8003d3e:	461d      	mov	r5, r3
 8003d40:	270a      	movs	r7, #10
 8003d42:	461a      	mov	r2, r3
 8003d44:	fbb1 f6f7 	udiv	r6, r1, r7
 8003d48:	fb07 1416 	mls	r4, r7, r6, r1
 8003d4c:	3430      	adds	r4, #48	@ 0x30
 8003d4e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003d52:	460c      	mov	r4, r1
 8003d54:	2c63      	cmp	r4, #99	@ 0x63
 8003d56:	f103 33ff 	add.w	r3, r3, #4294967295
 8003d5a:	4631      	mov	r1, r6
 8003d5c:	dcf1      	bgt.n	8003d42 <__exponent+0x1c>
 8003d5e:	3130      	adds	r1, #48	@ 0x30
 8003d60:	1e94      	subs	r4, r2, #2
 8003d62:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003d66:	1c41      	adds	r1, r0, #1
 8003d68:	4623      	mov	r3, r4
 8003d6a:	42ab      	cmp	r3, r5
 8003d6c:	d30a      	bcc.n	8003d84 <__exponent+0x5e>
 8003d6e:	f10d 0309 	add.w	r3, sp, #9
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	42ac      	cmp	r4, r5
 8003d76:	bf88      	it	hi
 8003d78:	2300      	movhi	r3, #0
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	4403      	add	r3, r0
 8003d7e:	1a18      	subs	r0, r3, r0
 8003d80:	b003      	add	sp, #12
 8003d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d84:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003d88:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003d8c:	e7ed      	b.n	8003d6a <__exponent+0x44>
 8003d8e:	2330      	movs	r3, #48	@ 0x30
 8003d90:	3130      	adds	r1, #48	@ 0x30
 8003d92:	7083      	strb	r3, [r0, #2]
 8003d94:	70c1      	strb	r1, [r0, #3]
 8003d96:	1d03      	adds	r3, r0, #4
 8003d98:	e7f1      	b.n	8003d7e <__exponent+0x58>
	...

08003d9c <_printf_float>:
 8003d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003da0:	b08d      	sub	sp, #52	@ 0x34
 8003da2:	460c      	mov	r4, r1
 8003da4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003da8:	4616      	mov	r6, r2
 8003daa:	461f      	mov	r7, r3
 8003dac:	4605      	mov	r5, r0
 8003dae:	f000 ff1f 	bl	8004bf0 <_localeconv_r>
 8003db2:	6803      	ldr	r3, [r0, #0]
 8003db4:	9304      	str	r3, [sp, #16]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7fc fa8a 	bl	80002d0 <strlen>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	930a      	str	r3, [sp, #40]	@ 0x28
 8003dc0:	f8d8 3000 	ldr.w	r3, [r8]
 8003dc4:	9005      	str	r0, [sp, #20]
 8003dc6:	3307      	adds	r3, #7
 8003dc8:	f023 0307 	bic.w	r3, r3, #7
 8003dcc:	f103 0208 	add.w	r2, r3, #8
 8003dd0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003dd4:	f8d4 b000 	ldr.w	fp, [r4]
 8003dd8:	f8c8 2000 	str.w	r2, [r8]
 8003ddc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003de0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003de4:	9307      	str	r3, [sp, #28]
 8003de6:	f8cd 8018 	str.w	r8, [sp, #24]
 8003dea:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003dee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003df2:	4b9c      	ldr	r3, [pc, #624]	@ (8004064 <_printf_float+0x2c8>)
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	f7fc fec8 	bl	8000b8c <__aeabi_dcmpun>
 8003dfc:	bb70      	cbnz	r0, 8003e5c <_printf_float+0xc0>
 8003dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003e02:	4b98      	ldr	r3, [pc, #608]	@ (8004064 <_printf_float+0x2c8>)
 8003e04:	f04f 32ff 	mov.w	r2, #4294967295
 8003e08:	f7fc fea2 	bl	8000b50 <__aeabi_dcmple>
 8003e0c:	bb30      	cbnz	r0, 8003e5c <_printf_float+0xc0>
 8003e0e:	2200      	movs	r2, #0
 8003e10:	2300      	movs	r3, #0
 8003e12:	4640      	mov	r0, r8
 8003e14:	4649      	mov	r1, r9
 8003e16:	f7fc fe91 	bl	8000b3c <__aeabi_dcmplt>
 8003e1a:	b110      	cbz	r0, 8003e22 <_printf_float+0x86>
 8003e1c:	232d      	movs	r3, #45	@ 0x2d
 8003e1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e22:	4a91      	ldr	r2, [pc, #580]	@ (8004068 <_printf_float+0x2cc>)
 8003e24:	4b91      	ldr	r3, [pc, #580]	@ (800406c <_printf_float+0x2d0>)
 8003e26:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003e2a:	bf8c      	ite	hi
 8003e2c:	4690      	movhi	r8, r2
 8003e2e:	4698      	movls	r8, r3
 8003e30:	2303      	movs	r3, #3
 8003e32:	6123      	str	r3, [r4, #16]
 8003e34:	f02b 0304 	bic.w	r3, fp, #4
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	f04f 0900 	mov.w	r9, #0
 8003e3e:	9700      	str	r7, [sp, #0]
 8003e40:	4633      	mov	r3, r6
 8003e42:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003e44:	4621      	mov	r1, r4
 8003e46:	4628      	mov	r0, r5
 8003e48:	f000 f9d2 	bl	80041f0 <_printf_common>
 8003e4c:	3001      	adds	r0, #1
 8003e4e:	f040 808d 	bne.w	8003f6c <_printf_float+0x1d0>
 8003e52:	f04f 30ff 	mov.w	r0, #4294967295
 8003e56:	b00d      	add	sp, #52	@ 0x34
 8003e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e5c:	4642      	mov	r2, r8
 8003e5e:	464b      	mov	r3, r9
 8003e60:	4640      	mov	r0, r8
 8003e62:	4649      	mov	r1, r9
 8003e64:	f7fc fe92 	bl	8000b8c <__aeabi_dcmpun>
 8003e68:	b140      	cbz	r0, 8003e7c <_printf_float+0xe0>
 8003e6a:	464b      	mov	r3, r9
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	bfbc      	itt	lt
 8003e70:	232d      	movlt	r3, #45	@ 0x2d
 8003e72:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003e76:	4a7e      	ldr	r2, [pc, #504]	@ (8004070 <_printf_float+0x2d4>)
 8003e78:	4b7e      	ldr	r3, [pc, #504]	@ (8004074 <_printf_float+0x2d8>)
 8003e7a:	e7d4      	b.n	8003e26 <_printf_float+0x8a>
 8003e7c:	6863      	ldr	r3, [r4, #4]
 8003e7e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003e82:	9206      	str	r2, [sp, #24]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	d13b      	bne.n	8003f00 <_printf_float+0x164>
 8003e88:	2306      	movs	r3, #6
 8003e8a:	6063      	str	r3, [r4, #4]
 8003e8c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003e90:	2300      	movs	r3, #0
 8003e92:	6022      	str	r2, [r4, #0]
 8003e94:	9303      	str	r3, [sp, #12]
 8003e96:	ab0a      	add	r3, sp, #40	@ 0x28
 8003e98:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003e9c:	ab09      	add	r3, sp, #36	@ 0x24
 8003e9e:	9300      	str	r3, [sp, #0]
 8003ea0:	6861      	ldr	r1, [r4, #4]
 8003ea2:	ec49 8b10 	vmov	d0, r8, r9
 8003ea6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003eaa:	4628      	mov	r0, r5
 8003eac:	f7ff fed6 	bl	8003c5c <__cvt>
 8003eb0:	9b06      	ldr	r3, [sp, #24]
 8003eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003eb4:	2b47      	cmp	r3, #71	@ 0x47
 8003eb6:	4680      	mov	r8, r0
 8003eb8:	d129      	bne.n	8003f0e <_printf_float+0x172>
 8003eba:	1cc8      	adds	r0, r1, #3
 8003ebc:	db02      	blt.n	8003ec4 <_printf_float+0x128>
 8003ebe:	6863      	ldr	r3, [r4, #4]
 8003ec0:	4299      	cmp	r1, r3
 8003ec2:	dd41      	ble.n	8003f48 <_printf_float+0x1ac>
 8003ec4:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ec8:	fa5f fa8a 	uxtb.w	sl, sl
 8003ecc:	3901      	subs	r1, #1
 8003ece:	4652      	mov	r2, sl
 8003ed0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003ed4:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ed6:	f7ff ff26 	bl	8003d26 <__exponent>
 8003eda:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003edc:	1813      	adds	r3, r2, r0
 8003ede:	2a01      	cmp	r2, #1
 8003ee0:	4681      	mov	r9, r0
 8003ee2:	6123      	str	r3, [r4, #16]
 8003ee4:	dc02      	bgt.n	8003eec <_printf_float+0x150>
 8003ee6:	6822      	ldr	r2, [r4, #0]
 8003ee8:	07d2      	lsls	r2, r2, #31
 8003eea:	d501      	bpl.n	8003ef0 <_printf_float+0x154>
 8003eec:	3301      	adds	r3, #1
 8003eee:	6123      	str	r3, [r4, #16]
 8003ef0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0a2      	beq.n	8003e3e <_printf_float+0xa2>
 8003ef8:	232d      	movs	r3, #45	@ 0x2d
 8003efa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003efe:	e79e      	b.n	8003e3e <_printf_float+0xa2>
 8003f00:	9a06      	ldr	r2, [sp, #24]
 8003f02:	2a47      	cmp	r2, #71	@ 0x47
 8003f04:	d1c2      	bne.n	8003e8c <_printf_float+0xf0>
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d1c0      	bne.n	8003e8c <_printf_float+0xf0>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e7bd      	b.n	8003e8a <_printf_float+0xee>
 8003f0e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f12:	d9db      	bls.n	8003ecc <_printf_float+0x130>
 8003f14:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003f18:	d118      	bne.n	8003f4c <_printf_float+0x1b0>
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	6863      	ldr	r3, [r4, #4]
 8003f1e:	dd0b      	ble.n	8003f38 <_printf_float+0x19c>
 8003f20:	6121      	str	r1, [r4, #16]
 8003f22:	b913      	cbnz	r3, 8003f2a <_printf_float+0x18e>
 8003f24:	6822      	ldr	r2, [r4, #0]
 8003f26:	07d0      	lsls	r0, r2, #31
 8003f28:	d502      	bpl.n	8003f30 <_printf_float+0x194>
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	440b      	add	r3, r1
 8003f2e:	6123      	str	r3, [r4, #16]
 8003f30:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003f32:	f04f 0900 	mov.w	r9, #0
 8003f36:	e7db      	b.n	8003ef0 <_printf_float+0x154>
 8003f38:	b913      	cbnz	r3, 8003f40 <_printf_float+0x1a4>
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	07d2      	lsls	r2, r2, #31
 8003f3e:	d501      	bpl.n	8003f44 <_printf_float+0x1a8>
 8003f40:	3302      	adds	r3, #2
 8003f42:	e7f4      	b.n	8003f2e <_printf_float+0x192>
 8003f44:	2301      	movs	r3, #1
 8003f46:	e7f2      	b.n	8003f2e <_printf_float+0x192>
 8003f48:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003f4e:	4299      	cmp	r1, r3
 8003f50:	db05      	blt.n	8003f5e <_printf_float+0x1c2>
 8003f52:	6823      	ldr	r3, [r4, #0]
 8003f54:	6121      	str	r1, [r4, #16]
 8003f56:	07d8      	lsls	r0, r3, #31
 8003f58:	d5ea      	bpl.n	8003f30 <_printf_float+0x194>
 8003f5a:	1c4b      	adds	r3, r1, #1
 8003f5c:	e7e7      	b.n	8003f2e <_printf_float+0x192>
 8003f5e:	2900      	cmp	r1, #0
 8003f60:	bfd4      	ite	le
 8003f62:	f1c1 0202 	rsble	r2, r1, #2
 8003f66:	2201      	movgt	r2, #1
 8003f68:	4413      	add	r3, r2
 8003f6a:	e7e0      	b.n	8003f2e <_printf_float+0x192>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	055a      	lsls	r2, r3, #21
 8003f70:	d407      	bmi.n	8003f82 <_printf_float+0x1e6>
 8003f72:	6923      	ldr	r3, [r4, #16]
 8003f74:	4642      	mov	r2, r8
 8003f76:	4631      	mov	r1, r6
 8003f78:	4628      	mov	r0, r5
 8003f7a:	47b8      	blx	r7
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d12b      	bne.n	8003fd8 <_printf_float+0x23c>
 8003f80:	e767      	b.n	8003e52 <_printf_float+0xb6>
 8003f82:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003f86:	f240 80dd 	bls.w	8004144 <_printf_float+0x3a8>
 8003f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003f8e:	2200      	movs	r2, #0
 8003f90:	2300      	movs	r3, #0
 8003f92:	f7fc fdc9 	bl	8000b28 <__aeabi_dcmpeq>
 8003f96:	2800      	cmp	r0, #0
 8003f98:	d033      	beq.n	8004002 <_printf_float+0x266>
 8003f9a:	4a37      	ldr	r2, [pc, #220]	@ (8004078 <_printf_float+0x2dc>)
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	4631      	mov	r1, r6
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	47b8      	blx	r7
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	f43f af54 	beq.w	8003e52 <_printf_float+0xb6>
 8003faa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003fae:	4543      	cmp	r3, r8
 8003fb0:	db02      	blt.n	8003fb8 <_printf_float+0x21c>
 8003fb2:	6823      	ldr	r3, [r4, #0]
 8003fb4:	07d8      	lsls	r0, r3, #31
 8003fb6:	d50f      	bpl.n	8003fd8 <_printf_float+0x23c>
 8003fb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003fbc:	4631      	mov	r1, r6
 8003fbe:	4628      	mov	r0, r5
 8003fc0:	47b8      	blx	r7
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	f43f af45 	beq.w	8003e52 <_printf_float+0xb6>
 8003fc8:	f04f 0900 	mov.w	r9, #0
 8003fcc:	f108 38ff 	add.w	r8, r8, #4294967295
 8003fd0:	f104 0a1a 	add.w	sl, r4, #26
 8003fd4:	45c8      	cmp	r8, r9
 8003fd6:	dc09      	bgt.n	8003fec <_printf_float+0x250>
 8003fd8:	6823      	ldr	r3, [r4, #0]
 8003fda:	079b      	lsls	r3, r3, #30
 8003fdc:	f100 8103 	bmi.w	80041e6 <_printf_float+0x44a>
 8003fe0:	68e0      	ldr	r0, [r4, #12]
 8003fe2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003fe4:	4298      	cmp	r0, r3
 8003fe6:	bfb8      	it	lt
 8003fe8:	4618      	movlt	r0, r3
 8003fea:	e734      	b.n	8003e56 <_printf_float+0xba>
 8003fec:	2301      	movs	r3, #1
 8003fee:	4652      	mov	r2, sl
 8003ff0:	4631      	mov	r1, r6
 8003ff2:	4628      	mov	r0, r5
 8003ff4:	47b8      	blx	r7
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	f43f af2b 	beq.w	8003e52 <_printf_float+0xb6>
 8003ffc:	f109 0901 	add.w	r9, r9, #1
 8004000:	e7e8      	b.n	8003fd4 <_printf_float+0x238>
 8004002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004004:	2b00      	cmp	r3, #0
 8004006:	dc39      	bgt.n	800407c <_printf_float+0x2e0>
 8004008:	4a1b      	ldr	r2, [pc, #108]	@ (8004078 <_printf_float+0x2dc>)
 800400a:	2301      	movs	r3, #1
 800400c:	4631      	mov	r1, r6
 800400e:	4628      	mov	r0, r5
 8004010:	47b8      	blx	r7
 8004012:	3001      	adds	r0, #1
 8004014:	f43f af1d 	beq.w	8003e52 <_printf_float+0xb6>
 8004018:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800401c:	ea59 0303 	orrs.w	r3, r9, r3
 8004020:	d102      	bne.n	8004028 <_printf_float+0x28c>
 8004022:	6823      	ldr	r3, [r4, #0]
 8004024:	07d9      	lsls	r1, r3, #31
 8004026:	d5d7      	bpl.n	8003fd8 <_printf_float+0x23c>
 8004028:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800402c:	4631      	mov	r1, r6
 800402e:	4628      	mov	r0, r5
 8004030:	47b8      	blx	r7
 8004032:	3001      	adds	r0, #1
 8004034:	f43f af0d 	beq.w	8003e52 <_printf_float+0xb6>
 8004038:	f04f 0a00 	mov.w	sl, #0
 800403c:	f104 0b1a 	add.w	fp, r4, #26
 8004040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004042:	425b      	negs	r3, r3
 8004044:	4553      	cmp	r3, sl
 8004046:	dc01      	bgt.n	800404c <_printf_float+0x2b0>
 8004048:	464b      	mov	r3, r9
 800404a:	e793      	b.n	8003f74 <_printf_float+0x1d8>
 800404c:	2301      	movs	r3, #1
 800404e:	465a      	mov	r2, fp
 8004050:	4631      	mov	r1, r6
 8004052:	4628      	mov	r0, r5
 8004054:	47b8      	blx	r7
 8004056:	3001      	adds	r0, #1
 8004058:	f43f aefb 	beq.w	8003e52 <_printf_float+0xb6>
 800405c:	f10a 0a01 	add.w	sl, sl, #1
 8004060:	e7ee      	b.n	8004040 <_printf_float+0x2a4>
 8004062:	bf00      	nop
 8004064:	7fefffff 	.word	0x7fefffff
 8004068:	0800845c 	.word	0x0800845c
 800406c:	08008458 	.word	0x08008458
 8004070:	08008464 	.word	0x08008464
 8004074:	08008460 	.word	0x08008460
 8004078:	08008468 	.word	0x08008468
 800407c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800407e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004082:	4553      	cmp	r3, sl
 8004084:	bfa8      	it	ge
 8004086:	4653      	movge	r3, sl
 8004088:	2b00      	cmp	r3, #0
 800408a:	4699      	mov	r9, r3
 800408c:	dc36      	bgt.n	80040fc <_printf_float+0x360>
 800408e:	f04f 0b00 	mov.w	fp, #0
 8004092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004096:	f104 021a 	add.w	r2, r4, #26
 800409a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800409c:	9306      	str	r3, [sp, #24]
 800409e:	eba3 0309 	sub.w	r3, r3, r9
 80040a2:	455b      	cmp	r3, fp
 80040a4:	dc31      	bgt.n	800410a <_printf_float+0x36e>
 80040a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040a8:	459a      	cmp	sl, r3
 80040aa:	dc3a      	bgt.n	8004122 <_printf_float+0x386>
 80040ac:	6823      	ldr	r3, [r4, #0]
 80040ae:	07da      	lsls	r2, r3, #31
 80040b0:	d437      	bmi.n	8004122 <_printf_float+0x386>
 80040b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040b4:	ebaa 0903 	sub.w	r9, sl, r3
 80040b8:	9b06      	ldr	r3, [sp, #24]
 80040ba:	ebaa 0303 	sub.w	r3, sl, r3
 80040be:	4599      	cmp	r9, r3
 80040c0:	bfa8      	it	ge
 80040c2:	4699      	movge	r9, r3
 80040c4:	f1b9 0f00 	cmp.w	r9, #0
 80040c8:	dc33      	bgt.n	8004132 <_printf_float+0x396>
 80040ca:	f04f 0800 	mov.w	r8, #0
 80040ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80040d2:	f104 0b1a 	add.w	fp, r4, #26
 80040d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80040d8:	ebaa 0303 	sub.w	r3, sl, r3
 80040dc:	eba3 0309 	sub.w	r3, r3, r9
 80040e0:	4543      	cmp	r3, r8
 80040e2:	f77f af79 	ble.w	8003fd8 <_printf_float+0x23c>
 80040e6:	2301      	movs	r3, #1
 80040e8:	465a      	mov	r2, fp
 80040ea:	4631      	mov	r1, r6
 80040ec:	4628      	mov	r0, r5
 80040ee:	47b8      	blx	r7
 80040f0:	3001      	adds	r0, #1
 80040f2:	f43f aeae 	beq.w	8003e52 <_printf_float+0xb6>
 80040f6:	f108 0801 	add.w	r8, r8, #1
 80040fa:	e7ec      	b.n	80040d6 <_printf_float+0x33a>
 80040fc:	4642      	mov	r2, r8
 80040fe:	4631      	mov	r1, r6
 8004100:	4628      	mov	r0, r5
 8004102:	47b8      	blx	r7
 8004104:	3001      	adds	r0, #1
 8004106:	d1c2      	bne.n	800408e <_printf_float+0x2f2>
 8004108:	e6a3      	b.n	8003e52 <_printf_float+0xb6>
 800410a:	2301      	movs	r3, #1
 800410c:	4631      	mov	r1, r6
 800410e:	4628      	mov	r0, r5
 8004110:	9206      	str	r2, [sp, #24]
 8004112:	47b8      	blx	r7
 8004114:	3001      	adds	r0, #1
 8004116:	f43f ae9c 	beq.w	8003e52 <_printf_float+0xb6>
 800411a:	9a06      	ldr	r2, [sp, #24]
 800411c:	f10b 0b01 	add.w	fp, fp, #1
 8004120:	e7bb      	b.n	800409a <_printf_float+0x2fe>
 8004122:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004126:	4631      	mov	r1, r6
 8004128:	4628      	mov	r0, r5
 800412a:	47b8      	blx	r7
 800412c:	3001      	adds	r0, #1
 800412e:	d1c0      	bne.n	80040b2 <_printf_float+0x316>
 8004130:	e68f      	b.n	8003e52 <_printf_float+0xb6>
 8004132:	9a06      	ldr	r2, [sp, #24]
 8004134:	464b      	mov	r3, r9
 8004136:	4442      	add	r2, r8
 8004138:	4631      	mov	r1, r6
 800413a:	4628      	mov	r0, r5
 800413c:	47b8      	blx	r7
 800413e:	3001      	adds	r0, #1
 8004140:	d1c3      	bne.n	80040ca <_printf_float+0x32e>
 8004142:	e686      	b.n	8003e52 <_printf_float+0xb6>
 8004144:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004148:	f1ba 0f01 	cmp.w	sl, #1
 800414c:	dc01      	bgt.n	8004152 <_printf_float+0x3b6>
 800414e:	07db      	lsls	r3, r3, #31
 8004150:	d536      	bpl.n	80041c0 <_printf_float+0x424>
 8004152:	2301      	movs	r3, #1
 8004154:	4642      	mov	r2, r8
 8004156:	4631      	mov	r1, r6
 8004158:	4628      	mov	r0, r5
 800415a:	47b8      	blx	r7
 800415c:	3001      	adds	r0, #1
 800415e:	f43f ae78 	beq.w	8003e52 <_printf_float+0xb6>
 8004162:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004166:	4631      	mov	r1, r6
 8004168:	4628      	mov	r0, r5
 800416a:	47b8      	blx	r7
 800416c:	3001      	adds	r0, #1
 800416e:	f43f ae70 	beq.w	8003e52 <_printf_float+0xb6>
 8004172:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004176:	2200      	movs	r2, #0
 8004178:	2300      	movs	r3, #0
 800417a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800417e:	f7fc fcd3 	bl	8000b28 <__aeabi_dcmpeq>
 8004182:	b9c0      	cbnz	r0, 80041b6 <_printf_float+0x41a>
 8004184:	4653      	mov	r3, sl
 8004186:	f108 0201 	add.w	r2, r8, #1
 800418a:	4631      	mov	r1, r6
 800418c:	4628      	mov	r0, r5
 800418e:	47b8      	blx	r7
 8004190:	3001      	adds	r0, #1
 8004192:	d10c      	bne.n	80041ae <_printf_float+0x412>
 8004194:	e65d      	b.n	8003e52 <_printf_float+0xb6>
 8004196:	2301      	movs	r3, #1
 8004198:	465a      	mov	r2, fp
 800419a:	4631      	mov	r1, r6
 800419c:	4628      	mov	r0, r5
 800419e:	47b8      	blx	r7
 80041a0:	3001      	adds	r0, #1
 80041a2:	f43f ae56 	beq.w	8003e52 <_printf_float+0xb6>
 80041a6:	f108 0801 	add.w	r8, r8, #1
 80041aa:	45d0      	cmp	r8, sl
 80041ac:	dbf3      	blt.n	8004196 <_printf_float+0x3fa>
 80041ae:	464b      	mov	r3, r9
 80041b0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80041b4:	e6df      	b.n	8003f76 <_printf_float+0x1da>
 80041b6:	f04f 0800 	mov.w	r8, #0
 80041ba:	f104 0b1a 	add.w	fp, r4, #26
 80041be:	e7f4      	b.n	80041aa <_printf_float+0x40e>
 80041c0:	2301      	movs	r3, #1
 80041c2:	4642      	mov	r2, r8
 80041c4:	e7e1      	b.n	800418a <_printf_float+0x3ee>
 80041c6:	2301      	movs	r3, #1
 80041c8:	464a      	mov	r2, r9
 80041ca:	4631      	mov	r1, r6
 80041cc:	4628      	mov	r0, r5
 80041ce:	47b8      	blx	r7
 80041d0:	3001      	adds	r0, #1
 80041d2:	f43f ae3e 	beq.w	8003e52 <_printf_float+0xb6>
 80041d6:	f108 0801 	add.w	r8, r8, #1
 80041da:	68e3      	ldr	r3, [r4, #12]
 80041dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80041de:	1a5b      	subs	r3, r3, r1
 80041e0:	4543      	cmp	r3, r8
 80041e2:	dcf0      	bgt.n	80041c6 <_printf_float+0x42a>
 80041e4:	e6fc      	b.n	8003fe0 <_printf_float+0x244>
 80041e6:	f04f 0800 	mov.w	r8, #0
 80041ea:	f104 0919 	add.w	r9, r4, #25
 80041ee:	e7f4      	b.n	80041da <_printf_float+0x43e>

080041f0 <_printf_common>:
 80041f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041f4:	4616      	mov	r6, r2
 80041f6:	4698      	mov	r8, r3
 80041f8:	688a      	ldr	r2, [r1, #8]
 80041fa:	690b      	ldr	r3, [r1, #16]
 80041fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004200:	4293      	cmp	r3, r2
 8004202:	bfb8      	it	lt
 8004204:	4613      	movlt	r3, r2
 8004206:	6033      	str	r3, [r6, #0]
 8004208:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800420c:	4607      	mov	r7, r0
 800420e:	460c      	mov	r4, r1
 8004210:	b10a      	cbz	r2, 8004216 <_printf_common+0x26>
 8004212:	3301      	adds	r3, #1
 8004214:	6033      	str	r3, [r6, #0]
 8004216:	6823      	ldr	r3, [r4, #0]
 8004218:	0699      	lsls	r1, r3, #26
 800421a:	bf42      	ittt	mi
 800421c:	6833      	ldrmi	r3, [r6, #0]
 800421e:	3302      	addmi	r3, #2
 8004220:	6033      	strmi	r3, [r6, #0]
 8004222:	6825      	ldr	r5, [r4, #0]
 8004224:	f015 0506 	ands.w	r5, r5, #6
 8004228:	d106      	bne.n	8004238 <_printf_common+0x48>
 800422a:	f104 0a19 	add.w	sl, r4, #25
 800422e:	68e3      	ldr	r3, [r4, #12]
 8004230:	6832      	ldr	r2, [r6, #0]
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	42ab      	cmp	r3, r5
 8004236:	dc26      	bgt.n	8004286 <_printf_common+0x96>
 8004238:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800423c:	6822      	ldr	r2, [r4, #0]
 800423e:	3b00      	subs	r3, #0
 8004240:	bf18      	it	ne
 8004242:	2301      	movne	r3, #1
 8004244:	0692      	lsls	r2, r2, #26
 8004246:	d42b      	bmi.n	80042a0 <_printf_common+0xb0>
 8004248:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800424c:	4641      	mov	r1, r8
 800424e:	4638      	mov	r0, r7
 8004250:	47c8      	blx	r9
 8004252:	3001      	adds	r0, #1
 8004254:	d01e      	beq.n	8004294 <_printf_common+0xa4>
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	6922      	ldr	r2, [r4, #16]
 800425a:	f003 0306 	and.w	r3, r3, #6
 800425e:	2b04      	cmp	r3, #4
 8004260:	bf02      	ittt	eq
 8004262:	68e5      	ldreq	r5, [r4, #12]
 8004264:	6833      	ldreq	r3, [r6, #0]
 8004266:	1aed      	subeq	r5, r5, r3
 8004268:	68a3      	ldr	r3, [r4, #8]
 800426a:	bf0c      	ite	eq
 800426c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004270:	2500      	movne	r5, #0
 8004272:	4293      	cmp	r3, r2
 8004274:	bfc4      	itt	gt
 8004276:	1a9b      	subgt	r3, r3, r2
 8004278:	18ed      	addgt	r5, r5, r3
 800427a:	2600      	movs	r6, #0
 800427c:	341a      	adds	r4, #26
 800427e:	42b5      	cmp	r5, r6
 8004280:	d11a      	bne.n	80042b8 <_printf_common+0xc8>
 8004282:	2000      	movs	r0, #0
 8004284:	e008      	b.n	8004298 <_printf_common+0xa8>
 8004286:	2301      	movs	r3, #1
 8004288:	4652      	mov	r2, sl
 800428a:	4641      	mov	r1, r8
 800428c:	4638      	mov	r0, r7
 800428e:	47c8      	blx	r9
 8004290:	3001      	adds	r0, #1
 8004292:	d103      	bne.n	800429c <_printf_common+0xac>
 8004294:	f04f 30ff 	mov.w	r0, #4294967295
 8004298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800429c:	3501      	adds	r5, #1
 800429e:	e7c6      	b.n	800422e <_printf_common+0x3e>
 80042a0:	18e1      	adds	r1, r4, r3
 80042a2:	1c5a      	adds	r2, r3, #1
 80042a4:	2030      	movs	r0, #48	@ 0x30
 80042a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80042aa:	4422      	add	r2, r4
 80042ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80042b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80042b4:	3302      	adds	r3, #2
 80042b6:	e7c7      	b.n	8004248 <_printf_common+0x58>
 80042b8:	2301      	movs	r3, #1
 80042ba:	4622      	mov	r2, r4
 80042bc:	4641      	mov	r1, r8
 80042be:	4638      	mov	r0, r7
 80042c0:	47c8      	blx	r9
 80042c2:	3001      	adds	r0, #1
 80042c4:	d0e6      	beq.n	8004294 <_printf_common+0xa4>
 80042c6:	3601      	adds	r6, #1
 80042c8:	e7d9      	b.n	800427e <_printf_common+0x8e>
	...

080042cc <_printf_i>:
 80042cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80042d0:	7e0f      	ldrb	r7, [r1, #24]
 80042d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80042d4:	2f78      	cmp	r7, #120	@ 0x78
 80042d6:	4691      	mov	r9, r2
 80042d8:	4680      	mov	r8, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	469a      	mov	sl, r3
 80042de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80042e2:	d807      	bhi.n	80042f4 <_printf_i+0x28>
 80042e4:	2f62      	cmp	r7, #98	@ 0x62
 80042e6:	d80a      	bhi.n	80042fe <_printf_i+0x32>
 80042e8:	2f00      	cmp	r7, #0
 80042ea:	f000 80d1 	beq.w	8004490 <_printf_i+0x1c4>
 80042ee:	2f58      	cmp	r7, #88	@ 0x58
 80042f0:	f000 80b8 	beq.w	8004464 <_printf_i+0x198>
 80042f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80042f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80042fc:	e03a      	b.n	8004374 <_printf_i+0xa8>
 80042fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004302:	2b15      	cmp	r3, #21
 8004304:	d8f6      	bhi.n	80042f4 <_printf_i+0x28>
 8004306:	a101      	add	r1, pc, #4	@ (adr r1, 800430c <_printf_i+0x40>)
 8004308:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800430c:	08004365 	.word	0x08004365
 8004310:	08004379 	.word	0x08004379
 8004314:	080042f5 	.word	0x080042f5
 8004318:	080042f5 	.word	0x080042f5
 800431c:	080042f5 	.word	0x080042f5
 8004320:	080042f5 	.word	0x080042f5
 8004324:	08004379 	.word	0x08004379
 8004328:	080042f5 	.word	0x080042f5
 800432c:	080042f5 	.word	0x080042f5
 8004330:	080042f5 	.word	0x080042f5
 8004334:	080042f5 	.word	0x080042f5
 8004338:	08004477 	.word	0x08004477
 800433c:	080043a3 	.word	0x080043a3
 8004340:	08004431 	.word	0x08004431
 8004344:	080042f5 	.word	0x080042f5
 8004348:	080042f5 	.word	0x080042f5
 800434c:	08004499 	.word	0x08004499
 8004350:	080042f5 	.word	0x080042f5
 8004354:	080043a3 	.word	0x080043a3
 8004358:	080042f5 	.word	0x080042f5
 800435c:	080042f5 	.word	0x080042f5
 8004360:	08004439 	.word	0x08004439
 8004364:	6833      	ldr	r3, [r6, #0]
 8004366:	1d1a      	adds	r2, r3, #4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6032      	str	r2, [r6, #0]
 800436c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004370:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004374:	2301      	movs	r3, #1
 8004376:	e09c      	b.n	80044b2 <_printf_i+0x1e6>
 8004378:	6833      	ldr	r3, [r6, #0]
 800437a:	6820      	ldr	r0, [r4, #0]
 800437c:	1d19      	adds	r1, r3, #4
 800437e:	6031      	str	r1, [r6, #0]
 8004380:	0606      	lsls	r6, r0, #24
 8004382:	d501      	bpl.n	8004388 <_printf_i+0xbc>
 8004384:	681d      	ldr	r5, [r3, #0]
 8004386:	e003      	b.n	8004390 <_printf_i+0xc4>
 8004388:	0645      	lsls	r5, r0, #25
 800438a:	d5fb      	bpl.n	8004384 <_printf_i+0xb8>
 800438c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004390:	2d00      	cmp	r5, #0
 8004392:	da03      	bge.n	800439c <_printf_i+0xd0>
 8004394:	232d      	movs	r3, #45	@ 0x2d
 8004396:	426d      	negs	r5, r5
 8004398:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800439c:	4858      	ldr	r0, [pc, #352]	@ (8004500 <_printf_i+0x234>)
 800439e:	230a      	movs	r3, #10
 80043a0:	e011      	b.n	80043c6 <_printf_i+0xfa>
 80043a2:	6821      	ldr	r1, [r4, #0]
 80043a4:	6833      	ldr	r3, [r6, #0]
 80043a6:	0608      	lsls	r0, r1, #24
 80043a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80043ac:	d402      	bmi.n	80043b4 <_printf_i+0xe8>
 80043ae:	0649      	lsls	r1, r1, #25
 80043b0:	bf48      	it	mi
 80043b2:	b2ad      	uxthmi	r5, r5
 80043b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80043b6:	4852      	ldr	r0, [pc, #328]	@ (8004500 <_printf_i+0x234>)
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	bf14      	ite	ne
 80043bc:	230a      	movne	r3, #10
 80043be:	2308      	moveq	r3, #8
 80043c0:	2100      	movs	r1, #0
 80043c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80043c6:	6866      	ldr	r6, [r4, #4]
 80043c8:	60a6      	str	r6, [r4, #8]
 80043ca:	2e00      	cmp	r6, #0
 80043cc:	db05      	blt.n	80043da <_printf_i+0x10e>
 80043ce:	6821      	ldr	r1, [r4, #0]
 80043d0:	432e      	orrs	r6, r5
 80043d2:	f021 0104 	bic.w	r1, r1, #4
 80043d6:	6021      	str	r1, [r4, #0]
 80043d8:	d04b      	beq.n	8004472 <_printf_i+0x1a6>
 80043da:	4616      	mov	r6, r2
 80043dc:	fbb5 f1f3 	udiv	r1, r5, r3
 80043e0:	fb03 5711 	mls	r7, r3, r1, r5
 80043e4:	5dc7      	ldrb	r7, [r0, r7]
 80043e6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80043ea:	462f      	mov	r7, r5
 80043ec:	42bb      	cmp	r3, r7
 80043ee:	460d      	mov	r5, r1
 80043f0:	d9f4      	bls.n	80043dc <_printf_i+0x110>
 80043f2:	2b08      	cmp	r3, #8
 80043f4:	d10b      	bne.n	800440e <_printf_i+0x142>
 80043f6:	6823      	ldr	r3, [r4, #0]
 80043f8:	07df      	lsls	r7, r3, #31
 80043fa:	d508      	bpl.n	800440e <_printf_i+0x142>
 80043fc:	6923      	ldr	r3, [r4, #16]
 80043fe:	6861      	ldr	r1, [r4, #4]
 8004400:	4299      	cmp	r1, r3
 8004402:	bfde      	ittt	le
 8004404:	2330      	movle	r3, #48	@ 0x30
 8004406:	f806 3c01 	strble.w	r3, [r6, #-1]
 800440a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800440e:	1b92      	subs	r2, r2, r6
 8004410:	6122      	str	r2, [r4, #16]
 8004412:	f8cd a000 	str.w	sl, [sp]
 8004416:	464b      	mov	r3, r9
 8004418:	aa03      	add	r2, sp, #12
 800441a:	4621      	mov	r1, r4
 800441c:	4640      	mov	r0, r8
 800441e:	f7ff fee7 	bl	80041f0 <_printf_common>
 8004422:	3001      	adds	r0, #1
 8004424:	d14a      	bne.n	80044bc <_printf_i+0x1f0>
 8004426:	f04f 30ff 	mov.w	r0, #4294967295
 800442a:	b004      	add	sp, #16
 800442c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	f043 0320 	orr.w	r3, r3, #32
 8004436:	6023      	str	r3, [r4, #0]
 8004438:	4832      	ldr	r0, [pc, #200]	@ (8004504 <_printf_i+0x238>)
 800443a:	2778      	movs	r7, #120	@ 0x78
 800443c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004440:	6823      	ldr	r3, [r4, #0]
 8004442:	6831      	ldr	r1, [r6, #0]
 8004444:	061f      	lsls	r7, r3, #24
 8004446:	f851 5b04 	ldr.w	r5, [r1], #4
 800444a:	d402      	bmi.n	8004452 <_printf_i+0x186>
 800444c:	065f      	lsls	r7, r3, #25
 800444e:	bf48      	it	mi
 8004450:	b2ad      	uxthmi	r5, r5
 8004452:	6031      	str	r1, [r6, #0]
 8004454:	07d9      	lsls	r1, r3, #31
 8004456:	bf44      	itt	mi
 8004458:	f043 0320 	orrmi.w	r3, r3, #32
 800445c:	6023      	strmi	r3, [r4, #0]
 800445e:	b11d      	cbz	r5, 8004468 <_printf_i+0x19c>
 8004460:	2310      	movs	r3, #16
 8004462:	e7ad      	b.n	80043c0 <_printf_i+0xf4>
 8004464:	4826      	ldr	r0, [pc, #152]	@ (8004500 <_printf_i+0x234>)
 8004466:	e7e9      	b.n	800443c <_printf_i+0x170>
 8004468:	6823      	ldr	r3, [r4, #0]
 800446a:	f023 0320 	bic.w	r3, r3, #32
 800446e:	6023      	str	r3, [r4, #0]
 8004470:	e7f6      	b.n	8004460 <_printf_i+0x194>
 8004472:	4616      	mov	r6, r2
 8004474:	e7bd      	b.n	80043f2 <_printf_i+0x126>
 8004476:	6833      	ldr	r3, [r6, #0]
 8004478:	6825      	ldr	r5, [r4, #0]
 800447a:	6961      	ldr	r1, [r4, #20]
 800447c:	1d18      	adds	r0, r3, #4
 800447e:	6030      	str	r0, [r6, #0]
 8004480:	062e      	lsls	r6, r5, #24
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	d501      	bpl.n	800448a <_printf_i+0x1be>
 8004486:	6019      	str	r1, [r3, #0]
 8004488:	e002      	b.n	8004490 <_printf_i+0x1c4>
 800448a:	0668      	lsls	r0, r5, #25
 800448c:	d5fb      	bpl.n	8004486 <_printf_i+0x1ba>
 800448e:	8019      	strh	r1, [r3, #0]
 8004490:	2300      	movs	r3, #0
 8004492:	6123      	str	r3, [r4, #16]
 8004494:	4616      	mov	r6, r2
 8004496:	e7bc      	b.n	8004412 <_printf_i+0x146>
 8004498:	6833      	ldr	r3, [r6, #0]
 800449a:	1d1a      	adds	r2, r3, #4
 800449c:	6032      	str	r2, [r6, #0]
 800449e:	681e      	ldr	r6, [r3, #0]
 80044a0:	6862      	ldr	r2, [r4, #4]
 80044a2:	2100      	movs	r1, #0
 80044a4:	4630      	mov	r0, r6
 80044a6:	f7fb fec3 	bl	8000230 <memchr>
 80044aa:	b108      	cbz	r0, 80044b0 <_printf_i+0x1e4>
 80044ac:	1b80      	subs	r0, r0, r6
 80044ae:	6060      	str	r0, [r4, #4]
 80044b0:	6863      	ldr	r3, [r4, #4]
 80044b2:	6123      	str	r3, [r4, #16]
 80044b4:	2300      	movs	r3, #0
 80044b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80044ba:	e7aa      	b.n	8004412 <_printf_i+0x146>
 80044bc:	6923      	ldr	r3, [r4, #16]
 80044be:	4632      	mov	r2, r6
 80044c0:	4649      	mov	r1, r9
 80044c2:	4640      	mov	r0, r8
 80044c4:	47d0      	blx	sl
 80044c6:	3001      	adds	r0, #1
 80044c8:	d0ad      	beq.n	8004426 <_printf_i+0x15a>
 80044ca:	6823      	ldr	r3, [r4, #0]
 80044cc:	079b      	lsls	r3, r3, #30
 80044ce:	d413      	bmi.n	80044f8 <_printf_i+0x22c>
 80044d0:	68e0      	ldr	r0, [r4, #12]
 80044d2:	9b03      	ldr	r3, [sp, #12]
 80044d4:	4298      	cmp	r0, r3
 80044d6:	bfb8      	it	lt
 80044d8:	4618      	movlt	r0, r3
 80044da:	e7a6      	b.n	800442a <_printf_i+0x15e>
 80044dc:	2301      	movs	r3, #1
 80044de:	4632      	mov	r2, r6
 80044e0:	4649      	mov	r1, r9
 80044e2:	4640      	mov	r0, r8
 80044e4:	47d0      	blx	sl
 80044e6:	3001      	adds	r0, #1
 80044e8:	d09d      	beq.n	8004426 <_printf_i+0x15a>
 80044ea:	3501      	adds	r5, #1
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	9903      	ldr	r1, [sp, #12]
 80044f0:	1a5b      	subs	r3, r3, r1
 80044f2:	42ab      	cmp	r3, r5
 80044f4:	dcf2      	bgt.n	80044dc <_printf_i+0x210>
 80044f6:	e7eb      	b.n	80044d0 <_printf_i+0x204>
 80044f8:	2500      	movs	r5, #0
 80044fa:	f104 0619 	add.w	r6, r4, #25
 80044fe:	e7f5      	b.n	80044ec <_printf_i+0x220>
 8004500:	0800846a 	.word	0x0800846a
 8004504:	0800847b 	.word	0x0800847b

08004508 <_scanf_float>:
 8004508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450c:	b087      	sub	sp, #28
 800450e:	4691      	mov	r9, r2
 8004510:	9303      	str	r3, [sp, #12]
 8004512:	688b      	ldr	r3, [r1, #8]
 8004514:	1e5a      	subs	r2, r3, #1
 8004516:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800451a:	bf81      	itttt	hi
 800451c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004520:	eb03 0b05 	addhi.w	fp, r3, r5
 8004524:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004528:	608b      	strhi	r3, [r1, #8]
 800452a:	680b      	ldr	r3, [r1, #0]
 800452c:	460a      	mov	r2, r1
 800452e:	f04f 0500 	mov.w	r5, #0
 8004532:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004536:	f842 3b1c 	str.w	r3, [r2], #28
 800453a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800453e:	4680      	mov	r8, r0
 8004540:	460c      	mov	r4, r1
 8004542:	bf98      	it	ls
 8004544:	f04f 0b00 	movls.w	fp, #0
 8004548:	9201      	str	r2, [sp, #4]
 800454a:	4616      	mov	r6, r2
 800454c:	46aa      	mov	sl, r5
 800454e:	462f      	mov	r7, r5
 8004550:	9502      	str	r5, [sp, #8]
 8004552:	68a2      	ldr	r2, [r4, #8]
 8004554:	b15a      	cbz	r2, 800456e <_scanf_float+0x66>
 8004556:	f8d9 3000 	ldr.w	r3, [r9]
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b4e      	cmp	r3, #78	@ 0x4e
 800455e:	d863      	bhi.n	8004628 <_scanf_float+0x120>
 8004560:	2b40      	cmp	r3, #64	@ 0x40
 8004562:	d83b      	bhi.n	80045dc <_scanf_float+0xd4>
 8004564:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004568:	b2c8      	uxtb	r0, r1
 800456a:	280e      	cmp	r0, #14
 800456c:	d939      	bls.n	80045e2 <_scanf_float+0xda>
 800456e:	b11f      	cbz	r7, 8004578 <_scanf_float+0x70>
 8004570:	6823      	ldr	r3, [r4, #0]
 8004572:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004576:	6023      	str	r3, [r4, #0]
 8004578:	f10a 3aff 	add.w	sl, sl, #4294967295
 800457c:	f1ba 0f01 	cmp.w	sl, #1
 8004580:	f200 8114 	bhi.w	80047ac <_scanf_float+0x2a4>
 8004584:	9b01      	ldr	r3, [sp, #4]
 8004586:	429e      	cmp	r6, r3
 8004588:	f200 8105 	bhi.w	8004796 <_scanf_float+0x28e>
 800458c:	2001      	movs	r0, #1
 800458e:	b007      	add	sp, #28
 8004590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004594:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004598:	2a0d      	cmp	r2, #13
 800459a:	d8e8      	bhi.n	800456e <_scanf_float+0x66>
 800459c:	a101      	add	r1, pc, #4	@ (adr r1, 80045a4 <_scanf_float+0x9c>)
 800459e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080046ed 	.word	0x080046ed
 80045a8:	0800456f 	.word	0x0800456f
 80045ac:	0800456f 	.word	0x0800456f
 80045b0:	0800456f 	.word	0x0800456f
 80045b4:	08004749 	.word	0x08004749
 80045b8:	08004723 	.word	0x08004723
 80045bc:	0800456f 	.word	0x0800456f
 80045c0:	0800456f 	.word	0x0800456f
 80045c4:	080046fb 	.word	0x080046fb
 80045c8:	0800456f 	.word	0x0800456f
 80045cc:	0800456f 	.word	0x0800456f
 80045d0:	0800456f 	.word	0x0800456f
 80045d4:	0800456f 	.word	0x0800456f
 80045d8:	080046b7 	.word	0x080046b7
 80045dc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80045e0:	e7da      	b.n	8004598 <_scanf_float+0x90>
 80045e2:	290e      	cmp	r1, #14
 80045e4:	d8c3      	bhi.n	800456e <_scanf_float+0x66>
 80045e6:	a001      	add	r0, pc, #4	@ (adr r0, 80045ec <_scanf_float+0xe4>)
 80045e8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80045ec:	080046a7 	.word	0x080046a7
 80045f0:	0800456f 	.word	0x0800456f
 80045f4:	080046a7 	.word	0x080046a7
 80045f8:	08004737 	.word	0x08004737
 80045fc:	0800456f 	.word	0x0800456f
 8004600:	08004649 	.word	0x08004649
 8004604:	0800468d 	.word	0x0800468d
 8004608:	0800468d 	.word	0x0800468d
 800460c:	0800468d 	.word	0x0800468d
 8004610:	0800468d 	.word	0x0800468d
 8004614:	0800468d 	.word	0x0800468d
 8004618:	0800468d 	.word	0x0800468d
 800461c:	0800468d 	.word	0x0800468d
 8004620:	0800468d 	.word	0x0800468d
 8004624:	0800468d 	.word	0x0800468d
 8004628:	2b6e      	cmp	r3, #110	@ 0x6e
 800462a:	d809      	bhi.n	8004640 <_scanf_float+0x138>
 800462c:	2b60      	cmp	r3, #96	@ 0x60
 800462e:	d8b1      	bhi.n	8004594 <_scanf_float+0x8c>
 8004630:	2b54      	cmp	r3, #84	@ 0x54
 8004632:	d07b      	beq.n	800472c <_scanf_float+0x224>
 8004634:	2b59      	cmp	r3, #89	@ 0x59
 8004636:	d19a      	bne.n	800456e <_scanf_float+0x66>
 8004638:	2d07      	cmp	r5, #7
 800463a:	d198      	bne.n	800456e <_scanf_float+0x66>
 800463c:	2508      	movs	r5, #8
 800463e:	e02f      	b.n	80046a0 <_scanf_float+0x198>
 8004640:	2b74      	cmp	r3, #116	@ 0x74
 8004642:	d073      	beq.n	800472c <_scanf_float+0x224>
 8004644:	2b79      	cmp	r3, #121	@ 0x79
 8004646:	e7f6      	b.n	8004636 <_scanf_float+0x12e>
 8004648:	6821      	ldr	r1, [r4, #0]
 800464a:	05c8      	lsls	r0, r1, #23
 800464c:	d51e      	bpl.n	800468c <_scanf_float+0x184>
 800464e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004652:	6021      	str	r1, [r4, #0]
 8004654:	3701      	adds	r7, #1
 8004656:	f1bb 0f00 	cmp.w	fp, #0
 800465a:	d003      	beq.n	8004664 <_scanf_float+0x15c>
 800465c:	3201      	adds	r2, #1
 800465e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004662:	60a2      	str	r2, [r4, #8]
 8004664:	68a3      	ldr	r3, [r4, #8]
 8004666:	3b01      	subs	r3, #1
 8004668:	60a3      	str	r3, [r4, #8]
 800466a:	6923      	ldr	r3, [r4, #16]
 800466c:	3301      	adds	r3, #1
 800466e:	6123      	str	r3, [r4, #16]
 8004670:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004674:	3b01      	subs	r3, #1
 8004676:	2b00      	cmp	r3, #0
 8004678:	f8c9 3004 	str.w	r3, [r9, #4]
 800467c:	f340 8082 	ble.w	8004784 <_scanf_float+0x27c>
 8004680:	f8d9 3000 	ldr.w	r3, [r9]
 8004684:	3301      	adds	r3, #1
 8004686:	f8c9 3000 	str.w	r3, [r9]
 800468a:	e762      	b.n	8004552 <_scanf_float+0x4a>
 800468c:	eb1a 0105 	adds.w	r1, sl, r5
 8004690:	f47f af6d 	bne.w	800456e <_scanf_float+0x66>
 8004694:	6822      	ldr	r2, [r4, #0]
 8004696:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800469a:	6022      	str	r2, [r4, #0]
 800469c:	460d      	mov	r5, r1
 800469e:	468a      	mov	sl, r1
 80046a0:	f806 3b01 	strb.w	r3, [r6], #1
 80046a4:	e7de      	b.n	8004664 <_scanf_float+0x15c>
 80046a6:	6822      	ldr	r2, [r4, #0]
 80046a8:	0610      	lsls	r0, r2, #24
 80046aa:	f57f af60 	bpl.w	800456e <_scanf_float+0x66>
 80046ae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046b2:	6022      	str	r2, [r4, #0]
 80046b4:	e7f4      	b.n	80046a0 <_scanf_float+0x198>
 80046b6:	f1ba 0f00 	cmp.w	sl, #0
 80046ba:	d10c      	bne.n	80046d6 <_scanf_float+0x1ce>
 80046bc:	b977      	cbnz	r7, 80046dc <_scanf_float+0x1d4>
 80046be:	6822      	ldr	r2, [r4, #0]
 80046c0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80046c4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80046c8:	d108      	bne.n	80046dc <_scanf_float+0x1d4>
 80046ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80046ce:	6022      	str	r2, [r4, #0]
 80046d0:	f04f 0a01 	mov.w	sl, #1
 80046d4:	e7e4      	b.n	80046a0 <_scanf_float+0x198>
 80046d6:	f1ba 0f02 	cmp.w	sl, #2
 80046da:	d050      	beq.n	800477e <_scanf_float+0x276>
 80046dc:	2d01      	cmp	r5, #1
 80046de:	d002      	beq.n	80046e6 <_scanf_float+0x1de>
 80046e0:	2d04      	cmp	r5, #4
 80046e2:	f47f af44 	bne.w	800456e <_scanf_float+0x66>
 80046e6:	3501      	adds	r5, #1
 80046e8:	b2ed      	uxtb	r5, r5
 80046ea:	e7d9      	b.n	80046a0 <_scanf_float+0x198>
 80046ec:	f1ba 0f01 	cmp.w	sl, #1
 80046f0:	f47f af3d 	bne.w	800456e <_scanf_float+0x66>
 80046f4:	f04f 0a02 	mov.w	sl, #2
 80046f8:	e7d2      	b.n	80046a0 <_scanf_float+0x198>
 80046fa:	b975      	cbnz	r5, 800471a <_scanf_float+0x212>
 80046fc:	2f00      	cmp	r7, #0
 80046fe:	f47f af37 	bne.w	8004570 <_scanf_float+0x68>
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004708:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800470c:	f040 8103 	bne.w	8004916 <_scanf_float+0x40e>
 8004710:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004714:	6022      	str	r2, [r4, #0]
 8004716:	2501      	movs	r5, #1
 8004718:	e7c2      	b.n	80046a0 <_scanf_float+0x198>
 800471a:	2d03      	cmp	r5, #3
 800471c:	d0e3      	beq.n	80046e6 <_scanf_float+0x1de>
 800471e:	2d05      	cmp	r5, #5
 8004720:	e7df      	b.n	80046e2 <_scanf_float+0x1da>
 8004722:	2d02      	cmp	r5, #2
 8004724:	f47f af23 	bne.w	800456e <_scanf_float+0x66>
 8004728:	2503      	movs	r5, #3
 800472a:	e7b9      	b.n	80046a0 <_scanf_float+0x198>
 800472c:	2d06      	cmp	r5, #6
 800472e:	f47f af1e 	bne.w	800456e <_scanf_float+0x66>
 8004732:	2507      	movs	r5, #7
 8004734:	e7b4      	b.n	80046a0 <_scanf_float+0x198>
 8004736:	6822      	ldr	r2, [r4, #0]
 8004738:	0591      	lsls	r1, r2, #22
 800473a:	f57f af18 	bpl.w	800456e <_scanf_float+0x66>
 800473e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004742:	6022      	str	r2, [r4, #0]
 8004744:	9702      	str	r7, [sp, #8]
 8004746:	e7ab      	b.n	80046a0 <_scanf_float+0x198>
 8004748:	6822      	ldr	r2, [r4, #0]
 800474a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800474e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004752:	d005      	beq.n	8004760 <_scanf_float+0x258>
 8004754:	0550      	lsls	r0, r2, #21
 8004756:	f57f af0a 	bpl.w	800456e <_scanf_float+0x66>
 800475a:	2f00      	cmp	r7, #0
 800475c:	f000 80db 	beq.w	8004916 <_scanf_float+0x40e>
 8004760:	0591      	lsls	r1, r2, #22
 8004762:	bf58      	it	pl
 8004764:	9902      	ldrpl	r1, [sp, #8]
 8004766:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800476a:	bf58      	it	pl
 800476c:	1a79      	subpl	r1, r7, r1
 800476e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004772:	bf58      	it	pl
 8004774:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004778:	6022      	str	r2, [r4, #0]
 800477a:	2700      	movs	r7, #0
 800477c:	e790      	b.n	80046a0 <_scanf_float+0x198>
 800477e:	f04f 0a03 	mov.w	sl, #3
 8004782:	e78d      	b.n	80046a0 <_scanf_float+0x198>
 8004784:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004788:	4649      	mov	r1, r9
 800478a:	4640      	mov	r0, r8
 800478c:	4798      	blx	r3
 800478e:	2800      	cmp	r0, #0
 8004790:	f43f aedf 	beq.w	8004552 <_scanf_float+0x4a>
 8004794:	e6eb      	b.n	800456e <_scanf_float+0x66>
 8004796:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800479a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800479e:	464a      	mov	r2, r9
 80047a0:	4640      	mov	r0, r8
 80047a2:	4798      	blx	r3
 80047a4:	6923      	ldr	r3, [r4, #16]
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6123      	str	r3, [r4, #16]
 80047aa:	e6eb      	b.n	8004584 <_scanf_float+0x7c>
 80047ac:	1e6b      	subs	r3, r5, #1
 80047ae:	2b06      	cmp	r3, #6
 80047b0:	d824      	bhi.n	80047fc <_scanf_float+0x2f4>
 80047b2:	2d02      	cmp	r5, #2
 80047b4:	d836      	bhi.n	8004824 <_scanf_float+0x31c>
 80047b6:	9b01      	ldr	r3, [sp, #4]
 80047b8:	429e      	cmp	r6, r3
 80047ba:	f67f aee7 	bls.w	800458c <_scanf_float+0x84>
 80047be:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047c2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80047c6:	464a      	mov	r2, r9
 80047c8:	4640      	mov	r0, r8
 80047ca:	4798      	blx	r3
 80047cc:	6923      	ldr	r3, [r4, #16]
 80047ce:	3b01      	subs	r3, #1
 80047d0:	6123      	str	r3, [r4, #16]
 80047d2:	e7f0      	b.n	80047b6 <_scanf_float+0x2ae>
 80047d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80047d8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80047dc:	464a      	mov	r2, r9
 80047de:	4640      	mov	r0, r8
 80047e0:	4798      	blx	r3
 80047e2:	6923      	ldr	r3, [r4, #16]
 80047e4:	3b01      	subs	r3, #1
 80047e6:	6123      	str	r3, [r4, #16]
 80047e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047ec:	fa5f fa8a 	uxtb.w	sl, sl
 80047f0:	f1ba 0f02 	cmp.w	sl, #2
 80047f4:	d1ee      	bne.n	80047d4 <_scanf_float+0x2cc>
 80047f6:	3d03      	subs	r5, #3
 80047f8:	b2ed      	uxtb	r5, r5
 80047fa:	1b76      	subs	r6, r6, r5
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	05da      	lsls	r2, r3, #23
 8004800:	d530      	bpl.n	8004864 <_scanf_float+0x35c>
 8004802:	055b      	lsls	r3, r3, #21
 8004804:	d511      	bpl.n	800482a <_scanf_float+0x322>
 8004806:	9b01      	ldr	r3, [sp, #4]
 8004808:	429e      	cmp	r6, r3
 800480a:	f67f aebf 	bls.w	800458c <_scanf_float+0x84>
 800480e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004812:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004816:	464a      	mov	r2, r9
 8004818:	4640      	mov	r0, r8
 800481a:	4798      	blx	r3
 800481c:	6923      	ldr	r3, [r4, #16]
 800481e:	3b01      	subs	r3, #1
 8004820:	6123      	str	r3, [r4, #16]
 8004822:	e7f0      	b.n	8004806 <_scanf_float+0x2fe>
 8004824:	46aa      	mov	sl, r5
 8004826:	46b3      	mov	fp, r6
 8004828:	e7de      	b.n	80047e8 <_scanf_float+0x2e0>
 800482a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800482e:	6923      	ldr	r3, [r4, #16]
 8004830:	2965      	cmp	r1, #101	@ 0x65
 8004832:	f103 33ff 	add.w	r3, r3, #4294967295
 8004836:	f106 35ff 	add.w	r5, r6, #4294967295
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	d00c      	beq.n	8004858 <_scanf_float+0x350>
 800483e:	2945      	cmp	r1, #69	@ 0x45
 8004840:	d00a      	beq.n	8004858 <_scanf_float+0x350>
 8004842:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004846:	464a      	mov	r2, r9
 8004848:	4640      	mov	r0, r8
 800484a:	4798      	blx	r3
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004852:	3b01      	subs	r3, #1
 8004854:	1eb5      	subs	r5, r6, #2
 8004856:	6123      	str	r3, [r4, #16]
 8004858:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800485c:	464a      	mov	r2, r9
 800485e:	4640      	mov	r0, r8
 8004860:	4798      	blx	r3
 8004862:	462e      	mov	r6, r5
 8004864:	6822      	ldr	r2, [r4, #0]
 8004866:	f012 0210 	ands.w	r2, r2, #16
 800486a:	d001      	beq.n	8004870 <_scanf_float+0x368>
 800486c:	2000      	movs	r0, #0
 800486e:	e68e      	b.n	800458e <_scanf_float+0x86>
 8004870:	7032      	strb	r2, [r6, #0]
 8004872:	6823      	ldr	r3, [r4, #0]
 8004874:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800487c:	d125      	bne.n	80048ca <_scanf_float+0x3c2>
 800487e:	9b02      	ldr	r3, [sp, #8]
 8004880:	429f      	cmp	r7, r3
 8004882:	d00a      	beq.n	800489a <_scanf_float+0x392>
 8004884:	1bda      	subs	r2, r3, r7
 8004886:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800488a:	429e      	cmp	r6, r3
 800488c:	bf28      	it	cs
 800488e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004892:	4922      	ldr	r1, [pc, #136]	@ (800491c <_scanf_float+0x414>)
 8004894:	4630      	mov	r0, r6
 8004896:	f000 f93d 	bl	8004b14 <siprintf>
 800489a:	9901      	ldr	r1, [sp, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	4640      	mov	r0, r8
 80048a0:	f002 fc32 	bl	8007108 <_strtod_r>
 80048a4:	9b03      	ldr	r3, [sp, #12]
 80048a6:	6821      	ldr	r1, [r4, #0]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f011 0f02 	tst.w	r1, #2
 80048ae:	ec57 6b10 	vmov	r6, r7, d0
 80048b2:	f103 0204 	add.w	r2, r3, #4
 80048b6:	d015      	beq.n	80048e4 <_scanf_float+0x3dc>
 80048b8:	9903      	ldr	r1, [sp, #12]
 80048ba:	600a      	str	r2, [r1, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	e9c3 6700 	strd	r6, r7, [r3]
 80048c2:	68e3      	ldr	r3, [r4, #12]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60e3      	str	r3, [r4, #12]
 80048c8:	e7d0      	b.n	800486c <_scanf_float+0x364>
 80048ca:	9b04      	ldr	r3, [sp, #16]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d0e4      	beq.n	800489a <_scanf_float+0x392>
 80048d0:	9905      	ldr	r1, [sp, #20]
 80048d2:	230a      	movs	r3, #10
 80048d4:	3101      	adds	r1, #1
 80048d6:	4640      	mov	r0, r8
 80048d8:	f002 fc96 	bl	8007208 <_strtol_r>
 80048dc:	9b04      	ldr	r3, [sp, #16]
 80048de:	9e05      	ldr	r6, [sp, #20]
 80048e0:	1ac2      	subs	r2, r0, r3
 80048e2:	e7d0      	b.n	8004886 <_scanf_float+0x37e>
 80048e4:	f011 0f04 	tst.w	r1, #4
 80048e8:	9903      	ldr	r1, [sp, #12]
 80048ea:	600a      	str	r2, [r1, #0]
 80048ec:	d1e6      	bne.n	80048bc <_scanf_float+0x3b4>
 80048ee:	681d      	ldr	r5, [r3, #0]
 80048f0:	4632      	mov	r2, r6
 80048f2:	463b      	mov	r3, r7
 80048f4:	4630      	mov	r0, r6
 80048f6:	4639      	mov	r1, r7
 80048f8:	f7fc f948 	bl	8000b8c <__aeabi_dcmpun>
 80048fc:	b128      	cbz	r0, 800490a <_scanf_float+0x402>
 80048fe:	4808      	ldr	r0, [pc, #32]	@ (8004920 <_scanf_float+0x418>)
 8004900:	f000 f9f6 	bl	8004cf0 <nanf>
 8004904:	ed85 0a00 	vstr	s0, [r5]
 8004908:	e7db      	b.n	80048c2 <_scanf_float+0x3ba>
 800490a:	4630      	mov	r0, r6
 800490c:	4639      	mov	r1, r7
 800490e:	f7fc f99b 	bl	8000c48 <__aeabi_d2f>
 8004912:	6028      	str	r0, [r5, #0]
 8004914:	e7d5      	b.n	80048c2 <_scanf_float+0x3ba>
 8004916:	2700      	movs	r7, #0
 8004918:	e62e      	b.n	8004578 <_scanf_float+0x70>
 800491a:	bf00      	nop
 800491c:	0800848c 	.word	0x0800848c
 8004920:	080085cd 	.word	0x080085cd

08004924 <std>:
 8004924:	2300      	movs	r3, #0
 8004926:	b510      	push	{r4, lr}
 8004928:	4604      	mov	r4, r0
 800492a:	e9c0 3300 	strd	r3, r3, [r0]
 800492e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004932:	6083      	str	r3, [r0, #8]
 8004934:	8181      	strh	r1, [r0, #12]
 8004936:	6643      	str	r3, [r0, #100]	@ 0x64
 8004938:	81c2      	strh	r2, [r0, #14]
 800493a:	6183      	str	r3, [r0, #24]
 800493c:	4619      	mov	r1, r3
 800493e:	2208      	movs	r2, #8
 8004940:	305c      	adds	r0, #92	@ 0x5c
 8004942:	f000 f94c 	bl	8004bde <memset>
 8004946:	4b0d      	ldr	r3, [pc, #52]	@ (800497c <std+0x58>)
 8004948:	6263      	str	r3, [r4, #36]	@ 0x24
 800494a:	4b0d      	ldr	r3, [pc, #52]	@ (8004980 <std+0x5c>)
 800494c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800494e:	4b0d      	ldr	r3, [pc, #52]	@ (8004984 <std+0x60>)
 8004950:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004952:	4b0d      	ldr	r3, [pc, #52]	@ (8004988 <std+0x64>)
 8004954:	6323      	str	r3, [r4, #48]	@ 0x30
 8004956:	4b0d      	ldr	r3, [pc, #52]	@ (800498c <std+0x68>)
 8004958:	6224      	str	r4, [r4, #32]
 800495a:	429c      	cmp	r4, r3
 800495c:	d006      	beq.n	800496c <std+0x48>
 800495e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004962:	4294      	cmp	r4, r2
 8004964:	d002      	beq.n	800496c <std+0x48>
 8004966:	33d0      	adds	r3, #208	@ 0xd0
 8004968:	429c      	cmp	r4, r3
 800496a:	d105      	bne.n	8004978 <std+0x54>
 800496c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004974:	f000 b9b0 	b.w	8004cd8 <__retarget_lock_init_recursive>
 8004978:	bd10      	pop	{r4, pc}
 800497a:	bf00      	nop
 800497c:	08004b59 	.word	0x08004b59
 8004980:	08004b7b 	.word	0x08004b7b
 8004984:	08004bb3 	.word	0x08004bb3
 8004988:	08004bd7 	.word	0x08004bd7
 800498c:	200002cc 	.word	0x200002cc

08004990 <stdio_exit_handler>:
 8004990:	4a02      	ldr	r2, [pc, #8]	@ (800499c <stdio_exit_handler+0xc>)
 8004992:	4903      	ldr	r1, [pc, #12]	@ (80049a0 <stdio_exit_handler+0x10>)
 8004994:	4803      	ldr	r0, [pc, #12]	@ (80049a4 <stdio_exit_handler+0x14>)
 8004996:	f000 b869 	b.w	8004a6c <_fwalk_sglue>
 800499a:	bf00      	nop
 800499c:	2000000c 	.word	0x2000000c
 80049a0:	080075c5 	.word	0x080075c5
 80049a4:	2000001c 	.word	0x2000001c

080049a8 <cleanup_stdio>:
 80049a8:	6841      	ldr	r1, [r0, #4]
 80049aa:	4b0c      	ldr	r3, [pc, #48]	@ (80049dc <cleanup_stdio+0x34>)
 80049ac:	4299      	cmp	r1, r3
 80049ae:	b510      	push	{r4, lr}
 80049b0:	4604      	mov	r4, r0
 80049b2:	d001      	beq.n	80049b8 <cleanup_stdio+0x10>
 80049b4:	f002 fe06 	bl	80075c4 <_fflush_r>
 80049b8:	68a1      	ldr	r1, [r4, #8]
 80049ba:	4b09      	ldr	r3, [pc, #36]	@ (80049e0 <cleanup_stdio+0x38>)
 80049bc:	4299      	cmp	r1, r3
 80049be:	d002      	beq.n	80049c6 <cleanup_stdio+0x1e>
 80049c0:	4620      	mov	r0, r4
 80049c2:	f002 fdff 	bl	80075c4 <_fflush_r>
 80049c6:	68e1      	ldr	r1, [r4, #12]
 80049c8:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <cleanup_stdio+0x3c>)
 80049ca:	4299      	cmp	r1, r3
 80049cc:	d004      	beq.n	80049d8 <cleanup_stdio+0x30>
 80049ce:	4620      	mov	r0, r4
 80049d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049d4:	f002 bdf6 	b.w	80075c4 <_fflush_r>
 80049d8:	bd10      	pop	{r4, pc}
 80049da:	bf00      	nop
 80049dc:	200002cc 	.word	0x200002cc
 80049e0:	20000334 	.word	0x20000334
 80049e4:	2000039c 	.word	0x2000039c

080049e8 <global_stdio_init.part.0>:
 80049e8:	b510      	push	{r4, lr}
 80049ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004a18 <global_stdio_init.part.0+0x30>)
 80049ec:	4c0b      	ldr	r4, [pc, #44]	@ (8004a1c <global_stdio_init.part.0+0x34>)
 80049ee:	4a0c      	ldr	r2, [pc, #48]	@ (8004a20 <global_stdio_init.part.0+0x38>)
 80049f0:	601a      	str	r2, [r3, #0]
 80049f2:	4620      	mov	r0, r4
 80049f4:	2200      	movs	r2, #0
 80049f6:	2104      	movs	r1, #4
 80049f8:	f7ff ff94 	bl	8004924 <std>
 80049fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004a00:	2201      	movs	r2, #1
 8004a02:	2109      	movs	r1, #9
 8004a04:	f7ff ff8e 	bl	8004924 <std>
 8004a08:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004a0c:	2202      	movs	r2, #2
 8004a0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a12:	2112      	movs	r1, #18
 8004a14:	f7ff bf86 	b.w	8004924 <std>
 8004a18:	20000404 	.word	0x20000404
 8004a1c:	200002cc 	.word	0x200002cc
 8004a20:	08004991 	.word	0x08004991

08004a24 <__sfp_lock_acquire>:
 8004a24:	4801      	ldr	r0, [pc, #4]	@ (8004a2c <__sfp_lock_acquire+0x8>)
 8004a26:	f000 b958 	b.w	8004cda <__retarget_lock_acquire_recursive>
 8004a2a:	bf00      	nop
 8004a2c:	2000040d 	.word	0x2000040d

08004a30 <__sfp_lock_release>:
 8004a30:	4801      	ldr	r0, [pc, #4]	@ (8004a38 <__sfp_lock_release+0x8>)
 8004a32:	f000 b953 	b.w	8004cdc <__retarget_lock_release_recursive>
 8004a36:	bf00      	nop
 8004a38:	2000040d 	.word	0x2000040d

08004a3c <__sinit>:
 8004a3c:	b510      	push	{r4, lr}
 8004a3e:	4604      	mov	r4, r0
 8004a40:	f7ff fff0 	bl	8004a24 <__sfp_lock_acquire>
 8004a44:	6a23      	ldr	r3, [r4, #32]
 8004a46:	b11b      	cbz	r3, 8004a50 <__sinit+0x14>
 8004a48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a4c:	f7ff bff0 	b.w	8004a30 <__sfp_lock_release>
 8004a50:	4b04      	ldr	r3, [pc, #16]	@ (8004a64 <__sinit+0x28>)
 8004a52:	6223      	str	r3, [r4, #32]
 8004a54:	4b04      	ldr	r3, [pc, #16]	@ (8004a68 <__sinit+0x2c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1f5      	bne.n	8004a48 <__sinit+0xc>
 8004a5c:	f7ff ffc4 	bl	80049e8 <global_stdio_init.part.0>
 8004a60:	e7f2      	b.n	8004a48 <__sinit+0xc>
 8004a62:	bf00      	nop
 8004a64:	080049a9 	.word	0x080049a9
 8004a68:	20000404 	.word	0x20000404

08004a6c <_fwalk_sglue>:
 8004a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	4607      	mov	r7, r0
 8004a72:	4688      	mov	r8, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	2600      	movs	r6, #0
 8004a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a80:	d505      	bpl.n	8004a8e <_fwalk_sglue+0x22>
 8004a82:	6824      	ldr	r4, [r4, #0]
 8004a84:	2c00      	cmp	r4, #0
 8004a86:	d1f7      	bne.n	8004a78 <_fwalk_sglue+0xc>
 8004a88:	4630      	mov	r0, r6
 8004a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d907      	bls.n	8004aa4 <_fwalk_sglue+0x38>
 8004a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	d003      	beq.n	8004aa4 <_fwalk_sglue+0x38>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	47c0      	blx	r8
 8004aa2:	4306      	orrs	r6, r0
 8004aa4:	3568      	adds	r5, #104	@ 0x68
 8004aa6:	e7e9      	b.n	8004a7c <_fwalk_sglue+0x10>

08004aa8 <sniprintf>:
 8004aa8:	b40c      	push	{r2, r3}
 8004aaa:	b530      	push	{r4, r5, lr}
 8004aac:	4b18      	ldr	r3, [pc, #96]	@ (8004b10 <sniprintf+0x68>)
 8004aae:	1e0c      	subs	r4, r1, #0
 8004ab0:	681d      	ldr	r5, [r3, #0]
 8004ab2:	b09d      	sub	sp, #116	@ 0x74
 8004ab4:	da08      	bge.n	8004ac8 <sniprintf+0x20>
 8004ab6:	238b      	movs	r3, #139	@ 0x8b
 8004ab8:	602b      	str	r3, [r5, #0]
 8004aba:	f04f 30ff 	mov.w	r0, #4294967295
 8004abe:	b01d      	add	sp, #116	@ 0x74
 8004ac0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ac4:	b002      	add	sp, #8
 8004ac6:	4770      	bx	lr
 8004ac8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8004acc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	931b      	str	r3, [sp, #108]	@ 0x6c
 8004ad6:	bf14      	ite	ne
 8004ad8:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004adc:	4623      	moveq	r3, r4
 8004ade:	9304      	str	r3, [sp, #16]
 8004ae0:	9307      	str	r3, [sp, #28]
 8004ae2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004ae6:	9002      	str	r0, [sp, #8]
 8004ae8:	9006      	str	r0, [sp, #24]
 8004aea:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004aee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004af0:	ab21      	add	r3, sp, #132	@ 0x84
 8004af2:	a902      	add	r1, sp, #8
 8004af4:	4628      	mov	r0, r5
 8004af6:	9301      	str	r3, [sp, #4]
 8004af8:	f002 fbe4 	bl	80072c4 <_svfiprintf_r>
 8004afc:	1c43      	adds	r3, r0, #1
 8004afe:	bfbc      	itt	lt
 8004b00:	238b      	movlt	r3, #139	@ 0x8b
 8004b02:	602b      	strlt	r3, [r5, #0]
 8004b04:	2c00      	cmp	r4, #0
 8004b06:	d0da      	beq.n	8004abe <sniprintf+0x16>
 8004b08:	9b02      	ldr	r3, [sp, #8]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	701a      	strb	r2, [r3, #0]
 8004b0e:	e7d6      	b.n	8004abe <sniprintf+0x16>
 8004b10:	20000018 	.word	0x20000018

08004b14 <siprintf>:
 8004b14:	b40e      	push	{r1, r2, r3}
 8004b16:	b510      	push	{r4, lr}
 8004b18:	b09d      	sub	sp, #116	@ 0x74
 8004b1a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004b1c:	9002      	str	r0, [sp, #8]
 8004b1e:	9006      	str	r0, [sp, #24]
 8004b20:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004b24:	480a      	ldr	r0, [pc, #40]	@ (8004b50 <siprintf+0x3c>)
 8004b26:	9107      	str	r1, [sp, #28]
 8004b28:	9104      	str	r1, [sp, #16]
 8004b2a:	490a      	ldr	r1, [pc, #40]	@ (8004b54 <siprintf+0x40>)
 8004b2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b30:	9105      	str	r1, [sp, #20]
 8004b32:	2400      	movs	r4, #0
 8004b34:	a902      	add	r1, sp, #8
 8004b36:	6800      	ldr	r0, [r0, #0]
 8004b38:	9301      	str	r3, [sp, #4]
 8004b3a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004b3c:	f002 fbc2 	bl	80072c4 <_svfiprintf_r>
 8004b40:	9b02      	ldr	r3, [sp, #8]
 8004b42:	701c      	strb	r4, [r3, #0]
 8004b44:	b01d      	add	sp, #116	@ 0x74
 8004b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b4a:	b003      	add	sp, #12
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000018 	.word	0x20000018
 8004b54:	ffff0208 	.word	0xffff0208

08004b58 <__sread>:
 8004b58:	b510      	push	{r4, lr}
 8004b5a:	460c      	mov	r4, r1
 8004b5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b60:	f000 f86c 	bl	8004c3c <_read_r>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	bfab      	itete	ge
 8004b68:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004b6a:	89a3      	ldrhlt	r3, [r4, #12]
 8004b6c:	181b      	addge	r3, r3, r0
 8004b6e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004b72:	bfac      	ite	ge
 8004b74:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004b76:	81a3      	strhlt	r3, [r4, #12]
 8004b78:	bd10      	pop	{r4, pc}

08004b7a <__swrite>:
 8004b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b7e:	461f      	mov	r7, r3
 8004b80:	898b      	ldrh	r3, [r1, #12]
 8004b82:	05db      	lsls	r3, r3, #23
 8004b84:	4605      	mov	r5, r0
 8004b86:	460c      	mov	r4, r1
 8004b88:	4616      	mov	r6, r2
 8004b8a:	d505      	bpl.n	8004b98 <__swrite+0x1e>
 8004b8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b90:	2302      	movs	r3, #2
 8004b92:	2200      	movs	r2, #0
 8004b94:	f000 f840 	bl	8004c18 <_lseek_r>
 8004b98:	89a3      	ldrh	r3, [r4, #12]
 8004b9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ba2:	81a3      	strh	r3, [r4, #12]
 8004ba4:	4632      	mov	r2, r6
 8004ba6:	463b      	mov	r3, r7
 8004ba8:	4628      	mov	r0, r5
 8004baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bae:	f000 b857 	b.w	8004c60 <_write_r>

08004bb2 <__sseek>:
 8004bb2:	b510      	push	{r4, lr}
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bba:	f000 f82d 	bl	8004c18 <_lseek_r>
 8004bbe:	1c43      	adds	r3, r0, #1
 8004bc0:	89a3      	ldrh	r3, [r4, #12]
 8004bc2:	bf15      	itete	ne
 8004bc4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004bc6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004bca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004bce:	81a3      	strheq	r3, [r4, #12]
 8004bd0:	bf18      	it	ne
 8004bd2:	81a3      	strhne	r3, [r4, #12]
 8004bd4:	bd10      	pop	{r4, pc}

08004bd6 <__sclose>:
 8004bd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bda:	f000 b80d 	b.w	8004bf8 <_close_r>

08004bde <memset>:
 8004bde:	4402      	add	r2, r0
 8004be0:	4603      	mov	r3, r0
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d100      	bne.n	8004be8 <memset+0xa>
 8004be6:	4770      	bx	lr
 8004be8:	f803 1b01 	strb.w	r1, [r3], #1
 8004bec:	e7f9      	b.n	8004be2 <memset+0x4>
	...

08004bf0 <_localeconv_r>:
 8004bf0:	4800      	ldr	r0, [pc, #0]	@ (8004bf4 <_localeconv_r+0x4>)
 8004bf2:	4770      	bx	lr
 8004bf4:	20000158 	.word	0x20000158

08004bf8 <_close_r>:
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4d06      	ldr	r5, [pc, #24]	@ (8004c14 <_close_r+0x1c>)
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4608      	mov	r0, r1
 8004c02:	602b      	str	r3, [r5, #0]
 8004c04:	f7fc fd4a 	bl	800169c <_close>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_close_r+0x1a>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_close_r+0x1a>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	20000408 	.word	0x20000408

08004c18 <_lseek_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4d07      	ldr	r5, [pc, #28]	@ (8004c38 <_lseek_r+0x20>)
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	4608      	mov	r0, r1
 8004c20:	4611      	mov	r1, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	602a      	str	r2, [r5, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f7fc fd5f 	bl	80016ea <_lseek>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_lseek_r+0x1e>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_lseek_r+0x1e>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	20000408 	.word	0x20000408

08004c3c <_read_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4d07      	ldr	r5, [pc, #28]	@ (8004c5c <_read_r+0x20>)
 8004c40:	4604      	mov	r4, r0
 8004c42:	4608      	mov	r0, r1
 8004c44:	4611      	mov	r1, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f7fc fced 	bl	800162a <_read>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_read_r+0x1e>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_read_r+0x1e>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	20000408 	.word	0x20000408

08004c60 <_write_r>:
 8004c60:	b538      	push	{r3, r4, r5, lr}
 8004c62:	4d07      	ldr	r5, [pc, #28]	@ (8004c80 <_write_r+0x20>)
 8004c64:	4604      	mov	r4, r0
 8004c66:	4608      	mov	r0, r1
 8004c68:	4611      	mov	r1, r2
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	602a      	str	r2, [r5, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	f7fc fcf8 	bl	8001664 <_write>
 8004c74:	1c43      	adds	r3, r0, #1
 8004c76:	d102      	bne.n	8004c7e <_write_r+0x1e>
 8004c78:	682b      	ldr	r3, [r5, #0]
 8004c7a:	b103      	cbz	r3, 8004c7e <_write_r+0x1e>
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	bd38      	pop	{r3, r4, r5, pc}
 8004c80:	20000408 	.word	0x20000408

08004c84 <__errno>:
 8004c84:	4b01      	ldr	r3, [pc, #4]	@ (8004c8c <__errno+0x8>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	20000018 	.word	0x20000018

08004c90 <__libc_init_array>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4d0d      	ldr	r5, [pc, #52]	@ (8004cc8 <__libc_init_array+0x38>)
 8004c94:	4c0d      	ldr	r4, [pc, #52]	@ (8004ccc <__libc_init_array+0x3c>)
 8004c96:	1b64      	subs	r4, r4, r5
 8004c98:	10a4      	asrs	r4, r4, #2
 8004c9a:	2600      	movs	r6, #0
 8004c9c:	42a6      	cmp	r6, r4
 8004c9e:	d109      	bne.n	8004cb4 <__libc_init_array+0x24>
 8004ca0:	4d0b      	ldr	r5, [pc, #44]	@ (8004cd0 <__libc_init_array+0x40>)
 8004ca2:	4c0c      	ldr	r4, [pc, #48]	@ (8004cd4 <__libc_init_array+0x44>)
 8004ca4:	f003 fb7e 	bl	80083a4 <_init>
 8004ca8:	1b64      	subs	r4, r4, r5
 8004caa:	10a4      	asrs	r4, r4, #2
 8004cac:	2600      	movs	r6, #0
 8004cae:	42a6      	cmp	r6, r4
 8004cb0:	d105      	bne.n	8004cbe <__libc_init_array+0x2e>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb8:	4798      	blx	r3
 8004cba:	3601      	adds	r6, #1
 8004cbc:	e7ee      	b.n	8004c9c <__libc_init_array+0xc>
 8004cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc2:	4798      	blx	r3
 8004cc4:	3601      	adds	r6, #1
 8004cc6:	e7f2      	b.n	8004cae <__libc_init_array+0x1e>
 8004cc8:	0800888c 	.word	0x0800888c
 8004ccc:	0800888c 	.word	0x0800888c
 8004cd0:	0800888c 	.word	0x0800888c
 8004cd4:	08008890 	.word	0x08008890

08004cd8 <__retarget_lock_init_recursive>:
 8004cd8:	4770      	bx	lr

08004cda <__retarget_lock_acquire_recursive>:
 8004cda:	4770      	bx	lr

08004cdc <__retarget_lock_release_recursive>:
 8004cdc:	4770      	bx	lr

08004cde <strcpy>:
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ce4:	f803 2b01 	strb.w	r2, [r3], #1
 8004ce8:	2a00      	cmp	r2, #0
 8004cea:	d1f9      	bne.n	8004ce0 <strcpy+0x2>
 8004cec:	4770      	bx	lr
	...

08004cf0 <nanf>:
 8004cf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004cf8 <nanf+0x8>
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	7fc00000 	.word	0x7fc00000

08004cfc <quorem>:
 8004cfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d00:	6903      	ldr	r3, [r0, #16]
 8004d02:	690c      	ldr	r4, [r1, #16]
 8004d04:	42a3      	cmp	r3, r4
 8004d06:	4607      	mov	r7, r0
 8004d08:	db7e      	blt.n	8004e08 <quorem+0x10c>
 8004d0a:	3c01      	subs	r4, #1
 8004d0c:	f101 0814 	add.w	r8, r1, #20
 8004d10:	00a3      	lsls	r3, r4, #2
 8004d12:	f100 0514 	add.w	r5, r0, #20
 8004d16:	9300      	str	r3, [sp, #0]
 8004d18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d1c:	9301      	str	r3, [sp, #4]
 8004d1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004d22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d26:	3301      	adds	r3, #1
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004d2e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004d32:	d32e      	bcc.n	8004d92 <quorem+0x96>
 8004d34:	f04f 0a00 	mov.w	sl, #0
 8004d38:	46c4      	mov	ip, r8
 8004d3a:	46ae      	mov	lr, r5
 8004d3c:	46d3      	mov	fp, sl
 8004d3e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004d42:	b298      	uxth	r0, r3
 8004d44:	fb06 a000 	mla	r0, r6, r0, sl
 8004d48:	0c02      	lsrs	r2, r0, #16
 8004d4a:	0c1b      	lsrs	r3, r3, #16
 8004d4c:	fb06 2303 	mla	r3, r6, r3, r2
 8004d50:	f8de 2000 	ldr.w	r2, [lr]
 8004d54:	b280      	uxth	r0, r0
 8004d56:	b292      	uxth	r2, r2
 8004d58:	1a12      	subs	r2, r2, r0
 8004d5a:	445a      	add	r2, fp
 8004d5c:	f8de 0000 	ldr.w	r0, [lr]
 8004d60:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004d64:	b29b      	uxth	r3, r3
 8004d66:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004d6a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004d6e:	b292      	uxth	r2, r2
 8004d70:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004d74:	45e1      	cmp	r9, ip
 8004d76:	f84e 2b04 	str.w	r2, [lr], #4
 8004d7a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004d7e:	d2de      	bcs.n	8004d3e <quorem+0x42>
 8004d80:	9b00      	ldr	r3, [sp, #0]
 8004d82:	58eb      	ldr	r3, [r5, r3]
 8004d84:	b92b      	cbnz	r3, 8004d92 <quorem+0x96>
 8004d86:	9b01      	ldr	r3, [sp, #4]
 8004d88:	3b04      	subs	r3, #4
 8004d8a:	429d      	cmp	r5, r3
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	d32f      	bcc.n	8004df0 <quorem+0xf4>
 8004d90:	613c      	str	r4, [r7, #16]
 8004d92:	4638      	mov	r0, r7
 8004d94:	f001 f9c8 	bl	8006128 <__mcmp>
 8004d98:	2800      	cmp	r0, #0
 8004d9a:	db25      	blt.n	8004de8 <quorem+0xec>
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	2000      	movs	r0, #0
 8004da0:	f858 2b04 	ldr.w	r2, [r8], #4
 8004da4:	f8d1 c000 	ldr.w	ip, [r1]
 8004da8:	fa1f fe82 	uxth.w	lr, r2
 8004dac:	fa1f f38c 	uxth.w	r3, ip
 8004db0:	eba3 030e 	sub.w	r3, r3, lr
 8004db4:	4403      	add	r3, r0
 8004db6:	0c12      	lsrs	r2, r2, #16
 8004db8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004dbc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004dc6:	45c1      	cmp	r9, r8
 8004dc8:	f841 3b04 	str.w	r3, [r1], #4
 8004dcc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004dd0:	d2e6      	bcs.n	8004da0 <quorem+0xa4>
 8004dd2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004dda:	b922      	cbnz	r2, 8004de6 <quorem+0xea>
 8004ddc:	3b04      	subs	r3, #4
 8004dde:	429d      	cmp	r5, r3
 8004de0:	461a      	mov	r2, r3
 8004de2:	d30b      	bcc.n	8004dfc <quorem+0x100>
 8004de4:	613c      	str	r4, [r7, #16]
 8004de6:	3601      	adds	r6, #1
 8004de8:	4630      	mov	r0, r6
 8004dea:	b003      	add	sp, #12
 8004dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df0:	6812      	ldr	r2, [r2, #0]
 8004df2:	3b04      	subs	r3, #4
 8004df4:	2a00      	cmp	r2, #0
 8004df6:	d1cb      	bne.n	8004d90 <quorem+0x94>
 8004df8:	3c01      	subs	r4, #1
 8004dfa:	e7c6      	b.n	8004d8a <quorem+0x8e>
 8004dfc:	6812      	ldr	r2, [r2, #0]
 8004dfe:	3b04      	subs	r3, #4
 8004e00:	2a00      	cmp	r2, #0
 8004e02:	d1ef      	bne.n	8004de4 <quorem+0xe8>
 8004e04:	3c01      	subs	r4, #1
 8004e06:	e7ea      	b.n	8004dde <quorem+0xe2>
 8004e08:	2000      	movs	r0, #0
 8004e0a:	e7ee      	b.n	8004dea <quorem+0xee>
 8004e0c:	0000      	movs	r0, r0
	...

08004e10 <_dtoa_r>:
 8004e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e14:	69c7      	ldr	r7, [r0, #28]
 8004e16:	b097      	sub	sp, #92	@ 0x5c
 8004e18:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004e1c:	ec55 4b10 	vmov	r4, r5, d0
 8004e20:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004e22:	9107      	str	r1, [sp, #28]
 8004e24:	4681      	mov	r9, r0
 8004e26:	920c      	str	r2, [sp, #48]	@ 0x30
 8004e28:	9311      	str	r3, [sp, #68]	@ 0x44
 8004e2a:	b97f      	cbnz	r7, 8004e4c <_dtoa_r+0x3c>
 8004e2c:	2010      	movs	r0, #16
 8004e2e:	f000 fe09 	bl	8005a44 <malloc>
 8004e32:	4602      	mov	r2, r0
 8004e34:	f8c9 001c 	str.w	r0, [r9, #28]
 8004e38:	b920      	cbnz	r0, 8004e44 <_dtoa_r+0x34>
 8004e3a:	4ba9      	ldr	r3, [pc, #676]	@ (80050e0 <_dtoa_r+0x2d0>)
 8004e3c:	21ef      	movs	r1, #239	@ 0xef
 8004e3e:	48a9      	ldr	r0, [pc, #676]	@ (80050e4 <_dtoa_r+0x2d4>)
 8004e40:	f002 fc3a 	bl	80076b8 <__assert_func>
 8004e44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004e48:	6007      	str	r7, [r0, #0]
 8004e4a:	60c7      	str	r7, [r0, #12]
 8004e4c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e50:	6819      	ldr	r1, [r3, #0]
 8004e52:	b159      	cbz	r1, 8004e6c <_dtoa_r+0x5c>
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	604a      	str	r2, [r1, #4]
 8004e58:	2301      	movs	r3, #1
 8004e5a:	4093      	lsls	r3, r2
 8004e5c:	608b      	str	r3, [r1, #8]
 8004e5e:	4648      	mov	r0, r9
 8004e60:	f000 fee6 	bl	8005c30 <_Bfree>
 8004e64:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	1e2b      	subs	r3, r5, #0
 8004e6e:	bfb9      	ittee	lt
 8004e70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004e74:	9305      	strlt	r3, [sp, #20]
 8004e76:	2300      	movge	r3, #0
 8004e78:	6033      	strge	r3, [r6, #0]
 8004e7a:	9f05      	ldr	r7, [sp, #20]
 8004e7c:	4b9a      	ldr	r3, [pc, #616]	@ (80050e8 <_dtoa_r+0x2d8>)
 8004e7e:	bfbc      	itt	lt
 8004e80:	2201      	movlt	r2, #1
 8004e82:	6032      	strlt	r2, [r6, #0]
 8004e84:	43bb      	bics	r3, r7
 8004e86:	d112      	bne.n	8004eae <_dtoa_r+0x9e>
 8004e88:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004e8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004e8e:	6013      	str	r3, [r2, #0]
 8004e90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004e94:	4323      	orrs	r3, r4
 8004e96:	f000 855a 	beq.w	800594e <_dtoa_r+0xb3e>
 8004e9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004e9c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80050fc <_dtoa_r+0x2ec>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 855c 	beq.w	800595e <_dtoa_r+0xb4e>
 8004ea6:	f10a 0303 	add.w	r3, sl, #3
 8004eaa:	f000 bd56 	b.w	800595a <_dtoa_r+0xb4a>
 8004eae:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	ec51 0b17 	vmov	r0, r1, d7
 8004eb8:	2300      	movs	r3, #0
 8004eba:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004ebe:	f7fb fe33 	bl	8000b28 <__aeabi_dcmpeq>
 8004ec2:	4680      	mov	r8, r0
 8004ec4:	b158      	cbz	r0, 8004ede <_dtoa_r+0xce>
 8004ec6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004ec8:	2301      	movs	r3, #1
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004ece:	b113      	cbz	r3, 8004ed6 <_dtoa_r+0xc6>
 8004ed0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8004ed2:	4b86      	ldr	r3, [pc, #536]	@ (80050ec <_dtoa_r+0x2dc>)
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005100 <_dtoa_r+0x2f0>
 8004eda:	f000 bd40 	b.w	800595e <_dtoa_r+0xb4e>
 8004ede:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8004ee2:	aa14      	add	r2, sp, #80	@ 0x50
 8004ee4:	a915      	add	r1, sp, #84	@ 0x54
 8004ee6:	4648      	mov	r0, r9
 8004ee8:	f001 fa3e 	bl	8006368 <__d2b>
 8004eec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004ef0:	9002      	str	r0, [sp, #8]
 8004ef2:	2e00      	cmp	r6, #0
 8004ef4:	d078      	beq.n	8004fe8 <_dtoa_r+0x1d8>
 8004ef6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004ef8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f00:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004f08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004f0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004f10:	4619      	mov	r1, r3
 8004f12:	2200      	movs	r2, #0
 8004f14:	4b76      	ldr	r3, [pc, #472]	@ (80050f0 <_dtoa_r+0x2e0>)
 8004f16:	f7fb f9e7 	bl	80002e8 <__aeabi_dsub>
 8004f1a:	a36b      	add	r3, pc, #428	@ (adr r3, 80050c8 <_dtoa_r+0x2b8>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f7fb fb9a 	bl	8000658 <__aeabi_dmul>
 8004f24:	a36a      	add	r3, pc, #424	@ (adr r3, 80050d0 <_dtoa_r+0x2c0>)
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f7fb f9df 	bl	80002ec <__adddf3>
 8004f2e:	4604      	mov	r4, r0
 8004f30:	4630      	mov	r0, r6
 8004f32:	460d      	mov	r5, r1
 8004f34:	f7fb fb26 	bl	8000584 <__aeabi_i2d>
 8004f38:	a367      	add	r3, pc, #412	@ (adr r3, 80050d8 <_dtoa_r+0x2c8>)
 8004f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3e:	f7fb fb8b 	bl	8000658 <__aeabi_dmul>
 8004f42:	4602      	mov	r2, r0
 8004f44:	460b      	mov	r3, r1
 8004f46:	4620      	mov	r0, r4
 8004f48:	4629      	mov	r1, r5
 8004f4a:	f7fb f9cf 	bl	80002ec <__adddf3>
 8004f4e:	4604      	mov	r4, r0
 8004f50:	460d      	mov	r5, r1
 8004f52:	f7fb fe31 	bl	8000bb8 <__aeabi_d2iz>
 8004f56:	2200      	movs	r2, #0
 8004f58:	4607      	mov	r7, r0
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	4620      	mov	r0, r4
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7fb fdec 	bl	8000b3c <__aeabi_dcmplt>
 8004f64:	b140      	cbz	r0, 8004f78 <_dtoa_r+0x168>
 8004f66:	4638      	mov	r0, r7
 8004f68:	f7fb fb0c 	bl	8000584 <__aeabi_i2d>
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	462b      	mov	r3, r5
 8004f70:	f7fb fdda 	bl	8000b28 <__aeabi_dcmpeq>
 8004f74:	b900      	cbnz	r0, 8004f78 <_dtoa_r+0x168>
 8004f76:	3f01      	subs	r7, #1
 8004f78:	2f16      	cmp	r7, #22
 8004f7a:	d852      	bhi.n	8005022 <_dtoa_r+0x212>
 8004f7c:	4b5d      	ldr	r3, [pc, #372]	@ (80050f4 <_dtoa_r+0x2e4>)
 8004f7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004f8a:	f7fb fdd7 	bl	8000b3c <__aeabi_dcmplt>
 8004f8e:	2800      	cmp	r0, #0
 8004f90:	d049      	beq.n	8005026 <_dtoa_r+0x216>
 8004f92:	3f01      	subs	r7, #1
 8004f94:	2300      	movs	r3, #0
 8004f96:	9310      	str	r3, [sp, #64]	@ 0x40
 8004f98:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004f9a:	1b9b      	subs	r3, r3, r6
 8004f9c:	1e5a      	subs	r2, r3, #1
 8004f9e:	bf45      	ittet	mi
 8004fa0:	f1c3 0301 	rsbmi	r3, r3, #1
 8004fa4:	9300      	strmi	r3, [sp, #0]
 8004fa6:	2300      	movpl	r3, #0
 8004fa8:	2300      	movmi	r3, #0
 8004faa:	9206      	str	r2, [sp, #24]
 8004fac:	bf54      	ite	pl
 8004fae:	9300      	strpl	r3, [sp, #0]
 8004fb0:	9306      	strmi	r3, [sp, #24]
 8004fb2:	2f00      	cmp	r7, #0
 8004fb4:	db39      	blt.n	800502a <_dtoa_r+0x21a>
 8004fb6:	9b06      	ldr	r3, [sp, #24]
 8004fb8:	970d      	str	r7, [sp, #52]	@ 0x34
 8004fba:	443b      	add	r3, r7
 8004fbc:	9306      	str	r3, [sp, #24]
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	9308      	str	r3, [sp, #32]
 8004fc2:	9b07      	ldr	r3, [sp, #28]
 8004fc4:	2b09      	cmp	r3, #9
 8004fc6:	d863      	bhi.n	8005090 <_dtoa_r+0x280>
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	bfc4      	itt	gt
 8004fcc:	3b04      	subgt	r3, #4
 8004fce:	9307      	strgt	r3, [sp, #28]
 8004fd0:	9b07      	ldr	r3, [sp, #28]
 8004fd2:	f1a3 0302 	sub.w	r3, r3, #2
 8004fd6:	bfcc      	ite	gt
 8004fd8:	2400      	movgt	r4, #0
 8004fda:	2401      	movle	r4, #1
 8004fdc:	2b03      	cmp	r3, #3
 8004fde:	d863      	bhi.n	80050a8 <_dtoa_r+0x298>
 8004fe0:	e8df f003 	tbb	[pc, r3]
 8004fe4:	2b375452 	.word	0x2b375452
 8004fe8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004fec:	441e      	add	r6, r3
 8004fee:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8004ff2:	2b20      	cmp	r3, #32
 8004ff4:	bfc1      	itttt	gt
 8004ff6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004ffa:	409f      	lslgt	r7, r3
 8004ffc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005000:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005004:	bfd6      	itet	le
 8005006:	f1c3 0320 	rsble	r3, r3, #32
 800500a:	ea47 0003 	orrgt.w	r0, r7, r3
 800500e:	fa04 f003 	lslle.w	r0, r4, r3
 8005012:	f7fb faa7 	bl	8000564 <__aeabi_ui2d>
 8005016:	2201      	movs	r2, #1
 8005018:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800501c:	3e01      	subs	r6, #1
 800501e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005020:	e776      	b.n	8004f10 <_dtoa_r+0x100>
 8005022:	2301      	movs	r3, #1
 8005024:	e7b7      	b.n	8004f96 <_dtoa_r+0x186>
 8005026:	9010      	str	r0, [sp, #64]	@ 0x40
 8005028:	e7b6      	b.n	8004f98 <_dtoa_r+0x188>
 800502a:	9b00      	ldr	r3, [sp, #0]
 800502c:	1bdb      	subs	r3, r3, r7
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	427b      	negs	r3, r7
 8005032:	9308      	str	r3, [sp, #32]
 8005034:	2300      	movs	r3, #0
 8005036:	930d      	str	r3, [sp, #52]	@ 0x34
 8005038:	e7c3      	b.n	8004fc2 <_dtoa_r+0x1b2>
 800503a:	2301      	movs	r3, #1
 800503c:	9309      	str	r3, [sp, #36]	@ 0x24
 800503e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005040:	eb07 0b03 	add.w	fp, r7, r3
 8005044:	f10b 0301 	add.w	r3, fp, #1
 8005048:	2b01      	cmp	r3, #1
 800504a:	9303      	str	r3, [sp, #12]
 800504c:	bfb8      	it	lt
 800504e:	2301      	movlt	r3, #1
 8005050:	e006      	b.n	8005060 <_dtoa_r+0x250>
 8005052:	2301      	movs	r3, #1
 8005054:	9309      	str	r3, [sp, #36]	@ 0x24
 8005056:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005058:	2b00      	cmp	r3, #0
 800505a:	dd28      	ble.n	80050ae <_dtoa_r+0x29e>
 800505c:	469b      	mov	fp, r3
 800505e:	9303      	str	r3, [sp, #12]
 8005060:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005064:	2100      	movs	r1, #0
 8005066:	2204      	movs	r2, #4
 8005068:	f102 0514 	add.w	r5, r2, #20
 800506c:	429d      	cmp	r5, r3
 800506e:	d926      	bls.n	80050be <_dtoa_r+0x2ae>
 8005070:	6041      	str	r1, [r0, #4]
 8005072:	4648      	mov	r0, r9
 8005074:	f000 fd9c 	bl	8005bb0 <_Balloc>
 8005078:	4682      	mov	sl, r0
 800507a:	2800      	cmp	r0, #0
 800507c:	d142      	bne.n	8005104 <_dtoa_r+0x2f4>
 800507e:	4b1e      	ldr	r3, [pc, #120]	@ (80050f8 <_dtoa_r+0x2e8>)
 8005080:	4602      	mov	r2, r0
 8005082:	f240 11af 	movw	r1, #431	@ 0x1af
 8005086:	e6da      	b.n	8004e3e <_dtoa_r+0x2e>
 8005088:	2300      	movs	r3, #0
 800508a:	e7e3      	b.n	8005054 <_dtoa_r+0x244>
 800508c:	2300      	movs	r3, #0
 800508e:	e7d5      	b.n	800503c <_dtoa_r+0x22c>
 8005090:	2401      	movs	r4, #1
 8005092:	2300      	movs	r3, #0
 8005094:	9307      	str	r3, [sp, #28]
 8005096:	9409      	str	r4, [sp, #36]	@ 0x24
 8005098:	f04f 3bff 	mov.w	fp, #4294967295
 800509c:	2200      	movs	r2, #0
 800509e:	f8cd b00c 	str.w	fp, [sp, #12]
 80050a2:	2312      	movs	r3, #18
 80050a4:	920c      	str	r2, [sp, #48]	@ 0x30
 80050a6:	e7db      	b.n	8005060 <_dtoa_r+0x250>
 80050a8:	2301      	movs	r3, #1
 80050aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80050ac:	e7f4      	b.n	8005098 <_dtoa_r+0x288>
 80050ae:	f04f 0b01 	mov.w	fp, #1
 80050b2:	f8cd b00c 	str.w	fp, [sp, #12]
 80050b6:	465b      	mov	r3, fp
 80050b8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80050bc:	e7d0      	b.n	8005060 <_dtoa_r+0x250>
 80050be:	3101      	adds	r1, #1
 80050c0:	0052      	lsls	r2, r2, #1
 80050c2:	e7d1      	b.n	8005068 <_dtoa_r+0x258>
 80050c4:	f3af 8000 	nop.w
 80050c8:	636f4361 	.word	0x636f4361
 80050cc:	3fd287a7 	.word	0x3fd287a7
 80050d0:	8b60c8b3 	.word	0x8b60c8b3
 80050d4:	3fc68a28 	.word	0x3fc68a28
 80050d8:	509f79fb 	.word	0x509f79fb
 80050dc:	3fd34413 	.word	0x3fd34413
 80050e0:	0800849e 	.word	0x0800849e
 80050e4:	080084b5 	.word	0x080084b5
 80050e8:	7ff00000 	.word	0x7ff00000
 80050ec:	08008469 	.word	0x08008469
 80050f0:	3ff80000 	.word	0x3ff80000
 80050f4:	08008668 	.word	0x08008668
 80050f8:	0800850d 	.word	0x0800850d
 80050fc:	0800849a 	.word	0x0800849a
 8005100:	08008468 	.word	0x08008468
 8005104:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005108:	6018      	str	r0, [r3, #0]
 800510a:	9b03      	ldr	r3, [sp, #12]
 800510c:	2b0e      	cmp	r3, #14
 800510e:	f200 80a1 	bhi.w	8005254 <_dtoa_r+0x444>
 8005112:	2c00      	cmp	r4, #0
 8005114:	f000 809e 	beq.w	8005254 <_dtoa_r+0x444>
 8005118:	2f00      	cmp	r7, #0
 800511a:	dd33      	ble.n	8005184 <_dtoa_r+0x374>
 800511c:	4b9c      	ldr	r3, [pc, #624]	@ (8005390 <_dtoa_r+0x580>)
 800511e:	f007 020f 	and.w	r2, r7, #15
 8005122:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005126:	ed93 7b00 	vldr	d7, [r3]
 800512a:	05f8      	lsls	r0, r7, #23
 800512c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005130:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005134:	d516      	bpl.n	8005164 <_dtoa_r+0x354>
 8005136:	4b97      	ldr	r3, [pc, #604]	@ (8005394 <_dtoa_r+0x584>)
 8005138:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800513c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005140:	f7fb fbb4 	bl	80008ac <__aeabi_ddiv>
 8005144:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005148:	f004 040f 	and.w	r4, r4, #15
 800514c:	2603      	movs	r6, #3
 800514e:	4d91      	ldr	r5, [pc, #580]	@ (8005394 <_dtoa_r+0x584>)
 8005150:	b954      	cbnz	r4, 8005168 <_dtoa_r+0x358>
 8005152:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005156:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800515a:	f7fb fba7 	bl	80008ac <__aeabi_ddiv>
 800515e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005162:	e028      	b.n	80051b6 <_dtoa_r+0x3a6>
 8005164:	2602      	movs	r6, #2
 8005166:	e7f2      	b.n	800514e <_dtoa_r+0x33e>
 8005168:	07e1      	lsls	r1, r4, #31
 800516a:	d508      	bpl.n	800517e <_dtoa_r+0x36e>
 800516c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005170:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005174:	f7fb fa70 	bl	8000658 <__aeabi_dmul>
 8005178:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800517c:	3601      	adds	r6, #1
 800517e:	1064      	asrs	r4, r4, #1
 8005180:	3508      	adds	r5, #8
 8005182:	e7e5      	b.n	8005150 <_dtoa_r+0x340>
 8005184:	f000 80af 	beq.w	80052e6 <_dtoa_r+0x4d6>
 8005188:	427c      	negs	r4, r7
 800518a:	4b81      	ldr	r3, [pc, #516]	@ (8005390 <_dtoa_r+0x580>)
 800518c:	4d81      	ldr	r5, [pc, #516]	@ (8005394 <_dtoa_r+0x584>)
 800518e:	f004 020f 	and.w	r2, r4, #15
 8005192:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800519e:	f7fb fa5b 	bl	8000658 <__aeabi_dmul>
 80051a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051a6:	1124      	asrs	r4, r4, #4
 80051a8:	2300      	movs	r3, #0
 80051aa:	2602      	movs	r6, #2
 80051ac:	2c00      	cmp	r4, #0
 80051ae:	f040 808f 	bne.w	80052d0 <_dtoa_r+0x4c0>
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1d3      	bne.n	800515e <_dtoa_r+0x34e>
 80051b6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80051b8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f000 8094 	beq.w	80052ea <_dtoa_r+0x4da>
 80051c2:	4b75      	ldr	r3, [pc, #468]	@ (8005398 <_dtoa_r+0x588>)
 80051c4:	2200      	movs	r2, #0
 80051c6:	4620      	mov	r0, r4
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7fb fcb7 	bl	8000b3c <__aeabi_dcmplt>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	f000 808b 	beq.w	80052ea <_dtoa_r+0x4da>
 80051d4:	9b03      	ldr	r3, [sp, #12]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 8087 	beq.w	80052ea <_dtoa_r+0x4da>
 80051dc:	f1bb 0f00 	cmp.w	fp, #0
 80051e0:	dd34      	ble.n	800524c <_dtoa_r+0x43c>
 80051e2:	4620      	mov	r0, r4
 80051e4:	4b6d      	ldr	r3, [pc, #436]	@ (800539c <_dtoa_r+0x58c>)
 80051e6:	2200      	movs	r2, #0
 80051e8:	4629      	mov	r1, r5
 80051ea:	f7fb fa35 	bl	8000658 <__aeabi_dmul>
 80051ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051f2:	f107 38ff 	add.w	r8, r7, #4294967295
 80051f6:	3601      	adds	r6, #1
 80051f8:	465c      	mov	r4, fp
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7fb f9c2 	bl	8000584 <__aeabi_i2d>
 8005200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005204:	f7fb fa28 	bl	8000658 <__aeabi_dmul>
 8005208:	4b65      	ldr	r3, [pc, #404]	@ (80053a0 <_dtoa_r+0x590>)
 800520a:	2200      	movs	r2, #0
 800520c:	f7fb f86e 	bl	80002ec <__adddf3>
 8005210:	4605      	mov	r5, r0
 8005212:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005216:	2c00      	cmp	r4, #0
 8005218:	d16a      	bne.n	80052f0 <_dtoa_r+0x4e0>
 800521a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800521e:	4b61      	ldr	r3, [pc, #388]	@ (80053a4 <_dtoa_r+0x594>)
 8005220:	2200      	movs	r2, #0
 8005222:	f7fb f861 	bl	80002e8 <__aeabi_dsub>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800522e:	462a      	mov	r2, r5
 8005230:	4633      	mov	r3, r6
 8005232:	f7fb fca1 	bl	8000b78 <__aeabi_dcmpgt>
 8005236:	2800      	cmp	r0, #0
 8005238:	f040 8298 	bne.w	800576c <_dtoa_r+0x95c>
 800523c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005240:	462a      	mov	r2, r5
 8005242:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005246:	f7fb fc79 	bl	8000b3c <__aeabi_dcmplt>
 800524a:	bb38      	cbnz	r0, 800529c <_dtoa_r+0x48c>
 800524c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005250:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005254:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005256:	2b00      	cmp	r3, #0
 8005258:	f2c0 8157 	blt.w	800550a <_dtoa_r+0x6fa>
 800525c:	2f0e      	cmp	r7, #14
 800525e:	f300 8154 	bgt.w	800550a <_dtoa_r+0x6fa>
 8005262:	4b4b      	ldr	r3, [pc, #300]	@ (8005390 <_dtoa_r+0x580>)
 8005264:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005268:	ed93 7b00 	vldr	d7, [r3]
 800526c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800526e:	2b00      	cmp	r3, #0
 8005270:	ed8d 7b00 	vstr	d7, [sp]
 8005274:	f280 80e5 	bge.w	8005442 <_dtoa_r+0x632>
 8005278:	9b03      	ldr	r3, [sp, #12]
 800527a:	2b00      	cmp	r3, #0
 800527c:	f300 80e1 	bgt.w	8005442 <_dtoa_r+0x632>
 8005280:	d10c      	bne.n	800529c <_dtoa_r+0x48c>
 8005282:	4b48      	ldr	r3, [pc, #288]	@ (80053a4 <_dtoa_r+0x594>)
 8005284:	2200      	movs	r2, #0
 8005286:	ec51 0b17 	vmov	r0, r1, d7
 800528a:	f7fb f9e5 	bl	8000658 <__aeabi_dmul>
 800528e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005292:	f7fb fc67 	bl	8000b64 <__aeabi_dcmpge>
 8005296:	2800      	cmp	r0, #0
 8005298:	f000 8266 	beq.w	8005768 <_dtoa_r+0x958>
 800529c:	2400      	movs	r4, #0
 800529e:	4625      	mov	r5, r4
 80052a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80052a2:	4656      	mov	r6, sl
 80052a4:	ea6f 0803 	mvn.w	r8, r3
 80052a8:	2700      	movs	r7, #0
 80052aa:	4621      	mov	r1, r4
 80052ac:	4648      	mov	r0, r9
 80052ae:	f000 fcbf 	bl	8005c30 <_Bfree>
 80052b2:	2d00      	cmp	r5, #0
 80052b4:	f000 80bd 	beq.w	8005432 <_dtoa_r+0x622>
 80052b8:	b12f      	cbz	r7, 80052c6 <_dtoa_r+0x4b6>
 80052ba:	42af      	cmp	r7, r5
 80052bc:	d003      	beq.n	80052c6 <_dtoa_r+0x4b6>
 80052be:	4639      	mov	r1, r7
 80052c0:	4648      	mov	r0, r9
 80052c2:	f000 fcb5 	bl	8005c30 <_Bfree>
 80052c6:	4629      	mov	r1, r5
 80052c8:	4648      	mov	r0, r9
 80052ca:	f000 fcb1 	bl	8005c30 <_Bfree>
 80052ce:	e0b0      	b.n	8005432 <_dtoa_r+0x622>
 80052d0:	07e2      	lsls	r2, r4, #31
 80052d2:	d505      	bpl.n	80052e0 <_dtoa_r+0x4d0>
 80052d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052d8:	f7fb f9be 	bl	8000658 <__aeabi_dmul>
 80052dc:	3601      	adds	r6, #1
 80052de:	2301      	movs	r3, #1
 80052e0:	1064      	asrs	r4, r4, #1
 80052e2:	3508      	adds	r5, #8
 80052e4:	e762      	b.n	80051ac <_dtoa_r+0x39c>
 80052e6:	2602      	movs	r6, #2
 80052e8:	e765      	b.n	80051b6 <_dtoa_r+0x3a6>
 80052ea:	9c03      	ldr	r4, [sp, #12]
 80052ec:	46b8      	mov	r8, r7
 80052ee:	e784      	b.n	80051fa <_dtoa_r+0x3ea>
 80052f0:	4b27      	ldr	r3, [pc, #156]	@ (8005390 <_dtoa_r+0x580>)
 80052f2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80052f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052f8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052fc:	4454      	add	r4, sl
 80052fe:	2900      	cmp	r1, #0
 8005300:	d054      	beq.n	80053ac <_dtoa_r+0x59c>
 8005302:	4929      	ldr	r1, [pc, #164]	@ (80053a8 <_dtoa_r+0x598>)
 8005304:	2000      	movs	r0, #0
 8005306:	f7fb fad1 	bl	80008ac <__aeabi_ddiv>
 800530a:	4633      	mov	r3, r6
 800530c:	462a      	mov	r2, r5
 800530e:	f7fa ffeb 	bl	80002e8 <__aeabi_dsub>
 8005312:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005316:	4656      	mov	r6, sl
 8005318:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800531c:	f7fb fc4c 	bl	8000bb8 <__aeabi_d2iz>
 8005320:	4605      	mov	r5, r0
 8005322:	f7fb f92f 	bl	8000584 <__aeabi_i2d>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800532e:	f7fa ffdb 	bl	80002e8 <__aeabi_dsub>
 8005332:	3530      	adds	r5, #48	@ 0x30
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800533c:	f806 5b01 	strb.w	r5, [r6], #1
 8005340:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005344:	f7fb fbfa 	bl	8000b3c <__aeabi_dcmplt>
 8005348:	2800      	cmp	r0, #0
 800534a:	d172      	bne.n	8005432 <_dtoa_r+0x622>
 800534c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005350:	4911      	ldr	r1, [pc, #68]	@ (8005398 <_dtoa_r+0x588>)
 8005352:	2000      	movs	r0, #0
 8005354:	f7fa ffc8 	bl	80002e8 <__aeabi_dsub>
 8005358:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800535c:	f7fb fbee 	bl	8000b3c <__aeabi_dcmplt>
 8005360:	2800      	cmp	r0, #0
 8005362:	f040 80b4 	bne.w	80054ce <_dtoa_r+0x6be>
 8005366:	42a6      	cmp	r6, r4
 8005368:	f43f af70 	beq.w	800524c <_dtoa_r+0x43c>
 800536c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005370:	4b0a      	ldr	r3, [pc, #40]	@ (800539c <_dtoa_r+0x58c>)
 8005372:	2200      	movs	r2, #0
 8005374:	f7fb f970 	bl	8000658 <__aeabi_dmul>
 8005378:	4b08      	ldr	r3, [pc, #32]	@ (800539c <_dtoa_r+0x58c>)
 800537a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800537e:	2200      	movs	r2, #0
 8005380:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005384:	f7fb f968 	bl	8000658 <__aeabi_dmul>
 8005388:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800538c:	e7c4      	b.n	8005318 <_dtoa_r+0x508>
 800538e:	bf00      	nop
 8005390:	08008668 	.word	0x08008668
 8005394:	08008640 	.word	0x08008640
 8005398:	3ff00000 	.word	0x3ff00000
 800539c:	40240000 	.word	0x40240000
 80053a0:	401c0000 	.word	0x401c0000
 80053a4:	40140000 	.word	0x40140000
 80053a8:	3fe00000 	.word	0x3fe00000
 80053ac:	4631      	mov	r1, r6
 80053ae:	4628      	mov	r0, r5
 80053b0:	f7fb f952 	bl	8000658 <__aeabi_dmul>
 80053b4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80053b8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80053ba:	4656      	mov	r6, sl
 80053bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053c0:	f7fb fbfa 	bl	8000bb8 <__aeabi_d2iz>
 80053c4:	4605      	mov	r5, r0
 80053c6:	f7fb f8dd 	bl	8000584 <__aeabi_i2d>
 80053ca:	4602      	mov	r2, r0
 80053cc:	460b      	mov	r3, r1
 80053ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053d2:	f7fa ff89 	bl	80002e8 <__aeabi_dsub>
 80053d6:	3530      	adds	r5, #48	@ 0x30
 80053d8:	f806 5b01 	strb.w	r5, [r6], #1
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	42a6      	cmp	r6, r4
 80053e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	d124      	bne.n	8005436 <_dtoa_r+0x626>
 80053ec:	4baf      	ldr	r3, [pc, #700]	@ (80056ac <_dtoa_r+0x89c>)
 80053ee:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80053f2:	f7fa ff7b 	bl	80002ec <__adddf3>
 80053f6:	4602      	mov	r2, r0
 80053f8:	460b      	mov	r3, r1
 80053fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053fe:	f7fb fbbb 	bl	8000b78 <__aeabi_dcmpgt>
 8005402:	2800      	cmp	r0, #0
 8005404:	d163      	bne.n	80054ce <_dtoa_r+0x6be>
 8005406:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800540a:	49a8      	ldr	r1, [pc, #672]	@ (80056ac <_dtoa_r+0x89c>)
 800540c:	2000      	movs	r0, #0
 800540e:	f7fa ff6b 	bl	80002e8 <__aeabi_dsub>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800541a:	f7fb fb8f 	bl	8000b3c <__aeabi_dcmplt>
 800541e:	2800      	cmp	r0, #0
 8005420:	f43f af14 	beq.w	800524c <_dtoa_r+0x43c>
 8005424:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005426:	1e73      	subs	r3, r6, #1
 8005428:	9313      	str	r3, [sp, #76]	@ 0x4c
 800542a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800542e:	2b30      	cmp	r3, #48	@ 0x30
 8005430:	d0f8      	beq.n	8005424 <_dtoa_r+0x614>
 8005432:	4647      	mov	r7, r8
 8005434:	e03b      	b.n	80054ae <_dtoa_r+0x69e>
 8005436:	4b9e      	ldr	r3, [pc, #632]	@ (80056b0 <_dtoa_r+0x8a0>)
 8005438:	f7fb f90e 	bl	8000658 <__aeabi_dmul>
 800543c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005440:	e7bc      	b.n	80053bc <_dtoa_r+0x5ac>
 8005442:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005446:	4656      	mov	r6, sl
 8005448:	e9dd 2300 	ldrd	r2, r3, [sp]
 800544c:	4620      	mov	r0, r4
 800544e:	4629      	mov	r1, r5
 8005450:	f7fb fa2c 	bl	80008ac <__aeabi_ddiv>
 8005454:	f7fb fbb0 	bl	8000bb8 <__aeabi_d2iz>
 8005458:	4680      	mov	r8, r0
 800545a:	f7fb f893 	bl	8000584 <__aeabi_i2d>
 800545e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005462:	f7fb f8f9 	bl	8000658 <__aeabi_dmul>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4620      	mov	r0, r4
 800546c:	4629      	mov	r1, r5
 800546e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005472:	f7fa ff39 	bl	80002e8 <__aeabi_dsub>
 8005476:	f806 4b01 	strb.w	r4, [r6], #1
 800547a:	9d03      	ldr	r5, [sp, #12]
 800547c:	eba6 040a 	sub.w	r4, r6, sl
 8005480:	42a5      	cmp	r5, r4
 8005482:	4602      	mov	r2, r0
 8005484:	460b      	mov	r3, r1
 8005486:	d133      	bne.n	80054f0 <_dtoa_r+0x6e0>
 8005488:	f7fa ff30 	bl	80002ec <__adddf3>
 800548c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005490:	4604      	mov	r4, r0
 8005492:	460d      	mov	r5, r1
 8005494:	f7fb fb70 	bl	8000b78 <__aeabi_dcmpgt>
 8005498:	b9c0      	cbnz	r0, 80054cc <_dtoa_r+0x6bc>
 800549a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800549e:	4620      	mov	r0, r4
 80054a0:	4629      	mov	r1, r5
 80054a2:	f7fb fb41 	bl	8000b28 <__aeabi_dcmpeq>
 80054a6:	b110      	cbz	r0, 80054ae <_dtoa_r+0x69e>
 80054a8:	f018 0f01 	tst.w	r8, #1
 80054ac:	d10e      	bne.n	80054cc <_dtoa_r+0x6bc>
 80054ae:	9902      	ldr	r1, [sp, #8]
 80054b0:	4648      	mov	r0, r9
 80054b2:	f000 fbbd 	bl	8005c30 <_Bfree>
 80054b6:	2300      	movs	r3, #0
 80054b8:	7033      	strb	r3, [r6, #0]
 80054ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80054bc:	3701      	adds	r7, #1
 80054be:	601f      	str	r7, [r3, #0]
 80054c0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 824b 	beq.w	800595e <_dtoa_r+0xb4e>
 80054c8:	601e      	str	r6, [r3, #0]
 80054ca:	e248      	b.n	800595e <_dtoa_r+0xb4e>
 80054cc:	46b8      	mov	r8, r7
 80054ce:	4633      	mov	r3, r6
 80054d0:	461e      	mov	r6, r3
 80054d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80054d6:	2a39      	cmp	r2, #57	@ 0x39
 80054d8:	d106      	bne.n	80054e8 <_dtoa_r+0x6d8>
 80054da:	459a      	cmp	sl, r3
 80054dc:	d1f8      	bne.n	80054d0 <_dtoa_r+0x6c0>
 80054de:	2230      	movs	r2, #48	@ 0x30
 80054e0:	f108 0801 	add.w	r8, r8, #1
 80054e4:	f88a 2000 	strb.w	r2, [sl]
 80054e8:	781a      	ldrb	r2, [r3, #0]
 80054ea:	3201      	adds	r2, #1
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	e7a0      	b.n	8005432 <_dtoa_r+0x622>
 80054f0:	4b6f      	ldr	r3, [pc, #444]	@ (80056b0 <_dtoa_r+0x8a0>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	f7fb f8b0 	bl	8000658 <__aeabi_dmul>
 80054f8:	2200      	movs	r2, #0
 80054fa:	2300      	movs	r3, #0
 80054fc:	4604      	mov	r4, r0
 80054fe:	460d      	mov	r5, r1
 8005500:	f7fb fb12 	bl	8000b28 <__aeabi_dcmpeq>
 8005504:	2800      	cmp	r0, #0
 8005506:	d09f      	beq.n	8005448 <_dtoa_r+0x638>
 8005508:	e7d1      	b.n	80054ae <_dtoa_r+0x69e>
 800550a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800550c:	2a00      	cmp	r2, #0
 800550e:	f000 80ea 	beq.w	80056e6 <_dtoa_r+0x8d6>
 8005512:	9a07      	ldr	r2, [sp, #28]
 8005514:	2a01      	cmp	r2, #1
 8005516:	f300 80cd 	bgt.w	80056b4 <_dtoa_r+0x8a4>
 800551a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800551c:	2a00      	cmp	r2, #0
 800551e:	f000 80c1 	beq.w	80056a4 <_dtoa_r+0x894>
 8005522:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005526:	9c08      	ldr	r4, [sp, #32]
 8005528:	9e00      	ldr	r6, [sp, #0]
 800552a:	9a00      	ldr	r2, [sp, #0]
 800552c:	441a      	add	r2, r3
 800552e:	9200      	str	r2, [sp, #0]
 8005530:	9a06      	ldr	r2, [sp, #24]
 8005532:	2101      	movs	r1, #1
 8005534:	441a      	add	r2, r3
 8005536:	4648      	mov	r0, r9
 8005538:	9206      	str	r2, [sp, #24]
 800553a:	f000 fc77 	bl	8005e2c <__i2b>
 800553e:	4605      	mov	r5, r0
 8005540:	b166      	cbz	r6, 800555c <_dtoa_r+0x74c>
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	2b00      	cmp	r3, #0
 8005546:	dd09      	ble.n	800555c <_dtoa_r+0x74c>
 8005548:	42b3      	cmp	r3, r6
 800554a:	9a00      	ldr	r2, [sp, #0]
 800554c:	bfa8      	it	ge
 800554e:	4633      	movge	r3, r6
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	9200      	str	r2, [sp, #0]
 8005554:	9a06      	ldr	r2, [sp, #24]
 8005556:	1af6      	subs	r6, r6, r3
 8005558:	1ad3      	subs	r3, r2, r3
 800555a:	9306      	str	r3, [sp, #24]
 800555c:	9b08      	ldr	r3, [sp, #32]
 800555e:	b30b      	cbz	r3, 80055a4 <_dtoa_r+0x794>
 8005560:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80c6 	beq.w	80056f4 <_dtoa_r+0x8e4>
 8005568:	2c00      	cmp	r4, #0
 800556a:	f000 80c0 	beq.w	80056ee <_dtoa_r+0x8de>
 800556e:	4629      	mov	r1, r5
 8005570:	4622      	mov	r2, r4
 8005572:	4648      	mov	r0, r9
 8005574:	f000 fd12 	bl	8005f9c <__pow5mult>
 8005578:	9a02      	ldr	r2, [sp, #8]
 800557a:	4601      	mov	r1, r0
 800557c:	4605      	mov	r5, r0
 800557e:	4648      	mov	r0, r9
 8005580:	f000 fc6a 	bl	8005e58 <__multiply>
 8005584:	9902      	ldr	r1, [sp, #8]
 8005586:	4680      	mov	r8, r0
 8005588:	4648      	mov	r0, r9
 800558a:	f000 fb51 	bl	8005c30 <_Bfree>
 800558e:	9b08      	ldr	r3, [sp, #32]
 8005590:	1b1b      	subs	r3, r3, r4
 8005592:	9308      	str	r3, [sp, #32]
 8005594:	f000 80b1 	beq.w	80056fa <_dtoa_r+0x8ea>
 8005598:	9a08      	ldr	r2, [sp, #32]
 800559a:	4641      	mov	r1, r8
 800559c:	4648      	mov	r0, r9
 800559e:	f000 fcfd 	bl	8005f9c <__pow5mult>
 80055a2:	9002      	str	r0, [sp, #8]
 80055a4:	2101      	movs	r1, #1
 80055a6:	4648      	mov	r0, r9
 80055a8:	f000 fc40 	bl	8005e2c <__i2b>
 80055ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055ae:	4604      	mov	r4, r0
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 81d8 	beq.w	8005966 <_dtoa_r+0xb56>
 80055b6:	461a      	mov	r2, r3
 80055b8:	4601      	mov	r1, r0
 80055ba:	4648      	mov	r0, r9
 80055bc:	f000 fcee 	bl	8005f9c <__pow5mult>
 80055c0:	9b07      	ldr	r3, [sp, #28]
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	4604      	mov	r4, r0
 80055c6:	f300 809f 	bgt.w	8005708 <_dtoa_r+0x8f8>
 80055ca:	9b04      	ldr	r3, [sp, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f040 8097 	bne.w	8005700 <_dtoa_r+0x8f0>
 80055d2:	9b05      	ldr	r3, [sp, #20]
 80055d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f040 8093 	bne.w	8005704 <_dtoa_r+0x8f4>
 80055de:	9b05      	ldr	r3, [sp, #20]
 80055e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80055e4:	0d1b      	lsrs	r3, r3, #20
 80055e6:	051b      	lsls	r3, r3, #20
 80055e8:	b133      	cbz	r3, 80055f8 <_dtoa_r+0x7e8>
 80055ea:	9b00      	ldr	r3, [sp, #0]
 80055ec:	3301      	adds	r3, #1
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	9b06      	ldr	r3, [sp, #24]
 80055f2:	3301      	adds	r3, #1
 80055f4:	9306      	str	r3, [sp, #24]
 80055f6:	2301      	movs	r3, #1
 80055f8:	9308      	str	r3, [sp, #32]
 80055fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 81b8 	beq.w	8005972 <_dtoa_r+0xb62>
 8005602:	6923      	ldr	r3, [r4, #16]
 8005604:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005608:	6918      	ldr	r0, [r3, #16]
 800560a:	f000 fbc3 	bl	8005d94 <__hi0bits>
 800560e:	f1c0 0020 	rsb	r0, r0, #32
 8005612:	9b06      	ldr	r3, [sp, #24]
 8005614:	4418      	add	r0, r3
 8005616:	f010 001f 	ands.w	r0, r0, #31
 800561a:	f000 8082 	beq.w	8005722 <_dtoa_r+0x912>
 800561e:	f1c0 0320 	rsb	r3, r0, #32
 8005622:	2b04      	cmp	r3, #4
 8005624:	dd73      	ble.n	800570e <_dtoa_r+0x8fe>
 8005626:	9b00      	ldr	r3, [sp, #0]
 8005628:	f1c0 001c 	rsb	r0, r0, #28
 800562c:	4403      	add	r3, r0
 800562e:	9300      	str	r3, [sp, #0]
 8005630:	9b06      	ldr	r3, [sp, #24]
 8005632:	4403      	add	r3, r0
 8005634:	4406      	add	r6, r0
 8005636:	9306      	str	r3, [sp, #24]
 8005638:	9b00      	ldr	r3, [sp, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	dd05      	ble.n	800564a <_dtoa_r+0x83a>
 800563e:	9902      	ldr	r1, [sp, #8]
 8005640:	461a      	mov	r2, r3
 8005642:	4648      	mov	r0, r9
 8005644:	f000 fd04 	bl	8006050 <__lshift>
 8005648:	9002      	str	r0, [sp, #8]
 800564a:	9b06      	ldr	r3, [sp, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	dd05      	ble.n	800565c <_dtoa_r+0x84c>
 8005650:	4621      	mov	r1, r4
 8005652:	461a      	mov	r2, r3
 8005654:	4648      	mov	r0, r9
 8005656:	f000 fcfb 	bl	8006050 <__lshift>
 800565a:	4604      	mov	r4, r0
 800565c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d061      	beq.n	8005726 <_dtoa_r+0x916>
 8005662:	9802      	ldr	r0, [sp, #8]
 8005664:	4621      	mov	r1, r4
 8005666:	f000 fd5f 	bl	8006128 <__mcmp>
 800566a:	2800      	cmp	r0, #0
 800566c:	da5b      	bge.n	8005726 <_dtoa_r+0x916>
 800566e:	2300      	movs	r3, #0
 8005670:	9902      	ldr	r1, [sp, #8]
 8005672:	220a      	movs	r2, #10
 8005674:	4648      	mov	r0, r9
 8005676:	f000 fafd 	bl	8005c74 <__multadd>
 800567a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800567c:	9002      	str	r0, [sp, #8]
 800567e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8177 	beq.w	8005976 <_dtoa_r+0xb66>
 8005688:	4629      	mov	r1, r5
 800568a:	2300      	movs	r3, #0
 800568c:	220a      	movs	r2, #10
 800568e:	4648      	mov	r0, r9
 8005690:	f000 faf0 	bl	8005c74 <__multadd>
 8005694:	f1bb 0f00 	cmp.w	fp, #0
 8005698:	4605      	mov	r5, r0
 800569a:	dc6f      	bgt.n	800577c <_dtoa_r+0x96c>
 800569c:	9b07      	ldr	r3, [sp, #28]
 800569e:	2b02      	cmp	r3, #2
 80056a0:	dc49      	bgt.n	8005736 <_dtoa_r+0x926>
 80056a2:	e06b      	b.n	800577c <_dtoa_r+0x96c>
 80056a4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80056a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80056aa:	e73c      	b.n	8005526 <_dtoa_r+0x716>
 80056ac:	3fe00000 	.word	0x3fe00000
 80056b0:	40240000 	.word	0x40240000
 80056b4:	9b03      	ldr	r3, [sp, #12]
 80056b6:	1e5c      	subs	r4, r3, #1
 80056b8:	9b08      	ldr	r3, [sp, #32]
 80056ba:	42a3      	cmp	r3, r4
 80056bc:	db09      	blt.n	80056d2 <_dtoa_r+0x8c2>
 80056be:	1b1c      	subs	r4, r3, r4
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f6bf af30 	bge.w	8005528 <_dtoa_r+0x718>
 80056c8:	9b00      	ldr	r3, [sp, #0]
 80056ca:	9a03      	ldr	r2, [sp, #12]
 80056cc:	1a9e      	subs	r6, r3, r2
 80056ce:	2300      	movs	r3, #0
 80056d0:	e72b      	b.n	800552a <_dtoa_r+0x71a>
 80056d2:	9b08      	ldr	r3, [sp, #32]
 80056d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80056d6:	9408      	str	r4, [sp, #32]
 80056d8:	1ae3      	subs	r3, r4, r3
 80056da:	441a      	add	r2, r3
 80056dc:	9e00      	ldr	r6, [sp, #0]
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	920d      	str	r2, [sp, #52]	@ 0x34
 80056e2:	2400      	movs	r4, #0
 80056e4:	e721      	b.n	800552a <_dtoa_r+0x71a>
 80056e6:	9c08      	ldr	r4, [sp, #32]
 80056e8:	9e00      	ldr	r6, [sp, #0]
 80056ea:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80056ec:	e728      	b.n	8005540 <_dtoa_r+0x730>
 80056ee:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80056f2:	e751      	b.n	8005598 <_dtoa_r+0x788>
 80056f4:	9a08      	ldr	r2, [sp, #32]
 80056f6:	9902      	ldr	r1, [sp, #8]
 80056f8:	e750      	b.n	800559c <_dtoa_r+0x78c>
 80056fa:	f8cd 8008 	str.w	r8, [sp, #8]
 80056fe:	e751      	b.n	80055a4 <_dtoa_r+0x794>
 8005700:	2300      	movs	r3, #0
 8005702:	e779      	b.n	80055f8 <_dtoa_r+0x7e8>
 8005704:	9b04      	ldr	r3, [sp, #16]
 8005706:	e777      	b.n	80055f8 <_dtoa_r+0x7e8>
 8005708:	2300      	movs	r3, #0
 800570a:	9308      	str	r3, [sp, #32]
 800570c:	e779      	b.n	8005602 <_dtoa_r+0x7f2>
 800570e:	d093      	beq.n	8005638 <_dtoa_r+0x828>
 8005710:	9a00      	ldr	r2, [sp, #0]
 8005712:	331c      	adds	r3, #28
 8005714:	441a      	add	r2, r3
 8005716:	9200      	str	r2, [sp, #0]
 8005718:	9a06      	ldr	r2, [sp, #24]
 800571a:	441a      	add	r2, r3
 800571c:	441e      	add	r6, r3
 800571e:	9206      	str	r2, [sp, #24]
 8005720:	e78a      	b.n	8005638 <_dtoa_r+0x828>
 8005722:	4603      	mov	r3, r0
 8005724:	e7f4      	b.n	8005710 <_dtoa_r+0x900>
 8005726:	9b03      	ldr	r3, [sp, #12]
 8005728:	2b00      	cmp	r3, #0
 800572a:	46b8      	mov	r8, r7
 800572c:	dc20      	bgt.n	8005770 <_dtoa_r+0x960>
 800572e:	469b      	mov	fp, r3
 8005730:	9b07      	ldr	r3, [sp, #28]
 8005732:	2b02      	cmp	r3, #2
 8005734:	dd1e      	ble.n	8005774 <_dtoa_r+0x964>
 8005736:	f1bb 0f00 	cmp.w	fp, #0
 800573a:	f47f adb1 	bne.w	80052a0 <_dtoa_r+0x490>
 800573e:	4621      	mov	r1, r4
 8005740:	465b      	mov	r3, fp
 8005742:	2205      	movs	r2, #5
 8005744:	4648      	mov	r0, r9
 8005746:	f000 fa95 	bl	8005c74 <__multadd>
 800574a:	4601      	mov	r1, r0
 800574c:	4604      	mov	r4, r0
 800574e:	9802      	ldr	r0, [sp, #8]
 8005750:	f000 fcea 	bl	8006128 <__mcmp>
 8005754:	2800      	cmp	r0, #0
 8005756:	f77f ada3 	ble.w	80052a0 <_dtoa_r+0x490>
 800575a:	4656      	mov	r6, sl
 800575c:	2331      	movs	r3, #49	@ 0x31
 800575e:	f806 3b01 	strb.w	r3, [r6], #1
 8005762:	f108 0801 	add.w	r8, r8, #1
 8005766:	e59f      	b.n	80052a8 <_dtoa_r+0x498>
 8005768:	9c03      	ldr	r4, [sp, #12]
 800576a:	46b8      	mov	r8, r7
 800576c:	4625      	mov	r5, r4
 800576e:	e7f4      	b.n	800575a <_dtoa_r+0x94a>
 8005770:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	f000 8101 	beq.w	800597e <_dtoa_r+0xb6e>
 800577c:	2e00      	cmp	r6, #0
 800577e:	dd05      	ble.n	800578c <_dtoa_r+0x97c>
 8005780:	4629      	mov	r1, r5
 8005782:	4632      	mov	r2, r6
 8005784:	4648      	mov	r0, r9
 8005786:	f000 fc63 	bl	8006050 <__lshift>
 800578a:	4605      	mov	r5, r0
 800578c:	9b08      	ldr	r3, [sp, #32]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d05c      	beq.n	800584c <_dtoa_r+0xa3c>
 8005792:	6869      	ldr	r1, [r5, #4]
 8005794:	4648      	mov	r0, r9
 8005796:	f000 fa0b 	bl	8005bb0 <_Balloc>
 800579a:	4606      	mov	r6, r0
 800579c:	b928      	cbnz	r0, 80057aa <_dtoa_r+0x99a>
 800579e:	4b82      	ldr	r3, [pc, #520]	@ (80059a8 <_dtoa_r+0xb98>)
 80057a0:	4602      	mov	r2, r0
 80057a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80057a6:	f7ff bb4a 	b.w	8004e3e <_dtoa_r+0x2e>
 80057aa:	692a      	ldr	r2, [r5, #16]
 80057ac:	3202      	adds	r2, #2
 80057ae:	0092      	lsls	r2, r2, #2
 80057b0:	f105 010c 	add.w	r1, r5, #12
 80057b4:	300c      	adds	r0, #12
 80057b6:	f001 ff69 	bl	800768c <memcpy>
 80057ba:	2201      	movs	r2, #1
 80057bc:	4631      	mov	r1, r6
 80057be:	4648      	mov	r0, r9
 80057c0:	f000 fc46 	bl	8006050 <__lshift>
 80057c4:	f10a 0301 	add.w	r3, sl, #1
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	eb0a 030b 	add.w	r3, sl, fp
 80057ce:	9308      	str	r3, [sp, #32]
 80057d0:	9b04      	ldr	r3, [sp, #16]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	462f      	mov	r7, r5
 80057d8:	9306      	str	r3, [sp, #24]
 80057da:	4605      	mov	r5, r0
 80057dc:	9b00      	ldr	r3, [sp, #0]
 80057de:	9802      	ldr	r0, [sp, #8]
 80057e0:	4621      	mov	r1, r4
 80057e2:	f103 3bff 	add.w	fp, r3, #4294967295
 80057e6:	f7ff fa89 	bl	8004cfc <quorem>
 80057ea:	4603      	mov	r3, r0
 80057ec:	3330      	adds	r3, #48	@ 0x30
 80057ee:	9003      	str	r0, [sp, #12]
 80057f0:	4639      	mov	r1, r7
 80057f2:	9802      	ldr	r0, [sp, #8]
 80057f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80057f6:	f000 fc97 	bl	8006128 <__mcmp>
 80057fa:	462a      	mov	r2, r5
 80057fc:	9004      	str	r0, [sp, #16]
 80057fe:	4621      	mov	r1, r4
 8005800:	4648      	mov	r0, r9
 8005802:	f000 fcad 	bl	8006160 <__mdiff>
 8005806:	68c2      	ldr	r2, [r0, #12]
 8005808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800580a:	4606      	mov	r6, r0
 800580c:	bb02      	cbnz	r2, 8005850 <_dtoa_r+0xa40>
 800580e:	4601      	mov	r1, r0
 8005810:	9802      	ldr	r0, [sp, #8]
 8005812:	f000 fc89 	bl	8006128 <__mcmp>
 8005816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005818:	4602      	mov	r2, r0
 800581a:	4631      	mov	r1, r6
 800581c:	4648      	mov	r0, r9
 800581e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005820:	9309      	str	r3, [sp, #36]	@ 0x24
 8005822:	f000 fa05 	bl	8005c30 <_Bfree>
 8005826:	9b07      	ldr	r3, [sp, #28]
 8005828:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800582a:	9e00      	ldr	r6, [sp, #0]
 800582c:	ea42 0103 	orr.w	r1, r2, r3
 8005830:	9b06      	ldr	r3, [sp, #24]
 8005832:	4319      	orrs	r1, r3
 8005834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005836:	d10d      	bne.n	8005854 <_dtoa_r+0xa44>
 8005838:	2b39      	cmp	r3, #57	@ 0x39
 800583a:	d027      	beq.n	800588c <_dtoa_r+0xa7c>
 800583c:	9a04      	ldr	r2, [sp, #16]
 800583e:	2a00      	cmp	r2, #0
 8005840:	dd01      	ble.n	8005846 <_dtoa_r+0xa36>
 8005842:	9b03      	ldr	r3, [sp, #12]
 8005844:	3331      	adds	r3, #49	@ 0x31
 8005846:	f88b 3000 	strb.w	r3, [fp]
 800584a:	e52e      	b.n	80052aa <_dtoa_r+0x49a>
 800584c:	4628      	mov	r0, r5
 800584e:	e7b9      	b.n	80057c4 <_dtoa_r+0x9b4>
 8005850:	2201      	movs	r2, #1
 8005852:	e7e2      	b.n	800581a <_dtoa_r+0xa0a>
 8005854:	9904      	ldr	r1, [sp, #16]
 8005856:	2900      	cmp	r1, #0
 8005858:	db04      	blt.n	8005864 <_dtoa_r+0xa54>
 800585a:	9807      	ldr	r0, [sp, #28]
 800585c:	4301      	orrs	r1, r0
 800585e:	9806      	ldr	r0, [sp, #24]
 8005860:	4301      	orrs	r1, r0
 8005862:	d120      	bne.n	80058a6 <_dtoa_r+0xa96>
 8005864:	2a00      	cmp	r2, #0
 8005866:	ddee      	ble.n	8005846 <_dtoa_r+0xa36>
 8005868:	9902      	ldr	r1, [sp, #8]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	2201      	movs	r2, #1
 800586e:	4648      	mov	r0, r9
 8005870:	f000 fbee 	bl	8006050 <__lshift>
 8005874:	4621      	mov	r1, r4
 8005876:	9002      	str	r0, [sp, #8]
 8005878:	f000 fc56 	bl	8006128 <__mcmp>
 800587c:	2800      	cmp	r0, #0
 800587e:	9b00      	ldr	r3, [sp, #0]
 8005880:	dc02      	bgt.n	8005888 <_dtoa_r+0xa78>
 8005882:	d1e0      	bne.n	8005846 <_dtoa_r+0xa36>
 8005884:	07da      	lsls	r2, r3, #31
 8005886:	d5de      	bpl.n	8005846 <_dtoa_r+0xa36>
 8005888:	2b39      	cmp	r3, #57	@ 0x39
 800588a:	d1da      	bne.n	8005842 <_dtoa_r+0xa32>
 800588c:	2339      	movs	r3, #57	@ 0x39
 800588e:	f88b 3000 	strb.w	r3, [fp]
 8005892:	4633      	mov	r3, r6
 8005894:	461e      	mov	r6, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800589c:	2a39      	cmp	r2, #57	@ 0x39
 800589e:	d04e      	beq.n	800593e <_dtoa_r+0xb2e>
 80058a0:	3201      	adds	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e501      	b.n	80052aa <_dtoa_r+0x49a>
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	dd03      	ble.n	80058b2 <_dtoa_r+0xaa2>
 80058aa:	2b39      	cmp	r3, #57	@ 0x39
 80058ac:	d0ee      	beq.n	800588c <_dtoa_r+0xa7c>
 80058ae:	3301      	adds	r3, #1
 80058b0:	e7c9      	b.n	8005846 <_dtoa_r+0xa36>
 80058b2:	9a00      	ldr	r2, [sp, #0]
 80058b4:	9908      	ldr	r1, [sp, #32]
 80058b6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80058ba:	428a      	cmp	r2, r1
 80058bc:	d028      	beq.n	8005910 <_dtoa_r+0xb00>
 80058be:	9902      	ldr	r1, [sp, #8]
 80058c0:	2300      	movs	r3, #0
 80058c2:	220a      	movs	r2, #10
 80058c4:	4648      	mov	r0, r9
 80058c6:	f000 f9d5 	bl	8005c74 <__multadd>
 80058ca:	42af      	cmp	r7, r5
 80058cc:	9002      	str	r0, [sp, #8]
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	f04f 020a 	mov.w	r2, #10
 80058d6:	4639      	mov	r1, r7
 80058d8:	4648      	mov	r0, r9
 80058da:	d107      	bne.n	80058ec <_dtoa_r+0xadc>
 80058dc:	f000 f9ca 	bl	8005c74 <__multadd>
 80058e0:	4607      	mov	r7, r0
 80058e2:	4605      	mov	r5, r0
 80058e4:	9b00      	ldr	r3, [sp, #0]
 80058e6:	3301      	adds	r3, #1
 80058e8:	9300      	str	r3, [sp, #0]
 80058ea:	e777      	b.n	80057dc <_dtoa_r+0x9cc>
 80058ec:	f000 f9c2 	bl	8005c74 <__multadd>
 80058f0:	4629      	mov	r1, r5
 80058f2:	4607      	mov	r7, r0
 80058f4:	2300      	movs	r3, #0
 80058f6:	220a      	movs	r2, #10
 80058f8:	4648      	mov	r0, r9
 80058fa:	f000 f9bb 	bl	8005c74 <__multadd>
 80058fe:	4605      	mov	r5, r0
 8005900:	e7f0      	b.n	80058e4 <_dtoa_r+0xad4>
 8005902:	f1bb 0f00 	cmp.w	fp, #0
 8005906:	bfcc      	ite	gt
 8005908:	465e      	movgt	r6, fp
 800590a:	2601      	movle	r6, #1
 800590c:	4456      	add	r6, sl
 800590e:	2700      	movs	r7, #0
 8005910:	9902      	ldr	r1, [sp, #8]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	2201      	movs	r2, #1
 8005916:	4648      	mov	r0, r9
 8005918:	f000 fb9a 	bl	8006050 <__lshift>
 800591c:	4621      	mov	r1, r4
 800591e:	9002      	str	r0, [sp, #8]
 8005920:	f000 fc02 	bl	8006128 <__mcmp>
 8005924:	2800      	cmp	r0, #0
 8005926:	dcb4      	bgt.n	8005892 <_dtoa_r+0xa82>
 8005928:	d102      	bne.n	8005930 <_dtoa_r+0xb20>
 800592a:	9b00      	ldr	r3, [sp, #0]
 800592c:	07db      	lsls	r3, r3, #31
 800592e:	d4b0      	bmi.n	8005892 <_dtoa_r+0xa82>
 8005930:	4633      	mov	r3, r6
 8005932:	461e      	mov	r6, r3
 8005934:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005938:	2a30      	cmp	r2, #48	@ 0x30
 800593a:	d0fa      	beq.n	8005932 <_dtoa_r+0xb22>
 800593c:	e4b5      	b.n	80052aa <_dtoa_r+0x49a>
 800593e:	459a      	cmp	sl, r3
 8005940:	d1a8      	bne.n	8005894 <_dtoa_r+0xa84>
 8005942:	2331      	movs	r3, #49	@ 0x31
 8005944:	f108 0801 	add.w	r8, r8, #1
 8005948:	f88a 3000 	strb.w	r3, [sl]
 800594c:	e4ad      	b.n	80052aa <_dtoa_r+0x49a>
 800594e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005950:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80059ac <_dtoa_r+0xb9c>
 8005954:	b11b      	cbz	r3, 800595e <_dtoa_r+0xb4e>
 8005956:	f10a 0308 	add.w	r3, sl, #8
 800595a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	4650      	mov	r0, sl
 8005960:	b017      	add	sp, #92	@ 0x5c
 8005962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005966:	9b07      	ldr	r3, [sp, #28]
 8005968:	2b01      	cmp	r3, #1
 800596a:	f77f ae2e 	ble.w	80055ca <_dtoa_r+0x7ba>
 800596e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005970:	9308      	str	r3, [sp, #32]
 8005972:	2001      	movs	r0, #1
 8005974:	e64d      	b.n	8005612 <_dtoa_r+0x802>
 8005976:	f1bb 0f00 	cmp.w	fp, #0
 800597a:	f77f aed9 	ble.w	8005730 <_dtoa_r+0x920>
 800597e:	4656      	mov	r6, sl
 8005980:	9802      	ldr	r0, [sp, #8]
 8005982:	4621      	mov	r1, r4
 8005984:	f7ff f9ba 	bl	8004cfc <quorem>
 8005988:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800598c:	f806 3b01 	strb.w	r3, [r6], #1
 8005990:	eba6 020a 	sub.w	r2, r6, sl
 8005994:	4593      	cmp	fp, r2
 8005996:	ddb4      	ble.n	8005902 <_dtoa_r+0xaf2>
 8005998:	9902      	ldr	r1, [sp, #8]
 800599a:	2300      	movs	r3, #0
 800599c:	220a      	movs	r2, #10
 800599e:	4648      	mov	r0, r9
 80059a0:	f000 f968 	bl	8005c74 <__multadd>
 80059a4:	9002      	str	r0, [sp, #8]
 80059a6:	e7eb      	b.n	8005980 <_dtoa_r+0xb70>
 80059a8:	0800850d 	.word	0x0800850d
 80059ac:	08008491 	.word	0x08008491

080059b0 <_free_r>:
 80059b0:	b538      	push	{r3, r4, r5, lr}
 80059b2:	4605      	mov	r5, r0
 80059b4:	2900      	cmp	r1, #0
 80059b6:	d041      	beq.n	8005a3c <_free_r+0x8c>
 80059b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059bc:	1f0c      	subs	r4, r1, #4
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfb8      	it	lt
 80059c2:	18e4      	addlt	r4, r4, r3
 80059c4:	f000 f8e8 	bl	8005b98 <__malloc_lock>
 80059c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a40 <_free_r+0x90>)
 80059ca:	6813      	ldr	r3, [r2, #0]
 80059cc:	b933      	cbnz	r3, 80059dc <_free_r+0x2c>
 80059ce:	6063      	str	r3, [r4, #4]
 80059d0:	6014      	str	r4, [r2, #0]
 80059d2:	4628      	mov	r0, r5
 80059d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059d8:	f000 b8e4 	b.w	8005ba4 <__malloc_unlock>
 80059dc:	42a3      	cmp	r3, r4
 80059de:	d908      	bls.n	80059f2 <_free_r+0x42>
 80059e0:	6820      	ldr	r0, [r4, #0]
 80059e2:	1821      	adds	r1, r4, r0
 80059e4:	428b      	cmp	r3, r1
 80059e6:	bf01      	itttt	eq
 80059e8:	6819      	ldreq	r1, [r3, #0]
 80059ea:	685b      	ldreq	r3, [r3, #4]
 80059ec:	1809      	addeq	r1, r1, r0
 80059ee:	6021      	streq	r1, [r4, #0]
 80059f0:	e7ed      	b.n	80059ce <_free_r+0x1e>
 80059f2:	461a      	mov	r2, r3
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	b10b      	cbz	r3, 80059fc <_free_r+0x4c>
 80059f8:	42a3      	cmp	r3, r4
 80059fa:	d9fa      	bls.n	80059f2 <_free_r+0x42>
 80059fc:	6811      	ldr	r1, [r2, #0]
 80059fe:	1850      	adds	r0, r2, r1
 8005a00:	42a0      	cmp	r0, r4
 8005a02:	d10b      	bne.n	8005a1c <_free_r+0x6c>
 8005a04:	6820      	ldr	r0, [r4, #0]
 8005a06:	4401      	add	r1, r0
 8005a08:	1850      	adds	r0, r2, r1
 8005a0a:	4283      	cmp	r3, r0
 8005a0c:	6011      	str	r1, [r2, #0]
 8005a0e:	d1e0      	bne.n	80059d2 <_free_r+0x22>
 8005a10:	6818      	ldr	r0, [r3, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	6053      	str	r3, [r2, #4]
 8005a16:	4408      	add	r0, r1
 8005a18:	6010      	str	r0, [r2, #0]
 8005a1a:	e7da      	b.n	80059d2 <_free_r+0x22>
 8005a1c:	d902      	bls.n	8005a24 <_free_r+0x74>
 8005a1e:	230c      	movs	r3, #12
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	e7d6      	b.n	80059d2 <_free_r+0x22>
 8005a24:	6820      	ldr	r0, [r4, #0]
 8005a26:	1821      	adds	r1, r4, r0
 8005a28:	428b      	cmp	r3, r1
 8005a2a:	bf04      	itt	eq
 8005a2c:	6819      	ldreq	r1, [r3, #0]
 8005a2e:	685b      	ldreq	r3, [r3, #4]
 8005a30:	6063      	str	r3, [r4, #4]
 8005a32:	bf04      	itt	eq
 8005a34:	1809      	addeq	r1, r1, r0
 8005a36:	6021      	streq	r1, [r4, #0]
 8005a38:	6054      	str	r4, [r2, #4]
 8005a3a:	e7ca      	b.n	80059d2 <_free_r+0x22>
 8005a3c:	bd38      	pop	{r3, r4, r5, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000414 	.word	0x20000414

08005a44 <malloc>:
 8005a44:	4b02      	ldr	r3, [pc, #8]	@ (8005a50 <malloc+0xc>)
 8005a46:	4601      	mov	r1, r0
 8005a48:	6818      	ldr	r0, [r3, #0]
 8005a4a:	f000 b825 	b.w	8005a98 <_malloc_r>
 8005a4e:	bf00      	nop
 8005a50:	20000018 	.word	0x20000018

08005a54 <sbrk_aligned>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4e0f      	ldr	r6, [pc, #60]	@ (8005a94 <sbrk_aligned+0x40>)
 8005a58:	460c      	mov	r4, r1
 8005a5a:	6831      	ldr	r1, [r6, #0]
 8005a5c:	4605      	mov	r5, r0
 8005a5e:	b911      	cbnz	r1, 8005a66 <sbrk_aligned+0x12>
 8005a60:	f001 fe04 	bl	800766c <_sbrk_r>
 8005a64:	6030      	str	r0, [r6, #0]
 8005a66:	4621      	mov	r1, r4
 8005a68:	4628      	mov	r0, r5
 8005a6a:	f001 fdff 	bl	800766c <_sbrk_r>
 8005a6e:	1c43      	adds	r3, r0, #1
 8005a70:	d103      	bne.n	8005a7a <sbrk_aligned+0x26>
 8005a72:	f04f 34ff 	mov.w	r4, #4294967295
 8005a76:	4620      	mov	r0, r4
 8005a78:	bd70      	pop	{r4, r5, r6, pc}
 8005a7a:	1cc4      	adds	r4, r0, #3
 8005a7c:	f024 0403 	bic.w	r4, r4, #3
 8005a80:	42a0      	cmp	r0, r4
 8005a82:	d0f8      	beq.n	8005a76 <sbrk_aligned+0x22>
 8005a84:	1a21      	subs	r1, r4, r0
 8005a86:	4628      	mov	r0, r5
 8005a88:	f001 fdf0 	bl	800766c <_sbrk_r>
 8005a8c:	3001      	adds	r0, #1
 8005a8e:	d1f2      	bne.n	8005a76 <sbrk_aligned+0x22>
 8005a90:	e7ef      	b.n	8005a72 <sbrk_aligned+0x1e>
 8005a92:	bf00      	nop
 8005a94:	20000410 	.word	0x20000410

08005a98 <_malloc_r>:
 8005a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a9c:	1ccd      	adds	r5, r1, #3
 8005a9e:	f025 0503 	bic.w	r5, r5, #3
 8005aa2:	3508      	adds	r5, #8
 8005aa4:	2d0c      	cmp	r5, #12
 8005aa6:	bf38      	it	cc
 8005aa8:	250c      	movcc	r5, #12
 8005aaa:	2d00      	cmp	r5, #0
 8005aac:	4606      	mov	r6, r0
 8005aae:	db01      	blt.n	8005ab4 <_malloc_r+0x1c>
 8005ab0:	42a9      	cmp	r1, r5
 8005ab2:	d904      	bls.n	8005abe <_malloc_r+0x26>
 8005ab4:	230c      	movs	r3, #12
 8005ab6:	6033      	str	r3, [r6, #0]
 8005ab8:	2000      	movs	r0, #0
 8005aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005abe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b94 <_malloc_r+0xfc>
 8005ac2:	f000 f869 	bl	8005b98 <__malloc_lock>
 8005ac6:	f8d8 3000 	ldr.w	r3, [r8]
 8005aca:	461c      	mov	r4, r3
 8005acc:	bb44      	cbnz	r4, 8005b20 <_malloc_r+0x88>
 8005ace:	4629      	mov	r1, r5
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f7ff ffbf 	bl	8005a54 <sbrk_aligned>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	4604      	mov	r4, r0
 8005ada:	d158      	bne.n	8005b8e <_malloc_r+0xf6>
 8005adc:	f8d8 4000 	ldr.w	r4, [r8]
 8005ae0:	4627      	mov	r7, r4
 8005ae2:	2f00      	cmp	r7, #0
 8005ae4:	d143      	bne.n	8005b6e <_malloc_r+0xd6>
 8005ae6:	2c00      	cmp	r4, #0
 8005ae8:	d04b      	beq.n	8005b82 <_malloc_r+0xea>
 8005aea:	6823      	ldr	r3, [r4, #0]
 8005aec:	4639      	mov	r1, r7
 8005aee:	4630      	mov	r0, r6
 8005af0:	eb04 0903 	add.w	r9, r4, r3
 8005af4:	f001 fdba 	bl	800766c <_sbrk_r>
 8005af8:	4581      	cmp	r9, r0
 8005afa:	d142      	bne.n	8005b82 <_malloc_r+0xea>
 8005afc:	6821      	ldr	r1, [r4, #0]
 8005afe:	1a6d      	subs	r5, r5, r1
 8005b00:	4629      	mov	r1, r5
 8005b02:	4630      	mov	r0, r6
 8005b04:	f7ff ffa6 	bl	8005a54 <sbrk_aligned>
 8005b08:	3001      	adds	r0, #1
 8005b0a:	d03a      	beq.n	8005b82 <_malloc_r+0xea>
 8005b0c:	6823      	ldr	r3, [r4, #0]
 8005b0e:	442b      	add	r3, r5
 8005b10:	6023      	str	r3, [r4, #0]
 8005b12:	f8d8 3000 	ldr.w	r3, [r8]
 8005b16:	685a      	ldr	r2, [r3, #4]
 8005b18:	bb62      	cbnz	r2, 8005b74 <_malloc_r+0xdc>
 8005b1a:	f8c8 7000 	str.w	r7, [r8]
 8005b1e:	e00f      	b.n	8005b40 <_malloc_r+0xa8>
 8005b20:	6822      	ldr	r2, [r4, #0]
 8005b22:	1b52      	subs	r2, r2, r5
 8005b24:	d420      	bmi.n	8005b68 <_malloc_r+0xd0>
 8005b26:	2a0b      	cmp	r2, #11
 8005b28:	d917      	bls.n	8005b5a <_malloc_r+0xc2>
 8005b2a:	1961      	adds	r1, r4, r5
 8005b2c:	42a3      	cmp	r3, r4
 8005b2e:	6025      	str	r5, [r4, #0]
 8005b30:	bf18      	it	ne
 8005b32:	6059      	strne	r1, [r3, #4]
 8005b34:	6863      	ldr	r3, [r4, #4]
 8005b36:	bf08      	it	eq
 8005b38:	f8c8 1000 	streq.w	r1, [r8]
 8005b3c:	5162      	str	r2, [r4, r5]
 8005b3e:	604b      	str	r3, [r1, #4]
 8005b40:	4630      	mov	r0, r6
 8005b42:	f000 f82f 	bl	8005ba4 <__malloc_unlock>
 8005b46:	f104 000b 	add.w	r0, r4, #11
 8005b4a:	1d23      	adds	r3, r4, #4
 8005b4c:	f020 0007 	bic.w	r0, r0, #7
 8005b50:	1ac2      	subs	r2, r0, r3
 8005b52:	bf1c      	itt	ne
 8005b54:	1a1b      	subne	r3, r3, r0
 8005b56:	50a3      	strne	r3, [r4, r2]
 8005b58:	e7af      	b.n	8005aba <_malloc_r+0x22>
 8005b5a:	6862      	ldr	r2, [r4, #4]
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	bf0c      	ite	eq
 8005b60:	f8c8 2000 	streq.w	r2, [r8]
 8005b64:	605a      	strne	r2, [r3, #4]
 8005b66:	e7eb      	b.n	8005b40 <_malloc_r+0xa8>
 8005b68:	4623      	mov	r3, r4
 8005b6a:	6864      	ldr	r4, [r4, #4]
 8005b6c:	e7ae      	b.n	8005acc <_malloc_r+0x34>
 8005b6e:	463c      	mov	r4, r7
 8005b70:	687f      	ldr	r7, [r7, #4]
 8005b72:	e7b6      	b.n	8005ae2 <_malloc_r+0x4a>
 8005b74:	461a      	mov	r2, r3
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	42a3      	cmp	r3, r4
 8005b7a:	d1fb      	bne.n	8005b74 <_malloc_r+0xdc>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	6053      	str	r3, [r2, #4]
 8005b80:	e7de      	b.n	8005b40 <_malloc_r+0xa8>
 8005b82:	230c      	movs	r3, #12
 8005b84:	6033      	str	r3, [r6, #0]
 8005b86:	4630      	mov	r0, r6
 8005b88:	f000 f80c 	bl	8005ba4 <__malloc_unlock>
 8005b8c:	e794      	b.n	8005ab8 <_malloc_r+0x20>
 8005b8e:	6005      	str	r5, [r0, #0]
 8005b90:	e7d6      	b.n	8005b40 <_malloc_r+0xa8>
 8005b92:	bf00      	nop
 8005b94:	20000414 	.word	0x20000414

08005b98 <__malloc_lock>:
 8005b98:	4801      	ldr	r0, [pc, #4]	@ (8005ba0 <__malloc_lock+0x8>)
 8005b9a:	f7ff b89e 	b.w	8004cda <__retarget_lock_acquire_recursive>
 8005b9e:	bf00      	nop
 8005ba0:	2000040c 	.word	0x2000040c

08005ba4 <__malloc_unlock>:
 8005ba4:	4801      	ldr	r0, [pc, #4]	@ (8005bac <__malloc_unlock+0x8>)
 8005ba6:	f7ff b899 	b.w	8004cdc <__retarget_lock_release_recursive>
 8005baa:	bf00      	nop
 8005bac:	2000040c 	.word	0x2000040c

08005bb0 <_Balloc>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	69c6      	ldr	r6, [r0, #28]
 8005bb4:	4604      	mov	r4, r0
 8005bb6:	460d      	mov	r5, r1
 8005bb8:	b976      	cbnz	r6, 8005bd8 <_Balloc+0x28>
 8005bba:	2010      	movs	r0, #16
 8005bbc:	f7ff ff42 	bl	8005a44 <malloc>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	61e0      	str	r0, [r4, #28]
 8005bc4:	b920      	cbnz	r0, 8005bd0 <_Balloc+0x20>
 8005bc6:	4b18      	ldr	r3, [pc, #96]	@ (8005c28 <_Balloc+0x78>)
 8005bc8:	4818      	ldr	r0, [pc, #96]	@ (8005c2c <_Balloc+0x7c>)
 8005bca:	216b      	movs	r1, #107	@ 0x6b
 8005bcc:	f001 fd74 	bl	80076b8 <__assert_func>
 8005bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005bd4:	6006      	str	r6, [r0, #0]
 8005bd6:	60c6      	str	r6, [r0, #12]
 8005bd8:	69e6      	ldr	r6, [r4, #28]
 8005bda:	68f3      	ldr	r3, [r6, #12]
 8005bdc:	b183      	cbz	r3, 8005c00 <_Balloc+0x50>
 8005bde:	69e3      	ldr	r3, [r4, #28]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005be6:	b9b8      	cbnz	r0, 8005c18 <_Balloc+0x68>
 8005be8:	2101      	movs	r1, #1
 8005bea:	fa01 f605 	lsl.w	r6, r1, r5
 8005bee:	1d72      	adds	r2, r6, #5
 8005bf0:	0092      	lsls	r2, r2, #2
 8005bf2:	4620      	mov	r0, r4
 8005bf4:	f001 fd7e 	bl	80076f4 <_calloc_r>
 8005bf8:	b160      	cbz	r0, 8005c14 <_Balloc+0x64>
 8005bfa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005bfe:	e00e      	b.n	8005c1e <_Balloc+0x6e>
 8005c00:	2221      	movs	r2, #33	@ 0x21
 8005c02:	2104      	movs	r1, #4
 8005c04:	4620      	mov	r0, r4
 8005c06:	f001 fd75 	bl	80076f4 <_calloc_r>
 8005c0a:	69e3      	ldr	r3, [r4, #28]
 8005c0c:	60f0      	str	r0, [r6, #12]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d1e4      	bne.n	8005bde <_Balloc+0x2e>
 8005c14:	2000      	movs	r0, #0
 8005c16:	bd70      	pop	{r4, r5, r6, pc}
 8005c18:	6802      	ldr	r2, [r0, #0]
 8005c1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005c24:	e7f7      	b.n	8005c16 <_Balloc+0x66>
 8005c26:	bf00      	nop
 8005c28:	0800849e 	.word	0x0800849e
 8005c2c:	0800851e 	.word	0x0800851e

08005c30 <_Bfree>:
 8005c30:	b570      	push	{r4, r5, r6, lr}
 8005c32:	69c6      	ldr	r6, [r0, #28]
 8005c34:	4605      	mov	r5, r0
 8005c36:	460c      	mov	r4, r1
 8005c38:	b976      	cbnz	r6, 8005c58 <_Bfree+0x28>
 8005c3a:	2010      	movs	r0, #16
 8005c3c:	f7ff ff02 	bl	8005a44 <malloc>
 8005c40:	4602      	mov	r2, r0
 8005c42:	61e8      	str	r0, [r5, #28]
 8005c44:	b920      	cbnz	r0, 8005c50 <_Bfree+0x20>
 8005c46:	4b09      	ldr	r3, [pc, #36]	@ (8005c6c <_Bfree+0x3c>)
 8005c48:	4809      	ldr	r0, [pc, #36]	@ (8005c70 <_Bfree+0x40>)
 8005c4a:	218f      	movs	r1, #143	@ 0x8f
 8005c4c:	f001 fd34 	bl	80076b8 <__assert_func>
 8005c50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005c54:	6006      	str	r6, [r0, #0]
 8005c56:	60c6      	str	r6, [r0, #12]
 8005c58:	b13c      	cbz	r4, 8005c6a <_Bfree+0x3a>
 8005c5a:	69eb      	ldr	r3, [r5, #28]
 8005c5c:	6862      	ldr	r2, [r4, #4]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c64:	6021      	str	r1, [r4, #0]
 8005c66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	0800849e 	.word	0x0800849e
 8005c70:	0800851e 	.word	0x0800851e

08005c74 <__multadd>:
 8005c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	690d      	ldr	r5, [r1, #16]
 8005c7a:	4607      	mov	r7, r0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	461e      	mov	r6, r3
 8005c80:	f101 0c14 	add.w	ip, r1, #20
 8005c84:	2000      	movs	r0, #0
 8005c86:	f8dc 3000 	ldr.w	r3, [ip]
 8005c8a:	b299      	uxth	r1, r3
 8005c8c:	fb02 6101 	mla	r1, r2, r1, r6
 8005c90:	0c1e      	lsrs	r6, r3, #16
 8005c92:	0c0b      	lsrs	r3, r1, #16
 8005c94:	fb02 3306 	mla	r3, r2, r6, r3
 8005c98:	b289      	uxth	r1, r1
 8005c9a:	3001      	adds	r0, #1
 8005c9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005ca0:	4285      	cmp	r5, r0
 8005ca2:	f84c 1b04 	str.w	r1, [ip], #4
 8005ca6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005caa:	dcec      	bgt.n	8005c86 <__multadd+0x12>
 8005cac:	b30e      	cbz	r6, 8005cf2 <__multadd+0x7e>
 8005cae:	68a3      	ldr	r3, [r4, #8]
 8005cb0:	42ab      	cmp	r3, r5
 8005cb2:	dc19      	bgt.n	8005ce8 <__multadd+0x74>
 8005cb4:	6861      	ldr	r1, [r4, #4]
 8005cb6:	4638      	mov	r0, r7
 8005cb8:	3101      	adds	r1, #1
 8005cba:	f7ff ff79 	bl	8005bb0 <_Balloc>
 8005cbe:	4680      	mov	r8, r0
 8005cc0:	b928      	cbnz	r0, 8005cce <__multadd+0x5a>
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8005cf8 <__multadd+0x84>)
 8005cc6:	480d      	ldr	r0, [pc, #52]	@ (8005cfc <__multadd+0x88>)
 8005cc8:	21ba      	movs	r1, #186	@ 0xba
 8005cca:	f001 fcf5 	bl	80076b8 <__assert_func>
 8005cce:	6922      	ldr	r2, [r4, #16]
 8005cd0:	3202      	adds	r2, #2
 8005cd2:	f104 010c 	add.w	r1, r4, #12
 8005cd6:	0092      	lsls	r2, r2, #2
 8005cd8:	300c      	adds	r0, #12
 8005cda:	f001 fcd7 	bl	800768c <memcpy>
 8005cde:	4621      	mov	r1, r4
 8005ce0:	4638      	mov	r0, r7
 8005ce2:	f7ff ffa5 	bl	8005c30 <_Bfree>
 8005ce6:	4644      	mov	r4, r8
 8005ce8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005cec:	3501      	adds	r5, #1
 8005cee:	615e      	str	r6, [r3, #20]
 8005cf0:	6125      	str	r5, [r4, #16]
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cf8:	0800850d 	.word	0x0800850d
 8005cfc:	0800851e 	.word	0x0800851e

08005d00 <__s2b>:
 8005d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d04:	460c      	mov	r4, r1
 8005d06:	4615      	mov	r5, r2
 8005d08:	461f      	mov	r7, r3
 8005d0a:	2209      	movs	r2, #9
 8005d0c:	3308      	adds	r3, #8
 8005d0e:	4606      	mov	r6, r0
 8005d10:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d14:	2100      	movs	r1, #0
 8005d16:	2201      	movs	r2, #1
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	db09      	blt.n	8005d30 <__s2b+0x30>
 8005d1c:	4630      	mov	r0, r6
 8005d1e:	f7ff ff47 	bl	8005bb0 <_Balloc>
 8005d22:	b940      	cbnz	r0, 8005d36 <__s2b+0x36>
 8005d24:	4602      	mov	r2, r0
 8005d26:	4b19      	ldr	r3, [pc, #100]	@ (8005d8c <__s2b+0x8c>)
 8005d28:	4819      	ldr	r0, [pc, #100]	@ (8005d90 <__s2b+0x90>)
 8005d2a:	21d3      	movs	r1, #211	@ 0xd3
 8005d2c:	f001 fcc4 	bl	80076b8 <__assert_func>
 8005d30:	0052      	lsls	r2, r2, #1
 8005d32:	3101      	adds	r1, #1
 8005d34:	e7f0      	b.n	8005d18 <__s2b+0x18>
 8005d36:	9b08      	ldr	r3, [sp, #32]
 8005d38:	6143      	str	r3, [r0, #20]
 8005d3a:	2d09      	cmp	r5, #9
 8005d3c:	f04f 0301 	mov.w	r3, #1
 8005d40:	6103      	str	r3, [r0, #16]
 8005d42:	dd16      	ble.n	8005d72 <__s2b+0x72>
 8005d44:	f104 0909 	add.w	r9, r4, #9
 8005d48:	46c8      	mov	r8, r9
 8005d4a:	442c      	add	r4, r5
 8005d4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005d50:	4601      	mov	r1, r0
 8005d52:	3b30      	subs	r3, #48	@ 0x30
 8005d54:	220a      	movs	r2, #10
 8005d56:	4630      	mov	r0, r6
 8005d58:	f7ff ff8c 	bl	8005c74 <__multadd>
 8005d5c:	45a0      	cmp	r8, r4
 8005d5e:	d1f5      	bne.n	8005d4c <__s2b+0x4c>
 8005d60:	f1a5 0408 	sub.w	r4, r5, #8
 8005d64:	444c      	add	r4, r9
 8005d66:	1b2d      	subs	r5, r5, r4
 8005d68:	1963      	adds	r3, r4, r5
 8005d6a:	42bb      	cmp	r3, r7
 8005d6c:	db04      	blt.n	8005d78 <__s2b+0x78>
 8005d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d72:	340a      	adds	r4, #10
 8005d74:	2509      	movs	r5, #9
 8005d76:	e7f6      	b.n	8005d66 <__s2b+0x66>
 8005d78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005d7c:	4601      	mov	r1, r0
 8005d7e:	3b30      	subs	r3, #48	@ 0x30
 8005d80:	220a      	movs	r2, #10
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff ff76 	bl	8005c74 <__multadd>
 8005d88:	e7ee      	b.n	8005d68 <__s2b+0x68>
 8005d8a:	bf00      	nop
 8005d8c:	0800850d 	.word	0x0800850d
 8005d90:	0800851e 	.word	0x0800851e

08005d94 <__hi0bits>:
 8005d94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005d98:	4603      	mov	r3, r0
 8005d9a:	bf36      	itet	cc
 8005d9c:	0403      	lslcc	r3, r0, #16
 8005d9e:	2000      	movcs	r0, #0
 8005da0:	2010      	movcc	r0, #16
 8005da2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da6:	bf3c      	itt	cc
 8005da8:	021b      	lslcc	r3, r3, #8
 8005daa:	3008      	addcc	r0, #8
 8005dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005db0:	bf3c      	itt	cc
 8005db2:	011b      	lslcc	r3, r3, #4
 8005db4:	3004      	addcc	r0, #4
 8005db6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dba:	bf3c      	itt	cc
 8005dbc:	009b      	lslcc	r3, r3, #2
 8005dbe:	3002      	addcc	r0, #2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	db05      	blt.n	8005dd0 <__hi0bits+0x3c>
 8005dc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005dc8:	f100 0001 	add.w	r0, r0, #1
 8005dcc:	bf08      	it	eq
 8005dce:	2020      	moveq	r0, #32
 8005dd0:	4770      	bx	lr

08005dd2 <__lo0bits>:
 8005dd2:	6803      	ldr	r3, [r0, #0]
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	f013 0007 	ands.w	r0, r3, #7
 8005dda:	d00b      	beq.n	8005df4 <__lo0bits+0x22>
 8005ddc:	07d9      	lsls	r1, r3, #31
 8005dde:	d421      	bmi.n	8005e24 <__lo0bits+0x52>
 8005de0:	0798      	lsls	r0, r3, #30
 8005de2:	bf49      	itett	mi
 8005de4:	085b      	lsrmi	r3, r3, #1
 8005de6:	089b      	lsrpl	r3, r3, #2
 8005de8:	2001      	movmi	r0, #1
 8005dea:	6013      	strmi	r3, [r2, #0]
 8005dec:	bf5c      	itt	pl
 8005dee:	6013      	strpl	r3, [r2, #0]
 8005df0:	2002      	movpl	r0, #2
 8005df2:	4770      	bx	lr
 8005df4:	b299      	uxth	r1, r3
 8005df6:	b909      	cbnz	r1, 8005dfc <__lo0bits+0x2a>
 8005df8:	0c1b      	lsrs	r3, r3, #16
 8005dfa:	2010      	movs	r0, #16
 8005dfc:	b2d9      	uxtb	r1, r3
 8005dfe:	b909      	cbnz	r1, 8005e04 <__lo0bits+0x32>
 8005e00:	3008      	adds	r0, #8
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	0719      	lsls	r1, r3, #28
 8005e06:	bf04      	itt	eq
 8005e08:	091b      	lsreq	r3, r3, #4
 8005e0a:	3004      	addeq	r0, #4
 8005e0c:	0799      	lsls	r1, r3, #30
 8005e0e:	bf04      	itt	eq
 8005e10:	089b      	lsreq	r3, r3, #2
 8005e12:	3002      	addeq	r0, #2
 8005e14:	07d9      	lsls	r1, r3, #31
 8005e16:	d403      	bmi.n	8005e20 <__lo0bits+0x4e>
 8005e18:	085b      	lsrs	r3, r3, #1
 8005e1a:	f100 0001 	add.w	r0, r0, #1
 8005e1e:	d003      	beq.n	8005e28 <__lo0bits+0x56>
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	4770      	bx	lr
 8005e24:	2000      	movs	r0, #0
 8005e26:	4770      	bx	lr
 8005e28:	2020      	movs	r0, #32
 8005e2a:	4770      	bx	lr

08005e2c <__i2b>:
 8005e2c:	b510      	push	{r4, lr}
 8005e2e:	460c      	mov	r4, r1
 8005e30:	2101      	movs	r1, #1
 8005e32:	f7ff febd 	bl	8005bb0 <_Balloc>
 8005e36:	4602      	mov	r2, r0
 8005e38:	b928      	cbnz	r0, 8005e46 <__i2b+0x1a>
 8005e3a:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <__i2b+0x24>)
 8005e3c:	4805      	ldr	r0, [pc, #20]	@ (8005e54 <__i2b+0x28>)
 8005e3e:	f240 1145 	movw	r1, #325	@ 0x145
 8005e42:	f001 fc39 	bl	80076b8 <__assert_func>
 8005e46:	2301      	movs	r3, #1
 8005e48:	6144      	str	r4, [r0, #20]
 8005e4a:	6103      	str	r3, [r0, #16]
 8005e4c:	bd10      	pop	{r4, pc}
 8005e4e:	bf00      	nop
 8005e50:	0800850d 	.word	0x0800850d
 8005e54:	0800851e 	.word	0x0800851e

08005e58 <__multiply>:
 8005e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e5c:	4617      	mov	r7, r2
 8005e5e:	690a      	ldr	r2, [r1, #16]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	bfa8      	it	ge
 8005e66:	463b      	movge	r3, r7
 8005e68:	4689      	mov	r9, r1
 8005e6a:	bfa4      	itt	ge
 8005e6c:	460f      	movge	r7, r1
 8005e6e:	4699      	movge	r9, r3
 8005e70:	693d      	ldr	r5, [r7, #16]
 8005e72:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	6879      	ldr	r1, [r7, #4]
 8005e7a:	eb05 060a 	add.w	r6, r5, sl
 8005e7e:	42b3      	cmp	r3, r6
 8005e80:	b085      	sub	sp, #20
 8005e82:	bfb8      	it	lt
 8005e84:	3101      	addlt	r1, #1
 8005e86:	f7ff fe93 	bl	8005bb0 <_Balloc>
 8005e8a:	b930      	cbnz	r0, 8005e9a <__multiply+0x42>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	4b41      	ldr	r3, [pc, #260]	@ (8005f94 <__multiply+0x13c>)
 8005e90:	4841      	ldr	r0, [pc, #260]	@ (8005f98 <__multiply+0x140>)
 8005e92:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005e96:	f001 fc0f 	bl	80076b8 <__assert_func>
 8005e9a:	f100 0414 	add.w	r4, r0, #20
 8005e9e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	4573      	cmp	r3, lr
 8005ea8:	d320      	bcc.n	8005eec <__multiply+0x94>
 8005eaa:	f107 0814 	add.w	r8, r7, #20
 8005eae:	f109 0114 	add.w	r1, r9, #20
 8005eb2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005eb6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005eba:	9302      	str	r3, [sp, #8]
 8005ebc:	1beb      	subs	r3, r5, r7
 8005ebe:	3b15      	subs	r3, #21
 8005ec0:	f023 0303 	bic.w	r3, r3, #3
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	3715      	adds	r7, #21
 8005ec8:	42bd      	cmp	r5, r7
 8005eca:	bf38      	it	cc
 8005ecc:	2304      	movcc	r3, #4
 8005ece:	9301      	str	r3, [sp, #4]
 8005ed0:	9b02      	ldr	r3, [sp, #8]
 8005ed2:	9103      	str	r1, [sp, #12]
 8005ed4:	428b      	cmp	r3, r1
 8005ed6:	d80c      	bhi.n	8005ef2 <__multiply+0x9a>
 8005ed8:	2e00      	cmp	r6, #0
 8005eda:	dd03      	ble.n	8005ee4 <__multiply+0x8c>
 8005edc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d055      	beq.n	8005f90 <__multiply+0x138>
 8005ee4:	6106      	str	r6, [r0, #16]
 8005ee6:	b005      	add	sp, #20
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	f843 2b04 	str.w	r2, [r3], #4
 8005ef0:	e7d9      	b.n	8005ea6 <__multiply+0x4e>
 8005ef2:	f8b1 a000 	ldrh.w	sl, [r1]
 8005ef6:	f1ba 0f00 	cmp.w	sl, #0
 8005efa:	d01f      	beq.n	8005f3c <__multiply+0xe4>
 8005efc:	46c4      	mov	ip, r8
 8005efe:	46a1      	mov	r9, r4
 8005f00:	2700      	movs	r7, #0
 8005f02:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005f06:	f8d9 3000 	ldr.w	r3, [r9]
 8005f0a:	fa1f fb82 	uxth.w	fp, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	fb0a 330b 	mla	r3, sl, fp, r3
 8005f14:	443b      	add	r3, r7
 8005f16:	f8d9 7000 	ldr.w	r7, [r9]
 8005f1a:	0c12      	lsrs	r2, r2, #16
 8005f1c:	0c3f      	lsrs	r7, r7, #16
 8005f1e:	fb0a 7202 	mla	r2, sl, r2, r7
 8005f22:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8005f26:	b29b      	uxth	r3, r3
 8005f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f2c:	4565      	cmp	r5, ip
 8005f2e:	f849 3b04 	str.w	r3, [r9], #4
 8005f32:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8005f36:	d8e4      	bhi.n	8005f02 <__multiply+0xaa>
 8005f38:	9b01      	ldr	r3, [sp, #4]
 8005f3a:	50e7      	str	r7, [r4, r3]
 8005f3c:	9b03      	ldr	r3, [sp, #12]
 8005f3e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8005f42:	3104      	adds	r1, #4
 8005f44:	f1b9 0f00 	cmp.w	r9, #0
 8005f48:	d020      	beq.n	8005f8c <__multiply+0x134>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	4647      	mov	r7, r8
 8005f4e:	46a4      	mov	ip, r4
 8005f50:	f04f 0a00 	mov.w	sl, #0
 8005f54:	f8b7 b000 	ldrh.w	fp, [r7]
 8005f58:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8005f5c:	fb09 220b 	mla	r2, r9, fp, r2
 8005f60:	4452      	add	r2, sl
 8005f62:	b29b      	uxth	r3, r3
 8005f64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f68:	f84c 3b04 	str.w	r3, [ip], #4
 8005f6c:	f857 3b04 	ldr.w	r3, [r7], #4
 8005f70:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f74:	f8bc 3000 	ldrh.w	r3, [ip]
 8005f78:	fb09 330a 	mla	r3, r9, sl, r3
 8005f7c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005f80:	42bd      	cmp	r5, r7
 8005f82:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005f86:	d8e5      	bhi.n	8005f54 <__multiply+0xfc>
 8005f88:	9a01      	ldr	r2, [sp, #4]
 8005f8a:	50a3      	str	r3, [r4, r2]
 8005f8c:	3404      	adds	r4, #4
 8005f8e:	e79f      	b.n	8005ed0 <__multiply+0x78>
 8005f90:	3e01      	subs	r6, #1
 8005f92:	e7a1      	b.n	8005ed8 <__multiply+0x80>
 8005f94:	0800850d 	.word	0x0800850d
 8005f98:	0800851e 	.word	0x0800851e

08005f9c <__pow5mult>:
 8005f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fa0:	4615      	mov	r5, r2
 8005fa2:	f012 0203 	ands.w	r2, r2, #3
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	460e      	mov	r6, r1
 8005faa:	d007      	beq.n	8005fbc <__pow5mult+0x20>
 8005fac:	4c25      	ldr	r4, [pc, #148]	@ (8006044 <__pow5mult+0xa8>)
 8005fae:	3a01      	subs	r2, #1
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005fb6:	f7ff fe5d 	bl	8005c74 <__multadd>
 8005fba:	4606      	mov	r6, r0
 8005fbc:	10ad      	asrs	r5, r5, #2
 8005fbe:	d03d      	beq.n	800603c <__pow5mult+0xa0>
 8005fc0:	69fc      	ldr	r4, [r7, #28]
 8005fc2:	b97c      	cbnz	r4, 8005fe4 <__pow5mult+0x48>
 8005fc4:	2010      	movs	r0, #16
 8005fc6:	f7ff fd3d 	bl	8005a44 <malloc>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	61f8      	str	r0, [r7, #28]
 8005fce:	b928      	cbnz	r0, 8005fdc <__pow5mult+0x40>
 8005fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8006048 <__pow5mult+0xac>)
 8005fd2:	481e      	ldr	r0, [pc, #120]	@ (800604c <__pow5mult+0xb0>)
 8005fd4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8005fd8:	f001 fb6e 	bl	80076b8 <__assert_func>
 8005fdc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005fe0:	6004      	str	r4, [r0, #0]
 8005fe2:	60c4      	str	r4, [r0, #12]
 8005fe4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8005fe8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005fec:	b94c      	cbnz	r4, 8006002 <__pow5mult+0x66>
 8005fee:	f240 2171 	movw	r1, #625	@ 0x271
 8005ff2:	4638      	mov	r0, r7
 8005ff4:	f7ff ff1a 	bl	8005e2c <__i2b>
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ffe:	4604      	mov	r4, r0
 8006000:	6003      	str	r3, [r0, #0]
 8006002:	f04f 0900 	mov.w	r9, #0
 8006006:	07eb      	lsls	r3, r5, #31
 8006008:	d50a      	bpl.n	8006020 <__pow5mult+0x84>
 800600a:	4631      	mov	r1, r6
 800600c:	4622      	mov	r2, r4
 800600e:	4638      	mov	r0, r7
 8006010:	f7ff ff22 	bl	8005e58 <__multiply>
 8006014:	4631      	mov	r1, r6
 8006016:	4680      	mov	r8, r0
 8006018:	4638      	mov	r0, r7
 800601a:	f7ff fe09 	bl	8005c30 <_Bfree>
 800601e:	4646      	mov	r6, r8
 8006020:	106d      	asrs	r5, r5, #1
 8006022:	d00b      	beq.n	800603c <__pow5mult+0xa0>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	b938      	cbnz	r0, 8006038 <__pow5mult+0x9c>
 8006028:	4622      	mov	r2, r4
 800602a:	4621      	mov	r1, r4
 800602c:	4638      	mov	r0, r7
 800602e:	f7ff ff13 	bl	8005e58 <__multiply>
 8006032:	6020      	str	r0, [r4, #0]
 8006034:	f8c0 9000 	str.w	r9, [r0]
 8006038:	4604      	mov	r4, r0
 800603a:	e7e4      	b.n	8006006 <__pow5mult+0x6a>
 800603c:	4630      	mov	r0, r6
 800603e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006042:	bf00      	nop
 8006044:	08008630 	.word	0x08008630
 8006048:	0800849e 	.word	0x0800849e
 800604c:	0800851e 	.word	0x0800851e

08006050 <__lshift>:
 8006050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006054:	460c      	mov	r4, r1
 8006056:	6849      	ldr	r1, [r1, #4]
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800605e:	68a3      	ldr	r3, [r4, #8]
 8006060:	4607      	mov	r7, r0
 8006062:	4691      	mov	r9, r2
 8006064:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006068:	f108 0601 	add.w	r6, r8, #1
 800606c:	42b3      	cmp	r3, r6
 800606e:	db0b      	blt.n	8006088 <__lshift+0x38>
 8006070:	4638      	mov	r0, r7
 8006072:	f7ff fd9d 	bl	8005bb0 <_Balloc>
 8006076:	4605      	mov	r5, r0
 8006078:	b948      	cbnz	r0, 800608e <__lshift+0x3e>
 800607a:	4602      	mov	r2, r0
 800607c:	4b28      	ldr	r3, [pc, #160]	@ (8006120 <__lshift+0xd0>)
 800607e:	4829      	ldr	r0, [pc, #164]	@ (8006124 <__lshift+0xd4>)
 8006080:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006084:	f001 fb18 	bl	80076b8 <__assert_func>
 8006088:	3101      	adds	r1, #1
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	e7ee      	b.n	800606c <__lshift+0x1c>
 800608e:	2300      	movs	r3, #0
 8006090:	f100 0114 	add.w	r1, r0, #20
 8006094:	f100 0210 	add.w	r2, r0, #16
 8006098:	4618      	mov	r0, r3
 800609a:	4553      	cmp	r3, sl
 800609c:	db33      	blt.n	8006106 <__lshift+0xb6>
 800609e:	6920      	ldr	r0, [r4, #16]
 80060a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80060a4:	f104 0314 	add.w	r3, r4, #20
 80060a8:	f019 091f 	ands.w	r9, r9, #31
 80060ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80060b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80060b4:	d02b      	beq.n	800610e <__lshift+0xbe>
 80060b6:	f1c9 0e20 	rsb	lr, r9, #32
 80060ba:	468a      	mov	sl, r1
 80060bc:	2200      	movs	r2, #0
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	fa00 f009 	lsl.w	r0, r0, r9
 80060c4:	4310      	orrs	r0, r2
 80060c6:	f84a 0b04 	str.w	r0, [sl], #4
 80060ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80060ce:	459c      	cmp	ip, r3
 80060d0:	fa22 f20e 	lsr.w	r2, r2, lr
 80060d4:	d8f3      	bhi.n	80060be <__lshift+0x6e>
 80060d6:	ebac 0304 	sub.w	r3, ip, r4
 80060da:	3b15      	subs	r3, #21
 80060dc:	f023 0303 	bic.w	r3, r3, #3
 80060e0:	3304      	adds	r3, #4
 80060e2:	f104 0015 	add.w	r0, r4, #21
 80060e6:	4560      	cmp	r0, ip
 80060e8:	bf88      	it	hi
 80060ea:	2304      	movhi	r3, #4
 80060ec:	50ca      	str	r2, [r1, r3]
 80060ee:	b10a      	cbz	r2, 80060f4 <__lshift+0xa4>
 80060f0:	f108 0602 	add.w	r6, r8, #2
 80060f4:	3e01      	subs	r6, #1
 80060f6:	4638      	mov	r0, r7
 80060f8:	612e      	str	r6, [r5, #16]
 80060fa:	4621      	mov	r1, r4
 80060fc:	f7ff fd98 	bl	8005c30 <_Bfree>
 8006100:	4628      	mov	r0, r5
 8006102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006106:	f842 0f04 	str.w	r0, [r2, #4]!
 800610a:	3301      	adds	r3, #1
 800610c:	e7c5      	b.n	800609a <__lshift+0x4a>
 800610e:	3904      	subs	r1, #4
 8006110:	f853 2b04 	ldr.w	r2, [r3], #4
 8006114:	f841 2f04 	str.w	r2, [r1, #4]!
 8006118:	459c      	cmp	ip, r3
 800611a:	d8f9      	bhi.n	8006110 <__lshift+0xc0>
 800611c:	e7ea      	b.n	80060f4 <__lshift+0xa4>
 800611e:	bf00      	nop
 8006120:	0800850d 	.word	0x0800850d
 8006124:	0800851e 	.word	0x0800851e

08006128 <__mcmp>:
 8006128:	690a      	ldr	r2, [r1, #16]
 800612a:	4603      	mov	r3, r0
 800612c:	6900      	ldr	r0, [r0, #16]
 800612e:	1a80      	subs	r0, r0, r2
 8006130:	b530      	push	{r4, r5, lr}
 8006132:	d10e      	bne.n	8006152 <__mcmp+0x2a>
 8006134:	3314      	adds	r3, #20
 8006136:	3114      	adds	r1, #20
 8006138:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800613c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006140:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006144:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006148:	4295      	cmp	r5, r2
 800614a:	d003      	beq.n	8006154 <__mcmp+0x2c>
 800614c:	d205      	bcs.n	800615a <__mcmp+0x32>
 800614e:	f04f 30ff 	mov.w	r0, #4294967295
 8006152:	bd30      	pop	{r4, r5, pc}
 8006154:	42a3      	cmp	r3, r4
 8006156:	d3f3      	bcc.n	8006140 <__mcmp+0x18>
 8006158:	e7fb      	b.n	8006152 <__mcmp+0x2a>
 800615a:	2001      	movs	r0, #1
 800615c:	e7f9      	b.n	8006152 <__mcmp+0x2a>
	...

08006160 <__mdiff>:
 8006160:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006164:	4689      	mov	r9, r1
 8006166:	4606      	mov	r6, r0
 8006168:	4611      	mov	r1, r2
 800616a:	4648      	mov	r0, r9
 800616c:	4614      	mov	r4, r2
 800616e:	f7ff ffdb 	bl	8006128 <__mcmp>
 8006172:	1e05      	subs	r5, r0, #0
 8006174:	d112      	bne.n	800619c <__mdiff+0x3c>
 8006176:	4629      	mov	r1, r5
 8006178:	4630      	mov	r0, r6
 800617a:	f7ff fd19 	bl	8005bb0 <_Balloc>
 800617e:	4602      	mov	r2, r0
 8006180:	b928      	cbnz	r0, 800618e <__mdiff+0x2e>
 8006182:	4b3f      	ldr	r3, [pc, #252]	@ (8006280 <__mdiff+0x120>)
 8006184:	f240 2137 	movw	r1, #567	@ 0x237
 8006188:	483e      	ldr	r0, [pc, #248]	@ (8006284 <__mdiff+0x124>)
 800618a:	f001 fa95 	bl	80076b8 <__assert_func>
 800618e:	2301      	movs	r3, #1
 8006190:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006194:	4610      	mov	r0, r2
 8006196:	b003      	add	sp, #12
 8006198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800619c:	bfbc      	itt	lt
 800619e:	464b      	movlt	r3, r9
 80061a0:	46a1      	movlt	r9, r4
 80061a2:	4630      	mov	r0, r6
 80061a4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80061a8:	bfba      	itte	lt
 80061aa:	461c      	movlt	r4, r3
 80061ac:	2501      	movlt	r5, #1
 80061ae:	2500      	movge	r5, #0
 80061b0:	f7ff fcfe 	bl	8005bb0 <_Balloc>
 80061b4:	4602      	mov	r2, r0
 80061b6:	b918      	cbnz	r0, 80061c0 <__mdiff+0x60>
 80061b8:	4b31      	ldr	r3, [pc, #196]	@ (8006280 <__mdiff+0x120>)
 80061ba:	f240 2145 	movw	r1, #581	@ 0x245
 80061be:	e7e3      	b.n	8006188 <__mdiff+0x28>
 80061c0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80061c4:	6926      	ldr	r6, [r4, #16]
 80061c6:	60c5      	str	r5, [r0, #12]
 80061c8:	f109 0310 	add.w	r3, r9, #16
 80061cc:	f109 0514 	add.w	r5, r9, #20
 80061d0:	f104 0e14 	add.w	lr, r4, #20
 80061d4:	f100 0b14 	add.w	fp, r0, #20
 80061d8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80061dc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	46d9      	mov	r9, fp
 80061e4:	f04f 0c00 	mov.w	ip, #0
 80061e8:	9b01      	ldr	r3, [sp, #4]
 80061ea:	f85e 0b04 	ldr.w	r0, [lr], #4
 80061ee:	f853 af04 	ldr.w	sl, [r3, #4]!
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	fa1f f38a 	uxth.w	r3, sl
 80061f8:	4619      	mov	r1, r3
 80061fa:	b283      	uxth	r3, r0
 80061fc:	1acb      	subs	r3, r1, r3
 80061fe:	0c00      	lsrs	r0, r0, #16
 8006200:	4463      	add	r3, ip
 8006202:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006206:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006210:	4576      	cmp	r6, lr
 8006212:	f849 3b04 	str.w	r3, [r9], #4
 8006216:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800621a:	d8e5      	bhi.n	80061e8 <__mdiff+0x88>
 800621c:	1b33      	subs	r3, r6, r4
 800621e:	3b15      	subs	r3, #21
 8006220:	f023 0303 	bic.w	r3, r3, #3
 8006224:	3415      	adds	r4, #21
 8006226:	3304      	adds	r3, #4
 8006228:	42a6      	cmp	r6, r4
 800622a:	bf38      	it	cc
 800622c:	2304      	movcc	r3, #4
 800622e:	441d      	add	r5, r3
 8006230:	445b      	add	r3, fp
 8006232:	461e      	mov	r6, r3
 8006234:	462c      	mov	r4, r5
 8006236:	4544      	cmp	r4, r8
 8006238:	d30e      	bcc.n	8006258 <__mdiff+0xf8>
 800623a:	f108 0103 	add.w	r1, r8, #3
 800623e:	1b49      	subs	r1, r1, r5
 8006240:	f021 0103 	bic.w	r1, r1, #3
 8006244:	3d03      	subs	r5, #3
 8006246:	45a8      	cmp	r8, r5
 8006248:	bf38      	it	cc
 800624a:	2100      	movcc	r1, #0
 800624c:	440b      	add	r3, r1
 800624e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006252:	b191      	cbz	r1, 800627a <__mdiff+0x11a>
 8006254:	6117      	str	r7, [r2, #16]
 8006256:	e79d      	b.n	8006194 <__mdiff+0x34>
 8006258:	f854 1b04 	ldr.w	r1, [r4], #4
 800625c:	46e6      	mov	lr, ip
 800625e:	0c08      	lsrs	r0, r1, #16
 8006260:	fa1c fc81 	uxtah	ip, ip, r1
 8006264:	4471      	add	r1, lr
 8006266:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800626a:	b289      	uxth	r1, r1
 800626c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006270:	f846 1b04 	str.w	r1, [r6], #4
 8006274:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006278:	e7dd      	b.n	8006236 <__mdiff+0xd6>
 800627a:	3f01      	subs	r7, #1
 800627c:	e7e7      	b.n	800624e <__mdiff+0xee>
 800627e:	bf00      	nop
 8006280:	0800850d 	.word	0x0800850d
 8006284:	0800851e 	.word	0x0800851e

08006288 <__ulp>:
 8006288:	b082      	sub	sp, #8
 800628a:	ed8d 0b00 	vstr	d0, [sp]
 800628e:	9a01      	ldr	r2, [sp, #4]
 8006290:	4b0f      	ldr	r3, [pc, #60]	@ (80062d0 <__ulp+0x48>)
 8006292:	4013      	ands	r3, r2
 8006294:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006298:	2b00      	cmp	r3, #0
 800629a:	dc08      	bgt.n	80062ae <__ulp+0x26>
 800629c:	425b      	negs	r3, r3
 800629e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80062a2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80062a6:	da04      	bge.n	80062b2 <__ulp+0x2a>
 80062a8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80062ac:	4113      	asrs	r3, r2
 80062ae:	2200      	movs	r2, #0
 80062b0:	e008      	b.n	80062c4 <__ulp+0x3c>
 80062b2:	f1a2 0314 	sub.w	r3, r2, #20
 80062b6:	2b1e      	cmp	r3, #30
 80062b8:	bfda      	itte	le
 80062ba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80062be:	40da      	lsrle	r2, r3
 80062c0:	2201      	movgt	r2, #1
 80062c2:	2300      	movs	r3, #0
 80062c4:	4619      	mov	r1, r3
 80062c6:	4610      	mov	r0, r2
 80062c8:	ec41 0b10 	vmov	d0, r0, r1
 80062cc:	b002      	add	sp, #8
 80062ce:	4770      	bx	lr
 80062d0:	7ff00000 	.word	0x7ff00000

080062d4 <__b2d>:
 80062d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d8:	6906      	ldr	r6, [r0, #16]
 80062da:	f100 0814 	add.w	r8, r0, #20
 80062de:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80062e2:	1f37      	subs	r7, r6, #4
 80062e4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80062e8:	4610      	mov	r0, r2
 80062ea:	f7ff fd53 	bl	8005d94 <__hi0bits>
 80062ee:	f1c0 0320 	rsb	r3, r0, #32
 80062f2:	280a      	cmp	r0, #10
 80062f4:	600b      	str	r3, [r1, #0]
 80062f6:	491b      	ldr	r1, [pc, #108]	@ (8006364 <__b2d+0x90>)
 80062f8:	dc15      	bgt.n	8006326 <__b2d+0x52>
 80062fa:	f1c0 0c0b 	rsb	ip, r0, #11
 80062fe:	fa22 f30c 	lsr.w	r3, r2, ip
 8006302:	45b8      	cmp	r8, r7
 8006304:	ea43 0501 	orr.w	r5, r3, r1
 8006308:	bf34      	ite	cc
 800630a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800630e:	2300      	movcs	r3, #0
 8006310:	3015      	adds	r0, #21
 8006312:	fa02 f000 	lsl.w	r0, r2, r0
 8006316:	fa23 f30c 	lsr.w	r3, r3, ip
 800631a:	4303      	orrs	r3, r0
 800631c:	461c      	mov	r4, r3
 800631e:	ec45 4b10 	vmov	d0, r4, r5
 8006322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006326:	45b8      	cmp	r8, r7
 8006328:	bf3a      	itte	cc
 800632a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800632e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006332:	2300      	movcs	r3, #0
 8006334:	380b      	subs	r0, #11
 8006336:	d012      	beq.n	800635e <__b2d+0x8a>
 8006338:	f1c0 0120 	rsb	r1, r0, #32
 800633c:	fa23 f401 	lsr.w	r4, r3, r1
 8006340:	4082      	lsls	r2, r0
 8006342:	4322      	orrs	r2, r4
 8006344:	4547      	cmp	r7, r8
 8006346:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800634a:	bf8c      	ite	hi
 800634c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006350:	2200      	movls	r2, #0
 8006352:	4083      	lsls	r3, r0
 8006354:	40ca      	lsrs	r2, r1
 8006356:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800635a:	4313      	orrs	r3, r2
 800635c:	e7de      	b.n	800631c <__b2d+0x48>
 800635e:	ea42 0501 	orr.w	r5, r2, r1
 8006362:	e7db      	b.n	800631c <__b2d+0x48>
 8006364:	3ff00000 	.word	0x3ff00000

08006368 <__d2b>:
 8006368:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800636c:	460f      	mov	r7, r1
 800636e:	2101      	movs	r1, #1
 8006370:	ec59 8b10 	vmov	r8, r9, d0
 8006374:	4616      	mov	r6, r2
 8006376:	f7ff fc1b 	bl	8005bb0 <_Balloc>
 800637a:	4604      	mov	r4, r0
 800637c:	b930      	cbnz	r0, 800638c <__d2b+0x24>
 800637e:	4602      	mov	r2, r0
 8006380:	4b23      	ldr	r3, [pc, #140]	@ (8006410 <__d2b+0xa8>)
 8006382:	4824      	ldr	r0, [pc, #144]	@ (8006414 <__d2b+0xac>)
 8006384:	f240 310f 	movw	r1, #783	@ 0x30f
 8006388:	f001 f996 	bl	80076b8 <__assert_func>
 800638c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006390:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006394:	b10d      	cbz	r5, 800639a <__d2b+0x32>
 8006396:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800639a:	9301      	str	r3, [sp, #4]
 800639c:	f1b8 0300 	subs.w	r3, r8, #0
 80063a0:	d023      	beq.n	80063ea <__d2b+0x82>
 80063a2:	4668      	mov	r0, sp
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	f7ff fd14 	bl	8005dd2 <__lo0bits>
 80063aa:	e9dd 1200 	ldrd	r1, r2, [sp]
 80063ae:	b1d0      	cbz	r0, 80063e6 <__d2b+0x7e>
 80063b0:	f1c0 0320 	rsb	r3, r0, #32
 80063b4:	fa02 f303 	lsl.w	r3, r2, r3
 80063b8:	430b      	orrs	r3, r1
 80063ba:	40c2      	lsrs	r2, r0
 80063bc:	6163      	str	r3, [r4, #20]
 80063be:	9201      	str	r2, [sp, #4]
 80063c0:	9b01      	ldr	r3, [sp, #4]
 80063c2:	61a3      	str	r3, [r4, #24]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	bf0c      	ite	eq
 80063c8:	2201      	moveq	r2, #1
 80063ca:	2202      	movne	r2, #2
 80063cc:	6122      	str	r2, [r4, #16]
 80063ce:	b1a5      	cbz	r5, 80063fa <__d2b+0x92>
 80063d0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80063d4:	4405      	add	r5, r0
 80063d6:	603d      	str	r5, [r7, #0]
 80063d8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80063dc:	6030      	str	r0, [r6, #0]
 80063de:	4620      	mov	r0, r4
 80063e0:	b003      	add	sp, #12
 80063e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063e6:	6161      	str	r1, [r4, #20]
 80063e8:	e7ea      	b.n	80063c0 <__d2b+0x58>
 80063ea:	a801      	add	r0, sp, #4
 80063ec:	f7ff fcf1 	bl	8005dd2 <__lo0bits>
 80063f0:	9b01      	ldr	r3, [sp, #4]
 80063f2:	6163      	str	r3, [r4, #20]
 80063f4:	3020      	adds	r0, #32
 80063f6:	2201      	movs	r2, #1
 80063f8:	e7e8      	b.n	80063cc <__d2b+0x64>
 80063fa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80063fe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006402:	6038      	str	r0, [r7, #0]
 8006404:	6918      	ldr	r0, [r3, #16]
 8006406:	f7ff fcc5 	bl	8005d94 <__hi0bits>
 800640a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800640e:	e7e5      	b.n	80063dc <__d2b+0x74>
 8006410:	0800850d 	.word	0x0800850d
 8006414:	0800851e 	.word	0x0800851e

08006418 <__ratio>:
 8006418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800641c:	b085      	sub	sp, #20
 800641e:	e9cd 1000 	strd	r1, r0, [sp]
 8006422:	a902      	add	r1, sp, #8
 8006424:	f7ff ff56 	bl	80062d4 <__b2d>
 8006428:	9800      	ldr	r0, [sp, #0]
 800642a:	a903      	add	r1, sp, #12
 800642c:	ec55 4b10 	vmov	r4, r5, d0
 8006430:	f7ff ff50 	bl	80062d4 <__b2d>
 8006434:	9b01      	ldr	r3, [sp, #4]
 8006436:	6919      	ldr	r1, [r3, #16]
 8006438:	9b00      	ldr	r3, [sp, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	1ac9      	subs	r1, r1, r3
 800643e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006442:	1a9b      	subs	r3, r3, r2
 8006444:	ec5b ab10 	vmov	sl, fp, d0
 8006448:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800644c:	2b00      	cmp	r3, #0
 800644e:	bfce      	itee	gt
 8006450:	462a      	movgt	r2, r5
 8006452:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006456:	465a      	movle	r2, fp
 8006458:	462f      	mov	r7, r5
 800645a:	46d9      	mov	r9, fp
 800645c:	bfcc      	ite	gt
 800645e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006462:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006466:	464b      	mov	r3, r9
 8006468:	4652      	mov	r2, sl
 800646a:	4620      	mov	r0, r4
 800646c:	4639      	mov	r1, r7
 800646e:	f7fa fa1d 	bl	80008ac <__aeabi_ddiv>
 8006472:	ec41 0b10 	vmov	d0, r0, r1
 8006476:	b005      	add	sp, #20
 8006478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800647c <__copybits>:
 800647c:	3901      	subs	r1, #1
 800647e:	b570      	push	{r4, r5, r6, lr}
 8006480:	1149      	asrs	r1, r1, #5
 8006482:	6914      	ldr	r4, [r2, #16]
 8006484:	3101      	adds	r1, #1
 8006486:	f102 0314 	add.w	r3, r2, #20
 800648a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800648e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006492:	1f05      	subs	r5, r0, #4
 8006494:	42a3      	cmp	r3, r4
 8006496:	d30c      	bcc.n	80064b2 <__copybits+0x36>
 8006498:	1aa3      	subs	r3, r4, r2
 800649a:	3b11      	subs	r3, #17
 800649c:	f023 0303 	bic.w	r3, r3, #3
 80064a0:	3211      	adds	r2, #17
 80064a2:	42a2      	cmp	r2, r4
 80064a4:	bf88      	it	hi
 80064a6:	2300      	movhi	r3, #0
 80064a8:	4418      	add	r0, r3
 80064aa:	2300      	movs	r3, #0
 80064ac:	4288      	cmp	r0, r1
 80064ae:	d305      	bcc.n	80064bc <__copybits+0x40>
 80064b0:	bd70      	pop	{r4, r5, r6, pc}
 80064b2:	f853 6b04 	ldr.w	r6, [r3], #4
 80064b6:	f845 6f04 	str.w	r6, [r5, #4]!
 80064ba:	e7eb      	b.n	8006494 <__copybits+0x18>
 80064bc:	f840 3b04 	str.w	r3, [r0], #4
 80064c0:	e7f4      	b.n	80064ac <__copybits+0x30>

080064c2 <__any_on>:
 80064c2:	f100 0214 	add.w	r2, r0, #20
 80064c6:	6900      	ldr	r0, [r0, #16]
 80064c8:	114b      	asrs	r3, r1, #5
 80064ca:	4298      	cmp	r0, r3
 80064cc:	b510      	push	{r4, lr}
 80064ce:	db11      	blt.n	80064f4 <__any_on+0x32>
 80064d0:	dd0a      	ble.n	80064e8 <__any_on+0x26>
 80064d2:	f011 011f 	ands.w	r1, r1, #31
 80064d6:	d007      	beq.n	80064e8 <__any_on+0x26>
 80064d8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80064dc:	fa24 f001 	lsr.w	r0, r4, r1
 80064e0:	fa00 f101 	lsl.w	r1, r0, r1
 80064e4:	428c      	cmp	r4, r1
 80064e6:	d10b      	bne.n	8006500 <__any_on+0x3e>
 80064e8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d803      	bhi.n	80064f8 <__any_on+0x36>
 80064f0:	2000      	movs	r0, #0
 80064f2:	bd10      	pop	{r4, pc}
 80064f4:	4603      	mov	r3, r0
 80064f6:	e7f7      	b.n	80064e8 <__any_on+0x26>
 80064f8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80064fc:	2900      	cmp	r1, #0
 80064fe:	d0f5      	beq.n	80064ec <__any_on+0x2a>
 8006500:	2001      	movs	r0, #1
 8006502:	e7f6      	b.n	80064f2 <__any_on+0x30>

08006504 <sulp>:
 8006504:	b570      	push	{r4, r5, r6, lr}
 8006506:	4604      	mov	r4, r0
 8006508:	460d      	mov	r5, r1
 800650a:	ec45 4b10 	vmov	d0, r4, r5
 800650e:	4616      	mov	r6, r2
 8006510:	f7ff feba 	bl	8006288 <__ulp>
 8006514:	ec51 0b10 	vmov	r0, r1, d0
 8006518:	b17e      	cbz	r6, 800653a <sulp+0x36>
 800651a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800651e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006522:	2b00      	cmp	r3, #0
 8006524:	dd09      	ble.n	800653a <sulp+0x36>
 8006526:	051b      	lsls	r3, r3, #20
 8006528:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800652c:	2400      	movs	r4, #0
 800652e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006532:	4622      	mov	r2, r4
 8006534:	462b      	mov	r3, r5
 8006536:	f7fa f88f 	bl	8000658 <__aeabi_dmul>
 800653a:	ec41 0b10 	vmov	d0, r0, r1
 800653e:	bd70      	pop	{r4, r5, r6, pc}

08006540 <_strtod_l>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	b09f      	sub	sp, #124	@ 0x7c
 8006546:	460c      	mov	r4, r1
 8006548:	9217      	str	r2, [sp, #92]	@ 0x5c
 800654a:	2200      	movs	r2, #0
 800654c:	921a      	str	r2, [sp, #104]	@ 0x68
 800654e:	9005      	str	r0, [sp, #20]
 8006550:	f04f 0a00 	mov.w	sl, #0
 8006554:	f04f 0b00 	mov.w	fp, #0
 8006558:	460a      	mov	r2, r1
 800655a:	9219      	str	r2, [sp, #100]	@ 0x64
 800655c:	7811      	ldrb	r1, [r2, #0]
 800655e:	292b      	cmp	r1, #43	@ 0x2b
 8006560:	d04a      	beq.n	80065f8 <_strtod_l+0xb8>
 8006562:	d838      	bhi.n	80065d6 <_strtod_l+0x96>
 8006564:	290d      	cmp	r1, #13
 8006566:	d832      	bhi.n	80065ce <_strtod_l+0x8e>
 8006568:	2908      	cmp	r1, #8
 800656a:	d832      	bhi.n	80065d2 <_strtod_l+0x92>
 800656c:	2900      	cmp	r1, #0
 800656e:	d03b      	beq.n	80065e8 <_strtod_l+0xa8>
 8006570:	2200      	movs	r2, #0
 8006572:	920e      	str	r2, [sp, #56]	@ 0x38
 8006574:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006576:	782a      	ldrb	r2, [r5, #0]
 8006578:	2a30      	cmp	r2, #48	@ 0x30
 800657a:	f040 80b2 	bne.w	80066e2 <_strtod_l+0x1a2>
 800657e:	786a      	ldrb	r2, [r5, #1]
 8006580:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006584:	2a58      	cmp	r2, #88	@ 0x58
 8006586:	d16e      	bne.n	8006666 <_strtod_l+0x126>
 8006588:	9302      	str	r3, [sp, #8]
 800658a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	ab1a      	add	r3, sp, #104	@ 0x68
 8006590:	9300      	str	r3, [sp, #0]
 8006592:	4a8f      	ldr	r2, [pc, #572]	@ (80067d0 <_strtod_l+0x290>)
 8006594:	9805      	ldr	r0, [sp, #20]
 8006596:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006598:	a919      	add	r1, sp, #100	@ 0x64
 800659a:	f001 f927 	bl	80077ec <__gethex>
 800659e:	f010 060f 	ands.w	r6, r0, #15
 80065a2:	4604      	mov	r4, r0
 80065a4:	d005      	beq.n	80065b2 <_strtod_l+0x72>
 80065a6:	2e06      	cmp	r6, #6
 80065a8:	d128      	bne.n	80065fc <_strtod_l+0xbc>
 80065aa:	3501      	adds	r5, #1
 80065ac:	2300      	movs	r3, #0
 80065ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80065b0:	930e      	str	r3, [sp, #56]	@ 0x38
 80065b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f040 858e 	bne.w	80070d6 <_strtod_l+0xb96>
 80065ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065bc:	b1cb      	cbz	r3, 80065f2 <_strtod_l+0xb2>
 80065be:	4652      	mov	r2, sl
 80065c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80065c4:	ec43 2b10 	vmov	d0, r2, r3
 80065c8:	b01f      	add	sp, #124	@ 0x7c
 80065ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ce:	2920      	cmp	r1, #32
 80065d0:	d1ce      	bne.n	8006570 <_strtod_l+0x30>
 80065d2:	3201      	adds	r2, #1
 80065d4:	e7c1      	b.n	800655a <_strtod_l+0x1a>
 80065d6:	292d      	cmp	r1, #45	@ 0x2d
 80065d8:	d1ca      	bne.n	8006570 <_strtod_l+0x30>
 80065da:	2101      	movs	r1, #1
 80065dc:	910e      	str	r1, [sp, #56]	@ 0x38
 80065de:	1c51      	adds	r1, r2, #1
 80065e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80065e2:	7852      	ldrb	r2, [r2, #1]
 80065e4:	2a00      	cmp	r2, #0
 80065e6:	d1c5      	bne.n	8006574 <_strtod_l+0x34>
 80065e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80065ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f040 8570 	bne.w	80070d2 <_strtod_l+0xb92>
 80065f2:	4652      	mov	r2, sl
 80065f4:	465b      	mov	r3, fp
 80065f6:	e7e5      	b.n	80065c4 <_strtod_l+0x84>
 80065f8:	2100      	movs	r1, #0
 80065fa:	e7ef      	b.n	80065dc <_strtod_l+0x9c>
 80065fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80065fe:	b13a      	cbz	r2, 8006610 <_strtod_l+0xd0>
 8006600:	2135      	movs	r1, #53	@ 0x35
 8006602:	a81c      	add	r0, sp, #112	@ 0x70
 8006604:	f7ff ff3a 	bl	800647c <__copybits>
 8006608:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800660a:	9805      	ldr	r0, [sp, #20]
 800660c:	f7ff fb10 	bl	8005c30 <_Bfree>
 8006610:	3e01      	subs	r6, #1
 8006612:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006614:	2e04      	cmp	r6, #4
 8006616:	d806      	bhi.n	8006626 <_strtod_l+0xe6>
 8006618:	e8df f006 	tbb	[pc, r6]
 800661c:	201d0314 	.word	0x201d0314
 8006620:	14          	.byte	0x14
 8006621:	00          	.byte	0x00
 8006622:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006626:	05e1      	lsls	r1, r4, #23
 8006628:	bf48      	it	mi
 800662a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800662e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006632:	0d1b      	lsrs	r3, r3, #20
 8006634:	051b      	lsls	r3, r3, #20
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1bb      	bne.n	80065b2 <_strtod_l+0x72>
 800663a:	f7fe fb23 	bl	8004c84 <__errno>
 800663e:	2322      	movs	r3, #34	@ 0x22
 8006640:	6003      	str	r3, [r0, #0]
 8006642:	e7b6      	b.n	80065b2 <_strtod_l+0x72>
 8006644:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006648:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800664c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006650:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006654:	e7e7      	b.n	8006626 <_strtod_l+0xe6>
 8006656:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80067d8 <_strtod_l+0x298>
 800665a:	e7e4      	b.n	8006626 <_strtod_l+0xe6>
 800665c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006660:	f04f 3aff 	mov.w	sl, #4294967295
 8006664:	e7df      	b.n	8006626 <_strtod_l+0xe6>
 8006666:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006668:	1c5a      	adds	r2, r3, #1
 800666a:	9219      	str	r2, [sp, #100]	@ 0x64
 800666c:	785b      	ldrb	r3, [r3, #1]
 800666e:	2b30      	cmp	r3, #48	@ 0x30
 8006670:	d0f9      	beq.n	8006666 <_strtod_l+0x126>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d09d      	beq.n	80065b2 <_strtod_l+0x72>
 8006676:	2301      	movs	r3, #1
 8006678:	2700      	movs	r7, #0
 800667a:	9308      	str	r3, [sp, #32]
 800667c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800667e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006680:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006682:	46b9      	mov	r9, r7
 8006684:	220a      	movs	r2, #10
 8006686:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006688:	7805      	ldrb	r5, [r0, #0]
 800668a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800668e:	b2d9      	uxtb	r1, r3
 8006690:	2909      	cmp	r1, #9
 8006692:	d928      	bls.n	80066e6 <_strtod_l+0x1a6>
 8006694:	494f      	ldr	r1, [pc, #316]	@ (80067d4 <_strtod_l+0x294>)
 8006696:	2201      	movs	r2, #1
 8006698:	f000 ffd6 	bl	8007648 <strncmp>
 800669c:	2800      	cmp	r0, #0
 800669e:	d032      	beq.n	8006706 <_strtod_l+0x1c6>
 80066a0:	2000      	movs	r0, #0
 80066a2:	462a      	mov	r2, r5
 80066a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80066a6:	464d      	mov	r5, r9
 80066a8:	4603      	mov	r3, r0
 80066aa:	2a65      	cmp	r2, #101	@ 0x65
 80066ac:	d001      	beq.n	80066b2 <_strtod_l+0x172>
 80066ae:	2a45      	cmp	r2, #69	@ 0x45
 80066b0:	d114      	bne.n	80066dc <_strtod_l+0x19c>
 80066b2:	b91d      	cbnz	r5, 80066bc <_strtod_l+0x17c>
 80066b4:	9a08      	ldr	r2, [sp, #32]
 80066b6:	4302      	orrs	r2, r0
 80066b8:	d096      	beq.n	80065e8 <_strtod_l+0xa8>
 80066ba:	2500      	movs	r5, #0
 80066bc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80066be:	1c62      	adds	r2, r4, #1
 80066c0:	9219      	str	r2, [sp, #100]	@ 0x64
 80066c2:	7862      	ldrb	r2, [r4, #1]
 80066c4:	2a2b      	cmp	r2, #43	@ 0x2b
 80066c6:	d07a      	beq.n	80067be <_strtod_l+0x27e>
 80066c8:	2a2d      	cmp	r2, #45	@ 0x2d
 80066ca:	d07e      	beq.n	80067ca <_strtod_l+0x28a>
 80066cc:	f04f 0c00 	mov.w	ip, #0
 80066d0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80066d4:	2909      	cmp	r1, #9
 80066d6:	f240 8085 	bls.w	80067e4 <_strtod_l+0x2a4>
 80066da:	9419      	str	r4, [sp, #100]	@ 0x64
 80066dc:	f04f 0800 	mov.w	r8, #0
 80066e0:	e0a5      	b.n	800682e <_strtod_l+0x2ee>
 80066e2:	2300      	movs	r3, #0
 80066e4:	e7c8      	b.n	8006678 <_strtod_l+0x138>
 80066e6:	f1b9 0f08 	cmp.w	r9, #8
 80066ea:	bfd8      	it	le
 80066ec:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80066ee:	f100 0001 	add.w	r0, r0, #1
 80066f2:	bfda      	itte	le
 80066f4:	fb02 3301 	mlale	r3, r2, r1, r3
 80066f8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80066fa:	fb02 3707 	mlagt	r7, r2, r7, r3
 80066fe:	f109 0901 	add.w	r9, r9, #1
 8006702:	9019      	str	r0, [sp, #100]	@ 0x64
 8006704:	e7bf      	b.n	8006686 <_strtod_l+0x146>
 8006706:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006708:	1c5a      	adds	r2, r3, #1
 800670a:	9219      	str	r2, [sp, #100]	@ 0x64
 800670c:	785a      	ldrb	r2, [r3, #1]
 800670e:	f1b9 0f00 	cmp.w	r9, #0
 8006712:	d03b      	beq.n	800678c <_strtod_l+0x24c>
 8006714:	900a      	str	r0, [sp, #40]	@ 0x28
 8006716:	464d      	mov	r5, r9
 8006718:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800671c:	2b09      	cmp	r3, #9
 800671e:	d912      	bls.n	8006746 <_strtod_l+0x206>
 8006720:	2301      	movs	r3, #1
 8006722:	e7c2      	b.n	80066aa <_strtod_l+0x16a>
 8006724:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006726:	1c5a      	adds	r2, r3, #1
 8006728:	9219      	str	r2, [sp, #100]	@ 0x64
 800672a:	785a      	ldrb	r2, [r3, #1]
 800672c:	3001      	adds	r0, #1
 800672e:	2a30      	cmp	r2, #48	@ 0x30
 8006730:	d0f8      	beq.n	8006724 <_strtod_l+0x1e4>
 8006732:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006736:	2b08      	cmp	r3, #8
 8006738:	f200 84d2 	bhi.w	80070e0 <_strtod_l+0xba0>
 800673c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800673e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006740:	2000      	movs	r0, #0
 8006742:	930c      	str	r3, [sp, #48]	@ 0x30
 8006744:	4605      	mov	r5, r0
 8006746:	3a30      	subs	r2, #48	@ 0x30
 8006748:	f100 0301 	add.w	r3, r0, #1
 800674c:	d018      	beq.n	8006780 <_strtod_l+0x240>
 800674e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006750:	4419      	add	r1, r3
 8006752:	910a      	str	r1, [sp, #40]	@ 0x28
 8006754:	462e      	mov	r6, r5
 8006756:	f04f 0e0a 	mov.w	lr, #10
 800675a:	1c71      	adds	r1, r6, #1
 800675c:	eba1 0c05 	sub.w	ip, r1, r5
 8006760:	4563      	cmp	r3, ip
 8006762:	dc15      	bgt.n	8006790 <_strtod_l+0x250>
 8006764:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006768:	182b      	adds	r3, r5, r0
 800676a:	2b08      	cmp	r3, #8
 800676c:	f105 0501 	add.w	r5, r5, #1
 8006770:	4405      	add	r5, r0
 8006772:	dc1a      	bgt.n	80067aa <_strtod_l+0x26a>
 8006774:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006776:	230a      	movs	r3, #10
 8006778:	fb03 2301 	mla	r3, r3, r1, r2
 800677c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800677e:	2300      	movs	r3, #0
 8006780:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006782:	1c51      	adds	r1, r2, #1
 8006784:	9119      	str	r1, [sp, #100]	@ 0x64
 8006786:	7852      	ldrb	r2, [r2, #1]
 8006788:	4618      	mov	r0, r3
 800678a:	e7c5      	b.n	8006718 <_strtod_l+0x1d8>
 800678c:	4648      	mov	r0, r9
 800678e:	e7ce      	b.n	800672e <_strtod_l+0x1ee>
 8006790:	2e08      	cmp	r6, #8
 8006792:	dc05      	bgt.n	80067a0 <_strtod_l+0x260>
 8006794:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8006796:	fb0e f606 	mul.w	r6, lr, r6
 800679a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800679c:	460e      	mov	r6, r1
 800679e:	e7dc      	b.n	800675a <_strtod_l+0x21a>
 80067a0:	2910      	cmp	r1, #16
 80067a2:	bfd8      	it	le
 80067a4:	fb0e f707 	mulle.w	r7, lr, r7
 80067a8:	e7f8      	b.n	800679c <_strtod_l+0x25c>
 80067aa:	2b0f      	cmp	r3, #15
 80067ac:	bfdc      	itt	le
 80067ae:	230a      	movle	r3, #10
 80067b0:	fb03 2707 	mlale	r7, r3, r7, r2
 80067b4:	e7e3      	b.n	800677e <_strtod_l+0x23e>
 80067b6:	2300      	movs	r3, #0
 80067b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80067ba:	2301      	movs	r3, #1
 80067bc:	e77a      	b.n	80066b4 <_strtod_l+0x174>
 80067be:	f04f 0c00 	mov.w	ip, #0
 80067c2:	1ca2      	adds	r2, r4, #2
 80067c4:	9219      	str	r2, [sp, #100]	@ 0x64
 80067c6:	78a2      	ldrb	r2, [r4, #2]
 80067c8:	e782      	b.n	80066d0 <_strtod_l+0x190>
 80067ca:	f04f 0c01 	mov.w	ip, #1
 80067ce:	e7f8      	b.n	80067c2 <_strtod_l+0x282>
 80067d0:	08008744 	.word	0x08008744
 80067d4:	08008577 	.word	0x08008577
 80067d8:	7ff00000 	.word	0x7ff00000
 80067dc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067de:	1c51      	adds	r1, r2, #1
 80067e0:	9119      	str	r1, [sp, #100]	@ 0x64
 80067e2:	7852      	ldrb	r2, [r2, #1]
 80067e4:	2a30      	cmp	r2, #48	@ 0x30
 80067e6:	d0f9      	beq.n	80067dc <_strtod_l+0x29c>
 80067e8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80067ec:	2908      	cmp	r1, #8
 80067ee:	f63f af75 	bhi.w	80066dc <_strtod_l+0x19c>
 80067f2:	3a30      	subs	r2, #48	@ 0x30
 80067f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80067f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80067f8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80067fa:	f04f 080a 	mov.w	r8, #10
 80067fe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006800:	1c56      	adds	r6, r2, #1
 8006802:	9619      	str	r6, [sp, #100]	@ 0x64
 8006804:	7852      	ldrb	r2, [r2, #1]
 8006806:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800680a:	f1be 0f09 	cmp.w	lr, #9
 800680e:	d939      	bls.n	8006884 <_strtod_l+0x344>
 8006810:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006812:	1a76      	subs	r6, r6, r1
 8006814:	2e08      	cmp	r6, #8
 8006816:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800681a:	dc03      	bgt.n	8006824 <_strtod_l+0x2e4>
 800681c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800681e:	4588      	cmp	r8, r1
 8006820:	bfa8      	it	ge
 8006822:	4688      	movge	r8, r1
 8006824:	f1bc 0f00 	cmp.w	ip, #0
 8006828:	d001      	beq.n	800682e <_strtod_l+0x2ee>
 800682a:	f1c8 0800 	rsb	r8, r8, #0
 800682e:	2d00      	cmp	r5, #0
 8006830:	d14e      	bne.n	80068d0 <_strtod_l+0x390>
 8006832:	9908      	ldr	r1, [sp, #32]
 8006834:	4308      	orrs	r0, r1
 8006836:	f47f aebc 	bne.w	80065b2 <_strtod_l+0x72>
 800683a:	2b00      	cmp	r3, #0
 800683c:	f47f aed4 	bne.w	80065e8 <_strtod_l+0xa8>
 8006840:	2a69      	cmp	r2, #105	@ 0x69
 8006842:	d028      	beq.n	8006896 <_strtod_l+0x356>
 8006844:	dc25      	bgt.n	8006892 <_strtod_l+0x352>
 8006846:	2a49      	cmp	r2, #73	@ 0x49
 8006848:	d025      	beq.n	8006896 <_strtod_l+0x356>
 800684a:	2a4e      	cmp	r2, #78	@ 0x4e
 800684c:	f47f aecc 	bne.w	80065e8 <_strtod_l+0xa8>
 8006850:	499a      	ldr	r1, [pc, #616]	@ (8006abc <_strtod_l+0x57c>)
 8006852:	a819      	add	r0, sp, #100	@ 0x64
 8006854:	f001 f9ec 	bl	8007c30 <__match>
 8006858:	2800      	cmp	r0, #0
 800685a:	f43f aec5 	beq.w	80065e8 <_strtod_l+0xa8>
 800685e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b28      	cmp	r3, #40	@ 0x28
 8006864:	d12e      	bne.n	80068c4 <_strtod_l+0x384>
 8006866:	4996      	ldr	r1, [pc, #600]	@ (8006ac0 <_strtod_l+0x580>)
 8006868:	aa1c      	add	r2, sp, #112	@ 0x70
 800686a:	a819      	add	r0, sp, #100	@ 0x64
 800686c:	f001 f9f4 	bl	8007c58 <__hexnan>
 8006870:	2805      	cmp	r0, #5
 8006872:	d127      	bne.n	80068c4 <_strtod_l+0x384>
 8006874:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006876:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800687a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800687e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006882:	e696      	b.n	80065b2 <_strtod_l+0x72>
 8006884:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006886:	fb08 2101 	mla	r1, r8, r1, r2
 800688a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800688e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006890:	e7b5      	b.n	80067fe <_strtod_l+0x2be>
 8006892:	2a6e      	cmp	r2, #110	@ 0x6e
 8006894:	e7da      	b.n	800684c <_strtod_l+0x30c>
 8006896:	498b      	ldr	r1, [pc, #556]	@ (8006ac4 <_strtod_l+0x584>)
 8006898:	a819      	add	r0, sp, #100	@ 0x64
 800689a:	f001 f9c9 	bl	8007c30 <__match>
 800689e:	2800      	cmp	r0, #0
 80068a0:	f43f aea2 	beq.w	80065e8 <_strtod_l+0xa8>
 80068a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068a6:	4988      	ldr	r1, [pc, #544]	@ (8006ac8 <_strtod_l+0x588>)
 80068a8:	3b01      	subs	r3, #1
 80068aa:	a819      	add	r0, sp, #100	@ 0x64
 80068ac:	9319      	str	r3, [sp, #100]	@ 0x64
 80068ae:	f001 f9bf 	bl	8007c30 <__match>
 80068b2:	b910      	cbnz	r0, 80068ba <_strtod_l+0x37a>
 80068b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068b6:	3301      	adds	r3, #1
 80068b8:	9319      	str	r3, [sp, #100]	@ 0x64
 80068ba:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006ad8 <_strtod_l+0x598>
 80068be:	f04f 0a00 	mov.w	sl, #0
 80068c2:	e676      	b.n	80065b2 <_strtod_l+0x72>
 80068c4:	4881      	ldr	r0, [pc, #516]	@ (8006acc <_strtod_l+0x58c>)
 80068c6:	f000 feef 	bl	80076a8 <nan>
 80068ca:	ec5b ab10 	vmov	sl, fp, d0
 80068ce:	e670      	b.n	80065b2 <_strtod_l+0x72>
 80068d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068d2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80068d4:	eba8 0303 	sub.w	r3, r8, r3
 80068d8:	f1b9 0f00 	cmp.w	r9, #0
 80068dc:	bf08      	it	eq
 80068de:	46a9      	moveq	r9, r5
 80068e0:	2d10      	cmp	r5, #16
 80068e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80068e4:	462c      	mov	r4, r5
 80068e6:	bfa8      	it	ge
 80068e8:	2410      	movge	r4, #16
 80068ea:	f7f9 fe3b 	bl	8000564 <__aeabi_ui2d>
 80068ee:	2d09      	cmp	r5, #9
 80068f0:	4682      	mov	sl, r0
 80068f2:	468b      	mov	fp, r1
 80068f4:	dc13      	bgt.n	800691e <_strtod_l+0x3de>
 80068f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f43f ae5a 	beq.w	80065b2 <_strtod_l+0x72>
 80068fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006900:	dd78      	ble.n	80069f4 <_strtod_l+0x4b4>
 8006902:	2b16      	cmp	r3, #22
 8006904:	dc5f      	bgt.n	80069c6 <_strtod_l+0x486>
 8006906:	4972      	ldr	r1, [pc, #456]	@ (8006ad0 <_strtod_l+0x590>)
 8006908:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800690c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006910:	4652      	mov	r2, sl
 8006912:	465b      	mov	r3, fp
 8006914:	f7f9 fea0 	bl	8000658 <__aeabi_dmul>
 8006918:	4682      	mov	sl, r0
 800691a:	468b      	mov	fp, r1
 800691c:	e649      	b.n	80065b2 <_strtod_l+0x72>
 800691e:	4b6c      	ldr	r3, [pc, #432]	@ (8006ad0 <_strtod_l+0x590>)
 8006920:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006924:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006928:	f7f9 fe96 	bl	8000658 <__aeabi_dmul>
 800692c:	4682      	mov	sl, r0
 800692e:	4638      	mov	r0, r7
 8006930:	468b      	mov	fp, r1
 8006932:	f7f9 fe17 	bl	8000564 <__aeabi_ui2d>
 8006936:	4602      	mov	r2, r0
 8006938:	460b      	mov	r3, r1
 800693a:	4650      	mov	r0, sl
 800693c:	4659      	mov	r1, fp
 800693e:	f7f9 fcd5 	bl	80002ec <__adddf3>
 8006942:	2d0f      	cmp	r5, #15
 8006944:	4682      	mov	sl, r0
 8006946:	468b      	mov	fp, r1
 8006948:	ddd5      	ble.n	80068f6 <_strtod_l+0x3b6>
 800694a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694c:	1b2c      	subs	r4, r5, r4
 800694e:	441c      	add	r4, r3
 8006950:	2c00      	cmp	r4, #0
 8006952:	f340 8093 	ble.w	8006a7c <_strtod_l+0x53c>
 8006956:	f014 030f 	ands.w	r3, r4, #15
 800695a:	d00a      	beq.n	8006972 <_strtod_l+0x432>
 800695c:	495c      	ldr	r1, [pc, #368]	@ (8006ad0 <_strtod_l+0x590>)
 800695e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006962:	4652      	mov	r2, sl
 8006964:	465b      	mov	r3, fp
 8006966:	e9d1 0100 	ldrd	r0, r1, [r1]
 800696a:	f7f9 fe75 	bl	8000658 <__aeabi_dmul>
 800696e:	4682      	mov	sl, r0
 8006970:	468b      	mov	fp, r1
 8006972:	f034 040f 	bics.w	r4, r4, #15
 8006976:	d073      	beq.n	8006a60 <_strtod_l+0x520>
 8006978:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800697c:	dd49      	ble.n	8006a12 <_strtod_l+0x4d2>
 800697e:	2400      	movs	r4, #0
 8006980:	46a0      	mov	r8, r4
 8006982:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006984:	46a1      	mov	r9, r4
 8006986:	9a05      	ldr	r2, [sp, #20]
 8006988:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006ad8 <_strtod_l+0x598>
 800698c:	2322      	movs	r3, #34	@ 0x22
 800698e:	6013      	str	r3, [r2, #0]
 8006990:	f04f 0a00 	mov.w	sl, #0
 8006994:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006996:	2b00      	cmp	r3, #0
 8006998:	f43f ae0b 	beq.w	80065b2 <_strtod_l+0x72>
 800699c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800699e:	9805      	ldr	r0, [sp, #20]
 80069a0:	f7ff f946 	bl	8005c30 <_Bfree>
 80069a4:	9805      	ldr	r0, [sp, #20]
 80069a6:	4649      	mov	r1, r9
 80069a8:	f7ff f942 	bl	8005c30 <_Bfree>
 80069ac:	9805      	ldr	r0, [sp, #20]
 80069ae:	4641      	mov	r1, r8
 80069b0:	f7ff f93e 	bl	8005c30 <_Bfree>
 80069b4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80069b6:	9805      	ldr	r0, [sp, #20]
 80069b8:	f7ff f93a 	bl	8005c30 <_Bfree>
 80069bc:	9805      	ldr	r0, [sp, #20]
 80069be:	4621      	mov	r1, r4
 80069c0:	f7ff f936 	bl	8005c30 <_Bfree>
 80069c4:	e5f5      	b.n	80065b2 <_strtod_l+0x72>
 80069c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80069c8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80069cc:	4293      	cmp	r3, r2
 80069ce:	dbbc      	blt.n	800694a <_strtod_l+0x40a>
 80069d0:	4c3f      	ldr	r4, [pc, #252]	@ (8006ad0 <_strtod_l+0x590>)
 80069d2:	f1c5 050f 	rsb	r5, r5, #15
 80069d6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80069da:	4652      	mov	r2, sl
 80069dc:	465b      	mov	r3, fp
 80069de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80069e2:	f7f9 fe39 	bl	8000658 <__aeabi_dmul>
 80069e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069e8:	1b5d      	subs	r5, r3, r5
 80069ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80069ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80069f2:	e78f      	b.n	8006914 <_strtod_l+0x3d4>
 80069f4:	3316      	adds	r3, #22
 80069f6:	dba8      	blt.n	800694a <_strtod_l+0x40a>
 80069f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069fa:	eba3 0808 	sub.w	r8, r3, r8
 80069fe:	4b34      	ldr	r3, [pc, #208]	@ (8006ad0 <_strtod_l+0x590>)
 8006a00:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006a04:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006a08:	4650      	mov	r0, sl
 8006a0a:	4659      	mov	r1, fp
 8006a0c:	f7f9 ff4e 	bl	80008ac <__aeabi_ddiv>
 8006a10:	e782      	b.n	8006918 <_strtod_l+0x3d8>
 8006a12:	2300      	movs	r3, #0
 8006a14:	4f2f      	ldr	r7, [pc, #188]	@ (8006ad4 <_strtod_l+0x594>)
 8006a16:	1124      	asrs	r4, r4, #4
 8006a18:	4650      	mov	r0, sl
 8006a1a:	4659      	mov	r1, fp
 8006a1c:	461e      	mov	r6, r3
 8006a1e:	2c01      	cmp	r4, #1
 8006a20:	dc21      	bgt.n	8006a66 <_strtod_l+0x526>
 8006a22:	b10b      	cbz	r3, 8006a28 <_strtod_l+0x4e8>
 8006a24:	4682      	mov	sl, r0
 8006a26:	468b      	mov	fp, r1
 8006a28:	492a      	ldr	r1, [pc, #168]	@ (8006ad4 <_strtod_l+0x594>)
 8006a2a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006a2e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006a32:	4652      	mov	r2, sl
 8006a34:	465b      	mov	r3, fp
 8006a36:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a3a:	f7f9 fe0d 	bl	8000658 <__aeabi_dmul>
 8006a3e:	4b26      	ldr	r3, [pc, #152]	@ (8006ad8 <_strtod_l+0x598>)
 8006a40:	460a      	mov	r2, r1
 8006a42:	400b      	ands	r3, r1
 8006a44:	4925      	ldr	r1, [pc, #148]	@ (8006adc <_strtod_l+0x59c>)
 8006a46:	428b      	cmp	r3, r1
 8006a48:	4682      	mov	sl, r0
 8006a4a:	d898      	bhi.n	800697e <_strtod_l+0x43e>
 8006a4c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf86      	itte	hi
 8006a54:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006ae0 <_strtod_l+0x5a0>
 8006a58:	f04f 3aff 	movhi.w	sl, #4294967295
 8006a5c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006a60:	2300      	movs	r3, #0
 8006a62:	9308      	str	r3, [sp, #32]
 8006a64:	e076      	b.n	8006b54 <_strtod_l+0x614>
 8006a66:	07e2      	lsls	r2, r4, #31
 8006a68:	d504      	bpl.n	8006a74 <_strtod_l+0x534>
 8006a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a6e:	f7f9 fdf3 	bl	8000658 <__aeabi_dmul>
 8006a72:	2301      	movs	r3, #1
 8006a74:	3601      	adds	r6, #1
 8006a76:	1064      	asrs	r4, r4, #1
 8006a78:	3708      	adds	r7, #8
 8006a7a:	e7d0      	b.n	8006a1e <_strtod_l+0x4de>
 8006a7c:	d0f0      	beq.n	8006a60 <_strtod_l+0x520>
 8006a7e:	4264      	negs	r4, r4
 8006a80:	f014 020f 	ands.w	r2, r4, #15
 8006a84:	d00a      	beq.n	8006a9c <_strtod_l+0x55c>
 8006a86:	4b12      	ldr	r3, [pc, #72]	@ (8006ad0 <_strtod_l+0x590>)
 8006a88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006a8c:	4650      	mov	r0, sl
 8006a8e:	4659      	mov	r1, fp
 8006a90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a94:	f7f9 ff0a 	bl	80008ac <__aeabi_ddiv>
 8006a98:	4682      	mov	sl, r0
 8006a9a:	468b      	mov	fp, r1
 8006a9c:	1124      	asrs	r4, r4, #4
 8006a9e:	d0df      	beq.n	8006a60 <_strtod_l+0x520>
 8006aa0:	2c1f      	cmp	r4, #31
 8006aa2:	dd1f      	ble.n	8006ae4 <_strtod_l+0x5a4>
 8006aa4:	2400      	movs	r4, #0
 8006aa6:	46a0      	mov	r8, r4
 8006aa8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006aaa:	46a1      	mov	r9, r4
 8006aac:	9a05      	ldr	r2, [sp, #20]
 8006aae:	2322      	movs	r3, #34	@ 0x22
 8006ab0:	f04f 0a00 	mov.w	sl, #0
 8006ab4:	f04f 0b00 	mov.w	fp, #0
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e76b      	b.n	8006994 <_strtod_l+0x454>
 8006abc:	08008465 	.word	0x08008465
 8006ac0:	08008730 	.word	0x08008730
 8006ac4:	0800845d 	.word	0x0800845d
 8006ac8:	08008494 	.word	0x08008494
 8006acc:	080085cd 	.word	0x080085cd
 8006ad0:	08008668 	.word	0x08008668
 8006ad4:	08008640 	.word	0x08008640
 8006ad8:	7ff00000 	.word	0x7ff00000
 8006adc:	7ca00000 	.word	0x7ca00000
 8006ae0:	7fefffff 	.word	0x7fefffff
 8006ae4:	f014 0310 	ands.w	r3, r4, #16
 8006ae8:	bf18      	it	ne
 8006aea:	236a      	movne	r3, #106	@ 0x6a
 8006aec:	4ea9      	ldr	r6, [pc, #676]	@ (8006d94 <_strtod_l+0x854>)
 8006aee:	9308      	str	r3, [sp, #32]
 8006af0:	4650      	mov	r0, sl
 8006af2:	4659      	mov	r1, fp
 8006af4:	2300      	movs	r3, #0
 8006af6:	07e7      	lsls	r7, r4, #31
 8006af8:	d504      	bpl.n	8006b04 <_strtod_l+0x5c4>
 8006afa:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006afe:	f7f9 fdab 	bl	8000658 <__aeabi_dmul>
 8006b02:	2301      	movs	r3, #1
 8006b04:	1064      	asrs	r4, r4, #1
 8006b06:	f106 0608 	add.w	r6, r6, #8
 8006b0a:	d1f4      	bne.n	8006af6 <_strtod_l+0x5b6>
 8006b0c:	b10b      	cbz	r3, 8006b12 <_strtod_l+0x5d2>
 8006b0e:	4682      	mov	sl, r0
 8006b10:	468b      	mov	fp, r1
 8006b12:	9b08      	ldr	r3, [sp, #32]
 8006b14:	b1b3      	cbz	r3, 8006b44 <_strtod_l+0x604>
 8006b16:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006b1a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	4659      	mov	r1, fp
 8006b22:	dd0f      	ble.n	8006b44 <_strtod_l+0x604>
 8006b24:	2b1f      	cmp	r3, #31
 8006b26:	dd56      	ble.n	8006bd6 <_strtod_l+0x696>
 8006b28:	2b34      	cmp	r3, #52	@ 0x34
 8006b2a:	bfde      	ittt	le
 8006b2c:	f04f 33ff 	movle.w	r3, #4294967295
 8006b30:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006b34:	4093      	lslle	r3, r2
 8006b36:	f04f 0a00 	mov.w	sl, #0
 8006b3a:	bfcc      	ite	gt
 8006b3c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006b40:	ea03 0b01 	andle.w	fp, r3, r1
 8006b44:	2200      	movs	r2, #0
 8006b46:	2300      	movs	r3, #0
 8006b48:	4650      	mov	r0, sl
 8006b4a:	4659      	mov	r1, fp
 8006b4c:	f7f9 ffec 	bl	8000b28 <__aeabi_dcmpeq>
 8006b50:	2800      	cmp	r0, #0
 8006b52:	d1a7      	bne.n	8006aa4 <_strtod_l+0x564>
 8006b54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b56:	9300      	str	r3, [sp, #0]
 8006b58:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006b5a:	9805      	ldr	r0, [sp, #20]
 8006b5c:	462b      	mov	r3, r5
 8006b5e:	464a      	mov	r2, r9
 8006b60:	f7ff f8ce 	bl	8005d00 <__s2b>
 8006b64:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006b66:	2800      	cmp	r0, #0
 8006b68:	f43f af09 	beq.w	800697e <_strtod_l+0x43e>
 8006b6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b6e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b70:	2a00      	cmp	r2, #0
 8006b72:	eba3 0308 	sub.w	r3, r3, r8
 8006b76:	bfa8      	it	ge
 8006b78:	2300      	movge	r3, #0
 8006b7a:	9312      	str	r3, [sp, #72]	@ 0x48
 8006b7c:	2400      	movs	r4, #0
 8006b7e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006b82:	9316      	str	r3, [sp, #88]	@ 0x58
 8006b84:	46a0      	mov	r8, r4
 8006b86:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b88:	9805      	ldr	r0, [sp, #20]
 8006b8a:	6859      	ldr	r1, [r3, #4]
 8006b8c:	f7ff f810 	bl	8005bb0 <_Balloc>
 8006b90:	4681      	mov	r9, r0
 8006b92:	2800      	cmp	r0, #0
 8006b94:	f43f aef7 	beq.w	8006986 <_strtod_l+0x446>
 8006b98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	3202      	adds	r2, #2
 8006b9e:	f103 010c 	add.w	r1, r3, #12
 8006ba2:	0092      	lsls	r2, r2, #2
 8006ba4:	300c      	adds	r0, #12
 8006ba6:	f000 fd71 	bl	800768c <memcpy>
 8006baa:	ec4b ab10 	vmov	d0, sl, fp
 8006bae:	9805      	ldr	r0, [sp, #20]
 8006bb0:	aa1c      	add	r2, sp, #112	@ 0x70
 8006bb2:	a91b      	add	r1, sp, #108	@ 0x6c
 8006bb4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006bb8:	f7ff fbd6 	bl	8006368 <__d2b>
 8006bbc:	901a      	str	r0, [sp, #104]	@ 0x68
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f43f aee1 	beq.w	8006986 <_strtod_l+0x446>
 8006bc4:	9805      	ldr	r0, [sp, #20]
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	f7ff f930 	bl	8005e2c <__i2b>
 8006bcc:	4680      	mov	r8, r0
 8006bce:	b948      	cbnz	r0, 8006be4 <_strtod_l+0x6a4>
 8006bd0:	f04f 0800 	mov.w	r8, #0
 8006bd4:	e6d7      	b.n	8006986 <_strtod_l+0x446>
 8006bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006bda:	fa02 f303 	lsl.w	r3, r2, r3
 8006bde:	ea03 0a0a 	and.w	sl, r3, sl
 8006be2:	e7af      	b.n	8006b44 <_strtod_l+0x604>
 8006be4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006be6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	bfab      	itete	ge
 8006bec:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006bee:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006bf0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006bf2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006bf4:	bfac      	ite	ge
 8006bf6:	18ef      	addge	r7, r5, r3
 8006bf8:	1b5e      	sublt	r6, r3, r5
 8006bfa:	9b08      	ldr	r3, [sp, #32]
 8006bfc:	1aed      	subs	r5, r5, r3
 8006bfe:	4415      	add	r5, r2
 8006c00:	4b65      	ldr	r3, [pc, #404]	@ (8006d98 <_strtod_l+0x858>)
 8006c02:	3d01      	subs	r5, #1
 8006c04:	429d      	cmp	r5, r3
 8006c06:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006c0a:	da50      	bge.n	8006cae <_strtod_l+0x76e>
 8006c0c:	1b5b      	subs	r3, r3, r5
 8006c0e:	2b1f      	cmp	r3, #31
 8006c10:	eba2 0203 	sub.w	r2, r2, r3
 8006c14:	f04f 0101 	mov.w	r1, #1
 8006c18:	dc3d      	bgt.n	8006c96 <_strtod_l+0x756>
 8006c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8006c1e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006c20:	2300      	movs	r3, #0
 8006c22:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c24:	18bd      	adds	r5, r7, r2
 8006c26:	9b08      	ldr	r3, [sp, #32]
 8006c28:	42af      	cmp	r7, r5
 8006c2a:	4416      	add	r6, r2
 8006c2c:	441e      	add	r6, r3
 8006c2e:	463b      	mov	r3, r7
 8006c30:	bfa8      	it	ge
 8006c32:	462b      	movge	r3, r5
 8006c34:	42b3      	cmp	r3, r6
 8006c36:	bfa8      	it	ge
 8006c38:	4633      	movge	r3, r6
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	bfc2      	ittt	gt
 8006c3e:	1aed      	subgt	r5, r5, r3
 8006c40:	1af6      	subgt	r6, r6, r3
 8006c42:	1aff      	subgt	r7, r7, r3
 8006c44:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dd16      	ble.n	8006c78 <_strtod_l+0x738>
 8006c4a:	4641      	mov	r1, r8
 8006c4c:	9805      	ldr	r0, [sp, #20]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	f7ff f9a4 	bl	8005f9c <__pow5mult>
 8006c54:	4680      	mov	r8, r0
 8006c56:	2800      	cmp	r0, #0
 8006c58:	d0ba      	beq.n	8006bd0 <_strtod_l+0x690>
 8006c5a:	4601      	mov	r1, r0
 8006c5c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c5e:	9805      	ldr	r0, [sp, #20]
 8006c60:	f7ff f8fa 	bl	8005e58 <__multiply>
 8006c64:	900a      	str	r0, [sp, #40]	@ 0x28
 8006c66:	2800      	cmp	r0, #0
 8006c68:	f43f ae8d 	beq.w	8006986 <_strtod_l+0x446>
 8006c6c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c6e:	9805      	ldr	r0, [sp, #20]
 8006c70:	f7fe ffde 	bl	8005c30 <_Bfree>
 8006c74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c76:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	dc1d      	bgt.n	8006cb8 <_strtod_l+0x778>
 8006c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd23      	ble.n	8006cca <_strtod_l+0x78a>
 8006c82:	4649      	mov	r1, r9
 8006c84:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006c86:	9805      	ldr	r0, [sp, #20]
 8006c88:	f7ff f988 	bl	8005f9c <__pow5mult>
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	b9e0      	cbnz	r0, 8006cca <_strtod_l+0x78a>
 8006c90:	f04f 0900 	mov.w	r9, #0
 8006c94:	e677      	b.n	8006986 <_strtod_l+0x446>
 8006c96:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006c9a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006c9e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006ca2:	35e2      	adds	r5, #226	@ 0xe2
 8006ca4:	fa01 f305 	lsl.w	r3, r1, r5
 8006ca8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006caa:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006cac:	e7ba      	b.n	8006c24 <_strtod_l+0x6e4>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006cb6:	e7b5      	b.n	8006c24 <_strtod_l+0x6e4>
 8006cb8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cba:	9805      	ldr	r0, [sp, #20]
 8006cbc:	462a      	mov	r2, r5
 8006cbe:	f7ff f9c7 	bl	8006050 <__lshift>
 8006cc2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d1d9      	bne.n	8006c7c <_strtod_l+0x73c>
 8006cc8:	e65d      	b.n	8006986 <_strtod_l+0x446>
 8006cca:	2e00      	cmp	r6, #0
 8006ccc:	dd07      	ble.n	8006cde <_strtod_l+0x79e>
 8006cce:	4649      	mov	r1, r9
 8006cd0:	9805      	ldr	r0, [sp, #20]
 8006cd2:	4632      	mov	r2, r6
 8006cd4:	f7ff f9bc 	bl	8006050 <__lshift>
 8006cd8:	4681      	mov	r9, r0
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	d0d8      	beq.n	8006c90 <_strtod_l+0x750>
 8006cde:	2f00      	cmp	r7, #0
 8006ce0:	dd08      	ble.n	8006cf4 <_strtod_l+0x7b4>
 8006ce2:	4641      	mov	r1, r8
 8006ce4:	9805      	ldr	r0, [sp, #20]
 8006ce6:	463a      	mov	r2, r7
 8006ce8:	f7ff f9b2 	bl	8006050 <__lshift>
 8006cec:	4680      	mov	r8, r0
 8006cee:	2800      	cmp	r0, #0
 8006cf0:	f43f ae49 	beq.w	8006986 <_strtod_l+0x446>
 8006cf4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006cf6:	9805      	ldr	r0, [sp, #20]
 8006cf8:	464a      	mov	r2, r9
 8006cfa:	f7ff fa31 	bl	8006160 <__mdiff>
 8006cfe:	4604      	mov	r4, r0
 8006d00:	2800      	cmp	r0, #0
 8006d02:	f43f ae40 	beq.w	8006986 <_strtod_l+0x446>
 8006d06:	68c3      	ldr	r3, [r0, #12]
 8006d08:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	60c3      	str	r3, [r0, #12]
 8006d0e:	4641      	mov	r1, r8
 8006d10:	f7ff fa0a 	bl	8006128 <__mcmp>
 8006d14:	2800      	cmp	r0, #0
 8006d16:	da45      	bge.n	8006da4 <_strtod_l+0x864>
 8006d18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d1a:	ea53 030a 	orrs.w	r3, r3, sl
 8006d1e:	d16b      	bne.n	8006df8 <_strtod_l+0x8b8>
 8006d20:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d167      	bne.n	8006df8 <_strtod_l+0x8b8>
 8006d28:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d2c:	0d1b      	lsrs	r3, r3, #20
 8006d2e:	051b      	lsls	r3, r3, #20
 8006d30:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d34:	d960      	bls.n	8006df8 <_strtod_l+0x8b8>
 8006d36:	6963      	ldr	r3, [r4, #20]
 8006d38:	b913      	cbnz	r3, 8006d40 <_strtod_l+0x800>
 8006d3a:	6923      	ldr	r3, [r4, #16]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	dd5b      	ble.n	8006df8 <_strtod_l+0x8b8>
 8006d40:	4621      	mov	r1, r4
 8006d42:	2201      	movs	r2, #1
 8006d44:	9805      	ldr	r0, [sp, #20]
 8006d46:	f7ff f983 	bl	8006050 <__lshift>
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	f7ff f9eb 	bl	8006128 <__mcmp>
 8006d52:	2800      	cmp	r0, #0
 8006d54:	dd50      	ble.n	8006df8 <_strtod_l+0x8b8>
 8006d56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006d5a:	9a08      	ldr	r2, [sp, #32]
 8006d5c:	0d1b      	lsrs	r3, r3, #20
 8006d5e:	051b      	lsls	r3, r3, #20
 8006d60:	2a00      	cmp	r2, #0
 8006d62:	d06a      	beq.n	8006e3a <_strtod_l+0x8fa>
 8006d64:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006d68:	d867      	bhi.n	8006e3a <_strtod_l+0x8fa>
 8006d6a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006d6e:	f67f ae9d 	bls.w	8006aac <_strtod_l+0x56c>
 8006d72:	4b0a      	ldr	r3, [pc, #40]	@ (8006d9c <_strtod_l+0x85c>)
 8006d74:	4650      	mov	r0, sl
 8006d76:	4659      	mov	r1, fp
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f7f9 fc6d 	bl	8000658 <__aeabi_dmul>
 8006d7e:	4b08      	ldr	r3, [pc, #32]	@ (8006da0 <_strtod_l+0x860>)
 8006d80:	400b      	ands	r3, r1
 8006d82:	4682      	mov	sl, r0
 8006d84:	468b      	mov	fp, r1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	f47f ae08 	bne.w	800699c <_strtod_l+0x45c>
 8006d8c:	9a05      	ldr	r2, [sp, #20]
 8006d8e:	2322      	movs	r3, #34	@ 0x22
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	e603      	b.n	800699c <_strtod_l+0x45c>
 8006d94:	08008758 	.word	0x08008758
 8006d98:	fffffc02 	.word	0xfffffc02
 8006d9c:	39500000 	.word	0x39500000
 8006da0:	7ff00000 	.word	0x7ff00000
 8006da4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006da8:	d165      	bne.n	8006e76 <_strtod_l+0x936>
 8006daa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006dac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006db0:	b35a      	cbz	r2, 8006e0a <_strtod_l+0x8ca>
 8006db2:	4a9f      	ldr	r2, [pc, #636]	@ (8007030 <_strtod_l+0xaf0>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d12b      	bne.n	8006e10 <_strtod_l+0x8d0>
 8006db8:	9b08      	ldr	r3, [sp, #32]
 8006dba:	4651      	mov	r1, sl
 8006dbc:	b303      	cbz	r3, 8006e00 <_strtod_l+0x8c0>
 8006dbe:	4b9d      	ldr	r3, [pc, #628]	@ (8007034 <_strtod_l+0xaf4>)
 8006dc0:	465a      	mov	r2, fp
 8006dc2:	4013      	ands	r3, r2
 8006dc4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8006dcc:	d81b      	bhi.n	8006e06 <_strtod_l+0x8c6>
 8006dce:	0d1b      	lsrs	r3, r3, #20
 8006dd0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	4299      	cmp	r1, r3
 8006dda:	d119      	bne.n	8006e10 <_strtod_l+0x8d0>
 8006ddc:	4b96      	ldr	r3, [pc, #600]	@ (8007038 <_strtod_l+0xaf8>)
 8006dde:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d102      	bne.n	8006dea <_strtod_l+0x8aa>
 8006de4:	3101      	adds	r1, #1
 8006de6:	f43f adce 	beq.w	8006986 <_strtod_l+0x446>
 8006dea:	4b92      	ldr	r3, [pc, #584]	@ (8007034 <_strtod_l+0xaf4>)
 8006dec:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dee:	401a      	ands	r2, r3
 8006df0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006df4:	f04f 0a00 	mov.w	sl, #0
 8006df8:	9b08      	ldr	r3, [sp, #32]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1b9      	bne.n	8006d72 <_strtod_l+0x832>
 8006dfe:	e5cd      	b.n	800699c <_strtod_l+0x45c>
 8006e00:	f04f 33ff 	mov.w	r3, #4294967295
 8006e04:	e7e8      	b.n	8006dd8 <_strtod_l+0x898>
 8006e06:	4613      	mov	r3, r2
 8006e08:	e7e6      	b.n	8006dd8 <_strtod_l+0x898>
 8006e0a:	ea53 030a 	orrs.w	r3, r3, sl
 8006e0e:	d0a2      	beq.n	8006d56 <_strtod_l+0x816>
 8006e10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e12:	b1db      	cbz	r3, 8006e4c <_strtod_l+0x90c>
 8006e14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006e16:	4213      	tst	r3, r2
 8006e18:	d0ee      	beq.n	8006df8 <_strtod_l+0x8b8>
 8006e1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e1c:	9a08      	ldr	r2, [sp, #32]
 8006e1e:	4650      	mov	r0, sl
 8006e20:	4659      	mov	r1, fp
 8006e22:	b1bb      	cbz	r3, 8006e54 <_strtod_l+0x914>
 8006e24:	f7ff fb6e 	bl	8006504 <sulp>
 8006e28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e2c:	ec53 2b10 	vmov	r2, r3, d0
 8006e30:	f7f9 fa5c 	bl	80002ec <__adddf3>
 8006e34:	4682      	mov	sl, r0
 8006e36:	468b      	mov	fp, r1
 8006e38:	e7de      	b.n	8006df8 <_strtod_l+0x8b8>
 8006e3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006e3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006e42:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006e46:	f04f 3aff 	mov.w	sl, #4294967295
 8006e4a:	e7d5      	b.n	8006df8 <_strtod_l+0x8b8>
 8006e4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006e4e:	ea13 0f0a 	tst.w	r3, sl
 8006e52:	e7e1      	b.n	8006e18 <_strtod_l+0x8d8>
 8006e54:	f7ff fb56 	bl	8006504 <sulp>
 8006e58:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006e5c:	ec53 2b10 	vmov	r2, r3, d0
 8006e60:	f7f9 fa42 	bl	80002e8 <__aeabi_dsub>
 8006e64:	2200      	movs	r2, #0
 8006e66:	2300      	movs	r3, #0
 8006e68:	4682      	mov	sl, r0
 8006e6a:	468b      	mov	fp, r1
 8006e6c:	f7f9 fe5c 	bl	8000b28 <__aeabi_dcmpeq>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d0c1      	beq.n	8006df8 <_strtod_l+0x8b8>
 8006e74:	e61a      	b.n	8006aac <_strtod_l+0x56c>
 8006e76:	4641      	mov	r1, r8
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f7ff facd 	bl	8006418 <__ratio>
 8006e7e:	ec57 6b10 	vmov	r6, r7, d0
 8006e82:	2200      	movs	r2, #0
 8006e84:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006e88:	4630      	mov	r0, r6
 8006e8a:	4639      	mov	r1, r7
 8006e8c:	f7f9 fe60 	bl	8000b50 <__aeabi_dcmple>
 8006e90:	2800      	cmp	r0, #0
 8006e92:	d06f      	beq.n	8006f74 <_strtod_l+0xa34>
 8006e94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d17a      	bne.n	8006f90 <_strtod_l+0xa50>
 8006e9a:	f1ba 0f00 	cmp.w	sl, #0
 8006e9e:	d158      	bne.n	8006f52 <_strtod_l+0xa12>
 8006ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ea2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d15a      	bne.n	8006f60 <_strtod_l+0xa20>
 8006eaa:	4b64      	ldr	r3, [pc, #400]	@ (800703c <_strtod_l+0xafc>)
 8006eac:	2200      	movs	r2, #0
 8006eae:	4630      	mov	r0, r6
 8006eb0:	4639      	mov	r1, r7
 8006eb2:	f7f9 fe43 	bl	8000b3c <__aeabi_dcmplt>
 8006eb6:	2800      	cmp	r0, #0
 8006eb8:	d159      	bne.n	8006f6e <_strtod_l+0xa2e>
 8006eba:	4630      	mov	r0, r6
 8006ebc:	4639      	mov	r1, r7
 8006ebe:	4b60      	ldr	r3, [pc, #384]	@ (8007040 <_strtod_l+0xb00>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	f7f9 fbc9 	bl	8000658 <__aeabi_dmul>
 8006ec6:	4606      	mov	r6, r0
 8006ec8:	460f      	mov	r7, r1
 8006eca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8006ece:	9606      	str	r6, [sp, #24]
 8006ed0:	9307      	str	r3, [sp, #28]
 8006ed2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ed6:	4d57      	ldr	r5, [pc, #348]	@ (8007034 <_strtod_l+0xaf4>)
 8006ed8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006edc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ede:	401d      	ands	r5, r3
 8006ee0:	4b58      	ldr	r3, [pc, #352]	@ (8007044 <_strtod_l+0xb04>)
 8006ee2:	429d      	cmp	r5, r3
 8006ee4:	f040 80b2 	bne.w	800704c <_strtod_l+0xb0c>
 8006ee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006eea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8006eee:	ec4b ab10 	vmov	d0, sl, fp
 8006ef2:	f7ff f9c9 	bl	8006288 <__ulp>
 8006ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006efa:	ec51 0b10 	vmov	r0, r1, d0
 8006efe:	f7f9 fbab 	bl	8000658 <__aeabi_dmul>
 8006f02:	4652      	mov	r2, sl
 8006f04:	465b      	mov	r3, fp
 8006f06:	f7f9 f9f1 	bl	80002ec <__adddf3>
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	4949      	ldr	r1, [pc, #292]	@ (8007034 <_strtod_l+0xaf4>)
 8006f0e:	4a4e      	ldr	r2, [pc, #312]	@ (8007048 <_strtod_l+0xb08>)
 8006f10:	4019      	ands	r1, r3
 8006f12:	4291      	cmp	r1, r2
 8006f14:	4682      	mov	sl, r0
 8006f16:	d942      	bls.n	8006f9e <_strtod_l+0xa5e>
 8006f18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006f1a:	4b47      	ldr	r3, [pc, #284]	@ (8007038 <_strtod_l+0xaf8>)
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d103      	bne.n	8006f28 <_strtod_l+0x9e8>
 8006f20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f22:	3301      	adds	r3, #1
 8006f24:	f43f ad2f 	beq.w	8006986 <_strtod_l+0x446>
 8006f28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007038 <_strtod_l+0xaf8>
 8006f2c:	f04f 3aff 	mov.w	sl, #4294967295
 8006f30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f32:	9805      	ldr	r0, [sp, #20]
 8006f34:	f7fe fe7c 	bl	8005c30 <_Bfree>
 8006f38:	9805      	ldr	r0, [sp, #20]
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	f7fe fe78 	bl	8005c30 <_Bfree>
 8006f40:	9805      	ldr	r0, [sp, #20]
 8006f42:	4641      	mov	r1, r8
 8006f44:	f7fe fe74 	bl	8005c30 <_Bfree>
 8006f48:	9805      	ldr	r0, [sp, #20]
 8006f4a:	4621      	mov	r1, r4
 8006f4c:	f7fe fe70 	bl	8005c30 <_Bfree>
 8006f50:	e619      	b.n	8006b86 <_strtod_l+0x646>
 8006f52:	f1ba 0f01 	cmp.w	sl, #1
 8006f56:	d103      	bne.n	8006f60 <_strtod_l+0xa20>
 8006f58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f43f ada6 	beq.w	8006aac <_strtod_l+0x56c>
 8006f60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007010 <_strtod_l+0xad0>
 8006f64:	4f35      	ldr	r7, [pc, #212]	@ (800703c <_strtod_l+0xafc>)
 8006f66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f6a:	2600      	movs	r6, #0
 8006f6c:	e7b1      	b.n	8006ed2 <_strtod_l+0x992>
 8006f6e:	4f34      	ldr	r7, [pc, #208]	@ (8007040 <_strtod_l+0xb00>)
 8006f70:	2600      	movs	r6, #0
 8006f72:	e7aa      	b.n	8006eca <_strtod_l+0x98a>
 8006f74:	4b32      	ldr	r3, [pc, #200]	@ (8007040 <_strtod_l+0xb00>)
 8006f76:	4630      	mov	r0, r6
 8006f78:	4639      	mov	r1, r7
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f7f9 fb6c 	bl	8000658 <__aeabi_dmul>
 8006f80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f82:	4606      	mov	r6, r0
 8006f84:	460f      	mov	r7, r1
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d09f      	beq.n	8006eca <_strtod_l+0x98a>
 8006f8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8006f8e:	e7a0      	b.n	8006ed2 <_strtod_l+0x992>
 8006f90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007018 <_strtod_l+0xad8>
 8006f94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006f98:	ec57 6b17 	vmov	r6, r7, d7
 8006f9c:	e799      	b.n	8006ed2 <_strtod_l+0x992>
 8006f9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006fa2:	9b08      	ldr	r3, [sp, #32]
 8006fa4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1c1      	bne.n	8006f30 <_strtod_l+0x9f0>
 8006fac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fb0:	0d1b      	lsrs	r3, r3, #20
 8006fb2:	051b      	lsls	r3, r3, #20
 8006fb4:	429d      	cmp	r5, r3
 8006fb6:	d1bb      	bne.n	8006f30 <_strtod_l+0x9f0>
 8006fb8:	4630      	mov	r0, r6
 8006fba:	4639      	mov	r1, r7
 8006fbc:	f7f9 feac 	bl	8000d18 <__aeabi_d2lz>
 8006fc0:	f7f9 fb1c 	bl	80005fc <__aeabi_l2d>
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	460b      	mov	r3, r1
 8006fc8:	4630      	mov	r0, r6
 8006fca:	4639      	mov	r1, r7
 8006fcc:	f7f9 f98c 	bl	80002e8 <__aeabi_dsub>
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4602      	mov	r2, r0
 8006fd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8006fd8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8006fdc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fde:	ea46 060a 	orr.w	r6, r6, sl
 8006fe2:	431e      	orrs	r6, r3
 8006fe4:	d06f      	beq.n	80070c6 <_strtod_l+0xb86>
 8006fe6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007020 <_strtod_l+0xae0>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 fda6 	bl	8000b3c <__aeabi_dcmplt>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	f47f acd3 	bne.w	800699c <_strtod_l+0x45c>
 8006ff6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007028 <_strtod_l+0xae8>)
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007000:	f7f9 fdba 	bl	8000b78 <__aeabi_dcmpgt>
 8007004:	2800      	cmp	r0, #0
 8007006:	d093      	beq.n	8006f30 <_strtod_l+0x9f0>
 8007008:	e4c8      	b.n	800699c <_strtod_l+0x45c>
 800700a:	bf00      	nop
 800700c:	f3af 8000 	nop.w
 8007010:	00000000 	.word	0x00000000
 8007014:	bff00000 	.word	0xbff00000
 8007018:	00000000 	.word	0x00000000
 800701c:	3ff00000 	.word	0x3ff00000
 8007020:	94a03595 	.word	0x94a03595
 8007024:	3fdfffff 	.word	0x3fdfffff
 8007028:	35afe535 	.word	0x35afe535
 800702c:	3fe00000 	.word	0x3fe00000
 8007030:	000fffff 	.word	0x000fffff
 8007034:	7ff00000 	.word	0x7ff00000
 8007038:	7fefffff 	.word	0x7fefffff
 800703c:	3ff00000 	.word	0x3ff00000
 8007040:	3fe00000 	.word	0x3fe00000
 8007044:	7fe00000 	.word	0x7fe00000
 8007048:	7c9fffff 	.word	0x7c9fffff
 800704c:	9b08      	ldr	r3, [sp, #32]
 800704e:	b323      	cbz	r3, 800709a <_strtod_l+0xb5a>
 8007050:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007054:	d821      	bhi.n	800709a <_strtod_l+0xb5a>
 8007056:	a328      	add	r3, pc, #160	@ (adr r3, 80070f8 <_strtod_l+0xbb8>)
 8007058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705c:	4630      	mov	r0, r6
 800705e:	4639      	mov	r1, r7
 8007060:	f7f9 fd76 	bl	8000b50 <__aeabi_dcmple>
 8007064:	b1a0      	cbz	r0, 8007090 <_strtod_l+0xb50>
 8007066:	4639      	mov	r1, r7
 8007068:	4630      	mov	r0, r6
 800706a:	f7f9 fdcd 	bl	8000c08 <__aeabi_d2uiz>
 800706e:	2801      	cmp	r0, #1
 8007070:	bf38      	it	cc
 8007072:	2001      	movcc	r0, #1
 8007074:	f7f9 fa76 	bl	8000564 <__aeabi_ui2d>
 8007078:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800707a:	4606      	mov	r6, r0
 800707c:	460f      	mov	r7, r1
 800707e:	b9fb      	cbnz	r3, 80070c0 <_strtod_l+0xb80>
 8007080:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007084:	9014      	str	r0, [sp, #80]	@ 0x50
 8007086:	9315      	str	r3, [sp, #84]	@ 0x54
 8007088:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800708c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007090:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007092:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007096:	1b5b      	subs	r3, r3, r5
 8007098:	9311      	str	r3, [sp, #68]	@ 0x44
 800709a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800709e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80070a2:	f7ff f8f1 	bl	8006288 <__ulp>
 80070a6:	4650      	mov	r0, sl
 80070a8:	ec53 2b10 	vmov	r2, r3, d0
 80070ac:	4659      	mov	r1, fp
 80070ae:	f7f9 fad3 	bl	8000658 <__aeabi_dmul>
 80070b2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80070b6:	f7f9 f919 	bl	80002ec <__adddf3>
 80070ba:	4682      	mov	sl, r0
 80070bc:	468b      	mov	fp, r1
 80070be:	e770      	b.n	8006fa2 <_strtod_l+0xa62>
 80070c0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80070c4:	e7e0      	b.n	8007088 <_strtod_l+0xb48>
 80070c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007100 <_strtod_l+0xbc0>)
 80070c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070cc:	f7f9 fd36 	bl	8000b3c <__aeabi_dcmplt>
 80070d0:	e798      	b.n	8007004 <_strtod_l+0xac4>
 80070d2:	2300      	movs	r3, #0
 80070d4:	930e      	str	r3, [sp, #56]	@ 0x38
 80070d6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80070d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	f7ff ba6d 	b.w	80065ba <_strtod_l+0x7a>
 80070e0:	2a65      	cmp	r2, #101	@ 0x65
 80070e2:	f43f ab68 	beq.w	80067b6 <_strtod_l+0x276>
 80070e6:	2a45      	cmp	r2, #69	@ 0x45
 80070e8:	f43f ab65 	beq.w	80067b6 <_strtod_l+0x276>
 80070ec:	2301      	movs	r3, #1
 80070ee:	f7ff bba0 	b.w	8006832 <_strtod_l+0x2f2>
 80070f2:	bf00      	nop
 80070f4:	f3af 8000 	nop.w
 80070f8:	ffc00000 	.word	0xffc00000
 80070fc:	41dfffff 	.word	0x41dfffff
 8007100:	94a03595 	.word	0x94a03595
 8007104:	3fcfffff 	.word	0x3fcfffff

08007108 <_strtod_r>:
 8007108:	4b01      	ldr	r3, [pc, #4]	@ (8007110 <_strtod_r+0x8>)
 800710a:	f7ff ba19 	b.w	8006540 <_strtod_l>
 800710e:	bf00      	nop
 8007110:	20000068 	.word	0x20000068

08007114 <_strtol_l.isra.0>:
 8007114:	2b24      	cmp	r3, #36	@ 0x24
 8007116:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800711a:	4686      	mov	lr, r0
 800711c:	4690      	mov	r8, r2
 800711e:	d801      	bhi.n	8007124 <_strtol_l.isra.0+0x10>
 8007120:	2b01      	cmp	r3, #1
 8007122:	d106      	bne.n	8007132 <_strtol_l.isra.0+0x1e>
 8007124:	f7fd fdae 	bl	8004c84 <__errno>
 8007128:	2316      	movs	r3, #22
 800712a:	6003      	str	r3, [r0, #0]
 800712c:	2000      	movs	r0, #0
 800712e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007132:	4834      	ldr	r0, [pc, #208]	@ (8007204 <_strtol_l.isra.0+0xf0>)
 8007134:	460d      	mov	r5, r1
 8007136:	462a      	mov	r2, r5
 8007138:	f815 4b01 	ldrb.w	r4, [r5], #1
 800713c:	5d06      	ldrb	r6, [r0, r4]
 800713e:	f016 0608 	ands.w	r6, r6, #8
 8007142:	d1f8      	bne.n	8007136 <_strtol_l.isra.0+0x22>
 8007144:	2c2d      	cmp	r4, #45	@ 0x2d
 8007146:	d110      	bne.n	800716a <_strtol_l.isra.0+0x56>
 8007148:	782c      	ldrb	r4, [r5, #0]
 800714a:	2601      	movs	r6, #1
 800714c:	1c95      	adds	r5, r2, #2
 800714e:	f033 0210 	bics.w	r2, r3, #16
 8007152:	d115      	bne.n	8007180 <_strtol_l.isra.0+0x6c>
 8007154:	2c30      	cmp	r4, #48	@ 0x30
 8007156:	d10d      	bne.n	8007174 <_strtol_l.isra.0+0x60>
 8007158:	782a      	ldrb	r2, [r5, #0]
 800715a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800715e:	2a58      	cmp	r2, #88	@ 0x58
 8007160:	d108      	bne.n	8007174 <_strtol_l.isra.0+0x60>
 8007162:	786c      	ldrb	r4, [r5, #1]
 8007164:	3502      	adds	r5, #2
 8007166:	2310      	movs	r3, #16
 8007168:	e00a      	b.n	8007180 <_strtol_l.isra.0+0x6c>
 800716a:	2c2b      	cmp	r4, #43	@ 0x2b
 800716c:	bf04      	itt	eq
 800716e:	782c      	ldrbeq	r4, [r5, #0]
 8007170:	1c95      	addeq	r5, r2, #2
 8007172:	e7ec      	b.n	800714e <_strtol_l.isra.0+0x3a>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1f6      	bne.n	8007166 <_strtol_l.isra.0+0x52>
 8007178:	2c30      	cmp	r4, #48	@ 0x30
 800717a:	bf14      	ite	ne
 800717c:	230a      	movne	r3, #10
 800717e:	2308      	moveq	r3, #8
 8007180:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007184:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007188:	2200      	movs	r2, #0
 800718a:	fbbc f9f3 	udiv	r9, ip, r3
 800718e:	4610      	mov	r0, r2
 8007190:	fb03 ca19 	mls	sl, r3, r9, ip
 8007194:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007198:	2f09      	cmp	r7, #9
 800719a:	d80f      	bhi.n	80071bc <_strtol_l.isra.0+0xa8>
 800719c:	463c      	mov	r4, r7
 800719e:	42a3      	cmp	r3, r4
 80071a0:	dd1b      	ble.n	80071da <_strtol_l.isra.0+0xc6>
 80071a2:	1c57      	adds	r7, r2, #1
 80071a4:	d007      	beq.n	80071b6 <_strtol_l.isra.0+0xa2>
 80071a6:	4581      	cmp	r9, r0
 80071a8:	d314      	bcc.n	80071d4 <_strtol_l.isra.0+0xc0>
 80071aa:	d101      	bne.n	80071b0 <_strtol_l.isra.0+0x9c>
 80071ac:	45a2      	cmp	sl, r4
 80071ae:	db11      	blt.n	80071d4 <_strtol_l.isra.0+0xc0>
 80071b0:	fb00 4003 	mla	r0, r0, r3, r4
 80071b4:	2201      	movs	r2, #1
 80071b6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071ba:	e7eb      	b.n	8007194 <_strtol_l.isra.0+0x80>
 80071bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80071c0:	2f19      	cmp	r7, #25
 80071c2:	d801      	bhi.n	80071c8 <_strtol_l.isra.0+0xb4>
 80071c4:	3c37      	subs	r4, #55	@ 0x37
 80071c6:	e7ea      	b.n	800719e <_strtol_l.isra.0+0x8a>
 80071c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80071cc:	2f19      	cmp	r7, #25
 80071ce:	d804      	bhi.n	80071da <_strtol_l.isra.0+0xc6>
 80071d0:	3c57      	subs	r4, #87	@ 0x57
 80071d2:	e7e4      	b.n	800719e <_strtol_l.isra.0+0x8a>
 80071d4:	f04f 32ff 	mov.w	r2, #4294967295
 80071d8:	e7ed      	b.n	80071b6 <_strtol_l.isra.0+0xa2>
 80071da:	1c53      	adds	r3, r2, #1
 80071dc:	d108      	bne.n	80071f0 <_strtol_l.isra.0+0xdc>
 80071de:	2322      	movs	r3, #34	@ 0x22
 80071e0:	f8ce 3000 	str.w	r3, [lr]
 80071e4:	4660      	mov	r0, ip
 80071e6:	f1b8 0f00 	cmp.w	r8, #0
 80071ea:	d0a0      	beq.n	800712e <_strtol_l.isra.0+0x1a>
 80071ec:	1e69      	subs	r1, r5, #1
 80071ee:	e006      	b.n	80071fe <_strtol_l.isra.0+0xea>
 80071f0:	b106      	cbz	r6, 80071f4 <_strtol_l.isra.0+0xe0>
 80071f2:	4240      	negs	r0, r0
 80071f4:	f1b8 0f00 	cmp.w	r8, #0
 80071f8:	d099      	beq.n	800712e <_strtol_l.isra.0+0x1a>
 80071fa:	2a00      	cmp	r2, #0
 80071fc:	d1f6      	bne.n	80071ec <_strtol_l.isra.0+0xd8>
 80071fe:	f8c8 1000 	str.w	r1, [r8]
 8007202:	e794      	b.n	800712e <_strtol_l.isra.0+0x1a>
 8007204:	08008781 	.word	0x08008781

08007208 <_strtol_r>:
 8007208:	f7ff bf84 	b.w	8007114 <_strtol_l.isra.0>

0800720c <__ssputs_r>:
 800720c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007210:	688e      	ldr	r6, [r1, #8]
 8007212:	461f      	mov	r7, r3
 8007214:	42be      	cmp	r6, r7
 8007216:	680b      	ldr	r3, [r1, #0]
 8007218:	4682      	mov	sl, r0
 800721a:	460c      	mov	r4, r1
 800721c:	4690      	mov	r8, r2
 800721e:	d82d      	bhi.n	800727c <__ssputs_r+0x70>
 8007220:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007224:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007228:	d026      	beq.n	8007278 <__ssputs_r+0x6c>
 800722a:	6965      	ldr	r5, [r4, #20]
 800722c:	6909      	ldr	r1, [r1, #16]
 800722e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007232:	eba3 0901 	sub.w	r9, r3, r1
 8007236:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800723a:	1c7b      	adds	r3, r7, #1
 800723c:	444b      	add	r3, r9
 800723e:	106d      	asrs	r5, r5, #1
 8007240:	429d      	cmp	r5, r3
 8007242:	bf38      	it	cc
 8007244:	461d      	movcc	r5, r3
 8007246:	0553      	lsls	r3, r2, #21
 8007248:	d527      	bpl.n	800729a <__ssputs_r+0x8e>
 800724a:	4629      	mov	r1, r5
 800724c:	f7fe fc24 	bl	8005a98 <_malloc_r>
 8007250:	4606      	mov	r6, r0
 8007252:	b360      	cbz	r0, 80072ae <__ssputs_r+0xa2>
 8007254:	6921      	ldr	r1, [r4, #16]
 8007256:	464a      	mov	r2, r9
 8007258:	f000 fa18 	bl	800768c <memcpy>
 800725c:	89a3      	ldrh	r3, [r4, #12]
 800725e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007262:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007266:	81a3      	strh	r3, [r4, #12]
 8007268:	6126      	str	r6, [r4, #16]
 800726a:	6165      	str	r5, [r4, #20]
 800726c:	444e      	add	r6, r9
 800726e:	eba5 0509 	sub.w	r5, r5, r9
 8007272:	6026      	str	r6, [r4, #0]
 8007274:	60a5      	str	r5, [r4, #8]
 8007276:	463e      	mov	r6, r7
 8007278:	42be      	cmp	r6, r7
 800727a:	d900      	bls.n	800727e <__ssputs_r+0x72>
 800727c:	463e      	mov	r6, r7
 800727e:	6820      	ldr	r0, [r4, #0]
 8007280:	4632      	mov	r2, r6
 8007282:	4641      	mov	r1, r8
 8007284:	f000 f9c6 	bl	8007614 <memmove>
 8007288:	68a3      	ldr	r3, [r4, #8]
 800728a:	1b9b      	subs	r3, r3, r6
 800728c:	60a3      	str	r3, [r4, #8]
 800728e:	6823      	ldr	r3, [r4, #0]
 8007290:	4433      	add	r3, r6
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	2000      	movs	r0, #0
 8007296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729a:	462a      	mov	r2, r5
 800729c:	f000 fd89 	bl	8007db2 <_realloc_r>
 80072a0:	4606      	mov	r6, r0
 80072a2:	2800      	cmp	r0, #0
 80072a4:	d1e0      	bne.n	8007268 <__ssputs_r+0x5c>
 80072a6:	6921      	ldr	r1, [r4, #16]
 80072a8:	4650      	mov	r0, sl
 80072aa:	f7fe fb81 	bl	80059b0 <_free_r>
 80072ae:	230c      	movs	r3, #12
 80072b0:	f8ca 3000 	str.w	r3, [sl]
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ba:	81a3      	strh	r3, [r4, #12]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	e7e9      	b.n	8007296 <__ssputs_r+0x8a>
	...

080072c4 <_svfiprintf_r>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	4698      	mov	r8, r3
 80072ca:	898b      	ldrh	r3, [r1, #12]
 80072cc:	061b      	lsls	r3, r3, #24
 80072ce:	b09d      	sub	sp, #116	@ 0x74
 80072d0:	4607      	mov	r7, r0
 80072d2:	460d      	mov	r5, r1
 80072d4:	4614      	mov	r4, r2
 80072d6:	d510      	bpl.n	80072fa <_svfiprintf_r+0x36>
 80072d8:	690b      	ldr	r3, [r1, #16]
 80072da:	b973      	cbnz	r3, 80072fa <_svfiprintf_r+0x36>
 80072dc:	2140      	movs	r1, #64	@ 0x40
 80072de:	f7fe fbdb 	bl	8005a98 <_malloc_r>
 80072e2:	6028      	str	r0, [r5, #0]
 80072e4:	6128      	str	r0, [r5, #16]
 80072e6:	b930      	cbnz	r0, 80072f6 <_svfiprintf_r+0x32>
 80072e8:	230c      	movs	r3, #12
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	f04f 30ff 	mov.w	r0, #4294967295
 80072f0:	b01d      	add	sp, #116	@ 0x74
 80072f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f6:	2340      	movs	r3, #64	@ 0x40
 80072f8:	616b      	str	r3, [r5, #20]
 80072fa:	2300      	movs	r3, #0
 80072fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80072fe:	2320      	movs	r3, #32
 8007300:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007304:	f8cd 800c 	str.w	r8, [sp, #12]
 8007308:	2330      	movs	r3, #48	@ 0x30
 800730a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80074a8 <_svfiprintf_r+0x1e4>
 800730e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007312:	f04f 0901 	mov.w	r9, #1
 8007316:	4623      	mov	r3, r4
 8007318:	469a      	mov	sl, r3
 800731a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800731e:	b10a      	cbz	r2, 8007324 <_svfiprintf_r+0x60>
 8007320:	2a25      	cmp	r2, #37	@ 0x25
 8007322:	d1f9      	bne.n	8007318 <_svfiprintf_r+0x54>
 8007324:	ebba 0b04 	subs.w	fp, sl, r4
 8007328:	d00b      	beq.n	8007342 <_svfiprintf_r+0x7e>
 800732a:	465b      	mov	r3, fp
 800732c:	4622      	mov	r2, r4
 800732e:	4629      	mov	r1, r5
 8007330:	4638      	mov	r0, r7
 8007332:	f7ff ff6b 	bl	800720c <__ssputs_r>
 8007336:	3001      	adds	r0, #1
 8007338:	f000 80a7 	beq.w	800748a <_svfiprintf_r+0x1c6>
 800733c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800733e:	445a      	add	r2, fp
 8007340:	9209      	str	r2, [sp, #36]	@ 0x24
 8007342:	f89a 3000 	ldrb.w	r3, [sl]
 8007346:	2b00      	cmp	r3, #0
 8007348:	f000 809f 	beq.w	800748a <_svfiprintf_r+0x1c6>
 800734c:	2300      	movs	r3, #0
 800734e:	f04f 32ff 	mov.w	r2, #4294967295
 8007352:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007356:	f10a 0a01 	add.w	sl, sl, #1
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	9307      	str	r3, [sp, #28]
 800735e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007362:	931a      	str	r3, [sp, #104]	@ 0x68
 8007364:	4654      	mov	r4, sl
 8007366:	2205      	movs	r2, #5
 8007368:	f814 1b01 	ldrb.w	r1, [r4], #1
 800736c:	484e      	ldr	r0, [pc, #312]	@ (80074a8 <_svfiprintf_r+0x1e4>)
 800736e:	f7f8 ff5f 	bl	8000230 <memchr>
 8007372:	9a04      	ldr	r2, [sp, #16]
 8007374:	b9d8      	cbnz	r0, 80073ae <_svfiprintf_r+0xea>
 8007376:	06d0      	lsls	r0, r2, #27
 8007378:	bf44      	itt	mi
 800737a:	2320      	movmi	r3, #32
 800737c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007380:	0711      	lsls	r1, r2, #28
 8007382:	bf44      	itt	mi
 8007384:	232b      	movmi	r3, #43	@ 0x2b
 8007386:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800738a:	f89a 3000 	ldrb.w	r3, [sl]
 800738e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007390:	d015      	beq.n	80073be <_svfiprintf_r+0xfa>
 8007392:	9a07      	ldr	r2, [sp, #28]
 8007394:	4654      	mov	r4, sl
 8007396:	2000      	movs	r0, #0
 8007398:	f04f 0c0a 	mov.w	ip, #10
 800739c:	4621      	mov	r1, r4
 800739e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073a2:	3b30      	subs	r3, #48	@ 0x30
 80073a4:	2b09      	cmp	r3, #9
 80073a6:	d94b      	bls.n	8007440 <_svfiprintf_r+0x17c>
 80073a8:	b1b0      	cbz	r0, 80073d8 <_svfiprintf_r+0x114>
 80073aa:	9207      	str	r2, [sp, #28]
 80073ac:	e014      	b.n	80073d8 <_svfiprintf_r+0x114>
 80073ae:	eba0 0308 	sub.w	r3, r0, r8
 80073b2:	fa09 f303 	lsl.w	r3, r9, r3
 80073b6:	4313      	orrs	r3, r2
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	46a2      	mov	sl, r4
 80073bc:	e7d2      	b.n	8007364 <_svfiprintf_r+0xa0>
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	1d19      	adds	r1, r3, #4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	9103      	str	r1, [sp, #12]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	bfbb      	ittet	lt
 80073ca:	425b      	neglt	r3, r3
 80073cc:	f042 0202 	orrlt.w	r2, r2, #2
 80073d0:	9307      	strge	r3, [sp, #28]
 80073d2:	9307      	strlt	r3, [sp, #28]
 80073d4:	bfb8      	it	lt
 80073d6:	9204      	strlt	r2, [sp, #16]
 80073d8:	7823      	ldrb	r3, [r4, #0]
 80073da:	2b2e      	cmp	r3, #46	@ 0x2e
 80073dc:	d10a      	bne.n	80073f4 <_svfiprintf_r+0x130>
 80073de:	7863      	ldrb	r3, [r4, #1]
 80073e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80073e2:	d132      	bne.n	800744a <_svfiprintf_r+0x186>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	1d1a      	adds	r2, r3, #4
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	9203      	str	r2, [sp, #12]
 80073ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073f0:	3402      	adds	r4, #2
 80073f2:	9305      	str	r3, [sp, #20]
 80073f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80074b8 <_svfiprintf_r+0x1f4>
 80073f8:	7821      	ldrb	r1, [r4, #0]
 80073fa:	2203      	movs	r2, #3
 80073fc:	4650      	mov	r0, sl
 80073fe:	f7f8 ff17 	bl	8000230 <memchr>
 8007402:	b138      	cbz	r0, 8007414 <_svfiprintf_r+0x150>
 8007404:	9b04      	ldr	r3, [sp, #16]
 8007406:	eba0 000a 	sub.w	r0, r0, sl
 800740a:	2240      	movs	r2, #64	@ 0x40
 800740c:	4082      	lsls	r2, r0
 800740e:	4313      	orrs	r3, r2
 8007410:	3401      	adds	r4, #1
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007418:	4824      	ldr	r0, [pc, #144]	@ (80074ac <_svfiprintf_r+0x1e8>)
 800741a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800741e:	2206      	movs	r2, #6
 8007420:	f7f8 ff06 	bl	8000230 <memchr>
 8007424:	2800      	cmp	r0, #0
 8007426:	d036      	beq.n	8007496 <_svfiprintf_r+0x1d2>
 8007428:	4b21      	ldr	r3, [pc, #132]	@ (80074b0 <_svfiprintf_r+0x1ec>)
 800742a:	bb1b      	cbnz	r3, 8007474 <_svfiprintf_r+0x1b0>
 800742c:	9b03      	ldr	r3, [sp, #12]
 800742e:	3307      	adds	r3, #7
 8007430:	f023 0307 	bic.w	r3, r3, #7
 8007434:	3308      	adds	r3, #8
 8007436:	9303      	str	r3, [sp, #12]
 8007438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800743a:	4433      	add	r3, r6
 800743c:	9309      	str	r3, [sp, #36]	@ 0x24
 800743e:	e76a      	b.n	8007316 <_svfiprintf_r+0x52>
 8007440:	fb0c 3202 	mla	r2, ip, r2, r3
 8007444:	460c      	mov	r4, r1
 8007446:	2001      	movs	r0, #1
 8007448:	e7a8      	b.n	800739c <_svfiprintf_r+0xd8>
 800744a:	2300      	movs	r3, #0
 800744c:	3401      	adds	r4, #1
 800744e:	9305      	str	r3, [sp, #20]
 8007450:	4619      	mov	r1, r3
 8007452:	f04f 0c0a 	mov.w	ip, #10
 8007456:	4620      	mov	r0, r4
 8007458:	f810 2b01 	ldrb.w	r2, [r0], #1
 800745c:	3a30      	subs	r2, #48	@ 0x30
 800745e:	2a09      	cmp	r2, #9
 8007460:	d903      	bls.n	800746a <_svfiprintf_r+0x1a6>
 8007462:	2b00      	cmp	r3, #0
 8007464:	d0c6      	beq.n	80073f4 <_svfiprintf_r+0x130>
 8007466:	9105      	str	r1, [sp, #20]
 8007468:	e7c4      	b.n	80073f4 <_svfiprintf_r+0x130>
 800746a:	fb0c 2101 	mla	r1, ip, r1, r2
 800746e:	4604      	mov	r4, r0
 8007470:	2301      	movs	r3, #1
 8007472:	e7f0      	b.n	8007456 <_svfiprintf_r+0x192>
 8007474:	ab03      	add	r3, sp, #12
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	462a      	mov	r2, r5
 800747a:	4b0e      	ldr	r3, [pc, #56]	@ (80074b4 <_svfiprintf_r+0x1f0>)
 800747c:	a904      	add	r1, sp, #16
 800747e:	4638      	mov	r0, r7
 8007480:	f7fc fc8c 	bl	8003d9c <_printf_float>
 8007484:	1c42      	adds	r2, r0, #1
 8007486:	4606      	mov	r6, r0
 8007488:	d1d6      	bne.n	8007438 <_svfiprintf_r+0x174>
 800748a:	89ab      	ldrh	r3, [r5, #12]
 800748c:	065b      	lsls	r3, r3, #25
 800748e:	f53f af2d 	bmi.w	80072ec <_svfiprintf_r+0x28>
 8007492:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007494:	e72c      	b.n	80072f0 <_svfiprintf_r+0x2c>
 8007496:	ab03      	add	r3, sp, #12
 8007498:	9300      	str	r3, [sp, #0]
 800749a:	462a      	mov	r2, r5
 800749c:	4b05      	ldr	r3, [pc, #20]	@ (80074b4 <_svfiprintf_r+0x1f0>)
 800749e:	a904      	add	r1, sp, #16
 80074a0:	4638      	mov	r0, r7
 80074a2:	f7fc ff13 	bl	80042cc <_printf_i>
 80074a6:	e7ed      	b.n	8007484 <_svfiprintf_r+0x1c0>
 80074a8:	08008579 	.word	0x08008579
 80074ac:	08008583 	.word	0x08008583
 80074b0:	08003d9d 	.word	0x08003d9d
 80074b4:	0800720d 	.word	0x0800720d
 80074b8:	0800857f 	.word	0x0800857f

080074bc <__sflush_r>:
 80074bc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80074c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c4:	0716      	lsls	r6, r2, #28
 80074c6:	4605      	mov	r5, r0
 80074c8:	460c      	mov	r4, r1
 80074ca:	d454      	bmi.n	8007576 <__sflush_r+0xba>
 80074cc:	684b      	ldr	r3, [r1, #4]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	dc02      	bgt.n	80074d8 <__sflush_r+0x1c>
 80074d2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	dd48      	ble.n	800756a <__sflush_r+0xae>
 80074d8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80074da:	2e00      	cmp	r6, #0
 80074dc:	d045      	beq.n	800756a <__sflush_r+0xae>
 80074de:	2300      	movs	r3, #0
 80074e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80074e4:	682f      	ldr	r7, [r5, #0]
 80074e6:	6a21      	ldr	r1, [r4, #32]
 80074e8:	602b      	str	r3, [r5, #0]
 80074ea:	d030      	beq.n	800754e <__sflush_r+0x92>
 80074ec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80074ee:	89a3      	ldrh	r3, [r4, #12]
 80074f0:	0759      	lsls	r1, r3, #29
 80074f2:	d505      	bpl.n	8007500 <__sflush_r+0x44>
 80074f4:	6863      	ldr	r3, [r4, #4]
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80074fa:	b10b      	cbz	r3, 8007500 <__sflush_r+0x44>
 80074fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80074fe:	1ad2      	subs	r2, r2, r3
 8007500:	2300      	movs	r3, #0
 8007502:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007504:	6a21      	ldr	r1, [r4, #32]
 8007506:	4628      	mov	r0, r5
 8007508:	47b0      	blx	r6
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	89a3      	ldrh	r3, [r4, #12]
 800750e:	d106      	bne.n	800751e <__sflush_r+0x62>
 8007510:	6829      	ldr	r1, [r5, #0]
 8007512:	291d      	cmp	r1, #29
 8007514:	d82b      	bhi.n	800756e <__sflush_r+0xb2>
 8007516:	4a2a      	ldr	r2, [pc, #168]	@ (80075c0 <__sflush_r+0x104>)
 8007518:	40ca      	lsrs	r2, r1
 800751a:	07d6      	lsls	r6, r2, #31
 800751c:	d527      	bpl.n	800756e <__sflush_r+0xb2>
 800751e:	2200      	movs	r2, #0
 8007520:	6062      	str	r2, [r4, #4]
 8007522:	04d9      	lsls	r1, r3, #19
 8007524:	6922      	ldr	r2, [r4, #16]
 8007526:	6022      	str	r2, [r4, #0]
 8007528:	d504      	bpl.n	8007534 <__sflush_r+0x78>
 800752a:	1c42      	adds	r2, r0, #1
 800752c:	d101      	bne.n	8007532 <__sflush_r+0x76>
 800752e:	682b      	ldr	r3, [r5, #0]
 8007530:	b903      	cbnz	r3, 8007534 <__sflush_r+0x78>
 8007532:	6560      	str	r0, [r4, #84]	@ 0x54
 8007534:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007536:	602f      	str	r7, [r5, #0]
 8007538:	b1b9      	cbz	r1, 800756a <__sflush_r+0xae>
 800753a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800753e:	4299      	cmp	r1, r3
 8007540:	d002      	beq.n	8007548 <__sflush_r+0x8c>
 8007542:	4628      	mov	r0, r5
 8007544:	f7fe fa34 	bl	80059b0 <_free_r>
 8007548:	2300      	movs	r3, #0
 800754a:	6363      	str	r3, [r4, #52]	@ 0x34
 800754c:	e00d      	b.n	800756a <__sflush_r+0xae>
 800754e:	2301      	movs	r3, #1
 8007550:	4628      	mov	r0, r5
 8007552:	47b0      	blx	r6
 8007554:	4602      	mov	r2, r0
 8007556:	1c50      	adds	r0, r2, #1
 8007558:	d1c9      	bne.n	80074ee <__sflush_r+0x32>
 800755a:	682b      	ldr	r3, [r5, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d0c6      	beq.n	80074ee <__sflush_r+0x32>
 8007560:	2b1d      	cmp	r3, #29
 8007562:	d001      	beq.n	8007568 <__sflush_r+0xac>
 8007564:	2b16      	cmp	r3, #22
 8007566:	d11e      	bne.n	80075a6 <__sflush_r+0xea>
 8007568:	602f      	str	r7, [r5, #0]
 800756a:	2000      	movs	r0, #0
 800756c:	e022      	b.n	80075b4 <__sflush_r+0xf8>
 800756e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007572:	b21b      	sxth	r3, r3
 8007574:	e01b      	b.n	80075ae <__sflush_r+0xf2>
 8007576:	690f      	ldr	r7, [r1, #16]
 8007578:	2f00      	cmp	r7, #0
 800757a:	d0f6      	beq.n	800756a <__sflush_r+0xae>
 800757c:	0793      	lsls	r3, r2, #30
 800757e:	680e      	ldr	r6, [r1, #0]
 8007580:	bf08      	it	eq
 8007582:	694b      	ldreq	r3, [r1, #20]
 8007584:	600f      	str	r7, [r1, #0]
 8007586:	bf18      	it	ne
 8007588:	2300      	movne	r3, #0
 800758a:	eba6 0807 	sub.w	r8, r6, r7
 800758e:	608b      	str	r3, [r1, #8]
 8007590:	f1b8 0f00 	cmp.w	r8, #0
 8007594:	dde9      	ble.n	800756a <__sflush_r+0xae>
 8007596:	6a21      	ldr	r1, [r4, #32]
 8007598:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800759a:	4643      	mov	r3, r8
 800759c:	463a      	mov	r2, r7
 800759e:	4628      	mov	r0, r5
 80075a0:	47b0      	blx	r6
 80075a2:	2800      	cmp	r0, #0
 80075a4:	dc08      	bgt.n	80075b8 <__sflush_r+0xfc>
 80075a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075ae:	81a3      	strh	r3, [r4, #12]
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075b8:	4407      	add	r7, r0
 80075ba:	eba8 0800 	sub.w	r8, r8, r0
 80075be:	e7e7      	b.n	8007590 <__sflush_r+0xd4>
 80075c0:	20400001 	.word	0x20400001

080075c4 <_fflush_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	690b      	ldr	r3, [r1, #16]
 80075c8:	4605      	mov	r5, r0
 80075ca:	460c      	mov	r4, r1
 80075cc:	b913      	cbnz	r3, 80075d4 <_fflush_r+0x10>
 80075ce:	2500      	movs	r5, #0
 80075d0:	4628      	mov	r0, r5
 80075d2:	bd38      	pop	{r3, r4, r5, pc}
 80075d4:	b118      	cbz	r0, 80075de <_fflush_r+0x1a>
 80075d6:	6a03      	ldr	r3, [r0, #32]
 80075d8:	b90b      	cbnz	r3, 80075de <_fflush_r+0x1a>
 80075da:	f7fd fa2f 	bl	8004a3c <__sinit>
 80075de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d0f3      	beq.n	80075ce <_fflush_r+0xa>
 80075e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80075e8:	07d0      	lsls	r0, r2, #31
 80075ea:	d404      	bmi.n	80075f6 <_fflush_r+0x32>
 80075ec:	0599      	lsls	r1, r3, #22
 80075ee:	d402      	bmi.n	80075f6 <_fflush_r+0x32>
 80075f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80075f2:	f7fd fb72 	bl	8004cda <__retarget_lock_acquire_recursive>
 80075f6:	4628      	mov	r0, r5
 80075f8:	4621      	mov	r1, r4
 80075fa:	f7ff ff5f 	bl	80074bc <__sflush_r>
 80075fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007600:	07da      	lsls	r2, r3, #31
 8007602:	4605      	mov	r5, r0
 8007604:	d4e4      	bmi.n	80075d0 <_fflush_r+0xc>
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	059b      	lsls	r3, r3, #22
 800760a:	d4e1      	bmi.n	80075d0 <_fflush_r+0xc>
 800760c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800760e:	f7fd fb65 	bl	8004cdc <__retarget_lock_release_recursive>
 8007612:	e7dd      	b.n	80075d0 <_fflush_r+0xc>

08007614 <memmove>:
 8007614:	4288      	cmp	r0, r1
 8007616:	b510      	push	{r4, lr}
 8007618:	eb01 0402 	add.w	r4, r1, r2
 800761c:	d902      	bls.n	8007624 <memmove+0x10>
 800761e:	4284      	cmp	r4, r0
 8007620:	4623      	mov	r3, r4
 8007622:	d807      	bhi.n	8007634 <memmove+0x20>
 8007624:	1e43      	subs	r3, r0, #1
 8007626:	42a1      	cmp	r1, r4
 8007628:	d008      	beq.n	800763c <memmove+0x28>
 800762a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800762e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007632:	e7f8      	b.n	8007626 <memmove+0x12>
 8007634:	4402      	add	r2, r0
 8007636:	4601      	mov	r1, r0
 8007638:	428a      	cmp	r2, r1
 800763a:	d100      	bne.n	800763e <memmove+0x2a>
 800763c:	bd10      	pop	{r4, pc}
 800763e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007642:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007646:	e7f7      	b.n	8007638 <memmove+0x24>

08007648 <strncmp>:
 8007648:	b510      	push	{r4, lr}
 800764a:	b16a      	cbz	r2, 8007668 <strncmp+0x20>
 800764c:	3901      	subs	r1, #1
 800764e:	1884      	adds	r4, r0, r2
 8007650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007654:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007658:	429a      	cmp	r2, r3
 800765a:	d103      	bne.n	8007664 <strncmp+0x1c>
 800765c:	42a0      	cmp	r0, r4
 800765e:	d001      	beq.n	8007664 <strncmp+0x1c>
 8007660:	2a00      	cmp	r2, #0
 8007662:	d1f5      	bne.n	8007650 <strncmp+0x8>
 8007664:	1ad0      	subs	r0, r2, r3
 8007666:	bd10      	pop	{r4, pc}
 8007668:	4610      	mov	r0, r2
 800766a:	e7fc      	b.n	8007666 <strncmp+0x1e>

0800766c <_sbrk_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4d06      	ldr	r5, [pc, #24]	@ (8007688 <_sbrk_r+0x1c>)
 8007670:	2300      	movs	r3, #0
 8007672:	4604      	mov	r4, r0
 8007674:	4608      	mov	r0, r1
 8007676:	602b      	str	r3, [r5, #0]
 8007678:	f7fa f844 	bl	8001704 <_sbrk>
 800767c:	1c43      	adds	r3, r0, #1
 800767e:	d102      	bne.n	8007686 <_sbrk_r+0x1a>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	b103      	cbz	r3, 8007686 <_sbrk_r+0x1a>
 8007684:	6023      	str	r3, [r4, #0]
 8007686:	bd38      	pop	{r3, r4, r5, pc}
 8007688:	20000408 	.word	0x20000408

0800768c <memcpy>:
 800768c:	440a      	add	r2, r1
 800768e:	4291      	cmp	r1, r2
 8007690:	f100 33ff 	add.w	r3, r0, #4294967295
 8007694:	d100      	bne.n	8007698 <memcpy+0xc>
 8007696:	4770      	bx	lr
 8007698:	b510      	push	{r4, lr}
 800769a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800769e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076a2:	4291      	cmp	r1, r2
 80076a4:	d1f9      	bne.n	800769a <memcpy+0xe>
 80076a6:	bd10      	pop	{r4, pc}

080076a8 <nan>:
 80076a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80076b0 <nan+0x8>
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	00000000 	.word	0x00000000
 80076b4:	7ff80000 	.word	0x7ff80000

080076b8 <__assert_func>:
 80076b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076ba:	4614      	mov	r4, r2
 80076bc:	461a      	mov	r2, r3
 80076be:	4b09      	ldr	r3, [pc, #36]	@ (80076e4 <__assert_func+0x2c>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	4605      	mov	r5, r0
 80076c4:	68d8      	ldr	r0, [r3, #12]
 80076c6:	b14c      	cbz	r4, 80076dc <__assert_func+0x24>
 80076c8:	4b07      	ldr	r3, [pc, #28]	@ (80076e8 <__assert_func+0x30>)
 80076ca:	9100      	str	r1, [sp, #0]
 80076cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076d0:	4906      	ldr	r1, [pc, #24]	@ (80076ec <__assert_func+0x34>)
 80076d2:	462b      	mov	r3, r5
 80076d4:	f000 fba8 	bl	8007e28 <fiprintf>
 80076d8:	f000 fbb8 	bl	8007e4c <abort>
 80076dc:	4b04      	ldr	r3, [pc, #16]	@ (80076f0 <__assert_func+0x38>)
 80076de:	461c      	mov	r4, r3
 80076e0:	e7f3      	b.n	80076ca <__assert_func+0x12>
 80076e2:	bf00      	nop
 80076e4:	20000018 	.word	0x20000018
 80076e8:	08008592 	.word	0x08008592
 80076ec:	0800859f 	.word	0x0800859f
 80076f0:	080085cd 	.word	0x080085cd

080076f4 <_calloc_r>:
 80076f4:	b570      	push	{r4, r5, r6, lr}
 80076f6:	fba1 5402 	umull	r5, r4, r1, r2
 80076fa:	b934      	cbnz	r4, 800770a <_calloc_r+0x16>
 80076fc:	4629      	mov	r1, r5
 80076fe:	f7fe f9cb 	bl	8005a98 <_malloc_r>
 8007702:	4606      	mov	r6, r0
 8007704:	b928      	cbnz	r0, 8007712 <_calloc_r+0x1e>
 8007706:	4630      	mov	r0, r6
 8007708:	bd70      	pop	{r4, r5, r6, pc}
 800770a:	220c      	movs	r2, #12
 800770c:	6002      	str	r2, [r0, #0]
 800770e:	2600      	movs	r6, #0
 8007710:	e7f9      	b.n	8007706 <_calloc_r+0x12>
 8007712:	462a      	mov	r2, r5
 8007714:	4621      	mov	r1, r4
 8007716:	f7fd fa62 	bl	8004bde <memset>
 800771a:	e7f4      	b.n	8007706 <_calloc_r+0x12>

0800771c <rshift>:
 800771c:	6903      	ldr	r3, [r0, #16]
 800771e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007722:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007726:	ea4f 1261 	mov.w	r2, r1, asr #5
 800772a:	f100 0414 	add.w	r4, r0, #20
 800772e:	dd45      	ble.n	80077bc <rshift+0xa0>
 8007730:	f011 011f 	ands.w	r1, r1, #31
 8007734:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007738:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800773c:	d10c      	bne.n	8007758 <rshift+0x3c>
 800773e:	f100 0710 	add.w	r7, r0, #16
 8007742:	4629      	mov	r1, r5
 8007744:	42b1      	cmp	r1, r6
 8007746:	d334      	bcc.n	80077b2 <rshift+0x96>
 8007748:	1a9b      	subs	r3, r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	1eea      	subs	r2, r5, #3
 800774e:	4296      	cmp	r6, r2
 8007750:	bf38      	it	cc
 8007752:	2300      	movcc	r3, #0
 8007754:	4423      	add	r3, r4
 8007756:	e015      	b.n	8007784 <rshift+0x68>
 8007758:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800775c:	f1c1 0820 	rsb	r8, r1, #32
 8007760:	40cf      	lsrs	r7, r1
 8007762:	f105 0e04 	add.w	lr, r5, #4
 8007766:	46a1      	mov	r9, r4
 8007768:	4576      	cmp	r6, lr
 800776a:	46f4      	mov	ip, lr
 800776c:	d815      	bhi.n	800779a <rshift+0x7e>
 800776e:	1a9a      	subs	r2, r3, r2
 8007770:	0092      	lsls	r2, r2, #2
 8007772:	3a04      	subs	r2, #4
 8007774:	3501      	adds	r5, #1
 8007776:	42ae      	cmp	r6, r5
 8007778:	bf38      	it	cc
 800777a:	2200      	movcc	r2, #0
 800777c:	18a3      	adds	r3, r4, r2
 800777e:	50a7      	str	r7, [r4, r2]
 8007780:	b107      	cbz	r7, 8007784 <rshift+0x68>
 8007782:	3304      	adds	r3, #4
 8007784:	1b1a      	subs	r2, r3, r4
 8007786:	42a3      	cmp	r3, r4
 8007788:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800778c:	bf08      	it	eq
 800778e:	2300      	moveq	r3, #0
 8007790:	6102      	str	r2, [r0, #16]
 8007792:	bf08      	it	eq
 8007794:	6143      	streq	r3, [r0, #20]
 8007796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800779a:	f8dc c000 	ldr.w	ip, [ip]
 800779e:	fa0c fc08 	lsl.w	ip, ip, r8
 80077a2:	ea4c 0707 	orr.w	r7, ip, r7
 80077a6:	f849 7b04 	str.w	r7, [r9], #4
 80077aa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077ae:	40cf      	lsrs	r7, r1
 80077b0:	e7da      	b.n	8007768 <rshift+0x4c>
 80077b2:	f851 cb04 	ldr.w	ip, [r1], #4
 80077b6:	f847 cf04 	str.w	ip, [r7, #4]!
 80077ba:	e7c3      	b.n	8007744 <rshift+0x28>
 80077bc:	4623      	mov	r3, r4
 80077be:	e7e1      	b.n	8007784 <rshift+0x68>

080077c0 <__hexdig_fun>:
 80077c0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80077c4:	2b09      	cmp	r3, #9
 80077c6:	d802      	bhi.n	80077ce <__hexdig_fun+0xe>
 80077c8:	3820      	subs	r0, #32
 80077ca:	b2c0      	uxtb	r0, r0
 80077cc:	4770      	bx	lr
 80077ce:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80077d2:	2b05      	cmp	r3, #5
 80077d4:	d801      	bhi.n	80077da <__hexdig_fun+0x1a>
 80077d6:	3847      	subs	r0, #71	@ 0x47
 80077d8:	e7f7      	b.n	80077ca <__hexdig_fun+0xa>
 80077da:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80077de:	2b05      	cmp	r3, #5
 80077e0:	d801      	bhi.n	80077e6 <__hexdig_fun+0x26>
 80077e2:	3827      	subs	r0, #39	@ 0x27
 80077e4:	e7f1      	b.n	80077ca <__hexdig_fun+0xa>
 80077e6:	2000      	movs	r0, #0
 80077e8:	4770      	bx	lr
	...

080077ec <__gethex>:
 80077ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077f0:	b085      	sub	sp, #20
 80077f2:	468a      	mov	sl, r1
 80077f4:	9302      	str	r3, [sp, #8]
 80077f6:	680b      	ldr	r3, [r1, #0]
 80077f8:	9001      	str	r0, [sp, #4]
 80077fa:	4690      	mov	r8, r2
 80077fc:	1c9c      	adds	r4, r3, #2
 80077fe:	46a1      	mov	r9, r4
 8007800:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007804:	2830      	cmp	r0, #48	@ 0x30
 8007806:	d0fa      	beq.n	80077fe <__gethex+0x12>
 8007808:	eba9 0303 	sub.w	r3, r9, r3
 800780c:	f1a3 0b02 	sub.w	fp, r3, #2
 8007810:	f7ff ffd6 	bl	80077c0 <__hexdig_fun>
 8007814:	4605      	mov	r5, r0
 8007816:	2800      	cmp	r0, #0
 8007818:	d168      	bne.n	80078ec <__gethex+0x100>
 800781a:	49a0      	ldr	r1, [pc, #640]	@ (8007a9c <__gethex+0x2b0>)
 800781c:	2201      	movs	r2, #1
 800781e:	4648      	mov	r0, r9
 8007820:	f7ff ff12 	bl	8007648 <strncmp>
 8007824:	4607      	mov	r7, r0
 8007826:	2800      	cmp	r0, #0
 8007828:	d167      	bne.n	80078fa <__gethex+0x10e>
 800782a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800782e:	4626      	mov	r6, r4
 8007830:	f7ff ffc6 	bl	80077c0 <__hexdig_fun>
 8007834:	2800      	cmp	r0, #0
 8007836:	d062      	beq.n	80078fe <__gethex+0x112>
 8007838:	4623      	mov	r3, r4
 800783a:	7818      	ldrb	r0, [r3, #0]
 800783c:	2830      	cmp	r0, #48	@ 0x30
 800783e:	4699      	mov	r9, r3
 8007840:	f103 0301 	add.w	r3, r3, #1
 8007844:	d0f9      	beq.n	800783a <__gethex+0x4e>
 8007846:	f7ff ffbb 	bl	80077c0 <__hexdig_fun>
 800784a:	fab0 f580 	clz	r5, r0
 800784e:	096d      	lsrs	r5, r5, #5
 8007850:	f04f 0b01 	mov.w	fp, #1
 8007854:	464a      	mov	r2, r9
 8007856:	4616      	mov	r6, r2
 8007858:	3201      	adds	r2, #1
 800785a:	7830      	ldrb	r0, [r6, #0]
 800785c:	f7ff ffb0 	bl	80077c0 <__hexdig_fun>
 8007860:	2800      	cmp	r0, #0
 8007862:	d1f8      	bne.n	8007856 <__gethex+0x6a>
 8007864:	498d      	ldr	r1, [pc, #564]	@ (8007a9c <__gethex+0x2b0>)
 8007866:	2201      	movs	r2, #1
 8007868:	4630      	mov	r0, r6
 800786a:	f7ff feed 	bl	8007648 <strncmp>
 800786e:	2800      	cmp	r0, #0
 8007870:	d13f      	bne.n	80078f2 <__gethex+0x106>
 8007872:	b944      	cbnz	r4, 8007886 <__gethex+0x9a>
 8007874:	1c74      	adds	r4, r6, #1
 8007876:	4622      	mov	r2, r4
 8007878:	4616      	mov	r6, r2
 800787a:	3201      	adds	r2, #1
 800787c:	7830      	ldrb	r0, [r6, #0]
 800787e:	f7ff ff9f 	bl	80077c0 <__hexdig_fun>
 8007882:	2800      	cmp	r0, #0
 8007884:	d1f8      	bne.n	8007878 <__gethex+0x8c>
 8007886:	1ba4      	subs	r4, r4, r6
 8007888:	00a7      	lsls	r7, r4, #2
 800788a:	7833      	ldrb	r3, [r6, #0]
 800788c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007890:	2b50      	cmp	r3, #80	@ 0x50
 8007892:	d13e      	bne.n	8007912 <__gethex+0x126>
 8007894:	7873      	ldrb	r3, [r6, #1]
 8007896:	2b2b      	cmp	r3, #43	@ 0x2b
 8007898:	d033      	beq.n	8007902 <__gethex+0x116>
 800789a:	2b2d      	cmp	r3, #45	@ 0x2d
 800789c:	d034      	beq.n	8007908 <__gethex+0x11c>
 800789e:	1c71      	adds	r1, r6, #1
 80078a0:	2400      	movs	r4, #0
 80078a2:	7808      	ldrb	r0, [r1, #0]
 80078a4:	f7ff ff8c 	bl	80077c0 <__hexdig_fun>
 80078a8:	1e43      	subs	r3, r0, #1
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b18      	cmp	r3, #24
 80078ae:	d830      	bhi.n	8007912 <__gethex+0x126>
 80078b0:	f1a0 0210 	sub.w	r2, r0, #16
 80078b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80078b8:	f7ff ff82 	bl	80077c0 <__hexdig_fun>
 80078bc:	f100 3cff 	add.w	ip, r0, #4294967295
 80078c0:	fa5f fc8c 	uxtb.w	ip, ip
 80078c4:	f1bc 0f18 	cmp.w	ip, #24
 80078c8:	f04f 030a 	mov.w	r3, #10
 80078cc:	d91e      	bls.n	800790c <__gethex+0x120>
 80078ce:	b104      	cbz	r4, 80078d2 <__gethex+0xe6>
 80078d0:	4252      	negs	r2, r2
 80078d2:	4417      	add	r7, r2
 80078d4:	f8ca 1000 	str.w	r1, [sl]
 80078d8:	b1ed      	cbz	r5, 8007916 <__gethex+0x12a>
 80078da:	f1bb 0f00 	cmp.w	fp, #0
 80078de:	bf0c      	ite	eq
 80078e0:	2506      	moveq	r5, #6
 80078e2:	2500      	movne	r5, #0
 80078e4:	4628      	mov	r0, r5
 80078e6:	b005      	add	sp, #20
 80078e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078ec:	2500      	movs	r5, #0
 80078ee:	462c      	mov	r4, r5
 80078f0:	e7b0      	b.n	8007854 <__gethex+0x68>
 80078f2:	2c00      	cmp	r4, #0
 80078f4:	d1c7      	bne.n	8007886 <__gethex+0x9a>
 80078f6:	4627      	mov	r7, r4
 80078f8:	e7c7      	b.n	800788a <__gethex+0x9e>
 80078fa:	464e      	mov	r6, r9
 80078fc:	462f      	mov	r7, r5
 80078fe:	2501      	movs	r5, #1
 8007900:	e7c3      	b.n	800788a <__gethex+0x9e>
 8007902:	2400      	movs	r4, #0
 8007904:	1cb1      	adds	r1, r6, #2
 8007906:	e7cc      	b.n	80078a2 <__gethex+0xb6>
 8007908:	2401      	movs	r4, #1
 800790a:	e7fb      	b.n	8007904 <__gethex+0x118>
 800790c:	fb03 0002 	mla	r0, r3, r2, r0
 8007910:	e7ce      	b.n	80078b0 <__gethex+0xc4>
 8007912:	4631      	mov	r1, r6
 8007914:	e7de      	b.n	80078d4 <__gethex+0xe8>
 8007916:	eba6 0309 	sub.w	r3, r6, r9
 800791a:	3b01      	subs	r3, #1
 800791c:	4629      	mov	r1, r5
 800791e:	2b07      	cmp	r3, #7
 8007920:	dc0a      	bgt.n	8007938 <__gethex+0x14c>
 8007922:	9801      	ldr	r0, [sp, #4]
 8007924:	f7fe f944 	bl	8005bb0 <_Balloc>
 8007928:	4604      	mov	r4, r0
 800792a:	b940      	cbnz	r0, 800793e <__gethex+0x152>
 800792c:	4b5c      	ldr	r3, [pc, #368]	@ (8007aa0 <__gethex+0x2b4>)
 800792e:	4602      	mov	r2, r0
 8007930:	21e4      	movs	r1, #228	@ 0xe4
 8007932:	485c      	ldr	r0, [pc, #368]	@ (8007aa4 <__gethex+0x2b8>)
 8007934:	f7ff fec0 	bl	80076b8 <__assert_func>
 8007938:	3101      	adds	r1, #1
 800793a:	105b      	asrs	r3, r3, #1
 800793c:	e7ef      	b.n	800791e <__gethex+0x132>
 800793e:	f100 0a14 	add.w	sl, r0, #20
 8007942:	2300      	movs	r3, #0
 8007944:	4655      	mov	r5, sl
 8007946:	469b      	mov	fp, r3
 8007948:	45b1      	cmp	r9, r6
 800794a:	d337      	bcc.n	80079bc <__gethex+0x1d0>
 800794c:	f845 bb04 	str.w	fp, [r5], #4
 8007950:	eba5 050a 	sub.w	r5, r5, sl
 8007954:	10ad      	asrs	r5, r5, #2
 8007956:	6125      	str	r5, [r4, #16]
 8007958:	4658      	mov	r0, fp
 800795a:	f7fe fa1b 	bl	8005d94 <__hi0bits>
 800795e:	016d      	lsls	r5, r5, #5
 8007960:	f8d8 6000 	ldr.w	r6, [r8]
 8007964:	1a2d      	subs	r5, r5, r0
 8007966:	42b5      	cmp	r5, r6
 8007968:	dd54      	ble.n	8007a14 <__gethex+0x228>
 800796a:	1bad      	subs	r5, r5, r6
 800796c:	4629      	mov	r1, r5
 800796e:	4620      	mov	r0, r4
 8007970:	f7fe fda7 	bl	80064c2 <__any_on>
 8007974:	4681      	mov	r9, r0
 8007976:	b178      	cbz	r0, 8007998 <__gethex+0x1ac>
 8007978:	1e6b      	subs	r3, r5, #1
 800797a:	1159      	asrs	r1, r3, #5
 800797c:	f003 021f 	and.w	r2, r3, #31
 8007980:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007984:	f04f 0901 	mov.w	r9, #1
 8007988:	fa09 f202 	lsl.w	r2, r9, r2
 800798c:	420a      	tst	r2, r1
 800798e:	d003      	beq.n	8007998 <__gethex+0x1ac>
 8007990:	454b      	cmp	r3, r9
 8007992:	dc36      	bgt.n	8007a02 <__gethex+0x216>
 8007994:	f04f 0902 	mov.w	r9, #2
 8007998:	4629      	mov	r1, r5
 800799a:	4620      	mov	r0, r4
 800799c:	f7ff febe 	bl	800771c <rshift>
 80079a0:	442f      	add	r7, r5
 80079a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80079a6:	42bb      	cmp	r3, r7
 80079a8:	da42      	bge.n	8007a30 <__gethex+0x244>
 80079aa:	9801      	ldr	r0, [sp, #4]
 80079ac:	4621      	mov	r1, r4
 80079ae:	f7fe f93f 	bl	8005c30 <_Bfree>
 80079b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80079b4:	2300      	movs	r3, #0
 80079b6:	6013      	str	r3, [r2, #0]
 80079b8:	25a3      	movs	r5, #163	@ 0xa3
 80079ba:	e793      	b.n	80078e4 <__gethex+0xf8>
 80079bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80079c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80079c2:	d012      	beq.n	80079ea <__gethex+0x1fe>
 80079c4:	2b20      	cmp	r3, #32
 80079c6:	d104      	bne.n	80079d2 <__gethex+0x1e6>
 80079c8:	f845 bb04 	str.w	fp, [r5], #4
 80079cc:	f04f 0b00 	mov.w	fp, #0
 80079d0:	465b      	mov	r3, fp
 80079d2:	7830      	ldrb	r0, [r6, #0]
 80079d4:	9303      	str	r3, [sp, #12]
 80079d6:	f7ff fef3 	bl	80077c0 <__hexdig_fun>
 80079da:	9b03      	ldr	r3, [sp, #12]
 80079dc:	f000 000f 	and.w	r0, r0, #15
 80079e0:	4098      	lsls	r0, r3
 80079e2:	ea4b 0b00 	orr.w	fp, fp, r0
 80079e6:	3304      	adds	r3, #4
 80079e8:	e7ae      	b.n	8007948 <__gethex+0x15c>
 80079ea:	45b1      	cmp	r9, r6
 80079ec:	d8ea      	bhi.n	80079c4 <__gethex+0x1d8>
 80079ee:	492b      	ldr	r1, [pc, #172]	@ (8007a9c <__gethex+0x2b0>)
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	2201      	movs	r2, #1
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7ff fe27 	bl	8007648 <strncmp>
 80079fa:	9b03      	ldr	r3, [sp, #12]
 80079fc:	2800      	cmp	r0, #0
 80079fe:	d1e1      	bne.n	80079c4 <__gethex+0x1d8>
 8007a00:	e7a2      	b.n	8007948 <__gethex+0x15c>
 8007a02:	1ea9      	subs	r1, r5, #2
 8007a04:	4620      	mov	r0, r4
 8007a06:	f7fe fd5c 	bl	80064c2 <__any_on>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d0c2      	beq.n	8007994 <__gethex+0x1a8>
 8007a0e:	f04f 0903 	mov.w	r9, #3
 8007a12:	e7c1      	b.n	8007998 <__gethex+0x1ac>
 8007a14:	da09      	bge.n	8007a2a <__gethex+0x23e>
 8007a16:	1b75      	subs	r5, r6, r5
 8007a18:	4621      	mov	r1, r4
 8007a1a:	9801      	ldr	r0, [sp, #4]
 8007a1c:	462a      	mov	r2, r5
 8007a1e:	f7fe fb17 	bl	8006050 <__lshift>
 8007a22:	1b7f      	subs	r7, r7, r5
 8007a24:	4604      	mov	r4, r0
 8007a26:	f100 0a14 	add.w	sl, r0, #20
 8007a2a:	f04f 0900 	mov.w	r9, #0
 8007a2e:	e7b8      	b.n	80079a2 <__gethex+0x1b6>
 8007a30:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007a34:	42bd      	cmp	r5, r7
 8007a36:	dd6f      	ble.n	8007b18 <__gethex+0x32c>
 8007a38:	1bed      	subs	r5, r5, r7
 8007a3a:	42ae      	cmp	r6, r5
 8007a3c:	dc34      	bgt.n	8007aa8 <__gethex+0x2bc>
 8007a3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d022      	beq.n	8007a8c <__gethex+0x2a0>
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d024      	beq.n	8007a94 <__gethex+0x2a8>
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d115      	bne.n	8007a7a <__gethex+0x28e>
 8007a4e:	42ae      	cmp	r6, r5
 8007a50:	d113      	bne.n	8007a7a <__gethex+0x28e>
 8007a52:	2e01      	cmp	r6, #1
 8007a54:	d10b      	bne.n	8007a6e <__gethex+0x282>
 8007a56:	9a02      	ldr	r2, [sp, #8]
 8007a58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007a5c:	6013      	str	r3, [r2, #0]
 8007a5e:	2301      	movs	r3, #1
 8007a60:	6123      	str	r3, [r4, #16]
 8007a62:	f8ca 3000 	str.w	r3, [sl]
 8007a66:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a68:	2562      	movs	r5, #98	@ 0x62
 8007a6a:	601c      	str	r4, [r3, #0]
 8007a6c:	e73a      	b.n	80078e4 <__gethex+0xf8>
 8007a6e:	1e71      	subs	r1, r6, #1
 8007a70:	4620      	mov	r0, r4
 8007a72:	f7fe fd26 	bl	80064c2 <__any_on>
 8007a76:	2800      	cmp	r0, #0
 8007a78:	d1ed      	bne.n	8007a56 <__gethex+0x26a>
 8007a7a:	9801      	ldr	r0, [sp, #4]
 8007a7c:	4621      	mov	r1, r4
 8007a7e:	f7fe f8d7 	bl	8005c30 <_Bfree>
 8007a82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007a84:	2300      	movs	r3, #0
 8007a86:	6013      	str	r3, [r2, #0]
 8007a88:	2550      	movs	r5, #80	@ 0x50
 8007a8a:	e72b      	b.n	80078e4 <__gethex+0xf8>
 8007a8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1f3      	bne.n	8007a7a <__gethex+0x28e>
 8007a92:	e7e0      	b.n	8007a56 <__gethex+0x26a>
 8007a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1dd      	bne.n	8007a56 <__gethex+0x26a>
 8007a9a:	e7ee      	b.n	8007a7a <__gethex+0x28e>
 8007a9c:	08008577 	.word	0x08008577
 8007aa0:	0800850d 	.word	0x0800850d
 8007aa4:	080085ce 	.word	0x080085ce
 8007aa8:	1e6f      	subs	r7, r5, #1
 8007aaa:	f1b9 0f00 	cmp.w	r9, #0
 8007aae:	d130      	bne.n	8007b12 <__gethex+0x326>
 8007ab0:	b127      	cbz	r7, 8007abc <__gethex+0x2d0>
 8007ab2:	4639      	mov	r1, r7
 8007ab4:	4620      	mov	r0, r4
 8007ab6:	f7fe fd04 	bl	80064c2 <__any_on>
 8007aba:	4681      	mov	r9, r0
 8007abc:	117a      	asrs	r2, r7, #5
 8007abe:	2301      	movs	r3, #1
 8007ac0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007ac4:	f007 071f 	and.w	r7, r7, #31
 8007ac8:	40bb      	lsls	r3, r7
 8007aca:	4213      	tst	r3, r2
 8007acc:	4629      	mov	r1, r5
 8007ace:	4620      	mov	r0, r4
 8007ad0:	bf18      	it	ne
 8007ad2:	f049 0902 	orrne.w	r9, r9, #2
 8007ad6:	f7ff fe21 	bl	800771c <rshift>
 8007ada:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007ade:	1b76      	subs	r6, r6, r5
 8007ae0:	2502      	movs	r5, #2
 8007ae2:	f1b9 0f00 	cmp.w	r9, #0
 8007ae6:	d047      	beq.n	8007b78 <__gethex+0x38c>
 8007ae8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d015      	beq.n	8007b1c <__gethex+0x330>
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d017      	beq.n	8007b24 <__gethex+0x338>
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d109      	bne.n	8007b0c <__gethex+0x320>
 8007af8:	f019 0f02 	tst.w	r9, #2
 8007afc:	d006      	beq.n	8007b0c <__gethex+0x320>
 8007afe:	f8da 3000 	ldr.w	r3, [sl]
 8007b02:	ea49 0903 	orr.w	r9, r9, r3
 8007b06:	f019 0f01 	tst.w	r9, #1
 8007b0a:	d10e      	bne.n	8007b2a <__gethex+0x33e>
 8007b0c:	f045 0510 	orr.w	r5, r5, #16
 8007b10:	e032      	b.n	8007b78 <__gethex+0x38c>
 8007b12:	f04f 0901 	mov.w	r9, #1
 8007b16:	e7d1      	b.n	8007abc <__gethex+0x2d0>
 8007b18:	2501      	movs	r5, #1
 8007b1a:	e7e2      	b.n	8007ae2 <__gethex+0x2f6>
 8007b1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b1e:	f1c3 0301 	rsb	r3, r3, #1
 8007b22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0f0      	beq.n	8007b0c <__gethex+0x320>
 8007b2a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007b2e:	f104 0314 	add.w	r3, r4, #20
 8007b32:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007b36:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007b3a:	f04f 0c00 	mov.w	ip, #0
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b44:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007b48:	d01b      	beq.n	8007b82 <__gethex+0x396>
 8007b4a:	3201      	adds	r2, #1
 8007b4c:	6002      	str	r2, [r0, #0]
 8007b4e:	2d02      	cmp	r5, #2
 8007b50:	f104 0314 	add.w	r3, r4, #20
 8007b54:	d13c      	bne.n	8007bd0 <__gethex+0x3e4>
 8007b56:	f8d8 2000 	ldr.w	r2, [r8]
 8007b5a:	3a01      	subs	r2, #1
 8007b5c:	42b2      	cmp	r2, r6
 8007b5e:	d109      	bne.n	8007b74 <__gethex+0x388>
 8007b60:	1171      	asrs	r1, r6, #5
 8007b62:	2201      	movs	r2, #1
 8007b64:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007b68:	f006 061f 	and.w	r6, r6, #31
 8007b6c:	fa02 f606 	lsl.w	r6, r2, r6
 8007b70:	421e      	tst	r6, r3
 8007b72:	d13a      	bne.n	8007bea <__gethex+0x3fe>
 8007b74:	f045 0520 	orr.w	r5, r5, #32
 8007b78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b7a:	601c      	str	r4, [r3, #0]
 8007b7c:	9b02      	ldr	r3, [sp, #8]
 8007b7e:	601f      	str	r7, [r3, #0]
 8007b80:	e6b0      	b.n	80078e4 <__gethex+0xf8>
 8007b82:	4299      	cmp	r1, r3
 8007b84:	f843 cc04 	str.w	ip, [r3, #-4]
 8007b88:	d8d9      	bhi.n	8007b3e <__gethex+0x352>
 8007b8a:	68a3      	ldr	r3, [r4, #8]
 8007b8c:	459b      	cmp	fp, r3
 8007b8e:	db17      	blt.n	8007bc0 <__gethex+0x3d4>
 8007b90:	6861      	ldr	r1, [r4, #4]
 8007b92:	9801      	ldr	r0, [sp, #4]
 8007b94:	3101      	adds	r1, #1
 8007b96:	f7fe f80b 	bl	8005bb0 <_Balloc>
 8007b9a:	4681      	mov	r9, r0
 8007b9c:	b918      	cbnz	r0, 8007ba6 <__gethex+0x3ba>
 8007b9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007c08 <__gethex+0x41c>)
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	2184      	movs	r1, #132	@ 0x84
 8007ba4:	e6c5      	b.n	8007932 <__gethex+0x146>
 8007ba6:	6922      	ldr	r2, [r4, #16]
 8007ba8:	3202      	adds	r2, #2
 8007baa:	f104 010c 	add.w	r1, r4, #12
 8007bae:	0092      	lsls	r2, r2, #2
 8007bb0:	300c      	adds	r0, #12
 8007bb2:	f7ff fd6b 	bl	800768c <memcpy>
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	9801      	ldr	r0, [sp, #4]
 8007bba:	f7fe f839 	bl	8005c30 <_Bfree>
 8007bbe:	464c      	mov	r4, r9
 8007bc0:	6923      	ldr	r3, [r4, #16]
 8007bc2:	1c5a      	adds	r2, r3, #1
 8007bc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007bc8:	6122      	str	r2, [r4, #16]
 8007bca:	2201      	movs	r2, #1
 8007bcc:	615a      	str	r2, [r3, #20]
 8007bce:	e7be      	b.n	8007b4e <__gethex+0x362>
 8007bd0:	6922      	ldr	r2, [r4, #16]
 8007bd2:	455a      	cmp	r2, fp
 8007bd4:	dd0b      	ble.n	8007bee <__gethex+0x402>
 8007bd6:	2101      	movs	r1, #1
 8007bd8:	4620      	mov	r0, r4
 8007bda:	f7ff fd9f 	bl	800771c <rshift>
 8007bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007be2:	3701      	adds	r7, #1
 8007be4:	42bb      	cmp	r3, r7
 8007be6:	f6ff aee0 	blt.w	80079aa <__gethex+0x1be>
 8007bea:	2501      	movs	r5, #1
 8007bec:	e7c2      	b.n	8007b74 <__gethex+0x388>
 8007bee:	f016 061f 	ands.w	r6, r6, #31
 8007bf2:	d0fa      	beq.n	8007bea <__gethex+0x3fe>
 8007bf4:	4453      	add	r3, sl
 8007bf6:	f1c6 0620 	rsb	r6, r6, #32
 8007bfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007bfe:	f7fe f8c9 	bl	8005d94 <__hi0bits>
 8007c02:	42b0      	cmp	r0, r6
 8007c04:	dbe7      	blt.n	8007bd6 <__gethex+0x3ea>
 8007c06:	e7f0      	b.n	8007bea <__gethex+0x3fe>
 8007c08:	0800850d 	.word	0x0800850d

08007c0c <L_shift>:
 8007c0c:	f1c2 0208 	rsb	r2, r2, #8
 8007c10:	0092      	lsls	r2, r2, #2
 8007c12:	b570      	push	{r4, r5, r6, lr}
 8007c14:	f1c2 0620 	rsb	r6, r2, #32
 8007c18:	6843      	ldr	r3, [r0, #4]
 8007c1a:	6804      	ldr	r4, [r0, #0]
 8007c1c:	fa03 f506 	lsl.w	r5, r3, r6
 8007c20:	432c      	orrs	r4, r5
 8007c22:	40d3      	lsrs	r3, r2
 8007c24:	6004      	str	r4, [r0, #0]
 8007c26:	f840 3f04 	str.w	r3, [r0, #4]!
 8007c2a:	4288      	cmp	r0, r1
 8007c2c:	d3f4      	bcc.n	8007c18 <L_shift+0xc>
 8007c2e:	bd70      	pop	{r4, r5, r6, pc}

08007c30 <__match>:
 8007c30:	b530      	push	{r4, r5, lr}
 8007c32:	6803      	ldr	r3, [r0, #0]
 8007c34:	3301      	adds	r3, #1
 8007c36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c3a:	b914      	cbnz	r4, 8007c42 <__match+0x12>
 8007c3c:	6003      	str	r3, [r0, #0]
 8007c3e:	2001      	movs	r0, #1
 8007c40:	bd30      	pop	{r4, r5, pc}
 8007c42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c46:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007c4a:	2d19      	cmp	r5, #25
 8007c4c:	bf98      	it	ls
 8007c4e:	3220      	addls	r2, #32
 8007c50:	42a2      	cmp	r2, r4
 8007c52:	d0f0      	beq.n	8007c36 <__match+0x6>
 8007c54:	2000      	movs	r0, #0
 8007c56:	e7f3      	b.n	8007c40 <__match+0x10>

08007c58 <__hexnan>:
 8007c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c5c:	680b      	ldr	r3, [r1, #0]
 8007c5e:	6801      	ldr	r1, [r0, #0]
 8007c60:	115e      	asrs	r6, r3, #5
 8007c62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007c66:	f013 031f 	ands.w	r3, r3, #31
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	bf18      	it	ne
 8007c6e:	3604      	addne	r6, #4
 8007c70:	2500      	movs	r5, #0
 8007c72:	1f37      	subs	r7, r6, #4
 8007c74:	4682      	mov	sl, r0
 8007c76:	4690      	mov	r8, r2
 8007c78:	9301      	str	r3, [sp, #4]
 8007c7a:	f846 5c04 	str.w	r5, [r6, #-4]
 8007c7e:	46b9      	mov	r9, r7
 8007c80:	463c      	mov	r4, r7
 8007c82:	9502      	str	r5, [sp, #8]
 8007c84:	46ab      	mov	fp, r5
 8007c86:	784a      	ldrb	r2, [r1, #1]
 8007c88:	1c4b      	adds	r3, r1, #1
 8007c8a:	9303      	str	r3, [sp, #12]
 8007c8c:	b342      	cbz	r2, 8007ce0 <__hexnan+0x88>
 8007c8e:	4610      	mov	r0, r2
 8007c90:	9105      	str	r1, [sp, #20]
 8007c92:	9204      	str	r2, [sp, #16]
 8007c94:	f7ff fd94 	bl	80077c0 <__hexdig_fun>
 8007c98:	2800      	cmp	r0, #0
 8007c9a:	d151      	bne.n	8007d40 <__hexnan+0xe8>
 8007c9c:	9a04      	ldr	r2, [sp, #16]
 8007c9e:	9905      	ldr	r1, [sp, #20]
 8007ca0:	2a20      	cmp	r2, #32
 8007ca2:	d818      	bhi.n	8007cd6 <__hexnan+0x7e>
 8007ca4:	9b02      	ldr	r3, [sp, #8]
 8007ca6:	459b      	cmp	fp, r3
 8007ca8:	dd13      	ble.n	8007cd2 <__hexnan+0x7a>
 8007caa:	454c      	cmp	r4, r9
 8007cac:	d206      	bcs.n	8007cbc <__hexnan+0x64>
 8007cae:	2d07      	cmp	r5, #7
 8007cb0:	dc04      	bgt.n	8007cbc <__hexnan+0x64>
 8007cb2:	462a      	mov	r2, r5
 8007cb4:	4649      	mov	r1, r9
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	f7ff ffa8 	bl	8007c0c <L_shift>
 8007cbc:	4544      	cmp	r4, r8
 8007cbe:	d952      	bls.n	8007d66 <__hexnan+0x10e>
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	f1a4 0904 	sub.w	r9, r4, #4
 8007cc6:	f844 3c04 	str.w	r3, [r4, #-4]
 8007cca:	f8cd b008 	str.w	fp, [sp, #8]
 8007cce:	464c      	mov	r4, r9
 8007cd0:	461d      	mov	r5, r3
 8007cd2:	9903      	ldr	r1, [sp, #12]
 8007cd4:	e7d7      	b.n	8007c86 <__hexnan+0x2e>
 8007cd6:	2a29      	cmp	r2, #41	@ 0x29
 8007cd8:	d157      	bne.n	8007d8a <__hexnan+0x132>
 8007cda:	3102      	adds	r1, #2
 8007cdc:	f8ca 1000 	str.w	r1, [sl]
 8007ce0:	f1bb 0f00 	cmp.w	fp, #0
 8007ce4:	d051      	beq.n	8007d8a <__hexnan+0x132>
 8007ce6:	454c      	cmp	r4, r9
 8007ce8:	d206      	bcs.n	8007cf8 <__hexnan+0xa0>
 8007cea:	2d07      	cmp	r5, #7
 8007cec:	dc04      	bgt.n	8007cf8 <__hexnan+0xa0>
 8007cee:	462a      	mov	r2, r5
 8007cf0:	4649      	mov	r1, r9
 8007cf2:	4620      	mov	r0, r4
 8007cf4:	f7ff ff8a 	bl	8007c0c <L_shift>
 8007cf8:	4544      	cmp	r4, r8
 8007cfa:	d936      	bls.n	8007d6a <__hexnan+0x112>
 8007cfc:	f1a8 0204 	sub.w	r2, r8, #4
 8007d00:	4623      	mov	r3, r4
 8007d02:	f853 1b04 	ldr.w	r1, [r3], #4
 8007d06:	f842 1f04 	str.w	r1, [r2, #4]!
 8007d0a:	429f      	cmp	r7, r3
 8007d0c:	d2f9      	bcs.n	8007d02 <__hexnan+0xaa>
 8007d0e:	1b3b      	subs	r3, r7, r4
 8007d10:	f023 0303 	bic.w	r3, r3, #3
 8007d14:	3304      	adds	r3, #4
 8007d16:	3401      	adds	r4, #1
 8007d18:	3e03      	subs	r6, #3
 8007d1a:	42b4      	cmp	r4, r6
 8007d1c:	bf88      	it	hi
 8007d1e:	2304      	movhi	r3, #4
 8007d20:	4443      	add	r3, r8
 8007d22:	2200      	movs	r2, #0
 8007d24:	f843 2b04 	str.w	r2, [r3], #4
 8007d28:	429f      	cmp	r7, r3
 8007d2a:	d2fb      	bcs.n	8007d24 <__hexnan+0xcc>
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	b91b      	cbnz	r3, 8007d38 <__hexnan+0xe0>
 8007d30:	4547      	cmp	r7, r8
 8007d32:	d128      	bne.n	8007d86 <__hexnan+0x12e>
 8007d34:	2301      	movs	r3, #1
 8007d36:	603b      	str	r3, [r7, #0]
 8007d38:	2005      	movs	r0, #5
 8007d3a:	b007      	add	sp, #28
 8007d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d40:	3501      	adds	r5, #1
 8007d42:	2d08      	cmp	r5, #8
 8007d44:	f10b 0b01 	add.w	fp, fp, #1
 8007d48:	dd06      	ble.n	8007d58 <__hexnan+0x100>
 8007d4a:	4544      	cmp	r4, r8
 8007d4c:	d9c1      	bls.n	8007cd2 <__hexnan+0x7a>
 8007d4e:	2300      	movs	r3, #0
 8007d50:	f844 3c04 	str.w	r3, [r4, #-4]
 8007d54:	2501      	movs	r5, #1
 8007d56:	3c04      	subs	r4, #4
 8007d58:	6822      	ldr	r2, [r4, #0]
 8007d5a:	f000 000f 	and.w	r0, r0, #15
 8007d5e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8007d62:	6020      	str	r0, [r4, #0]
 8007d64:	e7b5      	b.n	8007cd2 <__hexnan+0x7a>
 8007d66:	2508      	movs	r5, #8
 8007d68:	e7b3      	b.n	8007cd2 <__hexnan+0x7a>
 8007d6a:	9b01      	ldr	r3, [sp, #4]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d0dd      	beq.n	8007d2c <__hexnan+0xd4>
 8007d70:	f1c3 0320 	rsb	r3, r3, #32
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295
 8007d78:	40da      	lsrs	r2, r3
 8007d7a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	f846 3c04 	str.w	r3, [r6, #-4]
 8007d84:	e7d2      	b.n	8007d2c <__hexnan+0xd4>
 8007d86:	3f04      	subs	r7, #4
 8007d88:	e7d0      	b.n	8007d2c <__hexnan+0xd4>
 8007d8a:	2004      	movs	r0, #4
 8007d8c:	e7d5      	b.n	8007d3a <__hexnan+0xe2>

08007d8e <__ascii_mbtowc>:
 8007d8e:	b082      	sub	sp, #8
 8007d90:	b901      	cbnz	r1, 8007d94 <__ascii_mbtowc+0x6>
 8007d92:	a901      	add	r1, sp, #4
 8007d94:	b142      	cbz	r2, 8007da8 <__ascii_mbtowc+0x1a>
 8007d96:	b14b      	cbz	r3, 8007dac <__ascii_mbtowc+0x1e>
 8007d98:	7813      	ldrb	r3, [r2, #0]
 8007d9a:	600b      	str	r3, [r1, #0]
 8007d9c:	7812      	ldrb	r2, [r2, #0]
 8007d9e:	1e10      	subs	r0, r2, #0
 8007da0:	bf18      	it	ne
 8007da2:	2001      	movne	r0, #1
 8007da4:	b002      	add	sp, #8
 8007da6:	4770      	bx	lr
 8007da8:	4610      	mov	r0, r2
 8007daa:	e7fb      	b.n	8007da4 <__ascii_mbtowc+0x16>
 8007dac:	f06f 0001 	mvn.w	r0, #1
 8007db0:	e7f8      	b.n	8007da4 <__ascii_mbtowc+0x16>

08007db2 <_realloc_r>:
 8007db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007db6:	4607      	mov	r7, r0
 8007db8:	4614      	mov	r4, r2
 8007dba:	460d      	mov	r5, r1
 8007dbc:	b921      	cbnz	r1, 8007dc8 <_realloc_r+0x16>
 8007dbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dc2:	4611      	mov	r1, r2
 8007dc4:	f7fd be68 	b.w	8005a98 <_malloc_r>
 8007dc8:	b92a      	cbnz	r2, 8007dd6 <_realloc_r+0x24>
 8007dca:	f7fd fdf1 	bl	80059b0 <_free_r>
 8007dce:	4625      	mov	r5, r4
 8007dd0:	4628      	mov	r0, r5
 8007dd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007dd6:	f000 f840 	bl	8007e5a <_malloc_usable_size_r>
 8007dda:	4284      	cmp	r4, r0
 8007ddc:	4606      	mov	r6, r0
 8007dde:	d802      	bhi.n	8007de6 <_realloc_r+0x34>
 8007de0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007de4:	d8f4      	bhi.n	8007dd0 <_realloc_r+0x1e>
 8007de6:	4621      	mov	r1, r4
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7fd fe55 	bl	8005a98 <_malloc_r>
 8007dee:	4680      	mov	r8, r0
 8007df0:	b908      	cbnz	r0, 8007df6 <_realloc_r+0x44>
 8007df2:	4645      	mov	r5, r8
 8007df4:	e7ec      	b.n	8007dd0 <_realloc_r+0x1e>
 8007df6:	42b4      	cmp	r4, r6
 8007df8:	4622      	mov	r2, r4
 8007dfa:	4629      	mov	r1, r5
 8007dfc:	bf28      	it	cs
 8007dfe:	4632      	movcs	r2, r6
 8007e00:	f7ff fc44 	bl	800768c <memcpy>
 8007e04:	4629      	mov	r1, r5
 8007e06:	4638      	mov	r0, r7
 8007e08:	f7fd fdd2 	bl	80059b0 <_free_r>
 8007e0c:	e7f1      	b.n	8007df2 <_realloc_r+0x40>

08007e0e <__ascii_wctomb>:
 8007e0e:	4603      	mov	r3, r0
 8007e10:	4608      	mov	r0, r1
 8007e12:	b141      	cbz	r1, 8007e26 <__ascii_wctomb+0x18>
 8007e14:	2aff      	cmp	r2, #255	@ 0xff
 8007e16:	d904      	bls.n	8007e22 <__ascii_wctomb+0x14>
 8007e18:	228a      	movs	r2, #138	@ 0x8a
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	4770      	bx	lr
 8007e22:	700a      	strb	r2, [r1, #0]
 8007e24:	2001      	movs	r0, #1
 8007e26:	4770      	bx	lr

08007e28 <fiprintf>:
 8007e28:	b40e      	push	{r1, r2, r3}
 8007e2a:	b503      	push	{r0, r1, lr}
 8007e2c:	4601      	mov	r1, r0
 8007e2e:	ab03      	add	r3, sp, #12
 8007e30:	4805      	ldr	r0, [pc, #20]	@ (8007e48 <fiprintf+0x20>)
 8007e32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e36:	6800      	ldr	r0, [r0, #0]
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	f000 f83f 	bl	8007ebc <_vfiprintf_r>
 8007e3e:	b002      	add	sp, #8
 8007e40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e44:	b003      	add	sp, #12
 8007e46:	4770      	bx	lr
 8007e48:	20000018 	.word	0x20000018

08007e4c <abort>:
 8007e4c:	b508      	push	{r3, lr}
 8007e4e:	2006      	movs	r0, #6
 8007e50:	f000 fa08 	bl	8008264 <raise>
 8007e54:	2001      	movs	r0, #1
 8007e56:	f7f9 fbdd 	bl	8001614 <_exit>

08007e5a <_malloc_usable_size_r>:
 8007e5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e5e:	1f18      	subs	r0, r3, #4
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	bfbc      	itt	lt
 8007e64:	580b      	ldrlt	r3, [r1, r0]
 8007e66:	18c0      	addlt	r0, r0, r3
 8007e68:	4770      	bx	lr

08007e6a <__sfputc_r>:
 8007e6a:	6893      	ldr	r3, [r2, #8]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	b410      	push	{r4}
 8007e72:	6093      	str	r3, [r2, #8]
 8007e74:	da08      	bge.n	8007e88 <__sfputc_r+0x1e>
 8007e76:	6994      	ldr	r4, [r2, #24]
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	db01      	blt.n	8007e80 <__sfputc_r+0x16>
 8007e7c:	290a      	cmp	r1, #10
 8007e7e:	d103      	bne.n	8007e88 <__sfputc_r+0x1e>
 8007e80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e84:	f000 b932 	b.w	80080ec <__swbuf_r>
 8007e88:	6813      	ldr	r3, [r2, #0]
 8007e8a:	1c58      	adds	r0, r3, #1
 8007e8c:	6010      	str	r0, [r2, #0]
 8007e8e:	7019      	strb	r1, [r3, #0]
 8007e90:	4608      	mov	r0, r1
 8007e92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <__sfputs_r>:
 8007e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e9a:	4606      	mov	r6, r0
 8007e9c:	460f      	mov	r7, r1
 8007e9e:	4614      	mov	r4, r2
 8007ea0:	18d5      	adds	r5, r2, r3
 8007ea2:	42ac      	cmp	r4, r5
 8007ea4:	d101      	bne.n	8007eaa <__sfputs_r+0x12>
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	e007      	b.n	8007eba <__sfputs_r+0x22>
 8007eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007eae:	463a      	mov	r2, r7
 8007eb0:	4630      	mov	r0, r6
 8007eb2:	f7ff ffda 	bl	8007e6a <__sfputc_r>
 8007eb6:	1c43      	adds	r3, r0, #1
 8007eb8:	d1f3      	bne.n	8007ea2 <__sfputs_r+0xa>
 8007eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007ebc <_vfiprintf_r>:
 8007ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ec0:	460d      	mov	r5, r1
 8007ec2:	b09d      	sub	sp, #116	@ 0x74
 8007ec4:	4614      	mov	r4, r2
 8007ec6:	4698      	mov	r8, r3
 8007ec8:	4606      	mov	r6, r0
 8007eca:	b118      	cbz	r0, 8007ed4 <_vfiprintf_r+0x18>
 8007ecc:	6a03      	ldr	r3, [r0, #32]
 8007ece:	b90b      	cbnz	r3, 8007ed4 <_vfiprintf_r+0x18>
 8007ed0:	f7fc fdb4 	bl	8004a3c <__sinit>
 8007ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ed6:	07d9      	lsls	r1, r3, #31
 8007ed8:	d405      	bmi.n	8007ee6 <_vfiprintf_r+0x2a>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	059a      	lsls	r2, r3, #22
 8007ede:	d402      	bmi.n	8007ee6 <_vfiprintf_r+0x2a>
 8007ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007ee2:	f7fc fefa 	bl	8004cda <__retarget_lock_acquire_recursive>
 8007ee6:	89ab      	ldrh	r3, [r5, #12]
 8007ee8:	071b      	lsls	r3, r3, #28
 8007eea:	d501      	bpl.n	8007ef0 <_vfiprintf_r+0x34>
 8007eec:	692b      	ldr	r3, [r5, #16]
 8007eee:	b99b      	cbnz	r3, 8007f18 <_vfiprintf_r+0x5c>
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	4630      	mov	r0, r6
 8007ef4:	f000 f938 	bl	8008168 <__swsetup_r>
 8007ef8:	b170      	cbz	r0, 8007f18 <_vfiprintf_r+0x5c>
 8007efa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007efc:	07dc      	lsls	r4, r3, #31
 8007efe:	d504      	bpl.n	8007f0a <_vfiprintf_r+0x4e>
 8007f00:	f04f 30ff 	mov.w	r0, #4294967295
 8007f04:	b01d      	add	sp, #116	@ 0x74
 8007f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f0a:	89ab      	ldrh	r3, [r5, #12]
 8007f0c:	0598      	lsls	r0, r3, #22
 8007f0e:	d4f7      	bmi.n	8007f00 <_vfiprintf_r+0x44>
 8007f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f12:	f7fc fee3 	bl	8004cdc <__retarget_lock_release_recursive>
 8007f16:	e7f3      	b.n	8007f00 <_vfiprintf_r+0x44>
 8007f18:	2300      	movs	r3, #0
 8007f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f26:	2330      	movs	r3, #48	@ 0x30
 8007f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80080d8 <_vfiprintf_r+0x21c>
 8007f2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007f30:	f04f 0901 	mov.w	r9, #1
 8007f34:	4623      	mov	r3, r4
 8007f36:	469a      	mov	sl, r3
 8007f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f3c:	b10a      	cbz	r2, 8007f42 <_vfiprintf_r+0x86>
 8007f3e:	2a25      	cmp	r2, #37	@ 0x25
 8007f40:	d1f9      	bne.n	8007f36 <_vfiprintf_r+0x7a>
 8007f42:	ebba 0b04 	subs.w	fp, sl, r4
 8007f46:	d00b      	beq.n	8007f60 <_vfiprintf_r+0xa4>
 8007f48:	465b      	mov	r3, fp
 8007f4a:	4622      	mov	r2, r4
 8007f4c:	4629      	mov	r1, r5
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7ff ffa2 	bl	8007e98 <__sfputs_r>
 8007f54:	3001      	adds	r0, #1
 8007f56:	f000 80a7 	beq.w	80080a8 <_vfiprintf_r+0x1ec>
 8007f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f5c:	445a      	add	r2, fp
 8007f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007f60:	f89a 3000 	ldrb.w	r3, [sl]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 809f 	beq.w	80080a8 <_vfiprintf_r+0x1ec>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f74:	f10a 0a01 	add.w	sl, sl, #1
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	9307      	str	r3, [sp, #28]
 8007f7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8007f82:	4654      	mov	r4, sl
 8007f84:	2205      	movs	r2, #5
 8007f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f8a:	4853      	ldr	r0, [pc, #332]	@ (80080d8 <_vfiprintf_r+0x21c>)
 8007f8c:	f7f8 f950 	bl	8000230 <memchr>
 8007f90:	9a04      	ldr	r2, [sp, #16]
 8007f92:	b9d8      	cbnz	r0, 8007fcc <_vfiprintf_r+0x110>
 8007f94:	06d1      	lsls	r1, r2, #27
 8007f96:	bf44      	itt	mi
 8007f98:	2320      	movmi	r3, #32
 8007f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007f9e:	0713      	lsls	r3, r2, #28
 8007fa0:	bf44      	itt	mi
 8007fa2:	232b      	movmi	r3, #43	@ 0x2b
 8007fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8007fae:	d015      	beq.n	8007fdc <_vfiprintf_r+0x120>
 8007fb0:	9a07      	ldr	r2, [sp, #28]
 8007fb2:	4654      	mov	r4, sl
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	f04f 0c0a 	mov.w	ip, #10
 8007fba:	4621      	mov	r1, r4
 8007fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fc0:	3b30      	subs	r3, #48	@ 0x30
 8007fc2:	2b09      	cmp	r3, #9
 8007fc4:	d94b      	bls.n	800805e <_vfiprintf_r+0x1a2>
 8007fc6:	b1b0      	cbz	r0, 8007ff6 <_vfiprintf_r+0x13a>
 8007fc8:	9207      	str	r2, [sp, #28]
 8007fca:	e014      	b.n	8007ff6 <_vfiprintf_r+0x13a>
 8007fcc:	eba0 0308 	sub.w	r3, r0, r8
 8007fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	9304      	str	r3, [sp, #16]
 8007fd8:	46a2      	mov	sl, r4
 8007fda:	e7d2      	b.n	8007f82 <_vfiprintf_r+0xc6>
 8007fdc:	9b03      	ldr	r3, [sp, #12]
 8007fde:	1d19      	adds	r1, r3, #4
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	9103      	str	r1, [sp, #12]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	bfbb      	ittet	lt
 8007fe8:	425b      	neglt	r3, r3
 8007fea:	f042 0202 	orrlt.w	r2, r2, #2
 8007fee:	9307      	strge	r3, [sp, #28]
 8007ff0:	9307      	strlt	r3, [sp, #28]
 8007ff2:	bfb8      	it	lt
 8007ff4:	9204      	strlt	r2, [sp, #16]
 8007ff6:	7823      	ldrb	r3, [r4, #0]
 8007ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ffa:	d10a      	bne.n	8008012 <_vfiprintf_r+0x156>
 8007ffc:	7863      	ldrb	r3, [r4, #1]
 8007ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8008000:	d132      	bne.n	8008068 <_vfiprintf_r+0x1ac>
 8008002:	9b03      	ldr	r3, [sp, #12]
 8008004:	1d1a      	adds	r2, r3, #4
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	9203      	str	r2, [sp, #12]
 800800a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800800e:	3402      	adds	r4, #2
 8008010:	9305      	str	r3, [sp, #20]
 8008012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80080e8 <_vfiprintf_r+0x22c>
 8008016:	7821      	ldrb	r1, [r4, #0]
 8008018:	2203      	movs	r2, #3
 800801a:	4650      	mov	r0, sl
 800801c:	f7f8 f908 	bl	8000230 <memchr>
 8008020:	b138      	cbz	r0, 8008032 <_vfiprintf_r+0x176>
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	eba0 000a 	sub.w	r0, r0, sl
 8008028:	2240      	movs	r2, #64	@ 0x40
 800802a:	4082      	lsls	r2, r0
 800802c:	4313      	orrs	r3, r2
 800802e:	3401      	adds	r4, #1
 8008030:	9304      	str	r3, [sp, #16]
 8008032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008036:	4829      	ldr	r0, [pc, #164]	@ (80080dc <_vfiprintf_r+0x220>)
 8008038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800803c:	2206      	movs	r2, #6
 800803e:	f7f8 f8f7 	bl	8000230 <memchr>
 8008042:	2800      	cmp	r0, #0
 8008044:	d03f      	beq.n	80080c6 <_vfiprintf_r+0x20a>
 8008046:	4b26      	ldr	r3, [pc, #152]	@ (80080e0 <_vfiprintf_r+0x224>)
 8008048:	bb1b      	cbnz	r3, 8008092 <_vfiprintf_r+0x1d6>
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	3307      	adds	r3, #7
 800804e:	f023 0307 	bic.w	r3, r3, #7
 8008052:	3308      	adds	r3, #8
 8008054:	9303      	str	r3, [sp, #12]
 8008056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008058:	443b      	add	r3, r7
 800805a:	9309      	str	r3, [sp, #36]	@ 0x24
 800805c:	e76a      	b.n	8007f34 <_vfiprintf_r+0x78>
 800805e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008062:	460c      	mov	r4, r1
 8008064:	2001      	movs	r0, #1
 8008066:	e7a8      	b.n	8007fba <_vfiprintf_r+0xfe>
 8008068:	2300      	movs	r3, #0
 800806a:	3401      	adds	r4, #1
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	4619      	mov	r1, r3
 8008070:	f04f 0c0a 	mov.w	ip, #10
 8008074:	4620      	mov	r0, r4
 8008076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800807a:	3a30      	subs	r2, #48	@ 0x30
 800807c:	2a09      	cmp	r2, #9
 800807e:	d903      	bls.n	8008088 <_vfiprintf_r+0x1cc>
 8008080:	2b00      	cmp	r3, #0
 8008082:	d0c6      	beq.n	8008012 <_vfiprintf_r+0x156>
 8008084:	9105      	str	r1, [sp, #20]
 8008086:	e7c4      	b.n	8008012 <_vfiprintf_r+0x156>
 8008088:	fb0c 2101 	mla	r1, ip, r1, r2
 800808c:	4604      	mov	r4, r0
 800808e:	2301      	movs	r3, #1
 8008090:	e7f0      	b.n	8008074 <_vfiprintf_r+0x1b8>
 8008092:	ab03      	add	r3, sp, #12
 8008094:	9300      	str	r3, [sp, #0]
 8008096:	462a      	mov	r2, r5
 8008098:	4b12      	ldr	r3, [pc, #72]	@ (80080e4 <_vfiprintf_r+0x228>)
 800809a:	a904      	add	r1, sp, #16
 800809c:	4630      	mov	r0, r6
 800809e:	f7fb fe7d 	bl	8003d9c <_printf_float>
 80080a2:	4607      	mov	r7, r0
 80080a4:	1c78      	adds	r0, r7, #1
 80080a6:	d1d6      	bne.n	8008056 <_vfiprintf_r+0x19a>
 80080a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80080aa:	07d9      	lsls	r1, r3, #31
 80080ac:	d405      	bmi.n	80080ba <_vfiprintf_r+0x1fe>
 80080ae:	89ab      	ldrh	r3, [r5, #12]
 80080b0:	059a      	lsls	r2, r3, #22
 80080b2:	d402      	bmi.n	80080ba <_vfiprintf_r+0x1fe>
 80080b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80080b6:	f7fc fe11 	bl	8004cdc <__retarget_lock_release_recursive>
 80080ba:	89ab      	ldrh	r3, [r5, #12]
 80080bc:	065b      	lsls	r3, r3, #25
 80080be:	f53f af1f 	bmi.w	8007f00 <_vfiprintf_r+0x44>
 80080c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80080c4:	e71e      	b.n	8007f04 <_vfiprintf_r+0x48>
 80080c6:	ab03      	add	r3, sp, #12
 80080c8:	9300      	str	r3, [sp, #0]
 80080ca:	462a      	mov	r2, r5
 80080cc:	4b05      	ldr	r3, [pc, #20]	@ (80080e4 <_vfiprintf_r+0x228>)
 80080ce:	a904      	add	r1, sp, #16
 80080d0:	4630      	mov	r0, r6
 80080d2:	f7fc f8fb 	bl	80042cc <_printf_i>
 80080d6:	e7e4      	b.n	80080a2 <_vfiprintf_r+0x1e6>
 80080d8:	08008579 	.word	0x08008579
 80080dc:	08008583 	.word	0x08008583
 80080e0:	08003d9d 	.word	0x08003d9d
 80080e4:	08007e99 	.word	0x08007e99
 80080e8:	0800857f 	.word	0x0800857f

080080ec <__swbuf_r>:
 80080ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080ee:	460e      	mov	r6, r1
 80080f0:	4614      	mov	r4, r2
 80080f2:	4605      	mov	r5, r0
 80080f4:	b118      	cbz	r0, 80080fe <__swbuf_r+0x12>
 80080f6:	6a03      	ldr	r3, [r0, #32]
 80080f8:	b90b      	cbnz	r3, 80080fe <__swbuf_r+0x12>
 80080fa:	f7fc fc9f 	bl	8004a3c <__sinit>
 80080fe:	69a3      	ldr	r3, [r4, #24]
 8008100:	60a3      	str	r3, [r4, #8]
 8008102:	89a3      	ldrh	r3, [r4, #12]
 8008104:	071a      	lsls	r2, r3, #28
 8008106:	d501      	bpl.n	800810c <__swbuf_r+0x20>
 8008108:	6923      	ldr	r3, [r4, #16]
 800810a:	b943      	cbnz	r3, 800811e <__swbuf_r+0x32>
 800810c:	4621      	mov	r1, r4
 800810e:	4628      	mov	r0, r5
 8008110:	f000 f82a 	bl	8008168 <__swsetup_r>
 8008114:	b118      	cbz	r0, 800811e <__swbuf_r+0x32>
 8008116:	f04f 37ff 	mov.w	r7, #4294967295
 800811a:	4638      	mov	r0, r7
 800811c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	6922      	ldr	r2, [r4, #16]
 8008122:	1a98      	subs	r0, r3, r2
 8008124:	6963      	ldr	r3, [r4, #20]
 8008126:	b2f6      	uxtb	r6, r6
 8008128:	4283      	cmp	r3, r0
 800812a:	4637      	mov	r7, r6
 800812c:	dc05      	bgt.n	800813a <__swbuf_r+0x4e>
 800812e:	4621      	mov	r1, r4
 8008130:	4628      	mov	r0, r5
 8008132:	f7ff fa47 	bl	80075c4 <_fflush_r>
 8008136:	2800      	cmp	r0, #0
 8008138:	d1ed      	bne.n	8008116 <__swbuf_r+0x2a>
 800813a:	68a3      	ldr	r3, [r4, #8]
 800813c:	3b01      	subs	r3, #1
 800813e:	60a3      	str	r3, [r4, #8]
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	1c5a      	adds	r2, r3, #1
 8008144:	6022      	str	r2, [r4, #0]
 8008146:	701e      	strb	r6, [r3, #0]
 8008148:	6962      	ldr	r2, [r4, #20]
 800814a:	1c43      	adds	r3, r0, #1
 800814c:	429a      	cmp	r2, r3
 800814e:	d004      	beq.n	800815a <__swbuf_r+0x6e>
 8008150:	89a3      	ldrh	r3, [r4, #12]
 8008152:	07db      	lsls	r3, r3, #31
 8008154:	d5e1      	bpl.n	800811a <__swbuf_r+0x2e>
 8008156:	2e0a      	cmp	r6, #10
 8008158:	d1df      	bne.n	800811a <__swbuf_r+0x2e>
 800815a:	4621      	mov	r1, r4
 800815c:	4628      	mov	r0, r5
 800815e:	f7ff fa31 	bl	80075c4 <_fflush_r>
 8008162:	2800      	cmp	r0, #0
 8008164:	d0d9      	beq.n	800811a <__swbuf_r+0x2e>
 8008166:	e7d6      	b.n	8008116 <__swbuf_r+0x2a>

08008168 <__swsetup_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4b29      	ldr	r3, [pc, #164]	@ (8008210 <__swsetup_r+0xa8>)
 800816c:	4605      	mov	r5, r0
 800816e:	6818      	ldr	r0, [r3, #0]
 8008170:	460c      	mov	r4, r1
 8008172:	b118      	cbz	r0, 800817c <__swsetup_r+0x14>
 8008174:	6a03      	ldr	r3, [r0, #32]
 8008176:	b90b      	cbnz	r3, 800817c <__swsetup_r+0x14>
 8008178:	f7fc fc60 	bl	8004a3c <__sinit>
 800817c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008180:	0719      	lsls	r1, r3, #28
 8008182:	d422      	bmi.n	80081ca <__swsetup_r+0x62>
 8008184:	06da      	lsls	r2, r3, #27
 8008186:	d407      	bmi.n	8008198 <__swsetup_r+0x30>
 8008188:	2209      	movs	r2, #9
 800818a:	602a      	str	r2, [r5, #0]
 800818c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008190:	81a3      	strh	r3, [r4, #12]
 8008192:	f04f 30ff 	mov.w	r0, #4294967295
 8008196:	e033      	b.n	8008200 <__swsetup_r+0x98>
 8008198:	0758      	lsls	r0, r3, #29
 800819a:	d512      	bpl.n	80081c2 <__swsetup_r+0x5a>
 800819c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800819e:	b141      	cbz	r1, 80081b2 <__swsetup_r+0x4a>
 80081a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081a4:	4299      	cmp	r1, r3
 80081a6:	d002      	beq.n	80081ae <__swsetup_r+0x46>
 80081a8:	4628      	mov	r0, r5
 80081aa:	f7fd fc01 	bl	80059b0 <_free_r>
 80081ae:	2300      	movs	r3, #0
 80081b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80081b8:	81a3      	strh	r3, [r4, #12]
 80081ba:	2300      	movs	r3, #0
 80081bc:	6063      	str	r3, [r4, #4]
 80081be:	6923      	ldr	r3, [r4, #16]
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	f043 0308 	orr.w	r3, r3, #8
 80081c8:	81a3      	strh	r3, [r4, #12]
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	b94b      	cbnz	r3, 80081e2 <__swsetup_r+0x7a>
 80081ce:	89a3      	ldrh	r3, [r4, #12]
 80081d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80081d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80081d8:	d003      	beq.n	80081e2 <__swsetup_r+0x7a>
 80081da:	4621      	mov	r1, r4
 80081dc:	4628      	mov	r0, r5
 80081de:	f000 f883 	bl	80082e8 <__smakebuf_r>
 80081e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081e6:	f013 0201 	ands.w	r2, r3, #1
 80081ea:	d00a      	beq.n	8008202 <__swsetup_r+0x9a>
 80081ec:	2200      	movs	r2, #0
 80081ee:	60a2      	str	r2, [r4, #8]
 80081f0:	6962      	ldr	r2, [r4, #20]
 80081f2:	4252      	negs	r2, r2
 80081f4:	61a2      	str	r2, [r4, #24]
 80081f6:	6922      	ldr	r2, [r4, #16]
 80081f8:	b942      	cbnz	r2, 800820c <__swsetup_r+0xa4>
 80081fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80081fe:	d1c5      	bne.n	800818c <__swsetup_r+0x24>
 8008200:	bd38      	pop	{r3, r4, r5, pc}
 8008202:	0799      	lsls	r1, r3, #30
 8008204:	bf58      	it	pl
 8008206:	6962      	ldrpl	r2, [r4, #20]
 8008208:	60a2      	str	r2, [r4, #8]
 800820a:	e7f4      	b.n	80081f6 <__swsetup_r+0x8e>
 800820c:	2000      	movs	r0, #0
 800820e:	e7f7      	b.n	8008200 <__swsetup_r+0x98>
 8008210:	20000018 	.word	0x20000018

08008214 <_raise_r>:
 8008214:	291f      	cmp	r1, #31
 8008216:	b538      	push	{r3, r4, r5, lr}
 8008218:	4605      	mov	r5, r0
 800821a:	460c      	mov	r4, r1
 800821c:	d904      	bls.n	8008228 <_raise_r+0x14>
 800821e:	2316      	movs	r3, #22
 8008220:	6003      	str	r3, [r0, #0]
 8008222:	f04f 30ff 	mov.w	r0, #4294967295
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800822a:	b112      	cbz	r2, 8008232 <_raise_r+0x1e>
 800822c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008230:	b94b      	cbnz	r3, 8008246 <_raise_r+0x32>
 8008232:	4628      	mov	r0, r5
 8008234:	f000 f830 	bl	8008298 <_getpid_r>
 8008238:	4622      	mov	r2, r4
 800823a:	4601      	mov	r1, r0
 800823c:	4628      	mov	r0, r5
 800823e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008242:	f000 b817 	b.w	8008274 <_kill_r>
 8008246:	2b01      	cmp	r3, #1
 8008248:	d00a      	beq.n	8008260 <_raise_r+0x4c>
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	d103      	bne.n	8008256 <_raise_r+0x42>
 800824e:	2316      	movs	r3, #22
 8008250:	6003      	str	r3, [r0, #0]
 8008252:	2001      	movs	r0, #1
 8008254:	e7e7      	b.n	8008226 <_raise_r+0x12>
 8008256:	2100      	movs	r1, #0
 8008258:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800825c:	4620      	mov	r0, r4
 800825e:	4798      	blx	r3
 8008260:	2000      	movs	r0, #0
 8008262:	e7e0      	b.n	8008226 <_raise_r+0x12>

08008264 <raise>:
 8008264:	4b02      	ldr	r3, [pc, #8]	@ (8008270 <raise+0xc>)
 8008266:	4601      	mov	r1, r0
 8008268:	6818      	ldr	r0, [r3, #0]
 800826a:	f7ff bfd3 	b.w	8008214 <_raise_r>
 800826e:	bf00      	nop
 8008270:	20000018 	.word	0x20000018

08008274 <_kill_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4d07      	ldr	r5, [pc, #28]	@ (8008294 <_kill_r+0x20>)
 8008278:	2300      	movs	r3, #0
 800827a:	4604      	mov	r4, r0
 800827c:	4608      	mov	r0, r1
 800827e:	4611      	mov	r1, r2
 8008280:	602b      	str	r3, [r5, #0]
 8008282:	f7f9 f9b7 	bl	80015f4 <_kill>
 8008286:	1c43      	adds	r3, r0, #1
 8008288:	d102      	bne.n	8008290 <_kill_r+0x1c>
 800828a:	682b      	ldr	r3, [r5, #0]
 800828c:	b103      	cbz	r3, 8008290 <_kill_r+0x1c>
 800828e:	6023      	str	r3, [r4, #0]
 8008290:	bd38      	pop	{r3, r4, r5, pc}
 8008292:	bf00      	nop
 8008294:	20000408 	.word	0x20000408

08008298 <_getpid_r>:
 8008298:	f7f9 b9a4 	b.w	80015e4 <_getpid>

0800829c <__swhatbuf_r>:
 800829c:	b570      	push	{r4, r5, r6, lr}
 800829e:	460c      	mov	r4, r1
 80082a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082a4:	2900      	cmp	r1, #0
 80082a6:	b096      	sub	sp, #88	@ 0x58
 80082a8:	4615      	mov	r5, r2
 80082aa:	461e      	mov	r6, r3
 80082ac:	da0d      	bge.n	80082ca <__swhatbuf_r+0x2e>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082b4:	f04f 0100 	mov.w	r1, #0
 80082b8:	bf14      	ite	ne
 80082ba:	2340      	movne	r3, #64	@ 0x40
 80082bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082c0:	2000      	movs	r0, #0
 80082c2:	6031      	str	r1, [r6, #0]
 80082c4:	602b      	str	r3, [r5, #0]
 80082c6:	b016      	add	sp, #88	@ 0x58
 80082c8:	bd70      	pop	{r4, r5, r6, pc}
 80082ca:	466a      	mov	r2, sp
 80082cc:	f000 f848 	bl	8008360 <_fstat_r>
 80082d0:	2800      	cmp	r0, #0
 80082d2:	dbec      	blt.n	80082ae <__swhatbuf_r+0x12>
 80082d4:	9901      	ldr	r1, [sp, #4]
 80082d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082de:	4259      	negs	r1, r3
 80082e0:	4159      	adcs	r1, r3
 80082e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082e6:	e7eb      	b.n	80082c0 <__swhatbuf_r+0x24>

080082e8 <__smakebuf_r>:
 80082e8:	898b      	ldrh	r3, [r1, #12]
 80082ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80082ec:	079d      	lsls	r5, r3, #30
 80082ee:	4606      	mov	r6, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	d507      	bpl.n	8008304 <__smakebuf_r+0x1c>
 80082f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	6123      	str	r3, [r4, #16]
 80082fc:	2301      	movs	r3, #1
 80082fe:	6163      	str	r3, [r4, #20]
 8008300:	b003      	add	sp, #12
 8008302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008304:	ab01      	add	r3, sp, #4
 8008306:	466a      	mov	r2, sp
 8008308:	f7ff ffc8 	bl	800829c <__swhatbuf_r>
 800830c:	9f00      	ldr	r7, [sp, #0]
 800830e:	4605      	mov	r5, r0
 8008310:	4639      	mov	r1, r7
 8008312:	4630      	mov	r0, r6
 8008314:	f7fd fbc0 	bl	8005a98 <_malloc_r>
 8008318:	b948      	cbnz	r0, 800832e <__smakebuf_r+0x46>
 800831a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800831e:	059a      	lsls	r2, r3, #22
 8008320:	d4ee      	bmi.n	8008300 <__smakebuf_r+0x18>
 8008322:	f023 0303 	bic.w	r3, r3, #3
 8008326:	f043 0302 	orr.w	r3, r3, #2
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	e7e2      	b.n	80082f4 <__smakebuf_r+0xc>
 800832e:	89a3      	ldrh	r3, [r4, #12]
 8008330:	6020      	str	r0, [r4, #0]
 8008332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008336:	81a3      	strh	r3, [r4, #12]
 8008338:	9b01      	ldr	r3, [sp, #4]
 800833a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800833e:	b15b      	cbz	r3, 8008358 <__smakebuf_r+0x70>
 8008340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008344:	4630      	mov	r0, r6
 8008346:	f000 f81d 	bl	8008384 <_isatty_r>
 800834a:	b128      	cbz	r0, 8008358 <__smakebuf_r+0x70>
 800834c:	89a3      	ldrh	r3, [r4, #12]
 800834e:	f023 0303 	bic.w	r3, r3, #3
 8008352:	f043 0301 	orr.w	r3, r3, #1
 8008356:	81a3      	strh	r3, [r4, #12]
 8008358:	89a3      	ldrh	r3, [r4, #12]
 800835a:	431d      	orrs	r5, r3
 800835c:	81a5      	strh	r5, [r4, #12]
 800835e:	e7cf      	b.n	8008300 <__smakebuf_r+0x18>

08008360 <_fstat_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d07      	ldr	r5, [pc, #28]	@ (8008380 <_fstat_r+0x20>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	4611      	mov	r1, r2
 800836c:	602b      	str	r3, [r5, #0]
 800836e:	f7f9 f9a1 	bl	80016b4 <_fstat>
 8008372:	1c43      	adds	r3, r0, #1
 8008374:	d102      	bne.n	800837c <_fstat_r+0x1c>
 8008376:	682b      	ldr	r3, [r5, #0]
 8008378:	b103      	cbz	r3, 800837c <_fstat_r+0x1c>
 800837a:	6023      	str	r3, [r4, #0]
 800837c:	bd38      	pop	{r3, r4, r5, pc}
 800837e:	bf00      	nop
 8008380:	20000408 	.word	0x20000408

08008384 <_isatty_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d06      	ldr	r5, [pc, #24]	@ (80083a0 <_isatty_r+0x1c>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	602b      	str	r3, [r5, #0]
 8008390:	f7f9 f9a0 	bl	80016d4 <_isatty>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_isatty_r+0x1a>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_isatty_r+0x1a>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	20000408 	.word	0x20000408

080083a4 <_init>:
 80083a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a6:	bf00      	nop
 80083a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083aa:	bc08      	pop	{r3}
 80083ac:	469e      	mov	lr, r3
 80083ae:	4770      	bx	lr

080083b0 <_fini>:
 80083b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083b2:	bf00      	nop
 80083b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b6:	bc08      	pop	{r3}
 80083b8:	469e      	mov	lr, r3
 80083ba:	4770      	bx	lr
