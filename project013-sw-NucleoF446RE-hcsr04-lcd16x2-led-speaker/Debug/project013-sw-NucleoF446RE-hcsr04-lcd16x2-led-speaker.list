
project013-sw-NucleoF446RE-hcsr04-lcd16x2-led-speaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000832c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08008500  08008500  00009500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800897c  0800897c  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800897c  0800897c  0000997c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008984  08008984  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008984  08008984  00009984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008988  08008988  00009988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800898c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d4  08008b60  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08008b60  0000a4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d557  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd7  00000000  00000000  0001775b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00019538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1c  00000000  00000000  0001a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229d7  00000000  00000000  0001ac44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eebf  00000000  00000000  0003d61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d29eb  00000000  00000000  0004c4da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011eec5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c00  00000000  00000000  0011ef08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00123b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080084e4 	.word	0x080084e4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080084e4 	.word	0x080084e4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <HAL_TIM_PeriodElapsedCallback>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d144      	bne.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x9c>
    {
        float sum = 0.0f;
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
        uint8_t count = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	74fb      	strb	r3, [r7, #19]
        uint8_t i = last_index;
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	74bb      	strb	r3, [r7, #18]

        // Loop through circular buffer between last_index and current index
        while (i != distance_index)
 8001082:	e01c      	b.n	80010be <HAL_TIM_PeriodElapsedCallback+0x5e>
        {
            sum += distance_buffer[i];
 8001084:	7cbb      	ldrb	r3, [r7, #18]
 8001086:	4a21      	ldr	r2, [pc, #132]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ed97 7a05 	vldr	s14, [r7, #20]
 8001094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001098:	edc7 7a05 	vstr	s15, [r7, #20]
            count++;
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	3301      	adds	r3, #1
 80010a0:	74fb      	strb	r3, [r7, #19]
            i = (i + 1) % DIST_BUFFER_SIZE;
 80010a2:	7cbb      	ldrb	r3, [r7, #18]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010a8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ac:	1111      	asrs	r1, r2, #4
 80010ae:	17da      	asrs	r2, r3, #31
 80010b0:	1a8a      	subs	r2, r1, r2
 80010b2:	2132      	movs	r1, #50	@ 0x32
 80010b4:	fb01 f202 	mul.w	r2, r1, r2
 80010b8:	1a9a      	subs	r2, r3, r2
 80010ba:	4613      	mov	r3, r2
 80010bc:	74bb      	strb	r3, [r7, #18]
        while (i != distance_index)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	7cba      	ldrb	r2, [r7, #18]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d1dd      	bne.n	8001084 <HAL_TIM_PeriodElapsedCallback+0x24>
        }

        if (count > 0)
 80010c8:	7cfb      	ldrb	r3, [r7, #19]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d012      	beq.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x94>
        {
            float avg = sum / count;
 80010ce:	7cfb      	ldrb	r3, [r7, #19]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80010dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e0:	edc7 7a03 	vstr	s15, [r7, #12]
            printf("[TIM3 INT] Average distance from last interrupt: %.2f cm\r\n", avg);
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff fa4f 	bl	8000588 <__aeabi_f2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	480a      	ldr	r0, [pc, #40]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010f0:	f003 fda4 	bl	8004c3c <iprintf>
        }

        // Update last_index to the current index
        last_index = distance_index;
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010fa:	701a      	strb	r2, [r3, #0]
    }
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40000400 	.word	0x40000400
 8001108:	200002b9 	.word	0x200002b9
 800110c:	200001f0 	.word	0x200001f0
 8001110:	51eb851f 	.word	0x51eb851f
 8001114:	200002b8 	.word	0x200002b8
 8001118:	08008500 	.word	0x08008500

0800111c <delay_us>:

/*--------------------------------------------------------------*/
/* Utility: microsecond delay using TIM2                        */
void delay_us(uint16_t us)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <delay_us+0x30>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 800112e:	bf00      	nop
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <delay_us+0x30>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3f9      	bcc.n	8001130 <delay_us+0x14>
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200002bc 	.word	0x200002bc

08001150 <read_ultrasonic>:

/*--------------------------------------------------------------*/
/* Measure echo pulse duration in microseconds                  */
uint32_t read_ultrasonic(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
    uint32_t local_time = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]

    // Ensure trigger low
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	4818      	ldr	r0, [pc, #96]	@ (80011c4 <read_ultrasonic+0x74>)
 8001162:	f000 ff5f 	bl	8002024 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fc7a 	bl	8001a60 <HAL_Delay>

    // Send 10 µs pulse
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001172:	4814      	ldr	r0, [pc, #80]	@ (80011c4 <read_ultrasonic+0x74>)
 8001174:	f000 ff56 	bl	8002024 <HAL_GPIO_WritePin>
    delay_us(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f7ff ffcf 	bl	800111c <delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001184:	480f      	ldr	r0, [pc, #60]	@ (80011c4 <read_ultrasonic+0x74>)
 8001186:	f000 ff4d 	bl	8002024 <HAL_GPIO_WritePin>

    // Wait for ECHO to go high
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET);
 800118a:	bf00      	nop
 800118c:	2140      	movs	r1, #64	@ 0x40
 800118e:	480e      	ldr	r0, [pc, #56]	@ (80011c8 <read_ultrasonic+0x78>)
 8001190:	f000 ff30 	bl	8001ff4 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f8      	beq.n	800118c <read_ultrasonic+0x3c>

    __HAL_TIM_SET_COUNTER(&htim2, 0); // start counting
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <read_ultrasonic+0x7c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24

    // Wait for ECHO to go low
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET);
 80011a2:	bf00      	nop
 80011a4:	2140      	movs	r1, #64	@ 0x40
 80011a6:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <read_ultrasonic+0x78>)
 80011a8:	f000 ff24 	bl	8001ff4 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d0f8      	beq.n	80011a4 <read_ultrasonic+0x54>

    local_time = __HAL_TIM_GET_COUNTER(&htim2);
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <read_ultrasonic+0x7c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	607b      	str	r3, [r7, #4]

    return local_time;
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	200002bc 	.word	0x200002bc

080011d0 <store_distance>:
void store_distance(float value)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	ed87 0a01 	vstr	s0, [r7, #4]
    distance_buffer[distance_index] = value;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <store_distance+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <store_distance+0x48>)
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	601a      	str	r2, [r3, #0]
    distance_index = (distance_index + 1) % DIST_BUFFER_SIZE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <store_distance+0x44>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <store_distance+0x4c>)
 80011f0:	fb82 1203 	smull	r1, r2, r2, r3
 80011f4:	1111      	asrs	r1, r2, #4
 80011f6:	17da      	asrs	r2, r3, #31
 80011f8:	1a8a      	subs	r2, r1, r2
 80011fa:	2132      	movs	r1, #50	@ 0x32
 80011fc:	fb01 f202 	mul.w	r2, r1, r2
 8001200:	1a9a      	subs	r2, r3, r2
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <store_distance+0x44>)
 8001206:	701a      	strb	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	200002b8 	.word	0x200002b8
 8001218:	200001f0 	.word	0x200001f0
 800121c:	51eb851f 	.word	0x51eb851f

08001220 <_write>:
/*--------------------------------------------------------------*/
int _write(int file, char *ptr, int len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	b29a      	uxth	r2, r3
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	4804      	ldr	r0, [pc, #16]	@ (8001248 <_write+0x28>)
 8001238:	f002 fa1e 	bl	8003678 <HAL_UART_Transmit>
    return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000034c 	.word	0x2000034c

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f000 fb93 	bl	800197c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f82d 	bl	80012b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f000 f95d 	bl	8001518 <MX_GPIO_Init>
  MX_TIM2_Init();
 800125e:	f000 f897 	bl	8001390 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001262:	f000 f92f 	bl	80014c4 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001266:	f000 f8df 	bl	8001428 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);   // start TIM2 once
 800126a:	480f      	ldr	r0, [pc, #60]	@ (80012a8 <main+0x5c>)
 800126c:	f001 fd2c 	bl	8002cc8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001270:	480e      	ldr	r0, [pc, #56]	@ (80012ac <main+0x60>)
 8001272:	f001 fd91 	bl	8002d98 <HAL_TIM_Base_Start_IT>
  One-way distance=(Time)/58
  */
  while (1)
  {
    /* USER CODE END WHILE */
      uint32_t time = read_ultrasonic();
 8001276:	f7ff ff6b 	bl	8001150 <read_ultrasonic>
 800127a:	6078      	str	r0, [r7, #4]
      float distance = (float)time / 58.0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001286:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80012b0 <main+0x64>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	edc7 7a00 	vstr	s15, [r7]
      store_distance(distance); // store in circular buffer
 8001292:	ed97 0a00 	vldr	s0, [r7]
 8001296:	f7ff ff9b 	bl	80011d0 <store_distance>
      //printf("Distance: %.2f cm\r\n", distance);
      HAL_Delay(500);
 800129a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800129e:	f000 fbdf 	bl	8001a60 <HAL_Delay>
  {
 80012a2:	bf00      	nop
 80012a4:	e7e7      	b.n	8001276 <main+0x2a>
 80012a6:	bf00      	nop
 80012a8:	200002bc 	.word	0x200002bc
 80012ac:	20000304 	.word	0x20000304
 80012b0:	42680000 	.word	0x42680000

080012b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b094      	sub	sp, #80	@ 0x50
 80012b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	2234      	movs	r2, #52	@ 0x34
 80012c0:	2100      	movs	r1, #0
 80012c2:	4618      	mov	r0, r3
 80012c4:	f003 fd31 	bl	8004d2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012c8:	f107 0308 	add.w	r3, r7, #8
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
 80012d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d8:	2300      	movs	r3, #0
 80012da:	607b      	str	r3, [r7, #4]
 80012dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001388 <SystemClock_Config+0xd4>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	4a29      	ldr	r2, [pc, #164]	@ (8001388 <SystemClock_Config+0xd4>)
 80012e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80012e8:	4b27      	ldr	r3, [pc, #156]	@ (8001388 <SystemClock_Config+0xd4>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012f4:	2300      	movs	r3, #0
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	4b24      	ldr	r3, [pc, #144]	@ (800138c <SystemClock_Config+0xd8>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001300:	4a22      	ldr	r2, [pc, #136]	@ (800138c <SystemClock_Config+0xd8>)
 8001302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	4b20      	ldr	r3, [pc, #128]	@ (800138c <SystemClock_Config+0xd8>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001310:	603b      	str	r3, [r7, #0]
 8001312:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001314:	2302      	movs	r3, #2
 8001316:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001318:	2301      	movs	r3, #1
 800131a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800131c:	2310      	movs	r3, #16
 800131e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001320:	2302      	movs	r3, #2
 8001322:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001324:	2300      	movs	r3, #0
 8001326:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001328:	2310      	movs	r3, #16
 800132a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800132c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001330:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001332:	2304      	movs	r3, #4
 8001334:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001336:	2302      	movs	r3, #2
 8001338:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800133a:	2302      	movs	r3, #2
 800133c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 031c 	add.w	r3, r7, #28
 8001342:	4618      	mov	r0, r3
 8001344:	f001 f9d2 	bl	80026ec <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800134e:	f000 f943 	bl	80015d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001362:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	f107 0308 	add.w	r3, r7, #8
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fe72 	bl	8002058 <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800137a:	f000 f92d 	bl	80015d8 <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	@ 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a4:	463b      	mov	r3, r7
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013ae:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80013b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013b6:	2253      	movs	r2, #83	@ 0x53
 80013b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013c0:	4b18      	ldr	r3, [pc, #96]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c8:	4b16      	ldr	r3, [pc, #88]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ce:	4b15      	ldr	r3, [pc, #84]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013d4:	4813      	ldr	r0, [pc, #76]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013d6:	f001 fc27 	bl	8002c28 <HAL_TIM_Base_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013e0:	f000 f8fa 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ea:	f107 0308 	add.w	r3, r7, #8
 80013ee:	4619      	mov	r1, r3
 80013f0:	480c      	ldr	r0, [pc, #48]	@ (8001424 <MX_TIM2_Init+0x94>)
 80013f2:	f001 fe31 	bl	8003058 <HAL_TIM_ConfigClockSource>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013fc:	f000 f8ec 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001404:	2300      	movs	r3, #0
 8001406:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001408:	463b      	mov	r3, r7
 800140a:	4619      	mov	r1, r3
 800140c:	4805      	ldr	r0, [pc, #20]	@ (8001424 <MX_TIM2_Init+0x94>)
 800140e:	f002 f853 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001418:	f000 f8de 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800141c:	bf00      	nop
 800141e:	3718      	adds	r7, #24
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	200002bc 	.word	0x200002bc

08001428 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_TIM3_Init+0x94>)
 8001446:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <MX_TIM3_Init+0x98>)
 8001448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_TIM3_Init+0x94>)
 800144c:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001450:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_TIM3_Init+0x94>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 8001458:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <MX_TIM3_Init+0x94>)
 800145a:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800145e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	4b16      	ldr	r3, [pc, #88]	@ (80014bc <MX_TIM3_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001466:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_TIM3_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800146c:	4813      	ldr	r0, [pc, #76]	@ (80014bc <MX_TIM3_Init+0x94>)
 800146e:	f001 fbdb 	bl	8002c28 <HAL_TIM_Base_Init>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001478:	f000 f8ae 	bl	80015d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001480:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001482:	f107 0308 	add.w	r3, r7, #8
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	@ (80014bc <MX_TIM3_Init+0x94>)
 800148a:	f001 fde5 	bl	8003058 <HAL_TIM_ConfigClockSource>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001494:	f000 f8a0 	bl	80015d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	@ (80014bc <MX_TIM3_Init+0x94>)
 80014a6:	f002 f807 	bl	80034b8 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b0:	f000 f892 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000304 	.word	0x20000304
 80014c0:	40000400 	.word	0x40000400

080014c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ca:	4a12      	ldr	r2, [pc, #72]	@ (8001514 <MX_USART2_UART_Init+0x50>)
 80014cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014ce:	4b10      	ldr	r3, [pc, #64]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e8:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014ee:	4b08      	ldr	r3, [pc, #32]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f4:	4b06      	ldr	r3, [pc, #24]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fa:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_USART2_UART_Init+0x4c>)
 80014fc:	f002 f86c 	bl	80035d8 <HAL_UART_Init>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001506:	f000 f867 	bl	80015d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	2000034c 	.word	0x2000034c
 8001514:	40004400 	.word	0x40004400

08001518 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151e:	f107 030c 	add.w	r3, r7, #12
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
 800152c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b26      	ldr	r3, [pc, #152]	@ (80015cc <MX_GPIO_Init+0xb4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	4a25      	ldr	r2, [pc, #148]	@ (80015cc <MX_GPIO_Init+0xb4>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800153c:	6313      	str	r3, [r2, #48]	@ 0x30
 800153e:	4b23      	ldr	r3, [pc, #140]	@ (80015cc <MX_GPIO_Init+0xb4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <MX_GPIO_Init+0xb4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	4a1e      	ldr	r2, [pc, #120]	@ (80015cc <MX_GPIO_Init+0xb4>)
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6313      	str	r3, [r2, #48]	@ 0x30
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <MX_GPIO_Init+0xb4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <MX_GPIO_Init+0xb4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <MX_GPIO_Init+0xb4>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <MX_GPIO_Init+0xb4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001588:	4811      	ldr	r0, [pc, #68]	@ (80015d0 <MX_GPIO_Init+0xb8>)
 800158a:	f000 fd4b 	bl	8002024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800158e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001592:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	480a      	ldr	r0, [pc, #40]	@ (80015d0 <MX_GPIO_Init+0xb8>)
 80015a8:	f000 fb90 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015ac:	2340      	movs	r3, #64	@ 0x40
 80015ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b0:	2300      	movs	r3, #0
 80015b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015b8:	f107 030c 	add.w	r3, r7, #12
 80015bc:	4619      	mov	r1, r3
 80015be:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <MX_GPIO_Init+0xbc>)
 80015c0:	f000 fb84 	bl	8001ccc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015c4:	bf00      	nop
 80015c6:	3720      	adds	r7, #32
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40020000 	.word	0x40020000
 80015d4:	40020400 	.word	0x40020400

080015d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015dc:	b672      	cpsid	i
}
 80015de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <Error_Handler+0x8>

080015e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	607b      	str	r3, [r7, #4]
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f2:	4a0f      	ldr	r2, [pc, #60]	@ (8001630 <HAL_MspInit+0x4c>)
 80015f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015fa:	4b0d      	ldr	r3, [pc, #52]	@ (8001630 <HAL_MspInit+0x4c>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	603b      	str	r3, [r7, #0]
 800160a:	4b09      	ldr	r3, [pc, #36]	@ (8001630 <HAL_MspInit+0x4c>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160e:	4a08      	ldr	r2, [pc, #32]	@ (8001630 <HAL_MspInit+0x4c>)
 8001610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001614:	6413      	str	r3, [r2, #64]	@ 0x40
 8001616:	4b06      	ldr	r3, [pc, #24]	@ (8001630 <HAL_MspInit+0x4c>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800161e:	603b      	str	r3, [r7, #0]
 8001620:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001622:	2007      	movs	r0, #7
 8001624:	f000 fb10 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40023800 	.word	0x40023800

08001634 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001644:	d10e      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_TIM_Base_MspInit+0x70>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <HAL_TIM_Base_MspInit+0x70>)
 8001650:	f043 0301 	orr.w	r3, r3, #1
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_TIM_Base_MspInit+0x70>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f003 0301 	and.w	r3, r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001662:	e01a      	b.n	800169a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a0f      	ldr	r2, [pc, #60]	@ (80016a8 <HAL_TIM_Base_MspInit+0x74>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d115      	bne.n	800169a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_TIM_Base_MspInit+0x70>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001676:	4a0b      	ldr	r2, [pc, #44]	@ (80016a4 <HAL_TIM_Base_MspInit+0x70>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6413      	str	r3, [r2, #64]	@ 0x40
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <HAL_TIM_Base_MspInit+0x70>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	201d      	movs	r0, #29
 8001690:	f000 fae5 	bl	8001c5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001694:	201d      	movs	r0, #29
 8001696:	f000 fafe 	bl	8001c96 <HAL_NVIC_EnableIRQ>
}
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40000400 	.word	0x40000400

080016ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	@ 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	@ (8001730 <HAL_UART_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001706:	230c      	movs	r3, #12
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001716:	2307      	movs	r3, #7
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <HAL_UART_MspInit+0x8c>)
 8001722:	f000 fad3 	bl	8001ccc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004400 	.word	0x40004400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <NMI_Handler+0x4>

08001744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <MemManage_Handler+0x4>

08001754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <UsageFault_Handler+0x4>

08001764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001792:	f000 f945 	bl	8001a20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <TIM3_IRQHandler+0x10>)
 80017a2:	f001 fb69 	bl	8002e78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000304 	.word	0x20000304

080017b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return 1;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_kill>:

int _kill(int pid, int sig)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017ca:	f003 fb01 	bl	8004dd0 <__errno>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2216      	movs	r2, #22
 80017d2:	601a      	str	r2, [r3, #0]
  return -1;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_exit>:

void _exit (int status)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe7 	bl	80017c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80017f2:	bf00      	nop
 80017f4:	e7fd      	b.n	80017f2 <_exit+0x12>

080017f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b086      	sub	sp, #24
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	60f8      	str	r0, [r7, #12]
 80017fe:	60b9      	str	r1, [r7, #8]
 8001800:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001802:	2300      	movs	r3, #0
 8001804:	617b      	str	r3, [r7, #20]
 8001806:	e00a      	b.n	800181e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001808:	f3af 8000 	nop.w
 800180c:	4601      	mov	r1, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1c5a      	adds	r2, r3, #1
 8001812:	60ba      	str	r2, [r7, #8]
 8001814:	b2ca      	uxtb	r2, r1
 8001816:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	3301      	adds	r3, #1
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	697a      	ldr	r2, [r7, #20]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	429a      	cmp	r2, r3
 8001824:	dbf0      	blt.n	8001808 <_read+0x12>
  }

  return len;
 8001826:	687b      	ldr	r3, [r7, #4]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001858:	605a      	str	r2, [r3, #4]
  return 0;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	370c      	adds	r7, #12
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <_isatty>:

int _isatty(int file)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800187e:	b480      	push	{r7}
 8001880:	b085      	sub	sp, #20
 8001882:	af00      	add	r7, sp, #0
 8001884:	60f8      	str	r0, [r7, #12]
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800188a:	2300      	movs	r3, #0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018a0:	4a14      	ldr	r2, [pc, #80]	@ (80018f4 <_sbrk+0x5c>)
 80018a2:	4b15      	ldr	r3, [pc, #84]	@ (80018f8 <_sbrk+0x60>)
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018ac:	4b13      	ldr	r3, [pc, #76]	@ (80018fc <_sbrk+0x64>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d102      	bne.n	80018ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018b4:	4b11      	ldr	r3, [pc, #68]	@ (80018fc <_sbrk+0x64>)
 80018b6:	4a12      	ldr	r2, [pc, #72]	@ (8001900 <_sbrk+0x68>)
 80018b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ba:	4b10      	ldr	r3, [pc, #64]	@ (80018fc <_sbrk+0x64>)
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4413      	add	r3, r2
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d207      	bcs.n	80018d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018c8:	f003 fa82 	bl	8004dd0 <__errno>
 80018cc:	4603      	mov	r3, r0
 80018ce:	220c      	movs	r2, #12
 80018d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
 80018d6:	e009      	b.n	80018ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <_sbrk+0x64>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018de:	4b07      	ldr	r3, [pc, #28]	@ (80018fc <_sbrk+0x64>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4413      	add	r3, r2
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <_sbrk+0x64>)
 80018e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018ea:	68fb      	ldr	r3, [r7, #12]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20020000 	.word	0x20020000
 80018f8:	00000400 	.word	0x00000400
 80018fc:	20000394 	.word	0x20000394
 8001900:	200004e8 	.word	0x200004e8

08001904 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001908:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <SystemInit+0x20>)
 800190a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800190e:	4a05      	ldr	r2, [pc, #20]	@ (8001924 <SystemInit+0x20>)
 8001910:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001914:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001918:	bf00      	nop
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001928:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001960 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800192c:	f7ff ffea 	bl	8001904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001930:	480c      	ldr	r0, [pc, #48]	@ (8001964 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001932:	490d      	ldr	r1, [pc, #52]	@ (8001968 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001934:	4a0d      	ldr	r2, [pc, #52]	@ (800196c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001936:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001938:	e002      	b.n	8001940 <LoopCopyDataInit>

0800193a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800193a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800193c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800193e:	3304      	adds	r3, #4

08001940 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001940:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001942:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001944:	d3f9      	bcc.n	800193a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001946:	4a0a      	ldr	r2, [pc, #40]	@ (8001970 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001948:	4c0a      	ldr	r4, [pc, #40]	@ (8001974 <LoopFillZerobss+0x22>)
  movs r3, #0
 800194a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800194c:	e001      	b.n	8001952 <LoopFillZerobss>

0800194e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800194e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001950:	3204      	adds	r2, #4

08001952 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001952:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001954:	d3fb      	bcc.n	800194e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001956:	f003 fa41 	bl	8004ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800195a:	f7ff fc77 	bl	800124c <main>
  bx  lr    
 800195e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001960:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001964:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001968:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800196c:	0800898c 	.word	0x0800898c
  ldr r2, =_sbss
 8001970:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001974:	200004e8 	.word	0x200004e8

08001978 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001978:	e7fe      	b.n	8001978 <ADC_IRQHandler>
	...

0800197c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001980:	4b0e      	ldr	r3, [pc, #56]	@ (80019bc <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <HAL_Init+0x40>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800198a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0a      	ldr	r2, [pc, #40]	@ (80019bc <HAL_Init+0x40>)
 8001992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001996:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001998:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a07      	ldr	r2, [pc, #28]	@ (80019bc <HAL_Init+0x40>)
 800199e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019a4:	2003      	movs	r0, #3
 80019a6:	f000 f94f 	bl	8001c48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019aa:	2000      	movs	r0, #0
 80019ac:	f000 f808 	bl	80019c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b0:	f7ff fe18 	bl	80015e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40023c00 	.word	0x40023c00

080019c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019c8:	4b12      	ldr	r3, [pc, #72]	@ (8001a14 <HAL_InitTick+0x54>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_InitTick+0x58>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019da:	fbb2 f3f3 	udiv	r3, r2, r3
 80019de:	4618      	mov	r0, r3
 80019e0:	f000 f967 	bl	8001cb2 <HAL_SYSTICK_Config>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00e      	b.n	8001a0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2b0f      	cmp	r3, #15
 80019f2:	d80a      	bhi.n	8001a0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019f4:	2200      	movs	r2, #0
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f000 f92f 	bl	8001c5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a00:	4a06      	ldr	r2, [pc, #24]	@ (8001a1c <HAL_InitTick+0x5c>)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
 8001a08:	e000      	b.n	8001a0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3708      	adds	r7, #8
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000000 	.word	0x20000000
 8001a18:	20000008 	.word	0x20000008
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a24:	4b06      	ldr	r3, [pc, #24]	@ (8001a40 <HAL_IncTick+0x20>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b06      	ldr	r3, [pc, #24]	@ (8001a44 <HAL_IncTick+0x24>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4413      	add	r3, r2
 8001a30:	4a04      	ldr	r2, [pc, #16]	@ (8001a44 <HAL_IncTick+0x24>)
 8001a32:	6013      	str	r3, [r2, #0]
}
 8001a34:	bf00      	nop
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	20000008 	.word	0x20000008
 8001a44:	20000398 	.word	0x20000398

08001a48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a4c:	4b03      	ldr	r3, [pc, #12]	@ (8001a5c <HAL_GetTick+0x14>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	20000398 	.word	0x20000398

08001a60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a68:	f7ff ffee 	bl	8001a48 <HAL_GetTick>
 8001a6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a78:	d005      	beq.n	8001a86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <HAL_Delay+0x44>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a86:	bf00      	nop
 8001a88:	f7ff ffde 	bl	8001a48 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68bb      	ldr	r3, [r7, #8]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d8f7      	bhi.n	8001a88 <HAL_Delay+0x28>
  {
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000008 	.word	0x20000008

08001aa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	@ (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001abe:	68ba      	ldr	r2, [r7, #8]
 8001ac0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ad4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ad8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ada:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <__NVIC_SetPriorityGrouping+0x44>)
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	60d3      	str	r3, [r2, #12]
}
 8001ae0:	bf00      	nop
 8001ae2:	3714      	adds	r7, #20
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00

08001af0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af4:	4b04      	ldr	r3, [pc, #16]	@ (8001b08 <__NVIC_GetPriorityGrouping+0x18>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	0a1b      	lsrs	r3, r3, #8
 8001afa:	f003 0307 	and.w	r3, r3, #7
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	db0b      	blt.n	8001b36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f003 021f 	and.w	r2, r3, #31
 8001b24:	4907      	ldr	r1, [pc, #28]	@ (8001b44 <__NVIC_EnableIRQ+0x38>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	095b      	lsrs	r3, r3, #5
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	e000e100 	.word	0xe000e100

08001b48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	4603      	mov	r3, r0
 8001b50:	6039      	str	r1, [r7, #0]
 8001b52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	db0a      	blt.n	8001b72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	b2da      	uxtb	r2, r3
 8001b60:	490c      	ldr	r1, [pc, #48]	@ (8001b94 <__NVIC_SetPriority+0x4c>)
 8001b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b66:	0112      	lsls	r2, r2, #4
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	440b      	add	r3, r1
 8001b6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b70:	e00a      	b.n	8001b88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	4908      	ldr	r1, [pc, #32]	@ (8001b98 <__NVIC_SetPriority+0x50>)
 8001b78:	79fb      	ldrb	r3, [r7, #7]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	3b04      	subs	r3, #4
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	440b      	add	r3, r1
 8001b86:	761a      	strb	r2, [r3, #24]
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	f1c3 0307 	rsb	r3, r3, #7
 8001bb6:	2b04      	cmp	r3, #4
 8001bb8:	bf28      	it	cs
 8001bba:	2304      	movcs	r3, #4
 8001bbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	2b06      	cmp	r3, #6
 8001bc4:	d902      	bls.n	8001bcc <NVIC_EncodePriority+0x30>
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3b03      	subs	r3, #3
 8001bca:	e000      	b.n	8001bce <NVIC_EncodePriority+0x32>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	401a      	ands	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be4:	f04f 31ff 	mov.w	r1, #4294967295
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	fa01 f303 	lsl.w	r3, r1, r3
 8001bee:	43d9      	mvns	r1, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf4:	4313      	orrs	r3, r2
         );
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3724      	adds	r7, #36	@ 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
	...

08001c04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	3b01      	subs	r3, #1
 8001c10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c14:	d301      	bcc.n	8001c1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c16:	2301      	movs	r3, #1
 8001c18:	e00f      	b.n	8001c3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c44 <SysTick_Config+0x40>)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c22:	210f      	movs	r1, #15
 8001c24:	f04f 30ff 	mov.w	r0, #4294967295
 8001c28:	f7ff ff8e 	bl	8001b48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c2c:	4b05      	ldr	r3, [pc, #20]	@ (8001c44 <SysTick_Config+0x40>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c32:	4b04      	ldr	r3, [pc, #16]	@ (8001c44 <SysTick_Config+0x40>)
 8001c34:	2207      	movs	r2, #7
 8001c36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3708      	adds	r7, #8
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	e000e010 	.word	0xe000e010

08001c48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff29 	bl	8001aa8 <__NVIC_SetPriorityGrouping>
}
 8001c56:	bf00      	nop
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c5e:	b580      	push	{r7, lr}
 8001c60:	b086      	sub	sp, #24
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	4603      	mov	r3, r0
 8001c66:	60b9      	str	r1, [r7, #8]
 8001c68:	607a      	str	r2, [r7, #4]
 8001c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c70:	f7ff ff3e 	bl	8001af0 <__NVIC_GetPriorityGrouping>
 8001c74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f7ff ff8e 	bl	8001b9c <NVIC_EncodePriority>
 8001c80:	4602      	mov	r2, r0
 8001c82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ff5d 	bl	8001b48 <__NVIC_SetPriority>
}
 8001c8e:	bf00      	nop
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b082      	sub	sp, #8
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff31 	bl	8001b0c <__NVIC_EnableIRQ>
}
 8001caa:	bf00      	nop
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffa2 	bl	8001c04 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	@ 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e165      	b.n	8001fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8154 	bne.w	8001fae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80ae 	beq.w	8001fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b5d      	ldr	r3, [pc, #372]	@ (8001fcc <HAL_GPIO_Init+0x300>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	4a5c      	ldr	r2, [pc, #368]	@ (8001fcc <HAL_GPIO_Init+0x300>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e62:	4b5a      	ldr	r3, [pc, #360]	@ (8001fcc <HAL_GPIO_Init+0x300>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a58      	ldr	r2, [pc, #352]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4f      	ldr	r2, [pc, #316]	@ (8001fd4 <HAL_GPIO_Init+0x308>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d025      	beq.n	8001ee6 <HAL_GPIO_Init+0x21a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_GPIO_Init+0x216>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4d      	ldr	r2, [pc, #308]	@ (8001fdc <HAL_GPIO_Init+0x310>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x212>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	@ (8001fe0 <HAL_GPIO_Init+0x314>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x20e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	@ (8001fe4 <HAL_GPIO_Init+0x318>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x20a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	@ (8001fe8 <HAL_GPIO_Init+0x31c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x206>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	@ (8001fec <HAL_GPIO_Init+0x320>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x202>
 8001eca:	2306      	movs	r3, #6
 8001ecc:	e00c      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e00a      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e008      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e004      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f002 0203 	and.w	r2, r2, #3
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef8:	4935      	ldr	r1, [pc, #212]	@ (8001fd0 <HAL_GPIO_Init+0x304>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a31      	ldr	r2, [pc, #196]	@ (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a26      	ldr	r2, [pc, #152]	@ (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	@ (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa8:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <HAL_GPIO_Init+0x324>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	f67f ae96 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3724      	adds	r7, #36	@ 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021400 	.word	0x40021400
 8001fec:	40021800 	.word	0x40021800
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e001      	b.n	8002016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002024:	b480      	push	{r7}
 8002026:	b083      	sub	sp, #12
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	807b      	strh	r3, [r7, #2]
 8002030:	4613      	mov	r3, r2
 8002032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002034:	787b      	ldrb	r3, [r7, #1]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800203a:	887a      	ldrh	r2, [r7, #2]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002040:	e003      	b.n	800204a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002042:	887b      	ldrh	r3, [r7, #2]
 8002044:	041a      	lsls	r2, r3, #16
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	619a      	str	r2, [r3, #24]
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
	...

08002058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d101      	bne.n	800206c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	e0cc      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800206c:	4b68      	ldr	r3, [pc, #416]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	429a      	cmp	r2, r3
 8002078:	d90c      	bls.n	8002094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800207a:	4b65      	ldr	r3, [pc, #404]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002082:	4b63      	ldr	r3, [pc, #396]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	683a      	ldr	r2, [r7, #0]
 800208c:	429a      	cmp	r2, r3
 800208e:	d001      	beq.n	8002094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b8      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d020      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0304 	and.w	r3, r3, #4
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020ac:	4b59      	ldr	r3, [pc, #356]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a58      	ldr	r2, [pc, #352]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80020b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c4:	4b53      	ldr	r3, [pc, #332]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	4a52      	ldr	r2, [pc, #328]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80020ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b50      	ldr	r3, [pc, #320]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	494d      	ldr	r1, [pc, #308]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d044      	beq.n	8002178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020f6:	4b47      	ldr	r3, [pc, #284]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d119      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e07f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d003      	beq.n	8002116 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002112:	2b03      	cmp	r3, #3
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002116:	4b3f      	ldr	r3, [pc, #252]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e06f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002126:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e067      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4934      	ldr	r1, [pc, #208]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002148:	f7ff fc7e 	bl	8001a48 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7ff fc7a 	bl	8001a48 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e04f      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b2b      	ldr	r3, [pc, #172]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002178:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	d20c      	bcs.n	80021a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002186:	4b22      	ldr	r3, [pc, #136]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	b2d2      	uxtb	r2, r2
 800218c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800218e:	4b20      	ldr	r3, [pc, #128]	@ (8002210 <HAL_RCC_ClockConfig+0x1b8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 030f 	and.w	r3, r3, #15
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	429a      	cmp	r2, r3
 800219a:	d001      	beq.n	80021a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	e032      	b.n	8002206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d008      	beq.n	80021be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021ac:	4b19      	ldr	r3, [pc, #100]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	4916      	ldr	r1, [pc, #88]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 0308 	and.w	r3, r3, #8
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d009      	beq.n	80021de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	490e      	ldr	r1, [pc, #56]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021de:	f000 f855 	bl	800228c <HAL_RCC_GetSysClockFreq>
 80021e2:	4602      	mov	r2, r0
 80021e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002214 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	091b      	lsrs	r3, r3, #4
 80021ea:	f003 030f 	and.w	r3, r3, #15
 80021ee:	490a      	ldr	r1, [pc, #40]	@ (8002218 <HAL_RCC_ClockConfig+0x1c0>)
 80021f0:	5ccb      	ldrb	r3, [r1, r3]
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	4a09      	ldr	r2, [pc, #36]	@ (800221c <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <HAL_RCC_ClockConfig+0x1c8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fbde 	bl	80019c0 <HAL_InitTick>

  return HAL_OK;
 8002204:	2300      	movs	r3, #0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023c00 	.word	0x40023c00
 8002214:	40023800 	.word	0x40023800
 8002218:	0800853c 	.word	0x0800853c
 800221c:	20000000 	.word	0x20000000
 8002220:	20000004 	.word	0x20000004

08002224 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002228:	4b03      	ldr	r3, [pc, #12]	@ (8002238 <HAL_RCC_GetHCLKFreq+0x14>)
 800222a:	681b      	ldr	r3, [r3, #0]
}
 800222c:	4618      	mov	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	20000000 	.word	0x20000000

0800223c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002240:	f7ff fff0 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 8002244:	4602      	mov	r2, r0
 8002246:	4b05      	ldr	r3, [pc, #20]	@ (800225c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	0a9b      	lsrs	r3, r3, #10
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	4903      	ldr	r1, [pc, #12]	@ (8002260 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002252:	5ccb      	ldrb	r3, [r1, r3]
 8002254:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002258:	4618      	mov	r0, r3
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	0800854c 	.word	0x0800854c

08002264 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002268:	f7ff ffdc 	bl	8002224 <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b05      	ldr	r3, [pc, #20]	@ (8002284 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0b5b      	lsrs	r3, r3, #13
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4903      	ldr	r1, [pc, #12]	@ (8002288 <HAL_RCC_GetPCLK2Freq+0x24>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002280:	4618      	mov	r0, r3
 8002282:	bd80      	pop	{r7, pc}
 8002284:	40023800 	.word	0x40023800
 8002288:	0800854c 	.word	0x0800854c

0800228c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800228c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002290:	b0ae      	sub	sp, #184	@ 0xb8
 8002292:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80022a0:	2300      	movs	r3, #0
 80022a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022b2:	4bcb      	ldr	r3, [pc, #812]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 030c 	and.w	r3, r3, #12
 80022ba:	2b0c      	cmp	r3, #12
 80022bc:	f200 8206 	bhi.w	80026cc <HAL_RCC_GetSysClockFreq+0x440>
 80022c0:	a201      	add	r2, pc, #4	@ (adr r2, 80022c8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80022c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022c6:	bf00      	nop
 80022c8:	080022fd 	.word	0x080022fd
 80022cc:	080026cd 	.word	0x080026cd
 80022d0:	080026cd 	.word	0x080026cd
 80022d4:	080026cd 	.word	0x080026cd
 80022d8:	08002305 	.word	0x08002305
 80022dc:	080026cd 	.word	0x080026cd
 80022e0:	080026cd 	.word	0x080026cd
 80022e4:	080026cd 	.word	0x080026cd
 80022e8:	0800230d 	.word	0x0800230d
 80022ec:	080026cd 	.word	0x080026cd
 80022f0:	080026cd 	.word	0x080026cd
 80022f4:	080026cd 	.word	0x080026cd
 80022f8:	080024fd 	.word	0x080024fd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022fc:	4bb9      	ldr	r3, [pc, #740]	@ (80025e4 <HAL_RCC_GetSysClockFreq+0x358>)
 80022fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002302:	e1e7      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002304:	4bb8      	ldr	r3, [pc, #736]	@ (80025e8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002306:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800230a:	e1e3      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800230c:	4bb4      	ldr	r3, [pc, #720]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002314:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002318:	4bb1      	ldr	r3, [pc, #708]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d071      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002324:	4bae      	ldr	r3, [pc, #696]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	099b      	lsrs	r3, r3, #6
 800232a:	2200      	movs	r2, #0
 800232c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002330:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002334:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800233c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002340:	2300      	movs	r3, #0
 8002342:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002346:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800234a:	4622      	mov	r2, r4
 800234c:	462b      	mov	r3, r5
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0159      	lsls	r1, r3, #5
 8002358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235c:	0150      	lsls	r0, r2, #5
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4621      	mov	r1, r4
 8002364:	1a51      	subs	r1, r2, r1
 8002366:	6439      	str	r1, [r7, #64]	@ 0x40
 8002368:	4629      	mov	r1, r5
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800237c:	4649      	mov	r1, r9
 800237e:	018b      	lsls	r3, r1, #6
 8002380:	4641      	mov	r1, r8
 8002382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002386:	4641      	mov	r1, r8
 8002388:	018a      	lsls	r2, r1, #6
 800238a:	4641      	mov	r1, r8
 800238c:	1a51      	subs	r1, r2, r1
 800238e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002390:	4649      	mov	r1, r9
 8002392:	eb63 0301 	sbc.w	r3, r3, r1
 8002396:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	f04f 0300 	mov.w	r3, #0
 80023a0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80023a4:	4649      	mov	r1, r9
 80023a6:	00cb      	lsls	r3, r1, #3
 80023a8:	4641      	mov	r1, r8
 80023aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80023ae:	4641      	mov	r1, r8
 80023b0:	00ca      	lsls	r2, r1, #3
 80023b2:	4610      	mov	r0, r2
 80023b4:	4619      	mov	r1, r3
 80023b6:	4603      	mov	r3, r0
 80023b8:	4622      	mov	r2, r4
 80023ba:	189b      	adds	r3, r3, r2
 80023bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80023be:	462b      	mov	r3, r5
 80023c0:	460a      	mov	r2, r1
 80023c2:	eb42 0303 	adc.w	r3, r2, r3
 80023c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80023c8:	f04f 0200 	mov.w	r2, #0
 80023cc:	f04f 0300 	mov.w	r3, #0
 80023d0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80023d4:	4629      	mov	r1, r5
 80023d6:	024b      	lsls	r3, r1, #9
 80023d8:	4621      	mov	r1, r4
 80023da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023de:	4621      	mov	r1, r4
 80023e0:	024a      	lsls	r2, r1, #9
 80023e2:	4610      	mov	r0, r2
 80023e4:	4619      	mov	r1, r3
 80023e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023ea:	2200      	movs	r2, #0
 80023ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80023f4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80023f8:	f7fe fc66 	bl	8000cc8 <__aeabi_uldivmod>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4613      	mov	r3, r2
 8002402:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002406:	e067      	b.n	80024d8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002408:	4b75      	ldr	r3, [pc, #468]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	099b      	lsrs	r3, r3, #6
 800240e:	2200      	movs	r2, #0
 8002410:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002414:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002418:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800241c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002420:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002422:	2300      	movs	r3, #0
 8002424:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002426:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800242a:	4622      	mov	r2, r4
 800242c:	462b      	mov	r3, r5
 800242e:	f04f 0000 	mov.w	r0, #0
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	0159      	lsls	r1, r3, #5
 8002438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243c:	0150      	lsls	r0, r2, #5
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4621      	mov	r1, r4
 8002444:	1a51      	subs	r1, r2, r1
 8002446:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002448:	4629      	mov	r1, r5
 800244a:	eb63 0301 	sbc.w	r3, r3, r1
 800244e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800245c:	4649      	mov	r1, r9
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	4641      	mov	r1, r8
 8002462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002466:	4641      	mov	r1, r8
 8002468:	018a      	lsls	r2, r1, #6
 800246a:	4641      	mov	r1, r8
 800246c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002470:	4649      	mov	r1, r9
 8002472:	eb63 0b01 	sbc.w	fp, r3, r1
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002482:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002486:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800248a:	4692      	mov	sl, r2
 800248c:	469b      	mov	fp, r3
 800248e:	4623      	mov	r3, r4
 8002490:	eb1a 0303 	adds.w	r3, sl, r3
 8002494:	623b      	str	r3, [r7, #32]
 8002496:	462b      	mov	r3, r5
 8002498:	eb4b 0303 	adc.w	r3, fp, r3
 800249c:	627b      	str	r3, [r7, #36]	@ 0x24
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80024aa:	4629      	mov	r1, r5
 80024ac:	028b      	lsls	r3, r1, #10
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024b4:	4621      	mov	r1, r4
 80024b6:	028a      	lsls	r2, r1, #10
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024c0:	2200      	movs	r2, #0
 80024c2:	673b      	str	r3, [r7, #112]	@ 0x70
 80024c4:	677a      	str	r2, [r7, #116]	@ 0x74
 80024c6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80024ca:	f7fe fbfd 	bl	8000cc8 <__aeabi_uldivmod>
 80024ce:	4602      	mov	r2, r0
 80024d0:	460b      	mov	r3, r1
 80024d2:	4613      	mov	r3, r2
 80024d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80024d8:	4b41      	ldr	r3, [pc, #260]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	0c1b      	lsrs	r3, r3, #16
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	3301      	adds	r3, #1
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80024ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80024ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80024f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80024fa:	e0eb      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80024fc:	4b38      	ldr	r3, [pc, #224]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002504:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002508:	4b35      	ldr	r3, [pc, #212]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d06b      	beq.n	80025ec <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002514:	4b32      	ldr	r3, [pc, #200]	@ (80025e0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	2200      	movs	r2, #0
 800251c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800251e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002526:	663b      	str	r3, [r7, #96]	@ 0x60
 8002528:	2300      	movs	r3, #0
 800252a:	667b      	str	r3, [r7, #100]	@ 0x64
 800252c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002530:	4622      	mov	r2, r4
 8002532:	462b      	mov	r3, r5
 8002534:	f04f 0000 	mov.w	r0, #0
 8002538:	f04f 0100 	mov.w	r1, #0
 800253c:	0159      	lsls	r1, r3, #5
 800253e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002542:	0150      	lsls	r0, r2, #5
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4621      	mov	r1, r4
 800254a:	1a51      	subs	r1, r2, r1
 800254c:	61b9      	str	r1, [r7, #24]
 800254e:	4629      	mov	r1, r5
 8002550:	eb63 0301 	sbc.w	r3, r3, r1
 8002554:	61fb      	str	r3, [r7, #28]
 8002556:	f04f 0200 	mov.w	r2, #0
 800255a:	f04f 0300 	mov.w	r3, #0
 800255e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002562:	4659      	mov	r1, fp
 8002564:	018b      	lsls	r3, r1, #6
 8002566:	4651      	mov	r1, sl
 8002568:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800256c:	4651      	mov	r1, sl
 800256e:	018a      	lsls	r2, r1, #6
 8002570:	4651      	mov	r1, sl
 8002572:	ebb2 0801 	subs.w	r8, r2, r1
 8002576:	4659      	mov	r1, fp
 8002578:	eb63 0901 	sbc.w	r9, r3, r1
 800257c:	f04f 0200 	mov.w	r2, #0
 8002580:	f04f 0300 	mov.w	r3, #0
 8002584:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002588:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800258c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002590:	4690      	mov	r8, r2
 8002592:	4699      	mov	r9, r3
 8002594:	4623      	mov	r3, r4
 8002596:	eb18 0303 	adds.w	r3, r8, r3
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	462b      	mov	r3, r5
 800259e:	eb49 0303 	adc.w	r3, r9, r3
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	f04f 0200 	mov.w	r2, #0
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80025b0:	4629      	mov	r1, r5
 80025b2:	024b      	lsls	r3, r1, #9
 80025b4:	4621      	mov	r1, r4
 80025b6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025ba:	4621      	mov	r1, r4
 80025bc:	024a      	lsls	r2, r1, #9
 80025be:	4610      	mov	r0, r2
 80025c0:	4619      	mov	r1, r3
 80025c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025c6:	2200      	movs	r2, #0
 80025c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80025ca:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80025cc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80025d0:	f7fe fb7a 	bl	8000cc8 <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4613      	mov	r3, r2
 80025da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80025de:	e065      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x420>
 80025e0:	40023800 	.word	0x40023800
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ec:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	2200      	movs	r2, #0
 80025f4:	4618      	mov	r0, r3
 80025f6:	4611      	mov	r1, r2
 80025f8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80025fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80025fe:	2300      	movs	r3, #0
 8002600:	657b      	str	r3, [r7, #84]	@ 0x54
 8002602:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002606:	4642      	mov	r2, r8
 8002608:	464b      	mov	r3, r9
 800260a:	f04f 0000 	mov.w	r0, #0
 800260e:	f04f 0100 	mov.w	r1, #0
 8002612:	0159      	lsls	r1, r3, #5
 8002614:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002618:	0150      	lsls	r0, r2, #5
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4641      	mov	r1, r8
 8002620:	1a51      	subs	r1, r2, r1
 8002622:	60b9      	str	r1, [r7, #8]
 8002624:	4649      	mov	r1, r9
 8002626:	eb63 0301 	sbc.w	r3, r3, r1
 800262a:	60fb      	str	r3, [r7, #12]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002638:	4659      	mov	r1, fp
 800263a:	018b      	lsls	r3, r1, #6
 800263c:	4651      	mov	r1, sl
 800263e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002642:	4651      	mov	r1, sl
 8002644:	018a      	lsls	r2, r1, #6
 8002646:	4651      	mov	r1, sl
 8002648:	1a54      	subs	r4, r2, r1
 800264a:	4659      	mov	r1, fp
 800264c:	eb63 0501 	sbc.w	r5, r3, r1
 8002650:	f04f 0200 	mov.w	r2, #0
 8002654:	f04f 0300 	mov.w	r3, #0
 8002658:	00eb      	lsls	r3, r5, #3
 800265a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800265e:	00e2      	lsls	r2, r4, #3
 8002660:	4614      	mov	r4, r2
 8002662:	461d      	mov	r5, r3
 8002664:	4643      	mov	r3, r8
 8002666:	18e3      	adds	r3, r4, r3
 8002668:	603b      	str	r3, [r7, #0]
 800266a:	464b      	mov	r3, r9
 800266c:	eb45 0303 	adc.w	r3, r5, r3
 8002670:	607b      	str	r3, [r7, #4]
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	f04f 0300 	mov.w	r3, #0
 800267a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800267e:	4629      	mov	r1, r5
 8002680:	028b      	lsls	r3, r1, #10
 8002682:	4621      	mov	r1, r4
 8002684:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002688:	4621      	mov	r1, r4
 800268a:	028a      	lsls	r2, r1, #10
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002694:	2200      	movs	r2, #0
 8002696:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002698:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800269a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800269e:	f7fe fb13 	bl	8000cc8 <__aeabi_uldivmod>
 80026a2:	4602      	mov	r2, r0
 80026a4:	460b      	mov	r3, r1
 80026a6:	4613      	mov	r3, r2
 80026a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80026ac:	4b0d      	ldr	r3, [pc, #52]	@ (80026e4 <HAL_RCC_GetSysClockFreq+0x458>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0f1b      	lsrs	r3, r3, #28
 80026b2:	f003 0307 	and.w	r3, r3, #7
 80026b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80026ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80026be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80026c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026ca:	e003      	b.n	80026d4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026cc:	4b06      	ldr	r3, [pc, #24]	@ (80026e8 <HAL_RCC_GetSysClockFreq+0x45c>)
 80026ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026d2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	37b8      	adds	r7, #184	@ 0xb8
 80026dc:	46bd      	mov	sp, r7
 80026de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	00f42400 	.word	0x00f42400

080026ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e28d      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 8083 	beq.w	8002812 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800270c:	4b94      	ldr	r3, [pc, #592]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 030c 	and.w	r3, r3, #12
 8002714:	2b04      	cmp	r3, #4
 8002716:	d019      	beq.n	800274c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002718:	4b91      	ldr	r3, [pc, #580]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002720:	2b08      	cmp	r3, #8
 8002722:	d106      	bne.n	8002732 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002724:	4b8e      	ldr	r3, [pc, #568]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002730:	d00c      	beq.n	800274c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002732:	4b8b      	ldr	r3, [pc, #556]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800273a:	2b0c      	cmp	r3, #12
 800273c:	d112      	bne.n	8002764 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800273e:	4b88      	ldr	r3, [pc, #544]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800274a:	d10b      	bne.n	8002764 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	4b84      	ldr	r3, [pc, #528]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d05b      	beq.n	8002810 <HAL_RCC_OscConfig+0x124>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d157      	bne.n	8002810 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e25a      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276c:	d106      	bne.n	800277c <HAL_RCC_OscConfig+0x90>
 800276e:	4b7c      	ldr	r3, [pc, #496]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a7b      	ldr	r2, [pc, #492]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0xcc>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0xb4>
 8002786:	4b76      	ldr	r3, [pc, #472]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a75      	ldr	r2, [pc, #468]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b73      	ldr	r3, [pc, #460]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0xcc>
 80027a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a6e      	ldr	r2, [pc, #440]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b6c      	ldr	r3, [pc, #432]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a6b      	ldr	r2, [pc, #428]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d013      	beq.n	80027e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7ff f942 	bl	8001a48 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027c8:	f7ff f93e 	bl	8001a48 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b64      	cmp	r3, #100	@ 0x64
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e21f      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027da:	4b61      	ldr	r3, [pc, #388]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0xdc>
 80027e6:	e014      	b.n	8002812 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7ff f92e 	bl	8001a48 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027f0:	f7ff f92a 	bl	8001a48 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b64      	cmp	r3, #100	@ 0x64
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e20b      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002802:	4b57      	ldr	r3, [pc, #348]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x104>
 800280e:	e000      	b.n	8002812 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d06f      	beq.n	80028fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800281e:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 030c 	and.w	r3, r3, #12
 8002826:	2b00      	cmp	r3, #0
 8002828:	d017      	beq.n	800285a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800282a:	4b4d      	ldr	r3, [pc, #308]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002832:	2b08      	cmp	r3, #8
 8002834:	d105      	bne.n	8002842 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002836:	4b4a      	ldr	r3, [pc, #296]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00b      	beq.n	800285a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002842:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800284a:	2b0c      	cmp	r3, #12
 800284c:	d11c      	bne.n	8002888 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800284e:	4b44      	ldr	r3, [pc, #272]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d116      	bne.n	8002888 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285a:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	2b00      	cmp	r3, #0
 8002864:	d005      	beq.n	8002872 <HAL_RCC_OscConfig+0x186>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d001      	beq.n	8002872 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e1d3      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002872:	4b3b      	ldr	r3, [pc, #236]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4937      	ldr	r1, [pc, #220]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002882:	4313      	orrs	r3, r2
 8002884:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	e03a      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d020      	beq.n	80028d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002890:	4b34      	ldr	r3, [pc, #208]	@ (8002964 <HAL_RCC_OscConfig+0x278>)
 8002892:	2201      	movs	r2, #1
 8002894:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002896:	f7ff f8d7 	bl	8001a48 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800289e:	f7ff f8d3 	bl	8001a48 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e1b4      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d0f0      	beq.n	800289e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028bc:	4b28      	ldr	r3, [pc, #160]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	00db      	lsls	r3, r3, #3
 80028ca:	4925      	ldr	r1, [pc, #148]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	600b      	str	r3, [r1, #0]
 80028d0:	e015      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d2:	4b24      	ldr	r3, [pc, #144]	@ (8002964 <HAL_RCC_OscConfig+0x278>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff f8b6 	bl	8001a48 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028e0:	f7ff f8b2 	bl	8001a48 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e193      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1f0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d036      	beq.n	8002978 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	695b      	ldr	r3, [r3, #20]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002912:	4b15      	ldr	r3, [pc, #84]	@ (8002968 <HAL_RCC_OscConfig+0x27c>)
 8002914:	2201      	movs	r2, #1
 8002916:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002918:	f7ff f896 	bl	8001a48 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002920:	f7ff f892 	bl	8001a48 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e173      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002932:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_OscConfig+0x274>)
 8002934:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x234>
 800293e:	e01b      	b.n	8002978 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002940:	4b09      	ldr	r3, [pc, #36]	@ (8002968 <HAL_RCC_OscConfig+0x27c>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002946:	f7ff f87f 	bl	8001a48 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	e00e      	b.n	800296c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800294e:	f7ff f87b 	bl	8001a48 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d907      	bls.n	800296c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e15c      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
 8002960:	40023800 	.word	0x40023800
 8002964:	42470000 	.word	0x42470000
 8002968:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800296c:	4b8a      	ldr	r3, [pc, #552]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 800296e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ea      	bne.n	800294e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 8097 	beq.w	8002ab4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002986:	2300      	movs	r3, #0
 8002988:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800298a:	4b83      	ldr	r3, [pc, #524]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
 800299a:	4b7f      	ldr	r3, [pc, #508]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	4a7e      	ldr	r2, [pc, #504]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a6:	4b7c      	ldr	r3, [pc, #496]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	60bb      	str	r3, [r7, #8]
 80029b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b2:	2301      	movs	r3, #1
 80029b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b6:	4b79      	ldr	r3, [pc, #484]	@ (8002b9c <HAL_RCC_OscConfig+0x4b0>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d118      	bne.n	80029f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c2:	4b76      	ldr	r3, [pc, #472]	@ (8002b9c <HAL_RCC_OscConfig+0x4b0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a75      	ldr	r2, [pc, #468]	@ (8002b9c <HAL_RCC_OscConfig+0x4b0>)
 80029c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ce:	f7ff f83b 	bl	8001a48 <HAL_GetTick>
 80029d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d4:	e008      	b.n	80029e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d6:	f7ff f837 	bl	8001a48 <HAL_GetTick>
 80029da:	4602      	mov	r2, r0
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	1ad3      	subs	r3, r2, r3
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e118      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029e8:	4b6c      	ldr	r3, [pc, #432]	@ (8002b9c <HAL_RCC_OscConfig+0x4b0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0f0      	beq.n	80029d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d106      	bne.n	8002a0a <HAL_RCC_OscConfig+0x31e>
 80029fc:	4b66      	ldr	r3, [pc, #408]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a65      	ldr	r2, [pc, #404]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a08:	e01c      	b.n	8002a44 <HAL_RCC_OscConfig+0x358>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	2b05      	cmp	r3, #5
 8002a10:	d10c      	bne.n	8002a2c <HAL_RCC_OscConfig+0x340>
 8002a12:	4b61      	ldr	r3, [pc, #388]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a16:	4a60      	ldr	r2, [pc, #384]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a1e:	4b5e      	ldr	r3, [pc, #376]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a22:	4a5d      	ldr	r2, [pc, #372]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a2a:	e00b      	b.n	8002a44 <HAL_RCC_OscConfig+0x358>
 8002a2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a30:	4a59      	ldr	r2, [pc, #356]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a32:	f023 0301 	bic.w	r3, r3, #1
 8002a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a38:	4b57      	ldr	r3, [pc, #348]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3c:	4a56      	ldr	r2, [pc, #344]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a3e:	f023 0304 	bic.w	r3, r3, #4
 8002a42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d015      	beq.n	8002a78 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4c:	f7fe fffc 	bl	8001a48 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a52:	e00a      	b.n	8002a6a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a54:	f7fe fff8 	bl	8001a48 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d901      	bls.n	8002a6a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002a66:	2303      	movs	r3, #3
 8002a68:	e0d7      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a6e:	f003 0302 	and.w	r3, r3, #2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d0ee      	beq.n	8002a54 <HAL_RCC_OscConfig+0x368>
 8002a76:	e014      	b.n	8002aa2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe ffe6 	bl	8001a48 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a80:	f7fe ffe2 	bl	8001a48 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e0c1      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a96:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9a:	f003 0302 	and.w	r3, r3, #2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1ee      	bne.n	8002a80 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002aa2:	7dfb      	ldrb	r3, [r7, #23]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d105      	bne.n	8002ab4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aac:	4a3a      	ldr	r2, [pc, #232]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002aae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ab2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	699b      	ldr	r3, [r3, #24]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 80ad 	beq.w	8002c18 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002abe:	4b36      	ldr	r3, [pc, #216]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 030c 	and.w	r3, r3, #12
 8002ac6:	2b08      	cmp	r3, #8
 8002ac8:	d060      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d145      	bne.n	8002b5e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad2:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b4>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad8:	f7fe ffb6 	bl	8001a48 <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ade:	e008      	b.n	8002af2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae0:	f7fe ffb2 	bl	8001a48 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e093      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002af2:	4b29      	ldr	r3, [pc, #164]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1f0      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	019b      	lsls	r3, r3, #6
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	085b      	lsrs	r3, r3, #1
 8002b16:	3b01      	subs	r3, #1
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	061b      	lsls	r3, r3, #24
 8002b22:	431a      	orrs	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b28:	071b      	lsls	r3, r3, #28
 8002b2a:	491b      	ldr	r1, [pc, #108]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b4>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b36:	f7fe ff87 	bl	8001a48 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe ff83 	bl	8001a48 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e064      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b50:	4b11      	ldr	r3, [pc, #68]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x452>
 8002b5c:	e05c      	b.n	8002c18 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_RCC_OscConfig+0x4b4>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe ff70 	bl	8001a48 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe ff6c 	bl	8001a48 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e04d      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b7e:	4b06      	ldr	r3, [pc, #24]	@ (8002b98 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x480>
 8002b8a:	e045      	b.n	8002c18 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e040      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
 8002b98:	40023800 	.word	0x40023800
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ba4:	4b1f      	ldr	r3, [pc, #124]	@ (8002c24 <HAL_RCC_OscConfig+0x538>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d030      	beq.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d129      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d122      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d119      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bea:	085b      	lsrs	r3, r3, #1
 8002bec:	3b01      	subs	r3, #1
 8002bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d10f      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d107      	bne.n	8002c14 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e000      	b.n	8002c1a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3718      	adds	r7, #24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800

08002c28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e041      	b.n	8002cbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe fcf0 	bl	8001634 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4610      	mov	r0, r2
 8002c68:	f000 fae6 	bl	8003238 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
	...

08002cc8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d001      	beq.n	8002ce0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e046      	b.n	8002d6e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a23      	ldr	r2, [pc, #140]	@ (8002d7c <HAL_TIM_Base_Start+0xb4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d022      	beq.n	8002d38 <HAL_TIM_Base_Start+0x70>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfa:	d01d      	beq.n	8002d38 <HAL_TIM_Base_Start+0x70>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a1f      	ldr	r2, [pc, #124]	@ (8002d80 <HAL_TIM_Base_Start+0xb8>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d018      	beq.n	8002d38 <HAL_TIM_Base_Start+0x70>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8002d84 <HAL_TIM_Base_Start+0xbc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d013      	beq.n	8002d38 <HAL_TIM_Base_Start+0x70>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a1c      	ldr	r2, [pc, #112]	@ (8002d88 <HAL_TIM_Base_Start+0xc0>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00e      	beq.n	8002d38 <HAL_TIM_Base_Start+0x70>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d8c <HAL_TIM_Base_Start+0xc4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d009      	beq.n	8002d38 <HAL_TIM_Base_Start+0x70>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a19      	ldr	r2, [pc, #100]	@ (8002d90 <HAL_TIM_Base_Start+0xc8>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d004      	beq.n	8002d38 <HAL_TIM_Base_Start+0x70>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a18      	ldr	r2, [pc, #96]	@ (8002d94 <HAL_TIM_Base_Start+0xcc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d111      	bne.n	8002d5c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d010      	beq.n	8002d6c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5a:	e007      	b.n	8002d6c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	681a      	ldr	r2, [r3, #0]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f042 0201 	orr.w	r2, r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40010000 	.word	0x40010000
 8002d80:	40000400 	.word	0x40000400
 8002d84:	40000800 	.word	0x40000800
 8002d88:	40000c00 	.word	0x40000c00
 8002d8c:	40010400 	.word	0x40010400
 8002d90:	40014000 	.word	0x40014000
 8002d94:	40001800 	.word	0x40001800

08002d98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d001      	beq.n	8002db0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e04e      	b.n	8002e4e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68da      	ldr	r2, [r3, #12]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f042 0201 	orr.w	r2, r2, #1
 8002dc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a23      	ldr	r2, [pc, #140]	@ (8002e5c <HAL_TIM_Base_Start_IT+0xc4>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dda:	d01d      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1f      	ldr	r2, [pc, #124]	@ (8002e60 <HAL_TIM_Base_Start_IT+0xc8>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d018      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a1e      	ldr	r2, [pc, #120]	@ (8002e64 <HAL_TIM_Base_Start_IT+0xcc>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d013      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1c      	ldr	r2, [pc, #112]	@ (8002e68 <HAL_TIM_Base_Start_IT+0xd0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d00e      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a1b      	ldr	r2, [pc, #108]	@ (8002e6c <HAL_TIM_Base_Start_IT+0xd4>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d009      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a19      	ldr	r2, [pc, #100]	@ (8002e70 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d004      	beq.n	8002e18 <HAL_TIM_Base_Start_IT+0x80>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a18      	ldr	r2, [pc, #96]	@ (8002e74 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d111      	bne.n	8002e3c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 0307 	and.w	r3, r3, #7
 8002e22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b06      	cmp	r3, #6
 8002e28:	d010      	beq.n	8002e4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0201 	orr.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e3a:	e007      	b.n	8002e4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40000400 	.word	0x40000400
 8002e64:	40000800 	.word	0x40000800
 8002e68:	40000c00 	.word	0x40000c00
 8002e6c:	40010400 	.word	0x40010400
 8002e70:	40014000 	.word	0x40014000
 8002e74:	40001800 	.word	0x40001800

08002e78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b084      	sub	sp, #16
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d020      	beq.n	8002edc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d01b      	beq.n	8002edc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f06f 0202 	mvn.w	r2, #2
 8002eac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 0303 	and.w	r3, r3, #3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d003      	beq.n	8002eca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 f999 	bl	80031fa <HAL_TIM_IC_CaptureCallback>
 8002ec8:	e005      	b.n	8002ed6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 f98b 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f99c 	bl	800320e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	f003 0304 	and.w	r3, r3, #4
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d020      	beq.n	8002f28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d01b      	beq.n	8002f28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f06f 0204 	mvn.w	r2, #4
 8002ef8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2202      	movs	r2, #2
 8002efe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f973 	bl	80031fa <HAL_TIM_IC_CaptureCallback>
 8002f14:	e005      	b.n	8002f22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f965 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f976 	bl	800320e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d020      	beq.n	8002f74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d01b      	beq.n	8002f74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f06f 0208 	mvn.w	r2, #8
 8002f44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2204      	movs	r2, #4
 8002f4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f94d 	bl	80031fa <HAL_TIM_IC_CaptureCallback>
 8002f60:	e005      	b.n	8002f6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f93f 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f000 f950 	bl	800320e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d020      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	f003 0310 	and.w	r3, r3, #16
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f06f 0210 	mvn.w	r2, #16
 8002f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2208      	movs	r2, #8
 8002f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	69db      	ldr	r3, [r3, #28]
 8002f9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d003      	beq.n	8002fae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fa6:	6878      	ldr	r0, [r7, #4]
 8002fa8:	f000 f927 	bl	80031fa <HAL_TIM_IC_CaptureCallback>
 8002fac:	e005      	b.n	8002fba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 f919 	bl	80031e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	f000 f92a 	bl	800320e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	f003 0301 	and.w	r3, r3, #1
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00c      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	f003 0301 	and.w	r3, r3, #1
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d007      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0201 	mvn.w	r2, #1
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fe f83e 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00c      	beq.n	8003008 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d007      	beq.n	8003008 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003000:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fade 	bl	80035c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800300e:	2b00      	cmp	r3, #0
 8003010:	d00c      	beq.n	800302c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003018:	2b00      	cmp	r3, #0
 800301a:	d007      	beq.n	800302c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 f8fb 	bl	8003222 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00c      	beq.n	8003050 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d007      	beq.n	8003050 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f06f 0220 	mvn.w	r2, #32
 8003048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f000 fab0 	bl	80035b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003050:	bf00      	nop
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800306c:	2b01      	cmp	r3, #1
 800306e:	d101      	bne.n	8003074 <HAL_TIM_ConfigClockSource+0x1c>
 8003070:	2302      	movs	r3, #2
 8003072:	e0b4      	b.n	80031de <HAL_TIM_ConfigClockSource+0x186>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2202      	movs	r2, #2
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800309a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68ba      	ldr	r2, [r7, #8]
 80030a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030ac:	d03e      	beq.n	800312c <HAL_TIM_ConfigClockSource+0xd4>
 80030ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030b2:	f200 8087 	bhi.w	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ba:	f000 8086 	beq.w	80031ca <HAL_TIM_ConfigClockSource+0x172>
 80030be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c2:	d87f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030c4:	2b70      	cmp	r3, #112	@ 0x70
 80030c6:	d01a      	beq.n	80030fe <HAL_TIM_ConfigClockSource+0xa6>
 80030c8:	2b70      	cmp	r3, #112	@ 0x70
 80030ca:	d87b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030cc:	2b60      	cmp	r3, #96	@ 0x60
 80030ce:	d050      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x11a>
 80030d0:	2b60      	cmp	r3, #96	@ 0x60
 80030d2:	d877      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030d4:	2b50      	cmp	r3, #80	@ 0x50
 80030d6:	d03c      	beq.n	8003152 <HAL_TIM_ConfigClockSource+0xfa>
 80030d8:	2b50      	cmp	r3, #80	@ 0x50
 80030da:	d873      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030dc:	2b40      	cmp	r3, #64	@ 0x40
 80030de:	d058      	beq.n	8003192 <HAL_TIM_ConfigClockSource+0x13a>
 80030e0:	2b40      	cmp	r3, #64	@ 0x40
 80030e2:	d86f      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030e4:	2b30      	cmp	r3, #48	@ 0x30
 80030e6:	d064      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030e8:	2b30      	cmp	r3, #48	@ 0x30
 80030ea:	d86b      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d060      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	d867      	bhi.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d05c      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d05a      	beq.n	80031b2 <HAL_TIM_ConfigClockSource+0x15a>
 80030fc:	e062      	b.n	80031c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800310e:	f000 f9b3 	bl	8003478 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003120:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	68ba      	ldr	r2, [r7, #8]
 8003128:	609a      	str	r2, [r3, #8]
      break;
 800312a:	e04f      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800313c:	f000 f99c 	bl	8003478 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800314e:	609a      	str	r2, [r3, #8]
      break;
 8003150:	e03c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800315e:	461a      	mov	r2, r3
 8003160:	f000 f910 	bl	8003384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2150      	movs	r1, #80	@ 0x50
 800316a:	4618      	mov	r0, r3
 800316c:	f000 f969 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8003170:	e02c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800317e:	461a      	mov	r2, r3
 8003180:	f000 f92f 	bl	80033e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2160      	movs	r1, #96	@ 0x60
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f959 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 8003190:	e01c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800319e:	461a      	mov	r2, r3
 80031a0:	f000 f8f0 	bl	8003384 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	2140      	movs	r1, #64	@ 0x40
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f949 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 80031b0:	e00c      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f000 f940 	bl	8003442 <TIM_ITRx_SetConfig>
      break;
 80031c2:	e003      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	73fb      	strb	r3, [r7, #15]
      break;
 80031c8:	e000      	b.n	80031cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80031ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}

080031e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031e6:	b480      	push	{r7}
 80031e8:	b083      	sub	sp, #12
 80031ea:	af00      	add	r7, sp, #0
 80031ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031ee:	bf00      	nop
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr

080031fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800320e:	b480      	push	{r7}
 8003210:	b083      	sub	sp, #12
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800322a:	bf00      	nop
 800322c:	370c      	adds	r7, #12
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
	...

08003238 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a43      	ldr	r2, [pc, #268]	@ (8003358 <TIM_Base_SetConfig+0x120>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d013      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003256:	d00f      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a40      	ldr	r2, [pc, #256]	@ (800335c <TIM_Base_SetConfig+0x124>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d00b      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a3f      	ldr	r2, [pc, #252]	@ (8003360 <TIM_Base_SetConfig+0x128>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a3e      	ldr	r2, [pc, #248]	@ (8003364 <TIM_Base_SetConfig+0x12c>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0x40>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a3d      	ldr	r2, [pc, #244]	@ (8003368 <TIM_Base_SetConfig+0x130>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d108      	bne.n	800328a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800327e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a32      	ldr	r2, [pc, #200]	@ (8003358 <TIM_Base_SetConfig+0x120>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d02b      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003298:	d027      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a2f      	ldr	r2, [pc, #188]	@ (800335c <TIM_Base_SetConfig+0x124>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d023      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a2e      	ldr	r2, [pc, #184]	@ (8003360 <TIM_Base_SetConfig+0x128>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d01f      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003364 <TIM_Base_SetConfig+0x12c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d01b      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003368 <TIM_Base_SetConfig+0x130>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d017      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a2b      	ldr	r2, [pc, #172]	@ (800336c <TIM_Base_SetConfig+0x134>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d013      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a2a      	ldr	r2, [pc, #168]	@ (8003370 <TIM_Base_SetConfig+0x138>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d00f      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a29      	ldr	r2, [pc, #164]	@ (8003374 <TIM_Base_SetConfig+0x13c>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d00b      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a28      	ldr	r2, [pc, #160]	@ (8003378 <TIM_Base_SetConfig+0x140>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d007      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a27      	ldr	r2, [pc, #156]	@ (800337c <TIM_Base_SetConfig+0x144>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d003      	beq.n	80032ea <TIM_Base_SetConfig+0xb2>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a26      	ldr	r2, [pc, #152]	@ (8003380 <TIM_Base_SetConfig+0x148>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d108      	bne.n	80032fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	4313      	orrs	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a0e      	ldr	r2, [pc, #56]	@ (8003358 <TIM_Base_SetConfig+0x120>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d003      	beq.n	800332a <TIM_Base_SetConfig+0xf2>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a10      	ldr	r2, [pc, #64]	@ (8003368 <TIM_Base_SetConfig+0x130>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d103      	bne.n	8003332 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	691a      	ldr	r2, [r3, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f043 0204 	orr.w	r2, r3, #4
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	601a      	str	r2, [r3, #0]
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40010000 	.word	0x40010000
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800
 8003364:	40000c00 	.word	0x40000c00
 8003368:	40010400 	.word	0x40010400
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800
 8003378:	40001800 	.word	0x40001800
 800337c:	40001c00 	.word	0x40001c00
 8003380:	40002000 	.word	0x40002000

08003384 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a1b      	ldr	r3, [r3, #32]
 8003394:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a1b      	ldr	r3, [r3, #32]
 800339a:	f023 0201 	bic.w	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80033ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	693a      	ldr	r2, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	f023 030a 	bic.w	r3, r3, #10
 80033c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	621a      	str	r2, [r3, #32]
}
 80033d6:	bf00      	nop
 80033d8:	371c      	adds	r7, #28
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033e2:	b480      	push	{r7}
 80033e4:	b087      	sub	sp, #28
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6a1b      	ldr	r3, [r3, #32]
 80033f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a1b      	ldr	r3, [r3, #32]
 80033f8:	f023 0210 	bic.w	r2, r3, #16
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800340c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	031b      	lsls	r3, r3, #12
 8003412:	693a      	ldr	r2, [r7, #16]
 8003414:	4313      	orrs	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800341e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	011b      	lsls	r3, r3, #4
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	621a      	str	r2, [r3, #32]
}
 8003436:	bf00      	nop
 8003438:	371c      	adds	r7, #28
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr

08003442 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003442:	b480      	push	{r7}
 8003444:	b085      	sub	sp, #20
 8003446:	af00      	add	r7, sp, #0
 8003448:	6078      	str	r0, [r7, #4]
 800344a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003458:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4313      	orrs	r3, r2
 8003460:	f043 0307 	orr.w	r3, r3, #7
 8003464:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	609a      	str	r2, [r3, #8]
}
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003492:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	021a      	lsls	r2, r3, #8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	431a      	orrs	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
 80034a0:	697a      	ldr	r2, [r7, #20]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	609a      	str	r2, [r3, #8]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr

080034b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b085      	sub	sp, #20
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e05a      	b.n	8003586 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2202      	movs	r2, #2
 80034dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a21      	ldr	r2, [pc, #132]	@ (8003594 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d022      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800351c:	d01d      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a1d      	ldr	r2, [pc, #116]	@ (8003598 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d018      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1b      	ldr	r2, [pc, #108]	@ (800359c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d013      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1a      	ldr	r2, [pc, #104]	@ (80035a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d00e      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a18      	ldr	r2, [pc, #96]	@ (80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d009      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a17      	ldr	r2, [pc, #92]	@ (80035a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d004      	beq.n	800355a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a15      	ldr	r2, [pc, #84]	@ (80035ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d10c      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003560:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	4313      	orrs	r3, r2
 800356a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	40010000 	.word	0x40010000
 8003598:	40000400 	.word	0x40000400
 800359c:	40000800 	.word	0x40000800
 80035a0:	40000c00 	.word	0x40000c00
 80035a4:	40010400 	.word	0x40010400
 80035a8:	40014000 	.word	0x40014000
 80035ac:	40001800 	.word	0x40001800

080035b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035cc:	bf00      	nop
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d101      	bne.n	80035ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e042      	b.n	8003670 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fe f854 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	@ 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800361a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f973 	bl	8003908 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	68da      	ldr	r2, [r3, #12]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2220      	movs	r2, #32
 800365c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3708      	adds	r7, #8
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}

08003678 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b08a      	sub	sp, #40	@ 0x28
 800367c:	af02      	add	r7, sp, #8
 800367e:	60f8      	str	r0, [r7, #12]
 8003680:	60b9      	str	r1, [r7, #8]
 8003682:	603b      	str	r3, [r7, #0]
 8003684:	4613      	mov	r3, r2
 8003686:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b20      	cmp	r3, #32
 8003696:	d175      	bne.n	8003784 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d002      	beq.n	80036a4 <HAL_UART_Transmit+0x2c>
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d101      	bne.n	80036a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e06e      	b.n	8003786 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2221      	movs	r2, #33	@ 0x21
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80036b6:	f7fe f9c7 	bl	8001a48 <HAL_GetTick>
 80036ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	88fa      	ldrh	r2, [r7, #6]
 80036c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	88fa      	ldrh	r2, [r7, #6]
 80036c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036d0:	d108      	bne.n	80036e4 <HAL_UART_Transmit+0x6c>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d104      	bne.n	80036e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e003      	b.n	80036ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036e8:	2300      	movs	r3, #0
 80036ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80036ec:	e02e      	b.n	800374c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	9300      	str	r3, [sp, #0]
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	2200      	movs	r2, #0
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	68f8      	ldr	r0, [r7, #12]
 80036fa:	f000 f848 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 80036fe:	4603      	mov	r3, r0
 8003700:	2b00      	cmp	r3, #0
 8003702:	d005      	beq.n	8003710 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2220      	movs	r2, #32
 8003708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e03a      	b.n	8003786 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10b      	bne.n	800372e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	881b      	ldrh	r3, [r3, #0]
 800371a:	461a      	mov	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003724:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	3302      	adds	r3, #2
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	e007      	b.n	800373e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	781a      	ldrb	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	3301      	adds	r3, #1
 800373c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1cb      	bne.n	80036ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	9300      	str	r3, [sp, #0]
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2200      	movs	r2, #0
 800375e:	2140      	movs	r1, #64	@ 0x40
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f000 f814 	bl	800378e <UART_WaitOnFlagUntilTimeout>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d005      	beq.n	8003778 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2220      	movs	r2, #32
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e006      	b.n	8003786 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2220      	movs	r2, #32
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003780:	2300      	movs	r3, #0
 8003782:	e000      	b.n	8003786 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003784:	2302      	movs	r3, #2
  }
}
 8003786:	4618      	mov	r0, r3
 8003788:	3720      	adds	r7, #32
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	b086      	sub	sp, #24
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	603b      	str	r3, [r7, #0]
 800379a:	4613      	mov	r3, r2
 800379c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800379e:	e03b      	b.n	8003818 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037a0:	6a3b      	ldr	r3, [r7, #32]
 80037a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037a6:	d037      	beq.n	8003818 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a8:	f7fe f94e 	bl	8001a48 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	6a3a      	ldr	r2, [r7, #32]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d302      	bcc.n	80037be <UART_WaitOnFlagUntilTimeout+0x30>
 80037b8:	6a3b      	ldr	r3, [r7, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e03a      	b.n	8003838 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d023      	beq.n	8003818 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	2b80      	cmp	r3, #128	@ 0x80
 80037d4:	d020      	beq.n	8003818 <UART_WaitOnFlagUntilTimeout+0x8a>
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b40      	cmp	r3, #64	@ 0x40
 80037da:	d01d      	beq.n	8003818 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0308 	and.w	r3, r3, #8
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d116      	bne.n	8003818 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	617b      	str	r3, [r7, #20]
 80037fe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f81d 	bl	8003840 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2208      	movs	r2, #8
 800380a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e00f      	b.n	8003838 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	429a      	cmp	r2, r3
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	429a      	cmp	r2, r3
 8003834:	d0b4      	beq.n	80037a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003840:	b480      	push	{r7}
 8003842:	b095      	sub	sp, #84	@ 0x54
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	330c      	adds	r3, #12
 800384e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003852:	e853 3f00 	ldrex	r3, [r3]
 8003856:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800385e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	330c      	adds	r3, #12
 8003866:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003868:	643a      	str	r2, [r7, #64]	@ 0x40
 800386a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800386e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003870:	e841 2300 	strex	r3, r2, [r1]
 8003874:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1e5      	bne.n	8003848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	3314      	adds	r3, #20
 8003882:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	e853 3f00 	ldrex	r3, [r3]
 800388a:	61fb      	str	r3, [r7, #28]
   return(result);
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	f023 0301 	bic.w	r3, r3, #1
 8003892:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	3314      	adds	r3, #20
 800389a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800389c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800389e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038a0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80038a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80038a4:	e841 2300 	strex	r3, r2, [r1]
 80038a8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1e5      	bne.n	800387c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d119      	bne.n	80038ec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	330c      	adds	r3, #12
 80038be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 0310 	bic.w	r3, r3, #16
 80038ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	330c      	adds	r3, #12
 80038d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038d8:	61ba      	str	r2, [r7, #24]
 80038da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6979      	ldr	r1, [r7, #20]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	613b      	str	r3, [r7, #16]
   return(result);
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e5      	bne.n	80038b8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80038fa:	bf00      	nop
 80038fc:	3754      	adds	r7, #84	@ 0x54
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800390c:	b0c0      	sub	sp, #256	@ 0x100
 800390e:	af00      	add	r7, sp, #0
 8003910:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003924:	68d9      	ldr	r1, [r3, #12]
 8003926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	ea40 0301 	orr.w	r3, r0, r1
 8003930:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800393c:	691b      	ldr	r3, [r3, #16]
 800393e:	431a      	orrs	r2, r3
 8003940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	431a      	orrs	r2, r3
 8003948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003960:	f021 010c 	bic.w	r1, r1, #12
 8003964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800396e:	430b      	orrs	r3, r1
 8003970:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003982:	6999      	ldr	r1, [r3, #24]
 8003984:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	ea40 0301 	orr.w	r3, r0, r1
 800398e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	4b8f      	ldr	r3, [pc, #572]	@ (8003bd4 <UART_SetConfig+0x2cc>)
 8003998:	429a      	cmp	r2, r3
 800399a:	d005      	beq.n	80039a8 <UART_SetConfig+0xa0>
 800399c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b8d      	ldr	r3, [pc, #564]	@ (8003bd8 <UART_SetConfig+0x2d0>)
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d104      	bne.n	80039b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039a8:	f7fe fc5c 	bl	8002264 <HAL_RCC_GetPCLK2Freq>
 80039ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80039b0:	e003      	b.n	80039ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80039b2:	f7fe fc43 	bl	800223c <HAL_RCC_GetPCLK1Freq>
 80039b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039be:	69db      	ldr	r3, [r3, #28]
 80039c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039c4:	f040 810c 	bne.w	8003be0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039cc:	2200      	movs	r2, #0
 80039ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80039d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80039d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80039da:	4622      	mov	r2, r4
 80039dc:	462b      	mov	r3, r5
 80039de:	1891      	adds	r1, r2, r2
 80039e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80039e2:	415b      	adcs	r3, r3
 80039e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80039e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80039ea:	4621      	mov	r1, r4
 80039ec:	eb12 0801 	adds.w	r8, r2, r1
 80039f0:	4629      	mov	r1, r5
 80039f2:	eb43 0901 	adc.w	r9, r3, r1
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a02:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a06:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a0a:	4690      	mov	r8, r2
 8003a0c:	4699      	mov	r9, r3
 8003a0e:	4623      	mov	r3, r4
 8003a10:	eb18 0303 	adds.w	r3, r8, r3
 8003a14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a18:	462b      	mov	r3, r5
 8003a1a:	eb49 0303 	adc.w	r3, r9, r3
 8003a1e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003a2e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003a32:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003a36:	460b      	mov	r3, r1
 8003a38:	18db      	adds	r3, r3, r3
 8003a3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	eb42 0303 	adc.w	r3, r2, r3
 8003a42:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a44:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003a48:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003a4c:	f7fd f93c 	bl	8000cc8 <__aeabi_uldivmod>
 8003a50:	4602      	mov	r2, r0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4b61      	ldr	r3, [pc, #388]	@ (8003bdc <UART_SetConfig+0x2d4>)
 8003a56:	fba3 2302 	umull	r2, r3, r3, r2
 8003a5a:	095b      	lsrs	r3, r3, #5
 8003a5c:	011c      	lsls	r4, r3, #4
 8003a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a68:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003a6c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003a70:	4642      	mov	r2, r8
 8003a72:	464b      	mov	r3, r9
 8003a74:	1891      	adds	r1, r2, r2
 8003a76:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003a78:	415b      	adcs	r3, r3
 8003a7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a7c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003a80:	4641      	mov	r1, r8
 8003a82:	eb12 0a01 	adds.w	sl, r2, r1
 8003a86:	4649      	mov	r1, r9
 8003a88:	eb43 0b01 	adc.w	fp, r3, r1
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a98:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003aa0:	4692      	mov	sl, r2
 8003aa2:	469b      	mov	fp, r3
 8003aa4:	4643      	mov	r3, r8
 8003aa6:	eb1a 0303 	adds.w	r3, sl, r3
 8003aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003aae:	464b      	mov	r3, r9
 8003ab0:	eb4b 0303 	adc.w	r3, fp, r3
 8003ab4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ac4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ac8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003acc:	460b      	mov	r3, r1
 8003ace:	18db      	adds	r3, r3, r3
 8003ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ada:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003ade:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003ae2:	f7fd f8f1 	bl	8000cc8 <__aeabi_uldivmod>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	460b      	mov	r3, r1
 8003aea:	4611      	mov	r1, r2
 8003aec:	4b3b      	ldr	r3, [pc, #236]	@ (8003bdc <UART_SetConfig+0x2d4>)
 8003aee:	fba3 2301 	umull	r2, r3, r3, r1
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2264      	movs	r2, #100	@ 0x64
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	1acb      	subs	r3, r1, r3
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003b02:	4b36      	ldr	r3, [pc, #216]	@ (8003bdc <UART_SetConfig+0x2d4>)
 8003b04:	fba3 2302 	umull	r2, r3, r3, r2
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	005b      	lsls	r3, r3, #1
 8003b0c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003b10:	441c      	add	r4, r3
 8003b12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b1c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003b20:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003b24:	4642      	mov	r2, r8
 8003b26:	464b      	mov	r3, r9
 8003b28:	1891      	adds	r1, r2, r2
 8003b2a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003b2c:	415b      	adcs	r3, r3
 8003b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b30:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003b34:	4641      	mov	r1, r8
 8003b36:	1851      	adds	r1, r2, r1
 8003b38:	6339      	str	r1, [r7, #48]	@ 0x30
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	414b      	adcs	r3, r1
 8003b3e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	f04f 0300 	mov.w	r3, #0
 8003b48:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003b4c:	4659      	mov	r1, fp
 8003b4e:	00cb      	lsls	r3, r1, #3
 8003b50:	4651      	mov	r1, sl
 8003b52:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b56:	4651      	mov	r1, sl
 8003b58:	00ca      	lsls	r2, r1, #3
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	4603      	mov	r3, r0
 8003b60:	4642      	mov	r2, r8
 8003b62:	189b      	adds	r3, r3, r2
 8003b64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b68:	464b      	mov	r3, r9
 8003b6a:	460a      	mov	r2, r1
 8003b6c:	eb42 0303 	adc.w	r3, r2, r3
 8003b70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003b80:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003b84:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003b88:	460b      	mov	r3, r1
 8003b8a:	18db      	adds	r3, r3, r3
 8003b8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b8e:	4613      	mov	r3, r2
 8003b90:	eb42 0303 	adc.w	r3, r2, r3
 8003b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b96:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003b9a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003b9e:	f7fd f893 	bl	8000cc8 <__aeabi_uldivmod>
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8003bdc <UART_SetConfig+0x2d4>)
 8003ba8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bac:	095b      	lsrs	r3, r3, #5
 8003bae:	2164      	movs	r1, #100	@ 0x64
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	1ad3      	subs	r3, r2, r3
 8003bb6:	00db      	lsls	r3, r3, #3
 8003bb8:	3332      	adds	r3, #50	@ 0x32
 8003bba:	4a08      	ldr	r2, [pc, #32]	@ (8003bdc <UART_SetConfig+0x2d4>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	095b      	lsrs	r3, r3, #5
 8003bc2:	f003 0207 	and.w	r2, r3, #7
 8003bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4422      	add	r2, r4
 8003bce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003bd0:	e106      	b.n	8003de0 <UART_SetConfig+0x4d8>
 8003bd2:	bf00      	nop
 8003bd4:	40011000 	.word	0x40011000
 8003bd8:	40011400 	.word	0x40011400
 8003bdc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003be4:	2200      	movs	r2, #0
 8003be6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003bea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003bee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003bf2:	4642      	mov	r2, r8
 8003bf4:	464b      	mov	r3, r9
 8003bf6:	1891      	adds	r1, r2, r2
 8003bf8:	6239      	str	r1, [r7, #32]
 8003bfa:	415b      	adcs	r3, r3
 8003bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bfe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c02:	4641      	mov	r1, r8
 8003c04:	1854      	adds	r4, r2, r1
 8003c06:	4649      	mov	r1, r9
 8003c08:	eb43 0501 	adc.w	r5, r3, r1
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	f04f 0300 	mov.w	r3, #0
 8003c14:	00eb      	lsls	r3, r5, #3
 8003c16:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c1a:	00e2      	lsls	r2, r4, #3
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	461d      	mov	r5, r3
 8003c20:	4643      	mov	r3, r8
 8003c22:	18e3      	adds	r3, r4, r3
 8003c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003c28:	464b      	mov	r3, r9
 8003c2a:	eb45 0303 	adc.w	r3, r5, r3
 8003c2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003c3e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c42:	f04f 0200 	mov.w	r2, #0
 8003c46:	f04f 0300 	mov.w	r3, #0
 8003c4a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003c4e:	4629      	mov	r1, r5
 8003c50:	008b      	lsls	r3, r1, #2
 8003c52:	4621      	mov	r1, r4
 8003c54:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003c58:	4621      	mov	r1, r4
 8003c5a:	008a      	lsls	r2, r1, #2
 8003c5c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003c60:	f7fd f832 	bl	8000cc8 <__aeabi_uldivmod>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4b60      	ldr	r3, [pc, #384]	@ (8003dec <UART_SetConfig+0x4e4>)
 8003c6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6e:	095b      	lsrs	r3, r3, #5
 8003c70:	011c      	lsls	r4, r3, #4
 8003c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c76:	2200      	movs	r2, #0
 8003c78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003c7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003c80:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003c84:	4642      	mov	r2, r8
 8003c86:	464b      	mov	r3, r9
 8003c88:	1891      	adds	r1, r2, r2
 8003c8a:	61b9      	str	r1, [r7, #24]
 8003c8c:	415b      	adcs	r3, r3
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c94:	4641      	mov	r1, r8
 8003c96:	1851      	adds	r1, r2, r1
 8003c98:	6139      	str	r1, [r7, #16]
 8003c9a:	4649      	mov	r1, r9
 8003c9c:	414b      	adcs	r3, r1
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	f04f 0200 	mov.w	r2, #0
 8003ca4:	f04f 0300 	mov.w	r3, #0
 8003ca8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cac:	4659      	mov	r1, fp
 8003cae:	00cb      	lsls	r3, r1, #3
 8003cb0:	4651      	mov	r1, sl
 8003cb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003cb6:	4651      	mov	r1, sl
 8003cb8:	00ca      	lsls	r2, r1, #3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	4619      	mov	r1, r3
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	4642      	mov	r2, r8
 8003cc2:	189b      	adds	r3, r3, r2
 8003cc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003cc8:	464b      	mov	r3, r9
 8003cca:	460a      	mov	r2, r1
 8003ccc:	eb42 0303 	adc.w	r3, r2, r3
 8003cd0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003cde:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ce0:	f04f 0200 	mov.w	r2, #0
 8003ce4:	f04f 0300 	mov.w	r3, #0
 8003ce8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003cec:	4649      	mov	r1, r9
 8003cee:	008b      	lsls	r3, r1, #2
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cf6:	4641      	mov	r1, r8
 8003cf8:	008a      	lsls	r2, r1, #2
 8003cfa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003cfe:	f7fc ffe3 	bl	8000cc8 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4611      	mov	r1, r2
 8003d08:	4b38      	ldr	r3, [pc, #224]	@ (8003dec <UART_SetConfig+0x4e4>)
 8003d0a:	fba3 2301 	umull	r2, r3, r3, r1
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2264      	movs	r2, #100	@ 0x64
 8003d12:	fb02 f303 	mul.w	r3, r2, r3
 8003d16:	1acb      	subs	r3, r1, r3
 8003d18:	011b      	lsls	r3, r3, #4
 8003d1a:	3332      	adds	r3, #50	@ 0x32
 8003d1c:	4a33      	ldr	r2, [pc, #204]	@ (8003dec <UART_SetConfig+0x4e4>)
 8003d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d28:	441c      	add	r4, r3
 8003d2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d2e:	2200      	movs	r2, #0
 8003d30:	673b      	str	r3, [r7, #112]	@ 0x70
 8003d32:	677a      	str	r2, [r7, #116]	@ 0x74
 8003d34:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003d38:	4642      	mov	r2, r8
 8003d3a:	464b      	mov	r3, r9
 8003d3c:	1891      	adds	r1, r2, r2
 8003d3e:	60b9      	str	r1, [r7, #8]
 8003d40:	415b      	adcs	r3, r3
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d48:	4641      	mov	r1, r8
 8003d4a:	1851      	adds	r1, r2, r1
 8003d4c:	6039      	str	r1, [r7, #0]
 8003d4e:	4649      	mov	r1, r9
 8003d50:	414b      	adcs	r3, r1
 8003d52:	607b      	str	r3, [r7, #4]
 8003d54:	f04f 0200 	mov.w	r2, #0
 8003d58:	f04f 0300 	mov.w	r3, #0
 8003d5c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003d60:	4659      	mov	r1, fp
 8003d62:	00cb      	lsls	r3, r1, #3
 8003d64:	4651      	mov	r1, sl
 8003d66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d6a:	4651      	mov	r1, sl
 8003d6c:	00ca      	lsls	r2, r1, #3
 8003d6e:	4610      	mov	r0, r2
 8003d70:	4619      	mov	r1, r3
 8003d72:	4603      	mov	r3, r0
 8003d74:	4642      	mov	r2, r8
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	460a      	mov	r2, r1
 8003d7e:	eb42 0303 	adc.w	r3, r2, r3
 8003d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d8e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003d90:	f04f 0200 	mov.w	r2, #0
 8003d94:	f04f 0300 	mov.w	r3, #0
 8003d98:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	008b      	lsls	r3, r1, #2
 8003da0:	4641      	mov	r1, r8
 8003da2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003da6:	4641      	mov	r1, r8
 8003da8:	008a      	lsls	r2, r1, #2
 8003daa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003dae:	f7fc ff8b 	bl	8000cc8 <__aeabi_uldivmod>
 8003db2:	4602      	mov	r2, r0
 8003db4:	460b      	mov	r3, r1
 8003db6:	4b0d      	ldr	r3, [pc, #52]	@ (8003dec <UART_SetConfig+0x4e4>)
 8003db8:	fba3 1302 	umull	r1, r3, r3, r2
 8003dbc:	095b      	lsrs	r3, r3, #5
 8003dbe:	2164      	movs	r1, #100	@ 0x64
 8003dc0:	fb01 f303 	mul.w	r3, r1, r3
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	3332      	adds	r3, #50	@ 0x32
 8003dca:	4a08      	ldr	r2, [pc, #32]	@ (8003dec <UART_SetConfig+0x4e4>)
 8003dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8003dd0:	095b      	lsrs	r3, r3, #5
 8003dd2:	f003 020f 	and.w	r2, r3, #15
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4422      	add	r2, r4
 8003dde:	609a      	str	r2, [r3, #8]
}
 8003de0:	bf00      	nop
 8003de2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003de6:	46bd      	mov	sp, r7
 8003de8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dec:	51eb851f 	.word	0x51eb851f

08003df0 <__cvt>:
 8003df0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df4:	ec57 6b10 	vmov	r6, r7, d0
 8003df8:	2f00      	cmp	r7, #0
 8003dfa:	460c      	mov	r4, r1
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	463b      	mov	r3, r7
 8003e00:	bfbb      	ittet	lt
 8003e02:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003e06:	461f      	movlt	r7, r3
 8003e08:	2300      	movge	r3, #0
 8003e0a:	232d      	movlt	r3, #45	@ 0x2d
 8003e0c:	700b      	strb	r3, [r1, #0]
 8003e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003e10:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003e14:	4691      	mov	r9, r2
 8003e16:	f023 0820 	bic.w	r8, r3, #32
 8003e1a:	bfbc      	itt	lt
 8003e1c:	4632      	movlt	r2, r6
 8003e1e:	4616      	movlt	r6, r2
 8003e20:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e24:	d005      	beq.n	8003e32 <__cvt+0x42>
 8003e26:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003e2a:	d100      	bne.n	8003e2e <__cvt+0x3e>
 8003e2c:	3401      	adds	r4, #1
 8003e2e:	2102      	movs	r1, #2
 8003e30:	e000      	b.n	8003e34 <__cvt+0x44>
 8003e32:	2103      	movs	r1, #3
 8003e34:	ab03      	add	r3, sp, #12
 8003e36:	9301      	str	r3, [sp, #4]
 8003e38:	ab02      	add	r3, sp, #8
 8003e3a:	9300      	str	r3, [sp, #0]
 8003e3c:	ec47 6b10 	vmov	d0, r6, r7
 8003e40:	4653      	mov	r3, sl
 8003e42:	4622      	mov	r2, r4
 8003e44:	f001 f880 	bl	8004f48 <_dtoa_r>
 8003e48:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003e4c:	4605      	mov	r5, r0
 8003e4e:	d119      	bne.n	8003e84 <__cvt+0x94>
 8003e50:	f019 0f01 	tst.w	r9, #1
 8003e54:	d00e      	beq.n	8003e74 <__cvt+0x84>
 8003e56:	eb00 0904 	add.w	r9, r0, r4
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	4630      	mov	r0, r6
 8003e60:	4639      	mov	r1, r7
 8003e62:	f7fc fe51 	bl	8000b08 <__aeabi_dcmpeq>
 8003e66:	b108      	cbz	r0, 8003e6c <__cvt+0x7c>
 8003e68:	f8cd 900c 	str.w	r9, [sp, #12]
 8003e6c:	2230      	movs	r2, #48	@ 0x30
 8003e6e:	9b03      	ldr	r3, [sp, #12]
 8003e70:	454b      	cmp	r3, r9
 8003e72:	d31e      	bcc.n	8003eb2 <__cvt+0xc2>
 8003e74:	9b03      	ldr	r3, [sp, #12]
 8003e76:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003e78:	1b5b      	subs	r3, r3, r5
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	b004      	add	sp, #16
 8003e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e84:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003e88:	eb00 0904 	add.w	r9, r0, r4
 8003e8c:	d1e5      	bne.n	8003e5a <__cvt+0x6a>
 8003e8e:	7803      	ldrb	r3, [r0, #0]
 8003e90:	2b30      	cmp	r3, #48	@ 0x30
 8003e92:	d10a      	bne.n	8003eaa <__cvt+0xba>
 8003e94:	2200      	movs	r2, #0
 8003e96:	2300      	movs	r3, #0
 8003e98:	4630      	mov	r0, r6
 8003e9a:	4639      	mov	r1, r7
 8003e9c:	f7fc fe34 	bl	8000b08 <__aeabi_dcmpeq>
 8003ea0:	b918      	cbnz	r0, 8003eaa <__cvt+0xba>
 8003ea2:	f1c4 0401 	rsb	r4, r4, #1
 8003ea6:	f8ca 4000 	str.w	r4, [sl]
 8003eaa:	f8da 3000 	ldr.w	r3, [sl]
 8003eae:	4499      	add	r9, r3
 8003eb0:	e7d3      	b.n	8003e5a <__cvt+0x6a>
 8003eb2:	1c59      	adds	r1, r3, #1
 8003eb4:	9103      	str	r1, [sp, #12]
 8003eb6:	701a      	strb	r2, [r3, #0]
 8003eb8:	e7d9      	b.n	8003e6e <__cvt+0x7e>

08003eba <__exponent>:
 8003eba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003ebc:	2900      	cmp	r1, #0
 8003ebe:	bfba      	itte	lt
 8003ec0:	4249      	neglt	r1, r1
 8003ec2:	232d      	movlt	r3, #45	@ 0x2d
 8003ec4:	232b      	movge	r3, #43	@ 0x2b
 8003ec6:	2909      	cmp	r1, #9
 8003ec8:	7002      	strb	r2, [r0, #0]
 8003eca:	7043      	strb	r3, [r0, #1]
 8003ecc:	dd29      	ble.n	8003f22 <__exponent+0x68>
 8003ece:	f10d 0307 	add.w	r3, sp, #7
 8003ed2:	461d      	mov	r5, r3
 8003ed4:	270a      	movs	r7, #10
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	fbb1 f6f7 	udiv	r6, r1, r7
 8003edc:	fb07 1416 	mls	r4, r7, r6, r1
 8003ee0:	3430      	adds	r4, #48	@ 0x30
 8003ee2:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003ee6:	460c      	mov	r4, r1
 8003ee8:	2c63      	cmp	r4, #99	@ 0x63
 8003eea:	f103 33ff 	add.w	r3, r3, #4294967295
 8003eee:	4631      	mov	r1, r6
 8003ef0:	dcf1      	bgt.n	8003ed6 <__exponent+0x1c>
 8003ef2:	3130      	adds	r1, #48	@ 0x30
 8003ef4:	1e94      	subs	r4, r2, #2
 8003ef6:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003efa:	1c41      	adds	r1, r0, #1
 8003efc:	4623      	mov	r3, r4
 8003efe:	42ab      	cmp	r3, r5
 8003f00:	d30a      	bcc.n	8003f18 <__exponent+0x5e>
 8003f02:	f10d 0309 	add.w	r3, sp, #9
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	42ac      	cmp	r4, r5
 8003f0a:	bf88      	it	hi
 8003f0c:	2300      	movhi	r3, #0
 8003f0e:	3302      	adds	r3, #2
 8003f10:	4403      	add	r3, r0
 8003f12:	1a18      	subs	r0, r3, r0
 8003f14:	b003      	add	sp, #12
 8003f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f18:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003f1c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003f20:	e7ed      	b.n	8003efe <__exponent+0x44>
 8003f22:	2330      	movs	r3, #48	@ 0x30
 8003f24:	3130      	adds	r1, #48	@ 0x30
 8003f26:	7083      	strb	r3, [r0, #2]
 8003f28:	70c1      	strb	r1, [r0, #3]
 8003f2a:	1d03      	adds	r3, r0, #4
 8003f2c:	e7f1      	b.n	8003f12 <__exponent+0x58>
	...

08003f30 <_printf_float>:
 8003f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f34:	b08d      	sub	sp, #52	@ 0x34
 8003f36:	460c      	mov	r4, r1
 8003f38:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8003f3c:	4616      	mov	r6, r2
 8003f3e:	461f      	mov	r7, r3
 8003f40:	4605      	mov	r5, r0
 8003f42:	f000 fefb 	bl	8004d3c <_localeconv_r>
 8003f46:	6803      	ldr	r3, [r0, #0]
 8003f48:	9304      	str	r3, [sp, #16]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f7fc f9b0 	bl	80002b0 <strlen>
 8003f50:	2300      	movs	r3, #0
 8003f52:	930a      	str	r3, [sp, #40]	@ 0x28
 8003f54:	f8d8 3000 	ldr.w	r3, [r8]
 8003f58:	9005      	str	r0, [sp, #20]
 8003f5a:	3307      	adds	r3, #7
 8003f5c:	f023 0307 	bic.w	r3, r3, #7
 8003f60:	f103 0208 	add.w	r2, r3, #8
 8003f64:	f894 a018 	ldrb.w	sl, [r4, #24]
 8003f68:	f8d4 b000 	ldr.w	fp, [r4]
 8003f6c:	f8c8 2000 	str.w	r2, [r8]
 8003f70:	e9d3 8900 	ldrd	r8, r9, [r3]
 8003f74:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8003f78:	9307      	str	r3, [sp, #28]
 8003f7a:	f8cd 8018 	str.w	r8, [sp, #24]
 8003f7e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8003f82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f86:	4b9c      	ldr	r3, [pc, #624]	@ (80041f8 <_printf_float+0x2c8>)
 8003f88:	f04f 32ff 	mov.w	r2, #4294967295
 8003f8c:	f7fc fdee 	bl	8000b6c <__aeabi_dcmpun>
 8003f90:	bb70      	cbnz	r0, 8003ff0 <_printf_float+0xc0>
 8003f92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f96:	4b98      	ldr	r3, [pc, #608]	@ (80041f8 <_printf_float+0x2c8>)
 8003f98:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9c:	f7fc fdc8 	bl	8000b30 <__aeabi_dcmple>
 8003fa0:	bb30      	cbnz	r0, 8003ff0 <_printf_float+0xc0>
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	4640      	mov	r0, r8
 8003fa8:	4649      	mov	r1, r9
 8003faa:	f7fc fdb7 	bl	8000b1c <__aeabi_dcmplt>
 8003fae:	b110      	cbz	r0, 8003fb6 <_printf_float+0x86>
 8003fb0:	232d      	movs	r3, #45	@ 0x2d
 8003fb2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb6:	4a91      	ldr	r2, [pc, #580]	@ (80041fc <_printf_float+0x2cc>)
 8003fb8:	4b91      	ldr	r3, [pc, #580]	@ (8004200 <_printf_float+0x2d0>)
 8003fba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003fbe:	bf8c      	ite	hi
 8003fc0:	4690      	movhi	r8, r2
 8003fc2:	4698      	movls	r8, r3
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	6123      	str	r3, [r4, #16]
 8003fc8:	f02b 0304 	bic.w	r3, fp, #4
 8003fcc:	6023      	str	r3, [r4, #0]
 8003fce:	f04f 0900 	mov.w	r9, #0
 8003fd2:	9700      	str	r7, [sp, #0]
 8003fd4:	4633      	mov	r3, r6
 8003fd6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003fd8:	4621      	mov	r1, r4
 8003fda:	4628      	mov	r0, r5
 8003fdc:	f000 f9d2 	bl	8004384 <_printf_common>
 8003fe0:	3001      	adds	r0, #1
 8003fe2:	f040 808d 	bne.w	8004100 <_printf_float+0x1d0>
 8003fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8003fea:	b00d      	add	sp, #52	@ 0x34
 8003fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff0:	4642      	mov	r2, r8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	4640      	mov	r0, r8
 8003ff6:	4649      	mov	r1, r9
 8003ff8:	f7fc fdb8 	bl	8000b6c <__aeabi_dcmpun>
 8003ffc:	b140      	cbz	r0, 8004010 <_printf_float+0xe0>
 8003ffe:	464b      	mov	r3, r9
 8004000:	2b00      	cmp	r3, #0
 8004002:	bfbc      	itt	lt
 8004004:	232d      	movlt	r3, #45	@ 0x2d
 8004006:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800400a:	4a7e      	ldr	r2, [pc, #504]	@ (8004204 <_printf_float+0x2d4>)
 800400c:	4b7e      	ldr	r3, [pc, #504]	@ (8004208 <_printf_float+0x2d8>)
 800400e:	e7d4      	b.n	8003fba <_printf_float+0x8a>
 8004010:	6863      	ldr	r3, [r4, #4]
 8004012:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004016:	9206      	str	r2, [sp, #24]
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	d13b      	bne.n	8004094 <_printf_float+0x164>
 800401c:	2306      	movs	r3, #6
 800401e:	6063      	str	r3, [r4, #4]
 8004020:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004024:	2300      	movs	r3, #0
 8004026:	6022      	str	r2, [r4, #0]
 8004028:	9303      	str	r3, [sp, #12]
 800402a:	ab0a      	add	r3, sp, #40	@ 0x28
 800402c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004030:	ab09      	add	r3, sp, #36	@ 0x24
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	6861      	ldr	r1, [r4, #4]
 8004036:	ec49 8b10 	vmov	d0, r8, r9
 800403a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800403e:	4628      	mov	r0, r5
 8004040:	f7ff fed6 	bl	8003df0 <__cvt>
 8004044:	9b06      	ldr	r3, [sp, #24]
 8004046:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004048:	2b47      	cmp	r3, #71	@ 0x47
 800404a:	4680      	mov	r8, r0
 800404c:	d129      	bne.n	80040a2 <_printf_float+0x172>
 800404e:	1cc8      	adds	r0, r1, #3
 8004050:	db02      	blt.n	8004058 <_printf_float+0x128>
 8004052:	6863      	ldr	r3, [r4, #4]
 8004054:	4299      	cmp	r1, r3
 8004056:	dd41      	ble.n	80040dc <_printf_float+0x1ac>
 8004058:	f1aa 0a02 	sub.w	sl, sl, #2
 800405c:	fa5f fa8a 	uxtb.w	sl, sl
 8004060:	3901      	subs	r1, #1
 8004062:	4652      	mov	r2, sl
 8004064:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004068:	9109      	str	r1, [sp, #36]	@ 0x24
 800406a:	f7ff ff26 	bl	8003eba <__exponent>
 800406e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004070:	1813      	adds	r3, r2, r0
 8004072:	2a01      	cmp	r2, #1
 8004074:	4681      	mov	r9, r0
 8004076:	6123      	str	r3, [r4, #16]
 8004078:	dc02      	bgt.n	8004080 <_printf_float+0x150>
 800407a:	6822      	ldr	r2, [r4, #0]
 800407c:	07d2      	lsls	r2, r2, #31
 800407e:	d501      	bpl.n	8004084 <_printf_float+0x154>
 8004080:	3301      	adds	r3, #1
 8004082:	6123      	str	r3, [r4, #16]
 8004084:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0a2      	beq.n	8003fd2 <_printf_float+0xa2>
 800408c:	232d      	movs	r3, #45	@ 0x2d
 800408e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004092:	e79e      	b.n	8003fd2 <_printf_float+0xa2>
 8004094:	9a06      	ldr	r2, [sp, #24]
 8004096:	2a47      	cmp	r2, #71	@ 0x47
 8004098:	d1c2      	bne.n	8004020 <_printf_float+0xf0>
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1c0      	bne.n	8004020 <_printf_float+0xf0>
 800409e:	2301      	movs	r3, #1
 80040a0:	e7bd      	b.n	800401e <_printf_float+0xee>
 80040a2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80040a6:	d9db      	bls.n	8004060 <_printf_float+0x130>
 80040a8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80040ac:	d118      	bne.n	80040e0 <_printf_float+0x1b0>
 80040ae:	2900      	cmp	r1, #0
 80040b0:	6863      	ldr	r3, [r4, #4]
 80040b2:	dd0b      	ble.n	80040cc <_printf_float+0x19c>
 80040b4:	6121      	str	r1, [r4, #16]
 80040b6:	b913      	cbnz	r3, 80040be <_printf_float+0x18e>
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	07d0      	lsls	r0, r2, #31
 80040bc:	d502      	bpl.n	80040c4 <_printf_float+0x194>
 80040be:	3301      	adds	r3, #1
 80040c0:	440b      	add	r3, r1
 80040c2:	6123      	str	r3, [r4, #16]
 80040c4:	65a1      	str	r1, [r4, #88]	@ 0x58
 80040c6:	f04f 0900 	mov.w	r9, #0
 80040ca:	e7db      	b.n	8004084 <_printf_float+0x154>
 80040cc:	b913      	cbnz	r3, 80040d4 <_printf_float+0x1a4>
 80040ce:	6822      	ldr	r2, [r4, #0]
 80040d0:	07d2      	lsls	r2, r2, #31
 80040d2:	d501      	bpl.n	80040d8 <_printf_float+0x1a8>
 80040d4:	3302      	adds	r3, #2
 80040d6:	e7f4      	b.n	80040c2 <_printf_float+0x192>
 80040d8:	2301      	movs	r3, #1
 80040da:	e7f2      	b.n	80040c2 <_printf_float+0x192>
 80040dc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80040e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80040e2:	4299      	cmp	r1, r3
 80040e4:	db05      	blt.n	80040f2 <_printf_float+0x1c2>
 80040e6:	6823      	ldr	r3, [r4, #0]
 80040e8:	6121      	str	r1, [r4, #16]
 80040ea:	07d8      	lsls	r0, r3, #31
 80040ec:	d5ea      	bpl.n	80040c4 <_printf_float+0x194>
 80040ee:	1c4b      	adds	r3, r1, #1
 80040f0:	e7e7      	b.n	80040c2 <_printf_float+0x192>
 80040f2:	2900      	cmp	r1, #0
 80040f4:	bfd4      	ite	le
 80040f6:	f1c1 0202 	rsble	r2, r1, #2
 80040fa:	2201      	movgt	r2, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	e7e0      	b.n	80040c2 <_printf_float+0x192>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	055a      	lsls	r2, r3, #21
 8004104:	d407      	bmi.n	8004116 <_printf_float+0x1e6>
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	4642      	mov	r2, r8
 800410a:	4631      	mov	r1, r6
 800410c:	4628      	mov	r0, r5
 800410e:	47b8      	blx	r7
 8004110:	3001      	adds	r0, #1
 8004112:	d12b      	bne.n	800416c <_printf_float+0x23c>
 8004114:	e767      	b.n	8003fe6 <_printf_float+0xb6>
 8004116:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800411a:	f240 80dd 	bls.w	80042d8 <_printf_float+0x3a8>
 800411e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004122:	2200      	movs	r2, #0
 8004124:	2300      	movs	r3, #0
 8004126:	f7fc fcef 	bl	8000b08 <__aeabi_dcmpeq>
 800412a:	2800      	cmp	r0, #0
 800412c:	d033      	beq.n	8004196 <_printf_float+0x266>
 800412e:	4a37      	ldr	r2, [pc, #220]	@ (800420c <_printf_float+0x2dc>)
 8004130:	2301      	movs	r3, #1
 8004132:	4631      	mov	r1, r6
 8004134:	4628      	mov	r0, r5
 8004136:	47b8      	blx	r7
 8004138:	3001      	adds	r0, #1
 800413a:	f43f af54 	beq.w	8003fe6 <_printf_float+0xb6>
 800413e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004142:	4543      	cmp	r3, r8
 8004144:	db02      	blt.n	800414c <_printf_float+0x21c>
 8004146:	6823      	ldr	r3, [r4, #0]
 8004148:	07d8      	lsls	r0, r3, #31
 800414a:	d50f      	bpl.n	800416c <_printf_float+0x23c>
 800414c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004150:	4631      	mov	r1, r6
 8004152:	4628      	mov	r0, r5
 8004154:	47b8      	blx	r7
 8004156:	3001      	adds	r0, #1
 8004158:	f43f af45 	beq.w	8003fe6 <_printf_float+0xb6>
 800415c:	f04f 0900 	mov.w	r9, #0
 8004160:	f108 38ff 	add.w	r8, r8, #4294967295
 8004164:	f104 0a1a 	add.w	sl, r4, #26
 8004168:	45c8      	cmp	r8, r9
 800416a:	dc09      	bgt.n	8004180 <_printf_float+0x250>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	079b      	lsls	r3, r3, #30
 8004170:	f100 8103 	bmi.w	800437a <_printf_float+0x44a>
 8004174:	68e0      	ldr	r0, [r4, #12]
 8004176:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004178:	4298      	cmp	r0, r3
 800417a:	bfb8      	it	lt
 800417c:	4618      	movlt	r0, r3
 800417e:	e734      	b.n	8003fea <_printf_float+0xba>
 8004180:	2301      	movs	r3, #1
 8004182:	4652      	mov	r2, sl
 8004184:	4631      	mov	r1, r6
 8004186:	4628      	mov	r0, r5
 8004188:	47b8      	blx	r7
 800418a:	3001      	adds	r0, #1
 800418c:	f43f af2b 	beq.w	8003fe6 <_printf_float+0xb6>
 8004190:	f109 0901 	add.w	r9, r9, #1
 8004194:	e7e8      	b.n	8004168 <_printf_float+0x238>
 8004196:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004198:	2b00      	cmp	r3, #0
 800419a:	dc39      	bgt.n	8004210 <_printf_float+0x2e0>
 800419c:	4a1b      	ldr	r2, [pc, #108]	@ (800420c <_printf_float+0x2dc>)
 800419e:	2301      	movs	r3, #1
 80041a0:	4631      	mov	r1, r6
 80041a2:	4628      	mov	r0, r5
 80041a4:	47b8      	blx	r7
 80041a6:	3001      	adds	r0, #1
 80041a8:	f43f af1d 	beq.w	8003fe6 <_printf_float+0xb6>
 80041ac:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80041b0:	ea59 0303 	orrs.w	r3, r9, r3
 80041b4:	d102      	bne.n	80041bc <_printf_float+0x28c>
 80041b6:	6823      	ldr	r3, [r4, #0]
 80041b8:	07d9      	lsls	r1, r3, #31
 80041ba:	d5d7      	bpl.n	800416c <_printf_float+0x23c>
 80041bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80041c0:	4631      	mov	r1, r6
 80041c2:	4628      	mov	r0, r5
 80041c4:	47b8      	blx	r7
 80041c6:	3001      	adds	r0, #1
 80041c8:	f43f af0d 	beq.w	8003fe6 <_printf_float+0xb6>
 80041cc:	f04f 0a00 	mov.w	sl, #0
 80041d0:	f104 0b1a 	add.w	fp, r4, #26
 80041d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80041d6:	425b      	negs	r3, r3
 80041d8:	4553      	cmp	r3, sl
 80041da:	dc01      	bgt.n	80041e0 <_printf_float+0x2b0>
 80041dc:	464b      	mov	r3, r9
 80041de:	e793      	b.n	8004108 <_printf_float+0x1d8>
 80041e0:	2301      	movs	r3, #1
 80041e2:	465a      	mov	r2, fp
 80041e4:	4631      	mov	r1, r6
 80041e6:	4628      	mov	r0, r5
 80041e8:	47b8      	blx	r7
 80041ea:	3001      	adds	r0, #1
 80041ec:	f43f aefb 	beq.w	8003fe6 <_printf_float+0xb6>
 80041f0:	f10a 0a01 	add.w	sl, sl, #1
 80041f4:	e7ee      	b.n	80041d4 <_printf_float+0x2a4>
 80041f6:	bf00      	nop
 80041f8:	7fefffff 	.word	0x7fefffff
 80041fc:	08008558 	.word	0x08008558
 8004200:	08008554 	.word	0x08008554
 8004204:	08008560 	.word	0x08008560
 8004208:	0800855c 	.word	0x0800855c
 800420c:	08008564 	.word	0x08008564
 8004210:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004212:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004216:	4553      	cmp	r3, sl
 8004218:	bfa8      	it	ge
 800421a:	4653      	movge	r3, sl
 800421c:	2b00      	cmp	r3, #0
 800421e:	4699      	mov	r9, r3
 8004220:	dc36      	bgt.n	8004290 <_printf_float+0x360>
 8004222:	f04f 0b00 	mov.w	fp, #0
 8004226:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800422a:	f104 021a 	add.w	r2, r4, #26
 800422e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004230:	9306      	str	r3, [sp, #24]
 8004232:	eba3 0309 	sub.w	r3, r3, r9
 8004236:	455b      	cmp	r3, fp
 8004238:	dc31      	bgt.n	800429e <_printf_float+0x36e>
 800423a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800423c:	459a      	cmp	sl, r3
 800423e:	dc3a      	bgt.n	80042b6 <_printf_float+0x386>
 8004240:	6823      	ldr	r3, [r4, #0]
 8004242:	07da      	lsls	r2, r3, #31
 8004244:	d437      	bmi.n	80042b6 <_printf_float+0x386>
 8004246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004248:	ebaa 0903 	sub.w	r9, sl, r3
 800424c:	9b06      	ldr	r3, [sp, #24]
 800424e:	ebaa 0303 	sub.w	r3, sl, r3
 8004252:	4599      	cmp	r9, r3
 8004254:	bfa8      	it	ge
 8004256:	4699      	movge	r9, r3
 8004258:	f1b9 0f00 	cmp.w	r9, #0
 800425c:	dc33      	bgt.n	80042c6 <_printf_float+0x396>
 800425e:	f04f 0800 	mov.w	r8, #0
 8004262:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004266:	f104 0b1a 	add.w	fp, r4, #26
 800426a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800426c:	ebaa 0303 	sub.w	r3, sl, r3
 8004270:	eba3 0309 	sub.w	r3, r3, r9
 8004274:	4543      	cmp	r3, r8
 8004276:	f77f af79 	ble.w	800416c <_printf_float+0x23c>
 800427a:	2301      	movs	r3, #1
 800427c:	465a      	mov	r2, fp
 800427e:	4631      	mov	r1, r6
 8004280:	4628      	mov	r0, r5
 8004282:	47b8      	blx	r7
 8004284:	3001      	adds	r0, #1
 8004286:	f43f aeae 	beq.w	8003fe6 <_printf_float+0xb6>
 800428a:	f108 0801 	add.w	r8, r8, #1
 800428e:	e7ec      	b.n	800426a <_printf_float+0x33a>
 8004290:	4642      	mov	r2, r8
 8004292:	4631      	mov	r1, r6
 8004294:	4628      	mov	r0, r5
 8004296:	47b8      	blx	r7
 8004298:	3001      	adds	r0, #1
 800429a:	d1c2      	bne.n	8004222 <_printf_float+0x2f2>
 800429c:	e6a3      	b.n	8003fe6 <_printf_float+0xb6>
 800429e:	2301      	movs	r3, #1
 80042a0:	4631      	mov	r1, r6
 80042a2:	4628      	mov	r0, r5
 80042a4:	9206      	str	r2, [sp, #24]
 80042a6:	47b8      	blx	r7
 80042a8:	3001      	adds	r0, #1
 80042aa:	f43f ae9c 	beq.w	8003fe6 <_printf_float+0xb6>
 80042ae:	9a06      	ldr	r2, [sp, #24]
 80042b0:	f10b 0b01 	add.w	fp, fp, #1
 80042b4:	e7bb      	b.n	800422e <_printf_float+0x2fe>
 80042b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042ba:	4631      	mov	r1, r6
 80042bc:	4628      	mov	r0, r5
 80042be:	47b8      	blx	r7
 80042c0:	3001      	adds	r0, #1
 80042c2:	d1c0      	bne.n	8004246 <_printf_float+0x316>
 80042c4:	e68f      	b.n	8003fe6 <_printf_float+0xb6>
 80042c6:	9a06      	ldr	r2, [sp, #24]
 80042c8:	464b      	mov	r3, r9
 80042ca:	4442      	add	r2, r8
 80042cc:	4631      	mov	r1, r6
 80042ce:	4628      	mov	r0, r5
 80042d0:	47b8      	blx	r7
 80042d2:	3001      	adds	r0, #1
 80042d4:	d1c3      	bne.n	800425e <_printf_float+0x32e>
 80042d6:	e686      	b.n	8003fe6 <_printf_float+0xb6>
 80042d8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042dc:	f1ba 0f01 	cmp.w	sl, #1
 80042e0:	dc01      	bgt.n	80042e6 <_printf_float+0x3b6>
 80042e2:	07db      	lsls	r3, r3, #31
 80042e4:	d536      	bpl.n	8004354 <_printf_float+0x424>
 80042e6:	2301      	movs	r3, #1
 80042e8:	4642      	mov	r2, r8
 80042ea:	4631      	mov	r1, r6
 80042ec:	4628      	mov	r0, r5
 80042ee:	47b8      	blx	r7
 80042f0:	3001      	adds	r0, #1
 80042f2:	f43f ae78 	beq.w	8003fe6 <_printf_float+0xb6>
 80042f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	47b8      	blx	r7
 8004300:	3001      	adds	r0, #1
 8004302:	f43f ae70 	beq.w	8003fe6 <_printf_float+0xb6>
 8004306:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800430a:	2200      	movs	r2, #0
 800430c:	2300      	movs	r3, #0
 800430e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004312:	f7fc fbf9 	bl	8000b08 <__aeabi_dcmpeq>
 8004316:	b9c0      	cbnz	r0, 800434a <_printf_float+0x41a>
 8004318:	4653      	mov	r3, sl
 800431a:	f108 0201 	add.w	r2, r8, #1
 800431e:	4631      	mov	r1, r6
 8004320:	4628      	mov	r0, r5
 8004322:	47b8      	blx	r7
 8004324:	3001      	adds	r0, #1
 8004326:	d10c      	bne.n	8004342 <_printf_float+0x412>
 8004328:	e65d      	b.n	8003fe6 <_printf_float+0xb6>
 800432a:	2301      	movs	r3, #1
 800432c:	465a      	mov	r2, fp
 800432e:	4631      	mov	r1, r6
 8004330:	4628      	mov	r0, r5
 8004332:	47b8      	blx	r7
 8004334:	3001      	adds	r0, #1
 8004336:	f43f ae56 	beq.w	8003fe6 <_printf_float+0xb6>
 800433a:	f108 0801 	add.w	r8, r8, #1
 800433e:	45d0      	cmp	r8, sl
 8004340:	dbf3      	blt.n	800432a <_printf_float+0x3fa>
 8004342:	464b      	mov	r3, r9
 8004344:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004348:	e6df      	b.n	800410a <_printf_float+0x1da>
 800434a:	f04f 0800 	mov.w	r8, #0
 800434e:	f104 0b1a 	add.w	fp, r4, #26
 8004352:	e7f4      	b.n	800433e <_printf_float+0x40e>
 8004354:	2301      	movs	r3, #1
 8004356:	4642      	mov	r2, r8
 8004358:	e7e1      	b.n	800431e <_printf_float+0x3ee>
 800435a:	2301      	movs	r3, #1
 800435c:	464a      	mov	r2, r9
 800435e:	4631      	mov	r1, r6
 8004360:	4628      	mov	r0, r5
 8004362:	47b8      	blx	r7
 8004364:	3001      	adds	r0, #1
 8004366:	f43f ae3e 	beq.w	8003fe6 <_printf_float+0xb6>
 800436a:	f108 0801 	add.w	r8, r8, #1
 800436e:	68e3      	ldr	r3, [r4, #12]
 8004370:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004372:	1a5b      	subs	r3, r3, r1
 8004374:	4543      	cmp	r3, r8
 8004376:	dcf0      	bgt.n	800435a <_printf_float+0x42a>
 8004378:	e6fc      	b.n	8004174 <_printf_float+0x244>
 800437a:	f04f 0800 	mov.w	r8, #0
 800437e:	f104 0919 	add.w	r9, r4, #25
 8004382:	e7f4      	b.n	800436e <_printf_float+0x43e>

08004384 <_printf_common>:
 8004384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004388:	4616      	mov	r6, r2
 800438a:	4698      	mov	r8, r3
 800438c:	688a      	ldr	r2, [r1, #8]
 800438e:	690b      	ldr	r3, [r1, #16]
 8004390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004394:	4293      	cmp	r3, r2
 8004396:	bfb8      	it	lt
 8004398:	4613      	movlt	r3, r2
 800439a:	6033      	str	r3, [r6, #0]
 800439c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80043a0:	4607      	mov	r7, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	b10a      	cbz	r2, 80043aa <_printf_common+0x26>
 80043a6:	3301      	adds	r3, #1
 80043a8:	6033      	str	r3, [r6, #0]
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	0699      	lsls	r1, r3, #26
 80043ae:	bf42      	ittt	mi
 80043b0:	6833      	ldrmi	r3, [r6, #0]
 80043b2:	3302      	addmi	r3, #2
 80043b4:	6033      	strmi	r3, [r6, #0]
 80043b6:	6825      	ldr	r5, [r4, #0]
 80043b8:	f015 0506 	ands.w	r5, r5, #6
 80043bc:	d106      	bne.n	80043cc <_printf_common+0x48>
 80043be:	f104 0a19 	add.w	sl, r4, #25
 80043c2:	68e3      	ldr	r3, [r4, #12]
 80043c4:	6832      	ldr	r2, [r6, #0]
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	42ab      	cmp	r3, r5
 80043ca:	dc26      	bgt.n	800441a <_printf_common+0x96>
 80043cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80043d0:	6822      	ldr	r2, [r4, #0]
 80043d2:	3b00      	subs	r3, #0
 80043d4:	bf18      	it	ne
 80043d6:	2301      	movne	r3, #1
 80043d8:	0692      	lsls	r2, r2, #26
 80043da:	d42b      	bmi.n	8004434 <_printf_common+0xb0>
 80043dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80043e0:	4641      	mov	r1, r8
 80043e2:	4638      	mov	r0, r7
 80043e4:	47c8      	blx	r9
 80043e6:	3001      	adds	r0, #1
 80043e8:	d01e      	beq.n	8004428 <_printf_common+0xa4>
 80043ea:	6823      	ldr	r3, [r4, #0]
 80043ec:	6922      	ldr	r2, [r4, #16]
 80043ee:	f003 0306 	and.w	r3, r3, #6
 80043f2:	2b04      	cmp	r3, #4
 80043f4:	bf02      	ittt	eq
 80043f6:	68e5      	ldreq	r5, [r4, #12]
 80043f8:	6833      	ldreq	r3, [r6, #0]
 80043fa:	1aed      	subeq	r5, r5, r3
 80043fc:	68a3      	ldr	r3, [r4, #8]
 80043fe:	bf0c      	ite	eq
 8004400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004404:	2500      	movne	r5, #0
 8004406:	4293      	cmp	r3, r2
 8004408:	bfc4      	itt	gt
 800440a:	1a9b      	subgt	r3, r3, r2
 800440c:	18ed      	addgt	r5, r5, r3
 800440e:	2600      	movs	r6, #0
 8004410:	341a      	adds	r4, #26
 8004412:	42b5      	cmp	r5, r6
 8004414:	d11a      	bne.n	800444c <_printf_common+0xc8>
 8004416:	2000      	movs	r0, #0
 8004418:	e008      	b.n	800442c <_printf_common+0xa8>
 800441a:	2301      	movs	r3, #1
 800441c:	4652      	mov	r2, sl
 800441e:	4641      	mov	r1, r8
 8004420:	4638      	mov	r0, r7
 8004422:	47c8      	blx	r9
 8004424:	3001      	adds	r0, #1
 8004426:	d103      	bne.n	8004430 <_printf_common+0xac>
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004430:	3501      	adds	r5, #1
 8004432:	e7c6      	b.n	80043c2 <_printf_common+0x3e>
 8004434:	18e1      	adds	r1, r4, r3
 8004436:	1c5a      	adds	r2, r3, #1
 8004438:	2030      	movs	r0, #48	@ 0x30
 800443a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800443e:	4422      	add	r2, r4
 8004440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004448:	3302      	adds	r3, #2
 800444a:	e7c7      	b.n	80043dc <_printf_common+0x58>
 800444c:	2301      	movs	r3, #1
 800444e:	4622      	mov	r2, r4
 8004450:	4641      	mov	r1, r8
 8004452:	4638      	mov	r0, r7
 8004454:	47c8      	blx	r9
 8004456:	3001      	adds	r0, #1
 8004458:	d0e6      	beq.n	8004428 <_printf_common+0xa4>
 800445a:	3601      	adds	r6, #1
 800445c:	e7d9      	b.n	8004412 <_printf_common+0x8e>
	...

08004460 <_printf_i>:
 8004460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004464:	7e0f      	ldrb	r7, [r1, #24]
 8004466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004468:	2f78      	cmp	r7, #120	@ 0x78
 800446a:	4691      	mov	r9, r2
 800446c:	4680      	mov	r8, r0
 800446e:	460c      	mov	r4, r1
 8004470:	469a      	mov	sl, r3
 8004472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004476:	d807      	bhi.n	8004488 <_printf_i+0x28>
 8004478:	2f62      	cmp	r7, #98	@ 0x62
 800447a:	d80a      	bhi.n	8004492 <_printf_i+0x32>
 800447c:	2f00      	cmp	r7, #0
 800447e:	f000 80d1 	beq.w	8004624 <_printf_i+0x1c4>
 8004482:	2f58      	cmp	r7, #88	@ 0x58
 8004484:	f000 80b8 	beq.w	80045f8 <_printf_i+0x198>
 8004488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800448c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004490:	e03a      	b.n	8004508 <_printf_i+0xa8>
 8004492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004496:	2b15      	cmp	r3, #21
 8004498:	d8f6      	bhi.n	8004488 <_printf_i+0x28>
 800449a:	a101      	add	r1, pc, #4	@ (adr r1, 80044a0 <_printf_i+0x40>)
 800449c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044a0:	080044f9 	.word	0x080044f9
 80044a4:	0800450d 	.word	0x0800450d
 80044a8:	08004489 	.word	0x08004489
 80044ac:	08004489 	.word	0x08004489
 80044b0:	08004489 	.word	0x08004489
 80044b4:	08004489 	.word	0x08004489
 80044b8:	0800450d 	.word	0x0800450d
 80044bc:	08004489 	.word	0x08004489
 80044c0:	08004489 	.word	0x08004489
 80044c4:	08004489 	.word	0x08004489
 80044c8:	08004489 	.word	0x08004489
 80044cc:	0800460b 	.word	0x0800460b
 80044d0:	08004537 	.word	0x08004537
 80044d4:	080045c5 	.word	0x080045c5
 80044d8:	08004489 	.word	0x08004489
 80044dc:	08004489 	.word	0x08004489
 80044e0:	0800462d 	.word	0x0800462d
 80044e4:	08004489 	.word	0x08004489
 80044e8:	08004537 	.word	0x08004537
 80044ec:	08004489 	.word	0x08004489
 80044f0:	08004489 	.word	0x08004489
 80044f4:	080045cd 	.word	0x080045cd
 80044f8:	6833      	ldr	r3, [r6, #0]
 80044fa:	1d1a      	adds	r2, r3, #4
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6032      	str	r2, [r6, #0]
 8004500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004508:	2301      	movs	r3, #1
 800450a:	e09c      	b.n	8004646 <_printf_i+0x1e6>
 800450c:	6833      	ldr	r3, [r6, #0]
 800450e:	6820      	ldr	r0, [r4, #0]
 8004510:	1d19      	adds	r1, r3, #4
 8004512:	6031      	str	r1, [r6, #0]
 8004514:	0606      	lsls	r6, r0, #24
 8004516:	d501      	bpl.n	800451c <_printf_i+0xbc>
 8004518:	681d      	ldr	r5, [r3, #0]
 800451a:	e003      	b.n	8004524 <_printf_i+0xc4>
 800451c:	0645      	lsls	r5, r0, #25
 800451e:	d5fb      	bpl.n	8004518 <_printf_i+0xb8>
 8004520:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004524:	2d00      	cmp	r5, #0
 8004526:	da03      	bge.n	8004530 <_printf_i+0xd0>
 8004528:	232d      	movs	r3, #45	@ 0x2d
 800452a:	426d      	negs	r5, r5
 800452c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004530:	4858      	ldr	r0, [pc, #352]	@ (8004694 <_printf_i+0x234>)
 8004532:	230a      	movs	r3, #10
 8004534:	e011      	b.n	800455a <_printf_i+0xfa>
 8004536:	6821      	ldr	r1, [r4, #0]
 8004538:	6833      	ldr	r3, [r6, #0]
 800453a:	0608      	lsls	r0, r1, #24
 800453c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004540:	d402      	bmi.n	8004548 <_printf_i+0xe8>
 8004542:	0649      	lsls	r1, r1, #25
 8004544:	bf48      	it	mi
 8004546:	b2ad      	uxthmi	r5, r5
 8004548:	2f6f      	cmp	r7, #111	@ 0x6f
 800454a:	4852      	ldr	r0, [pc, #328]	@ (8004694 <_printf_i+0x234>)
 800454c:	6033      	str	r3, [r6, #0]
 800454e:	bf14      	ite	ne
 8004550:	230a      	movne	r3, #10
 8004552:	2308      	moveq	r3, #8
 8004554:	2100      	movs	r1, #0
 8004556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800455a:	6866      	ldr	r6, [r4, #4]
 800455c:	60a6      	str	r6, [r4, #8]
 800455e:	2e00      	cmp	r6, #0
 8004560:	db05      	blt.n	800456e <_printf_i+0x10e>
 8004562:	6821      	ldr	r1, [r4, #0]
 8004564:	432e      	orrs	r6, r5
 8004566:	f021 0104 	bic.w	r1, r1, #4
 800456a:	6021      	str	r1, [r4, #0]
 800456c:	d04b      	beq.n	8004606 <_printf_i+0x1a6>
 800456e:	4616      	mov	r6, r2
 8004570:	fbb5 f1f3 	udiv	r1, r5, r3
 8004574:	fb03 5711 	mls	r7, r3, r1, r5
 8004578:	5dc7      	ldrb	r7, [r0, r7]
 800457a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800457e:	462f      	mov	r7, r5
 8004580:	42bb      	cmp	r3, r7
 8004582:	460d      	mov	r5, r1
 8004584:	d9f4      	bls.n	8004570 <_printf_i+0x110>
 8004586:	2b08      	cmp	r3, #8
 8004588:	d10b      	bne.n	80045a2 <_printf_i+0x142>
 800458a:	6823      	ldr	r3, [r4, #0]
 800458c:	07df      	lsls	r7, r3, #31
 800458e:	d508      	bpl.n	80045a2 <_printf_i+0x142>
 8004590:	6923      	ldr	r3, [r4, #16]
 8004592:	6861      	ldr	r1, [r4, #4]
 8004594:	4299      	cmp	r1, r3
 8004596:	bfde      	ittt	le
 8004598:	2330      	movle	r3, #48	@ 0x30
 800459a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800459e:	f106 36ff 	addle.w	r6, r6, #4294967295
 80045a2:	1b92      	subs	r2, r2, r6
 80045a4:	6122      	str	r2, [r4, #16]
 80045a6:	f8cd a000 	str.w	sl, [sp]
 80045aa:	464b      	mov	r3, r9
 80045ac:	aa03      	add	r2, sp, #12
 80045ae:	4621      	mov	r1, r4
 80045b0:	4640      	mov	r0, r8
 80045b2:	f7ff fee7 	bl	8004384 <_printf_common>
 80045b6:	3001      	adds	r0, #1
 80045b8:	d14a      	bne.n	8004650 <_printf_i+0x1f0>
 80045ba:	f04f 30ff 	mov.w	r0, #4294967295
 80045be:	b004      	add	sp, #16
 80045c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	f043 0320 	orr.w	r3, r3, #32
 80045ca:	6023      	str	r3, [r4, #0]
 80045cc:	4832      	ldr	r0, [pc, #200]	@ (8004698 <_printf_i+0x238>)
 80045ce:	2778      	movs	r7, #120	@ 0x78
 80045d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	6831      	ldr	r1, [r6, #0]
 80045d8:	061f      	lsls	r7, r3, #24
 80045da:	f851 5b04 	ldr.w	r5, [r1], #4
 80045de:	d402      	bmi.n	80045e6 <_printf_i+0x186>
 80045e0:	065f      	lsls	r7, r3, #25
 80045e2:	bf48      	it	mi
 80045e4:	b2ad      	uxthmi	r5, r5
 80045e6:	6031      	str	r1, [r6, #0]
 80045e8:	07d9      	lsls	r1, r3, #31
 80045ea:	bf44      	itt	mi
 80045ec:	f043 0320 	orrmi.w	r3, r3, #32
 80045f0:	6023      	strmi	r3, [r4, #0]
 80045f2:	b11d      	cbz	r5, 80045fc <_printf_i+0x19c>
 80045f4:	2310      	movs	r3, #16
 80045f6:	e7ad      	b.n	8004554 <_printf_i+0xf4>
 80045f8:	4826      	ldr	r0, [pc, #152]	@ (8004694 <_printf_i+0x234>)
 80045fa:	e7e9      	b.n	80045d0 <_printf_i+0x170>
 80045fc:	6823      	ldr	r3, [r4, #0]
 80045fe:	f023 0320 	bic.w	r3, r3, #32
 8004602:	6023      	str	r3, [r4, #0]
 8004604:	e7f6      	b.n	80045f4 <_printf_i+0x194>
 8004606:	4616      	mov	r6, r2
 8004608:	e7bd      	b.n	8004586 <_printf_i+0x126>
 800460a:	6833      	ldr	r3, [r6, #0]
 800460c:	6825      	ldr	r5, [r4, #0]
 800460e:	6961      	ldr	r1, [r4, #20]
 8004610:	1d18      	adds	r0, r3, #4
 8004612:	6030      	str	r0, [r6, #0]
 8004614:	062e      	lsls	r6, r5, #24
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	d501      	bpl.n	800461e <_printf_i+0x1be>
 800461a:	6019      	str	r1, [r3, #0]
 800461c:	e002      	b.n	8004624 <_printf_i+0x1c4>
 800461e:	0668      	lsls	r0, r5, #25
 8004620:	d5fb      	bpl.n	800461a <_printf_i+0x1ba>
 8004622:	8019      	strh	r1, [r3, #0]
 8004624:	2300      	movs	r3, #0
 8004626:	6123      	str	r3, [r4, #16]
 8004628:	4616      	mov	r6, r2
 800462a:	e7bc      	b.n	80045a6 <_printf_i+0x146>
 800462c:	6833      	ldr	r3, [r6, #0]
 800462e:	1d1a      	adds	r2, r3, #4
 8004630:	6032      	str	r2, [r6, #0]
 8004632:	681e      	ldr	r6, [r3, #0]
 8004634:	6862      	ldr	r2, [r4, #4]
 8004636:	2100      	movs	r1, #0
 8004638:	4630      	mov	r0, r6
 800463a:	f7fb fde9 	bl	8000210 <memchr>
 800463e:	b108      	cbz	r0, 8004644 <_printf_i+0x1e4>
 8004640:	1b80      	subs	r0, r0, r6
 8004642:	6060      	str	r0, [r4, #4]
 8004644:	6863      	ldr	r3, [r4, #4]
 8004646:	6123      	str	r3, [r4, #16]
 8004648:	2300      	movs	r3, #0
 800464a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800464e:	e7aa      	b.n	80045a6 <_printf_i+0x146>
 8004650:	6923      	ldr	r3, [r4, #16]
 8004652:	4632      	mov	r2, r6
 8004654:	4649      	mov	r1, r9
 8004656:	4640      	mov	r0, r8
 8004658:	47d0      	blx	sl
 800465a:	3001      	adds	r0, #1
 800465c:	d0ad      	beq.n	80045ba <_printf_i+0x15a>
 800465e:	6823      	ldr	r3, [r4, #0]
 8004660:	079b      	lsls	r3, r3, #30
 8004662:	d413      	bmi.n	800468c <_printf_i+0x22c>
 8004664:	68e0      	ldr	r0, [r4, #12]
 8004666:	9b03      	ldr	r3, [sp, #12]
 8004668:	4298      	cmp	r0, r3
 800466a:	bfb8      	it	lt
 800466c:	4618      	movlt	r0, r3
 800466e:	e7a6      	b.n	80045be <_printf_i+0x15e>
 8004670:	2301      	movs	r3, #1
 8004672:	4632      	mov	r2, r6
 8004674:	4649      	mov	r1, r9
 8004676:	4640      	mov	r0, r8
 8004678:	47d0      	blx	sl
 800467a:	3001      	adds	r0, #1
 800467c:	d09d      	beq.n	80045ba <_printf_i+0x15a>
 800467e:	3501      	adds	r5, #1
 8004680:	68e3      	ldr	r3, [r4, #12]
 8004682:	9903      	ldr	r1, [sp, #12]
 8004684:	1a5b      	subs	r3, r3, r1
 8004686:	42ab      	cmp	r3, r5
 8004688:	dcf2      	bgt.n	8004670 <_printf_i+0x210>
 800468a:	e7eb      	b.n	8004664 <_printf_i+0x204>
 800468c:	2500      	movs	r5, #0
 800468e:	f104 0619 	add.w	r6, r4, #25
 8004692:	e7f5      	b.n	8004680 <_printf_i+0x220>
 8004694:	08008566 	.word	0x08008566
 8004698:	08008577 	.word	0x08008577

0800469c <_scanf_float>:
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	b087      	sub	sp, #28
 80046a2:	4691      	mov	r9, r2
 80046a4:	9303      	str	r3, [sp, #12]
 80046a6:	688b      	ldr	r3, [r1, #8]
 80046a8:	1e5a      	subs	r2, r3, #1
 80046aa:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80046ae:	bf81      	itttt	hi
 80046b0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80046b4:	eb03 0b05 	addhi.w	fp, r3, r5
 80046b8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80046bc:	608b      	strhi	r3, [r1, #8]
 80046be:	680b      	ldr	r3, [r1, #0]
 80046c0:	460a      	mov	r2, r1
 80046c2:	f04f 0500 	mov.w	r5, #0
 80046c6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80046ca:	f842 3b1c 	str.w	r3, [r2], #28
 80046ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80046d2:	4680      	mov	r8, r0
 80046d4:	460c      	mov	r4, r1
 80046d6:	bf98      	it	ls
 80046d8:	f04f 0b00 	movls.w	fp, #0
 80046dc:	9201      	str	r2, [sp, #4]
 80046de:	4616      	mov	r6, r2
 80046e0:	46aa      	mov	sl, r5
 80046e2:	462f      	mov	r7, r5
 80046e4:	9502      	str	r5, [sp, #8]
 80046e6:	68a2      	ldr	r2, [r4, #8]
 80046e8:	b15a      	cbz	r2, 8004702 <_scanf_float+0x66>
 80046ea:	f8d9 3000 	ldr.w	r3, [r9]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b4e      	cmp	r3, #78	@ 0x4e
 80046f2:	d863      	bhi.n	80047bc <_scanf_float+0x120>
 80046f4:	2b40      	cmp	r3, #64	@ 0x40
 80046f6:	d83b      	bhi.n	8004770 <_scanf_float+0xd4>
 80046f8:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80046fc:	b2c8      	uxtb	r0, r1
 80046fe:	280e      	cmp	r0, #14
 8004700:	d939      	bls.n	8004776 <_scanf_float+0xda>
 8004702:	b11f      	cbz	r7, 800470c <_scanf_float+0x70>
 8004704:	6823      	ldr	r3, [r4, #0]
 8004706:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800470a:	6023      	str	r3, [r4, #0]
 800470c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004710:	f1ba 0f01 	cmp.w	sl, #1
 8004714:	f200 8114 	bhi.w	8004940 <_scanf_float+0x2a4>
 8004718:	9b01      	ldr	r3, [sp, #4]
 800471a:	429e      	cmp	r6, r3
 800471c:	f200 8105 	bhi.w	800492a <_scanf_float+0x28e>
 8004720:	2001      	movs	r0, #1
 8004722:	b007      	add	sp, #28
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004728:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800472c:	2a0d      	cmp	r2, #13
 800472e:	d8e8      	bhi.n	8004702 <_scanf_float+0x66>
 8004730:	a101      	add	r1, pc, #4	@ (adr r1, 8004738 <_scanf_float+0x9c>)
 8004732:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004736:	bf00      	nop
 8004738:	08004881 	.word	0x08004881
 800473c:	08004703 	.word	0x08004703
 8004740:	08004703 	.word	0x08004703
 8004744:	08004703 	.word	0x08004703
 8004748:	080048dd 	.word	0x080048dd
 800474c:	080048b7 	.word	0x080048b7
 8004750:	08004703 	.word	0x08004703
 8004754:	08004703 	.word	0x08004703
 8004758:	0800488f 	.word	0x0800488f
 800475c:	08004703 	.word	0x08004703
 8004760:	08004703 	.word	0x08004703
 8004764:	08004703 	.word	0x08004703
 8004768:	08004703 	.word	0x08004703
 800476c:	0800484b 	.word	0x0800484b
 8004770:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004774:	e7da      	b.n	800472c <_scanf_float+0x90>
 8004776:	290e      	cmp	r1, #14
 8004778:	d8c3      	bhi.n	8004702 <_scanf_float+0x66>
 800477a:	a001      	add	r0, pc, #4	@ (adr r0, 8004780 <_scanf_float+0xe4>)
 800477c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004780:	0800483b 	.word	0x0800483b
 8004784:	08004703 	.word	0x08004703
 8004788:	0800483b 	.word	0x0800483b
 800478c:	080048cb 	.word	0x080048cb
 8004790:	08004703 	.word	0x08004703
 8004794:	080047dd 	.word	0x080047dd
 8004798:	08004821 	.word	0x08004821
 800479c:	08004821 	.word	0x08004821
 80047a0:	08004821 	.word	0x08004821
 80047a4:	08004821 	.word	0x08004821
 80047a8:	08004821 	.word	0x08004821
 80047ac:	08004821 	.word	0x08004821
 80047b0:	08004821 	.word	0x08004821
 80047b4:	08004821 	.word	0x08004821
 80047b8:	08004821 	.word	0x08004821
 80047bc:	2b6e      	cmp	r3, #110	@ 0x6e
 80047be:	d809      	bhi.n	80047d4 <_scanf_float+0x138>
 80047c0:	2b60      	cmp	r3, #96	@ 0x60
 80047c2:	d8b1      	bhi.n	8004728 <_scanf_float+0x8c>
 80047c4:	2b54      	cmp	r3, #84	@ 0x54
 80047c6:	d07b      	beq.n	80048c0 <_scanf_float+0x224>
 80047c8:	2b59      	cmp	r3, #89	@ 0x59
 80047ca:	d19a      	bne.n	8004702 <_scanf_float+0x66>
 80047cc:	2d07      	cmp	r5, #7
 80047ce:	d198      	bne.n	8004702 <_scanf_float+0x66>
 80047d0:	2508      	movs	r5, #8
 80047d2:	e02f      	b.n	8004834 <_scanf_float+0x198>
 80047d4:	2b74      	cmp	r3, #116	@ 0x74
 80047d6:	d073      	beq.n	80048c0 <_scanf_float+0x224>
 80047d8:	2b79      	cmp	r3, #121	@ 0x79
 80047da:	e7f6      	b.n	80047ca <_scanf_float+0x12e>
 80047dc:	6821      	ldr	r1, [r4, #0]
 80047de:	05c8      	lsls	r0, r1, #23
 80047e0:	d51e      	bpl.n	8004820 <_scanf_float+0x184>
 80047e2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80047e6:	6021      	str	r1, [r4, #0]
 80047e8:	3701      	adds	r7, #1
 80047ea:	f1bb 0f00 	cmp.w	fp, #0
 80047ee:	d003      	beq.n	80047f8 <_scanf_float+0x15c>
 80047f0:	3201      	adds	r2, #1
 80047f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80047f6:	60a2      	str	r2, [r4, #8]
 80047f8:	68a3      	ldr	r3, [r4, #8]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	60a3      	str	r3, [r4, #8]
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	3301      	adds	r3, #1
 8004802:	6123      	str	r3, [r4, #16]
 8004804:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004808:	3b01      	subs	r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	f8c9 3004 	str.w	r3, [r9, #4]
 8004810:	f340 8082 	ble.w	8004918 <_scanf_float+0x27c>
 8004814:	f8d9 3000 	ldr.w	r3, [r9]
 8004818:	3301      	adds	r3, #1
 800481a:	f8c9 3000 	str.w	r3, [r9]
 800481e:	e762      	b.n	80046e6 <_scanf_float+0x4a>
 8004820:	eb1a 0105 	adds.w	r1, sl, r5
 8004824:	f47f af6d 	bne.w	8004702 <_scanf_float+0x66>
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800482e:	6022      	str	r2, [r4, #0]
 8004830:	460d      	mov	r5, r1
 8004832:	468a      	mov	sl, r1
 8004834:	f806 3b01 	strb.w	r3, [r6], #1
 8004838:	e7de      	b.n	80047f8 <_scanf_float+0x15c>
 800483a:	6822      	ldr	r2, [r4, #0]
 800483c:	0610      	lsls	r0, r2, #24
 800483e:	f57f af60 	bpl.w	8004702 <_scanf_float+0x66>
 8004842:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004846:	6022      	str	r2, [r4, #0]
 8004848:	e7f4      	b.n	8004834 <_scanf_float+0x198>
 800484a:	f1ba 0f00 	cmp.w	sl, #0
 800484e:	d10c      	bne.n	800486a <_scanf_float+0x1ce>
 8004850:	b977      	cbnz	r7, 8004870 <_scanf_float+0x1d4>
 8004852:	6822      	ldr	r2, [r4, #0]
 8004854:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004858:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800485c:	d108      	bne.n	8004870 <_scanf_float+0x1d4>
 800485e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004862:	6022      	str	r2, [r4, #0]
 8004864:	f04f 0a01 	mov.w	sl, #1
 8004868:	e7e4      	b.n	8004834 <_scanf_float+0x198>
 800486a:	f1ba 0f02 	cmp.w	sl, #2
 800486e:	d050      	beq.n	8004912 <_scanf_float+0x276>
 8004870:	2d01      	cmp	r5, #1
 8004872:	d002      	beq.n	800487a <_scanf_float+0x1de>
 8004874:	2d04      	cmp	r5, #4
 8004876:	f47f af44 	bne.w	8004702 <_scanf_float+0x66>
 800487a:	3501      	adds	r5, #1
 800487c:	b2ed      	uxtb	r5, r5
 800487e:	e7d9      	b.n	8004834 <_scanf_float+0x198>
 8004880:	f1ba 0f01 	cmp.w	sl, #1
 8004884:	f47f af3d 	bne.w	8004702 <_scanf_float+0x66>
 8004888:	f04f 0a02 	mov.w	sl, #2
 800488c:	e7d2      	b.n	8004834 <_scanf_float+0x198>
 800488e:	b975      	cbnz	r5, 80048ae <_scanf_float+0x212>
 8004890:	2f00      	cmp	r7, #0
 8004892:	f47f af37 	bne.w	8004704 <_scanf_float+0x68>
 8004896:	6822      	ldr	r2, [r4, #0]
 8004898:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800489c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80048a0:	f040 8103 	bne.w	8004aaa <_scanf_float+0x40e>
 80048a4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048a8:	6022      	str	r2, [r4, #0]
 80048aa:	2501      	movs	r5, #1
 80048ac:	e7c2      	b.n	8004834 <_scanf_float+0x198>
 80048ae:	2d03      	cmp	r5, #3
 80048b0:	d0e3      	beq.n	800487a <_scanf_float+0x1de>
 80048b2:	2d05      	cmp	r5, #5
 80048b4:	e7df      	b.n	8004876 <_scanf_float+0x1da>
 80048b6:	2d02      	cmp	r5, #2
 80048b8:	f47f af23 	bne.w	8004702 <_scanf_float+0x66>
 80048bc:	2503      	movs	r5, #3
 80048be:	e7b9      	b.n	8004834 <_scanf_float+0x198>
 80048c0:	2d06      	cmp	r5, #6
 80048c2:	f47f af1e 	bne.w	8004702 <_scanf_float+0x66>
 80048c6:	2507      	movs	r5, #7
 80048c8:	e7b4      	b.n	8004834 <_scanf_float+0x198>
 80048ca:	6822      	ldr	r2, [r4, #0]
 80048cc:	0591      	lsls	r1, r2, #22
 80048ce:	f57f af18 	bpl.w	8004702 <_scanf_float+0x66>
 80048d2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80048d6:	6022      	str	r2, [r4, #0]
 80048d8:	9702      	str	r7, [sp, #8]
 80048da:	e7ab      	b.n	8004834 <_scanf_float+0x198>
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80048e2:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80048e6:	d005      	beq.n	80048f4 <_scanf_float+0x258>
 80048e8:	0550      	lsls	r0, r2, #21
 80048ea:	f57f af0a 	bpl.w	8004702 <_scanf_float+0x66>
 80048ee:	2f00      	cmp	r7, #0
 80048f0:	f000 80db 	beq.w	8004aaa <_scanf_float+0x40e>
 80048f4:	0591      	lsls	r1, r2, #22
 80048f6:	bf58      	it	pl
 80048f8:	9902      	ldrpl	r1, [sp, #8]
 80048fa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80048fe:	bf58      	it	pl
 8004900:	1a79      	subpl	r1, r7, r1
 8004902:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004906:	bf58      	it	pl
 8004908:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800490c:	6022      	str	r2, [r4, #0]
 800490e:	2700      	movs	r7, #0
 8004910:	e790      	b.n	8004834 <_scanf_float+0x198>
 8004912:	f04f 0a03 	mov.w	sl, #3
 8004916:	e78d      	b.n	8004834 <_scanf_float+0x198>
 8004918:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800491c:	4649      	mov	r1, r9
 800491e:	4640      	mov	r0, r8
 8004920:	4798      	blx	r3
 8004922:	2800      	cmp	r0, #0
 8004924:	f43f aedf 	beq.w	80046e6 <_scanf_float+0x4a>
 8004928:	e6eb      	b.n	8004702 <_scanf_float+0x66>
 800492a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800492e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004932:	464a      	mov	r2, r9
 8004934:	4640      	mov	r0, r8
 8004936:	4798      	blx	r3
 8004938:	6923      	ldr	r3, [r4, #16]
 800493a:	3b01      	subs	r3, #1
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	e6eb      	b.n	8004718 <_scanf_float+0x7c>
 8004940:	1e6b      	subs	r3, r5, #1
 8004942:	2b06      	cmp	r3, #6
 8004944:	d824      	bhi.n	8004990 <_scanf_float+0x2f4>
 8004946:	2d02      	cmp	r5, #2
 8004948:	d836      	bhi.n	80049b8 <_scanf_float+0x31c>
 800494a:	9b01      	ldr	r3, [sp, #4]
 800494c:	429e      	cmp	r6, r3
 800494e:	f67f aee7 	bls.w	8004720 <_scanf_float+0x84>
 8004952:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004956:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800495a:	464a      	mov	r2, r9
 800495c:	4640      	mov	r0, r8
 800495e:	4798      	blx	r3
 8004960:	6923      	ldr	r3, [r4, #16]
 8004962:	3b01      	subs	r3, #1
 8004964:	6123      	str	r3, [r4, #16]
 8004966:	e7f0      	b.n	800494a <_scanf_float+0x2ae>
 8004968:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800496c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004970:	464a      	mov	r2, r9
 8004972:	4640      	mov	r0, r8
 8004974:	4798      	blx	r3
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	3b01      	subs	r3, #1
 800497a:	6123      	str	r3, [r4, #16]
 800497c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004980:	fa5f fa8a 	uxtb.w	sl, sl
 8004984:	f1ba 0f02 	cmp.w	sl, #2
 8004988:	d1ee      	bne.n	8004968 <_scanf_float+0x2cc>
 800498a:	3d03      	subs	r5, #3
 800498c:	b2ed      	uxtb	r5, r5
 800498e:	1b76      	subs	r6, r6, r5
 8004990:	6823      	ldr	r3, [r4, #0]
 8004992:	05da      	lsls	r2, r3, #23
 8004994:	d530      	bpl.n	80049f8 <_scanf_float+0x35c>
 8004996:	055b      	lsls	r3, r3, #21
 8004998:	d511      	bpl.n	80049be <_scanf_float+0x322>
 800499a:	9b01      	ldr	r3, [sp, #4]
 800499c:	429e      	cmp	r6, r3
 800499e:	f67f aebf 	bls.w	8004720 <_scanf_float+0x84>
 80049a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049a6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80049aa:	464a      	mov	r2, r9
 80049ac:	4640      	mov	r0, r8
 80049ae:	4798      	blx	r3
 80049b0:	6923      	ldr	r3, [r4, #16]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	6123      	str	r3, [r4, #16]
 80049b6:	e7f0      	b.n	800499a <_scanf_float+0x2fe>
 80049b8:	46aa      	mov	sl, r5
 80049ba:	46b3      	mov	fp, r6
 80049bc:	e7de      	b.n	800497c <_scanf_float+0x2e0>
 80049be:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80049c2:	6923      	ldr	r3, [r4, #16]
 80049c4:	2965      	cmp	r1, #101	@ 0x65
 80049c6:	f103 33ff 	add.w	r3, r3, #4294967295
 80049ca:	f106 35ff 	add.w	r5, r6, #4294967295
 80049ce:	6123      	str	r3, [r4, #16]
 80049d0:	d00c      	beq.n	80049ec <_scanf_float+0x350>
 80049d2:	2945      	cmp	r1, #69	@ 0x45
 80049d4:	d00a      	beq.n	80049ec <_scanf_float+0x350>
 80049d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049da:	464a      	mov	r2, r9
 80049dc:	4640      	mov	r0, r8
 80049de:	4798      	blx	r3
 80049e0:	6923      	ldr	r3, [r4, #16]
 80049e2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	1eb5      	subs	r5, r6, #2
 80049ea:	6123      	str	r3, [r4, #16]
 80049ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049f0:	464a      	mov	r2, r9
 80049f2:	4640      	mov	r0, r8
 80049f4:	4798      	blx	r3
 80049f6:	462e      	mov	r6, r5
 80049f8:	6822      	ldr	r2, [r4, #0]
 80049fa:	f012 0210 	ands.w	r2, r2, #16
 80049fe:	d001      	beq.n	8004a04 <_scanf_float+0x368>
 8004a00:	2000      	movs	r0, #0
 8004a02:	e68e      	b.n	8004722 <_scanf_float+0x86>
 8004a04:	7032      	strb	r2, [r6, #0]
 8004a06:	6823      	ldr	r3, [r4, #0]
 8004a08:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a10:	d125      	bne.n	8004a5e <_scanf_float+0x3c2>
 8004a12:	9b02      	ldr	r3, [sp, #8]
 8004a14:	429f      	cmp	r7, r3
 8004a16:	d00a      	beq.n	8004a2e <_scanf_float+0x392>
 8004a18:	1bda      	subs	r2, r3, r7
 8004a1a:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004a1e:	429e      	cmp	r6, r3
 8004a20:	bf28      	it	cs
 8004a22:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004a26:	4922      	ldr	r1, [pc, #136]	@ (8004ab0 <_scanf_float+0x414>)
 8004a28:	4630      	mov	r0, r6
 8004a2a:	f000 f919 	bl	8004c60 <siprintf>
 8004a2e:	9901      	ldr	r1, [sp, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	4640      	mov	r0, r8
 8004a34:	f002 fc04 	bl	8007240 <_strtod_r>
 8004a38:	9b03      	ldr	r3, [sp, #12]
 8004a3a:	6821      	ldr	r1, [r4, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f011 0f02 	tst.w	r1, #2
 8004a42:	ec57 6b10 	vmov	r6, r7, d0
 8004a46:	f103 0204 	add.w	r2, r3, #4
 8004a4a:	d015      	beq.n	8004a78 <_scanf_float+0x3dc>
 8004a4c:	9903      	ldr	r1, [sp, #12]
 8004a4e:	600a      	str	r2, [r1, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	e9c3 6700 	strd	r6, r7, [r3]
 8004a56:	68e3      	ldr	r3, [r4, #12]
 8004a58:	3301      	adds	r3, #1
 8004a5a:	60e3      	str	r3, [r4, #12]
 8004a5c:	e7d0      	b.n	8004a00 <_scanf_float+0x364>
 8004a5e:	9b04      	ldr	r3, [sp, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0e4      	beq.n	8004a2e <_scanf_float+0x392>
 8004a64:	9905      	ldr	r1, [sp, #20]
 8004a66:	230a      	movs	r3, #10
 8004a68:	3101      	adds	r1, #1
 8004a6a:	4640      	mov	r0, r8
 8004a6c:	f002 fc68 	bl	8007340 <_strtol_r>
 8004a70:	9b04      	ldr	r3, [sp, #16]
 8004a72:	9e05      	ldr	r6, [sp, #20]
 8004a74:	1ac2      	subs	r2, r0, r3
 8004a76:	e7d0      	b.n	8004a1a <_scanf_float+0x37e>
 8004a78:	f011 0f04 	tst.w	r1, #4
 8004a7c:	9903      	ldr	r1, [sp, #12]
 8004a7e:	600a      	str	r2, [r1, #0]
 8004a80:	d1e6      	bne.n	8004a50 <_scanf_float+0x3b4>
 8004a82:	681d      	ldr	r5, [r3, #0]
 8004a84:	4632      	mov	r2, r6
 8004a86:	463b      	mov	r3, r7
 8004a88:	4630      	mov	r0, r6
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	f7fc f86e 	bl	8000b6c <__aeabi_dcmpun>
 8004a90:	b128      	cbz	r0, 8004a9e <_scanf_float+0x402>
 8004a92:	4808      	ldr	r0, [pc, #32]	@ (8004ab4 <_scanf_float+0x418>)
 8004a94:	f000 f9ca 	bl	8004e2c <nanf>
 8004a98:	ed85 0a00 	vstr	s0, [r5]
 8004a9c:	e7db      	b.n	8004a56 <_scanf_float+0x3ba>
 8004a9e:	4630      	mov	r0, r6
 8004aa0:	4639      	mov	r1, r7
 8004aa2:	f7fc f8c1 	bl	8000c28 <__aeabi_d2f>
 8004aa6:	6028      	str	r0, [r5, #0]
 8004aa8:	e7d5      	b.n	8004a56 <_scanf_float+0x3ba>
 8004aaa:	2700      	movs	r7, #0
 8004aac:	e62e      	b.n	800470c <_scanf_float+0x70>
 8004aae:	bf00      	nop
 8004ab0:	08008588 	.word	0x08008588
 8004ab4:	080086c9 	.word	0x080086c9

08004ab8 <std>:
 8004ab8:	2300      	movs	r3, #0
 8004aba:	b510      	push	{r4, lr}
 8004abc:	4604      	mov	r4, r0
 8004abe:	e9c0 3300 	strd	r3, r3, [r0]
 8004ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004ac6:	6083      	str	r3, [r0, #8]
 8004ac8:	8181      	strh	r1, [r0, #12]
 8004aca:	6643      	str	r3, [r0, #100]	@ 0x64
 8004acc:	81c2      	strh	r2, [r0, #14]
 8004ace:	6183      	str	r3, [r0, #24]
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	2208      	movs	r2, #8
 8004ad4:	305c      	adds	r0, #92	@ 0x5c
 8004ad6:	f000 f928 	bl	8004d2a <memset>
 8004ada:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <std+0x58>)
 8004adc:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ade:	4b0d      	ldr	r3, [pc, #52]	@ (8004b14 <std+0x5c>)
 8004ae0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8004b18 <std+0x60>)
 8004ae4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ae6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b1c <std+0x64>)
 8004ae8:	6323      	str	r3, [r4, #48]	@ 0x30
 8004aea:	4b0d      	ldr	r3, [pc, #52]	@ (8004b20 <std+0x68>)
 8004aec:	6224      	str	r4, [r4, #32]
 8004aee:	429c      	cmp	r4, r3
 8004af0:	d006      	beq.n	8004b00 <std+0x48>
 8004af2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004af6:	4294      	cmp	r4, r2
 8004af8:	d002      	beq.n	8004b00 <std+0x48>
 8004afa:	33d0      	adds	r3, #208	@ 0xd0
 8004afc:	429c      	cmp	r4, r3
 8004afe:	d105      	bne.n	8004b0c <std+0x54>
 8004b00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b08:	f000 b98c 	b.w	8004e24 <__retarget_lock_init_recursive>
 8004b0c:	bd10      	pop	{r4, pc}
 8004b0e:	bf00      	nop
 8004b10:	08004ca5 	.word	0x08004ca5
 8004b14:	08004cc7 	.word	0x08004cc7
 8004b18:	08004cff 	.word	0x08004cff
 8004b1c:	08004d23 	.word	0x08004d23
 8004b20:	2000039c 	.word	0x2000039c

08004b24 <stdio_exit_handler>:
 8004b24:	4a02      	ldr	r2, [pc, #8]	@ (8004b30 <stdio_exit_handler+0xc>)
 8004b26:	4903      	ldr	r1, [pc, #12]	@ (8004b34 <stdio_exit_handler+0x10>)
 8004b28:	4803      	ldr	r0, [pc, #12]	@ (8004b38 <stdio_exit_handler+0x14>)
 8004b2a:	f000 b869 	b.w	8004c00 <_fwalk_sglue>
 8004b2e:	bf00      	nop
 8004b30:	2000000c 	.word	0x2000000c
 8004b34:	08007981 	.word	0x08007981
 8004b38:	2000001c 	.word	0x2000001c

08004b3c <cleanup_stdio>:
 8004b3c:	6841      	ldr	r1, [r0, #4]
 8004b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b70 <cleanup_stdio+0x34>)
 8004b40:	4299      	cmp	r1, r3
 8004b42:	b510      	push	{r4, lr}
 8004b44:	4604      	mov	r4, r0
 8004b46:	d001      	beq.n	8004b4c <cleanup_stdio+0x10>
 8004b48:	f002 ff1a 	bl	8007980 <_fflush_r>
 8004b4c:	68a1      	ldr	r1, [r4, #8]
 8004b4e:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <cleanup_stdio+0x38>)
 8004b50:	4299      	cmp	r1, r3
 8004b52:	d002      	beq.n	8004b5a <cleanup_stdio+0x1e>
 8004b54:	4620      	mov	r0, r4
 8004b56:	f002 ff13 	bl	8007980 <_fflush_r>
 8004b5a:	68e1      	ldr	r1, [r4, #12]
 8004b5c:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <cleanup_stdio+0x3c>)
 8004b5e:	4299      	cmp	r1, r3
 8004b60:	d004      	beq.n	8004b6c <cleanup_stdio+0x30>
 8004b62:	4620      	mov	r0, r4
 8004b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b68:	f002 bf0a 	b.w	8007980 <_fflush_r>
 8004b6c:	bd10      	pop	{r4, pc}
 8004b6e:	bf00      	nop
 8004b70:	2000039c 	.word	0x2000039c
 8004b74:	20000404 	.word	0x20000404
 8004b78:	2000046c 	.word	0x2000046c

08004b7c <global_stdio_init.part.0>:
 8004b7c:	b510      	push	{r4, lr}
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <global_stdio_init.part.0+0x30>)
 8004b80:	4c0b      	ldr	r4, [pc, #44]	@ (8004bb0 <global_stdio_init.part.0+0x34>)
 8004b82:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb4 <global_stdio_init.part.0+0x38>)
 8004b84:	601a      	str	r2, [r3, #0]
 8004b86:	4620      	mov	r0, r4
 8004b88:	2200      	movs	r2, #0
 8004b8a:	2104      	movs	r1, #4
 8004b8c:	f7ff ff94 	bl	8004ab8 <std>
 8004b90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b94:	2201      	movs	r2, #1
 8004b96:	2109      	movs	r1, #9
 8004b98:	f7ff ff8e 	bl	8004ab8 <std>
 8004b9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004ba0:	2202      	movs	r2, #2
 8004ba2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ba6:	2112      	movs	r1, #18
 8004ba8:	f7ff bf86 	b.w	8004ab8 <std>
 8004bac:	200004d4 	.word	0x200004d4
 8004bb0:	2000039c 	.word	0x2000039c
 8004bb4:	08004b25 	.word	0x08004b25

08004bb8 <__sfp_lock_acquire>:
 8004bb8:	4801      	ldr	r0, [pc, #4]	@ (8004bc0 <__sfp_lock_acquire+0x8>)
 8004bba:	f000 b934 	b.w	8004e26 <__retarget_lock_acquire_recursive>
 8004bbe:	bf00      	nop
 8004bc0:	200004dd 	.word	0x200004dd

08004bc4 <__sfp_lock_release>:
 8004bc4:	4801      	ldr	r0, [pc, #4]	@ (8004bcc <__sfp_lock_release+0x8>)
 8004bc6:	f000 b92f 	b.w	8004e28 <__retarget_lock_release_recursive>
 8004bca:	bf00      	nop
 8004bcc:	200004dd 	.word	0x200004dd

08004bd0 <__sinit>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4604      	mov	r4, r0
 8004bd4:	f7ff fff0 	bl	8004bb8 <__sfp_lock_acquire>
 8004bd8:	6a23      	ldr	r3, [r4, #32]
 8004bda:	b11b      	cbz	r3, 8004be4 <__sinit+0x14>
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f7ff bff0 	b.w	8004bc4 <__sfp_lock_release>
 8004be4:	4b04      	ldr	r3, [pc, #16]	@ (8004bf8 <__sinit+0x28>)
 8004be6:	6223      	str	r3, [r4, #32]
 8004be8:	4b04      	ldr	r3, [pc, #16]	@ (8004bfc <__sinit+0x2c>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f5      	bne.n	8004bdc <__sinit+0xc>
 8004bf0:	f7ff ffc4 	bl	8004b7c <global_stdio_init.part.0>
 8004bf4:	e7f2      	b.n	8004bdc <__sinit+0xc>
 8004bf6:	bf00      	nop
 8004bf8:	08004b3d 	.word	0x08004b3d
 8004bfc:	200004d4 	.word	0x200004d4

08004c00 <_fwalk_sglue>:
 8004c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c04:	4607      	mov	r7, r0
 8004c06:	4688      	mov	r8, r1
 8004c08:	4614      	mov	r4, r2
 8004c0a:	2600      	movs	r6, #0
 8004c0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c10:	f1b9 0901 	subs.w	r9, r9, #1
 8004c14:	d505      	bpl.n	8004c22 <_fwalk_sglue+0x22>
 8004c16:	6824      	ldr	r4, [r4, #0]
 8004c18:	2c00      	cmp	r4, #0
 8004c1a:	d1f7      	bne.n	8004c0c <_fwalk_sglue+0xc>
 8004c1c:	4630      	mov	r0, r6
 8004c1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d907      	bls.n	8004c38 <_fwalk_sglue+0x38>
 8004c28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c2c:	3301      	adds	r3, #1
 8004c2e:	d003      	beq.n	8004c38 <_fwalk_sglue+0x38>
 8004c30:	4629      	mov	r1, r5
 8004c32:	4638      	mov	r0, r7
 8004c34:	47c0      	blx	r8
 8004c36:	4306      	orrs	r6, r0
 8004c38:	3568      	adds	r5, #104	@ 0x68
 8004c3a:	e7e9      	b.n	8004c10 <_fwalk_sglue+0x10>

08004c3c <iprintf>:
 8004c3c:	b40f      	push	{r0, r1, r2, r3}
 8004c3e:	b507      	push	{r0, r1, r2, lr}
 8004c40:	4906      	ldr	r1, [pc, #24]	@ (8004c5c <iprintf+0x20>)
 8004c42:	ab04      	add	r3, sp, #16
 8004c44:	6808      	ldr	r0, [r1, #0]
 8004c46:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4a:	6881      	ldr	r1, [r0, #8]
 8004c4c:	9301      	str	r3, [sp, #4]
 8004c4e:	f002 fcfb 	bl	8007648 <_vfiprintf_r>
 8004c52:	b003      	add	sp, #12
 8004c54:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c58:	b004      	add	sp, #16
 8004c5a:	4770      	bx	lr
 8004c5c:	20000018 	.word	0x20000018

08004c60 <siprintf>:
 8004c60:	b40e      	push	{r1, r2, r3}
 8004c62:	b510      	push	{r4, lr}
 8004c64:	b09d      	sub	sp, #116	@ 0x74
 8004c66:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004c68:	9002      	str	r0, [sp, #8]
 8004c6a:	9006      	str	r0, [sp, #24]
 8004c6c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c70:	480a      	ldr	r0, [pc, #40]	@ (8004c9c <siprintf+0x3c>)
 8004c72:	9107      	str	r1, [sp, #28]
 8004c74:	9104      	str	r1, [sp, #16]
 8004c76:	490a      	ldr	r1, [pc, #40]	@ (8004ca0 <siprintf+0x40>)
 8004c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c7c:	9105      	str	r1, [sp, #20]
 8004c7e:	2400      	movs	r4, #0
 8004c80:	a902      	add	r1, sp, #8
 8004c82:	6800      	ldr	r0, [r0, #0]
 8004c84:	9301      	str	r3, [sp, #4]
 8004c86:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004c88:	f002 fbb8 	bl	80073fc <_svfiprintf_r>
 8004c8c:	9b02      	ldr	r3, [sp, #8]
 8004c8e:	701c      	strb	r4, [r3, #0]
 8004c90:	b01d      	add	sp, #116	@ 0x74
 8004c92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c96:	b003      	add	sp, #12
 8004c98:	4770      	bx	lr
 8004c9a:	bf00      	nop
 8004c9c:	20000018 	.word	0x20000018
 8004ca0:	ffff0208 	.word	0xffff0208

08004ca4 <__sread>:
 8004ca4:	b510      	push	{r4, lr}
 8004ca6:	460c      	mov	r4, r1
 8004ca8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cac:	f000 f86c 	bl	8004d88 <_read_r>
 8004cb0:	2800      	cmp	r0, #0
 8004cb2:	bfab      	itete	ge
 8004cb4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004cb6:	89a3      	ldrhlt	r3, [r4, #12]
 8004cb8:	181b      	addge	r3, r3, r0
 8004cba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004cbe:	bfac      	ite	ge
 8004cc0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004cc2:	81a3      	strhlt	r3, [r4, #12]
 8004cc4:	bd10      	pop	{r4, pc}

08004cc6 <__swrite>:
 8004cc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cca:	461f      	mov	r7, r3
 8004ccc:	898b      	ldrh	r3, [r1, #12]
 8004cce:	05db      	lsls	r3, r3, #23
 8004cd0:	4605      	mov	r5, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	4616      	mov	r6, r2
 8004cd6:	d505      	bpl.n	8004ce4 <__swrite+0x1e>
 8004cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cdc:	2302      	movs	r3, #2
 8004cde:	2200      	movs	r2, #0
 8004ce0:	f000 f840 	bl	8004d64 <_lseek_r>
 8004ce4:	89a3      	ldrh	r3, [r4, #12]
 8004ce6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	4632      	mov	r2, r6
 8004cf2:	463b      	mov	r3, r7
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfa:	f000 b857 	b.w	8004dac <_write_r>

08004cfe <__sseek>:
 8004cfe:	b510      	push	{r4, lr}
 8004d00:	460c      	mov	r4, r1
 8004d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d06:	f000 f82d 	bl	8004d64 <_lseek_r>
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	89a3      	ldrh	r3, [r4, #12]
 8004d0e:	bf15      	itete	ne
 8004d10:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004d12:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004d16:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004d1a:	81a3      	strheq	r3, [r4, #12]
 8004d1c:	bf18      	it	ne
 8004d1e:	81a3      	strhne	r3, [r4, #12]
 8004d20:	bd10      	pop	{r4, pc}

08004d22 <__sclose>:
 8004d22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d26:	f000 b80d 	b.w	8004d44 <_close_r>

08004d2a <memset>:
 8004d2a:	4402      	add	r2, r0
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d100      	bne.n	8004d34 <memset+0xa>
 8004d32:	4770      	bx	lr
 8004d34:	f803 1b01 	strb.w	r1, [r3], #1
 8004d38:	e7f9      	b.n	8004d2e <memset+0x4>
	...

08004d3c <_localeconv_r>:
 8004d3c:	4800      	ldr	r0, [pc, #0]	@ (8004d40 <_localeconv_r+0x4>)
 8004d3e:	4770      	bx	lr
 8004d40:	20000158 	.word	0x20000158

08004d44 <_close_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4d06      	ldr	r5, [pc, #24]	@ (8004d60 <_close_r+0x1c>)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	f7fc fd6e 	bl	8001830 <_close>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_close_r+0x1a>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_close_r+0x1a>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	200004d8 	.word	0x200004d8

08004d64 <_lseek_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4d07      	ldr	r5, [pc, #28]	@ (8004d84 <_lseek_r+0x20>)
 8004d68:	4604      	mov	r4, r0
 8004d6a:	4608      	mov	r0, r1
 8004d6c:	4611      	mov	r1, r2
 8004d6e:	2200      	movs	r2, #0
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fd83 	bl	800187e <_lseek>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_lseek_r+0x1e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_lseek_r+0x1e>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	200004d8 	.word	0x200004d8

08004d88 <_read_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4d07      	ldr	r5, [pc, #28]	@ (8004da8 <_read_r+0x20>)
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	4608      	mov	r0, r1
 8004d90:	4611      	mov	r1, r2
 8004d92:	2200      	movs	r2, #0
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fc fd2d 	bl	80017f6 <_read>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_read_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_read_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	200004d8 	.word	0x200004d8

08004dac <_write_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	4d07      	ldr	r5, [pc, #28]	@ (8004dcc <_write_r+0x20>)
 8004db0:	4604      	mov	r4, r0
 8004db2:	4608      	mov	r0, r1
 8004db4:	4611      	mov	r1, r2
 8004db6:	2200      	movs	r2, #0
 8004db8:	602a      	str	r2, [r5, #0]
 8004dba:	461a      	mov	r2, r3
 8004dbc:	f7fc fa30 	bl	8001220 <_write>
 8004dc0:	1c43      	adds	r3, r0, #1
 8004dc2:	d102      	bne.n	8004dca <_write_r+0x1e>
 8004dc4:	682b      	ldr	r3, [r5, #0]
 8004dc6:	b103      	cbz	r3, 8004dca <_write_r+0x1e>
 8004dc8:	6023      	str	r3, [r4, #0]
 8004dca:	bd38      	pop	{r3, r4, r5, pc}
 8004dcc:	200004d8 	.word	0x200004d8

08004dd0 <__errno>:
 8004dd0:	4b01      	ldr	r3, [pc, #4]	@ (8004dd8 <__errno+0x8>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	20000018 	.word	0x20000018

08004ddc <__libc_init_array>:
 8004ddc:	b570      	push	{r4, r5, r6, lr}
 8004dde:	4d0d      	ldr	r5, [pc, #52]	@ (8004e14 <__libc_init_array+0x38>)
 8004de0:	4c0d      	ldr	r4, [pc, #52]	@ (8004e18 <__libc_init_array+0x3c>)
 8004de2:	1b64      	subs	r4, r4, r5
 8004de4:	10a4      	asrs	r4, r4, #2
 8004de6:	2600      	movs	r6, #0
 8004de8:	42a6      	cmp	r6, r4
 8004dea:	d109      	bne.n	8004e00 <__libc_init_array+0x24>
 8004dec:	4d0b      	ldr	r5, [pc, #44]	@ (8004e1c <__libc_init_array+0x40>)
 8004dee:	4c0c      	ldr	r4, [pc, #48]	@ (8004e20 <__libc_init_array+0x44>)
 8004df0:	f003 fb78 	bl	80084e4 <_init>
 8004df4:	1b64      	subs	r4, r4, r5
 8004df6:	10a4      	asrs	r4, r4, #2
 8004df8:	2600      	movs	r6, #0
 8004dfa:	42a6      	cmp	r6, r4
 8004dfc:	d105      	bne.n	8004e0a <__libc_init_array+0x2e>
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
 8004e00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e04:	4798      	blx	r3
 8004e06:	3601      	adds	r6, #1
 8004e08:	e7ee      	b.n	8004de8 <__libc_init_array+0xc>
 8004e0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e0e:	4798      	blx	r3
 8004e10:	3601      	adds	r6, #1
 8004e12:	e7f2      	b.n	8004dfa <__libc_init_array+0x1e>
 8004e14:	08008984 	.word	0x08008984
 8004e18:	08008984 	.word	0x08008984
 8004e1c:	08008984 	.word	0x08008984
 8004e20:	08008988 	.word	0x08008988

08004e24 <__retarget_lock_init_recursive>:
 8004e24:	4770      	bx	lr

08004e26 <__retarget_lock_acquire_recursive>:
 8004e26:	4770      	bx	lr

08004e28 <__retarget_lock_release_recursive>:
 8004e28:	4770      	bx	lr
	...

08004e2c <nanf>:
 8004e2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004e34 <nanf+0x8>
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	7fc00000 	.word	0x7fc00000

08004e38 <quorem>:
 8004e38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3c:	6903      	ldr	r3, [r0, #16]
 8004e3e:	690c      	ldr	r4, [r1, #16]
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	4607      	mov	r7, r0
 8004e44:	db7e      	blt.n	8004f44 <quorem+0x10c>
 8004e46:	3c01      	subs	r4, #1
 8004e48:	f101 0814 	add.w	r8, r1, #20
 8004e4c:	00a3      	lsls	r3, r4, #2
 8004e4e:	f100 0514 	add.w	r5, r0, #20
 8004e52:	9300      	str	r3, [sp, #0]
 8004e54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004e58:	9301      	str	r3, [sp, #4]
 8004e5a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004e5e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004e62:	3301      	adds	r3, #1
 8004e64:	429a      	cmp	r2, r3
 8004e66:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004e6a:	fbb2 f6f3 	udiv	r6, r2, r3
 8004e6e:	d32e      	bcc.n	8004ece <quorem+0x96>
 8004e70:	f04f 0a00 	mov.w	sl, #0
 8004e74:	46c4      	mov	ip, r8
 8004e76:	46ae      	mov	lr, r5
 8004e78:	46d3      	mov	fp, sl
 8004e7a:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004e7e:	b298      	uxth	r0, r3
 8004e80:	fb06 a000 	mla	r0, r6, r0, sl
 8004e84:	0c02      	lsrs	r2, r0, #16
 8004e86:	0c1b      	lsrs	r3, r3, #16
 8004e88:	fb06 2303 	mla	r3, r6, r3, r2
 8004e8c:	f8de 2000 	ldr.w	r2, [lr]
 8004e90:	b280      	uxth	r0, r0
 8004e92:	b292      	uxth	r2, r2
 8004e94:	1a12      	subs	r2, r2, r0
 8004e96:	445a      	add	r2, fp
 8004e98:	f8de 0000 	ldr.w	r0, [lr]
 8004e9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004ea6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004eaa:	b292      	uxth	r2, r2
 8004eac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004eb0:	45e1      	cmp	r9, ip
 8004eb2:	f84e 2b04 	str.w	r2, [lr], #4
 8004eb6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004eba:	d2de      	bcs.n	8004e7a <quorem+0x42>
 8004ebc:	9b00      	ldr	r3, [sp, #0]
 8004ebe:	58eb      	ldr	r3, [r5, r3]
 8004ec0:	b92b      	cbnz	r3, 8004ece <quorem+0x96>
 8004ec2:	9b01      	ldr	r3, [sp, #4]
 8004ec4:	3b04      	subs	r3, #4
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	461a      	mov	r2, r3
 8004eca:	d32f      	bcc.n	8004f2c <quorem+0xf4>
 8004ecc:	613c      	str	r4, [r7, #16]
 8004ece:	4638      	mov	r0, r7
 8004ed0:	f001 f9c6 	bl	8006260 <__mcmp>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	db25      	blt.n	8004f24 <quorem+0xec>
 8004ed8:	4629      	mov	r1, r5
 8004eda:	2000      	movs	r0, #0
 8004edc:	f858 2b04 	ldr.w	r2, [r8], #4
 8004ee0:	f8d1 c000 	ldr.w	ip, [r1]
 8004ee4:	fa1f fe82 	uxth.w	lr, r2
 8004ee8:	fa1f f38c 	uxth.w	r3, ip
 8004eec:	eba3 030e 	sub.w	r3, r3, lr
 8004ef0:	4403      	add	r3, r0
 8004ef2:	0c12      	lsrs	r2, r2, #16
 8004ef4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004ef8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f02:	45c1      	cmp	r9, r8
 8004f04:	f841 3b04 	str.w	r3, [r1], #4
 8004f08:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004f0c:	d2e6      	bcs.n	8004edc <quorem+0xa4>
 8004f0e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f16:	b922      	cbnz	r2, 8004f22 <quorem+0xea>
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	429d      	cmp	r5, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	d30b      	bcc.n	8004f38 <quorem+0x100>
 8004f20:	613c      	str	r4, [r7, #16]
 8004f22:	3601      	adds	r6, #1
 8004f24:	4630      	mov	r0, r6
 8004f26:	b003      	add	sp, #12
 8004f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2c:	6812      	ldr	r2, [r2, #0]
 8004f2e:	3b04      	subs	r3, #4
 8004f30:	2a00      	cmp	r2, #0
 8004f32:	d1cb      	bne.n	8004ecc <quorem+0x94>
 8004f34:	3c01      	subs	r4, #1
 8004f36:	e7c6      	b.n	8004ec6 <quorem+0x8e>
 8004f38:	6812      	ldr	r2, [r2, #0]
 8004f3a:	3b04      	subs	r3, #4
 8004f3c:	2a00      	cmp	r2, #0
 8004f3e:	d1ef      	bne.n	8004f20 <quorem+0xe8>
 8004f40:	3c01      	subs	r4, #1
 8004f42:	e7ea      	b.n	8004f1a <quorem+0xe2>
 8004f44:	2000      	movs	r0, #0
 8004f46:	e7ee      	b.n	8004f26 <quorem+0xee>

08004f48 <_dtoa_r>:
 8004f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f4c:	69c7      	ldr	r7, [r0, #28]
 8004f4e:	b097      	sub	sp, #92	@ 0x5c
 8004f50:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004f54:	ec55 4b10 	vmov	r4, r5, d0
 8004f58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8004f5a:	9107      	str	r1, [sp, #28]
 8004f5c:	4681      	mov	r9, r0
 8004f5e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004f60:	9311      	str	r3, [sp, #68]	@ 0x44
 8004f62:	b97f      	cbnz	r7, 8004f84 <_dtoa_r+0x3c>
 8004f64:	2010      	movs	r0, #16
 8004f66:	f000 fe09 	bl	8005b7c <malloc>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004f70:	b920      	cbnz	r0, 8004f7c <_dtoa_r+0x34>
 8004f72:	4ba9      	ldr	r3, [pc, #676]	@ (8005218 <_dtoa_r+0x2d0>)
 8004f74:	21ef      	movs	r1, #239	@ 0xef
 8004f76:	48a9      	ldr	r0, [pc, #676]	@ (800521c <_dtoa_r+0x2d4>)
 8004f78:	f002 fe12 	bl	8007ba0 <__assert_func>
 8004f7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004f80:	6007      	str	r7, [r0, #0]
 8004f82:	60c7      	str	r7, [r0, #12]
 8004f84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004f88:	6819      	ldr	r1, [r3, #0]
 8004f8a:	b159      	cbz	r1, 8004fa4 <_dtoa_r+0x5c>
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	604a      	str	r2, [r1, #4]
 8004f90:	2301      	movs	r3, #1
 8004f92:	4093      	lsls	r3, r2
 8004f94:	608b      	str	r3, [r1, #8]
 8004f96:	4648      	mov	r0, r9
 8004f98:	f000 fee6 	bl	8005d68 <_Bfree>
 8004f9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	1e2b      	subs	r3, r5, #0
 8004fa6:	bfb9      	ittee	lt
 8004fa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8004fac:	9305      	strlt	r3, [sp, #20]
 8004fae:	2300      	movge	r3, #0
 8004fb0:	6033      	strge	r3, [r6, #0]
 8004fb2:	9f05      	ldr	r7, [sp, #20]
 8004fb4:	4b9a      	ldr	r3, [pc, #616]	@ (8005220 <_dtoa_r+0x2d8>)
 8004fb6:	bfbc      	itt	lt
 8004fb8:	2201      	movlt	r2, #1
 8004fba:	6032      	strlt	r2, [r6, #0]
 8004fbc:	43bb      	bics	r3, r7
 8004fbe:	d112      	bne.n	8004fe6 <_dtoa_r+0x9e>
 8004fc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8004fc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 8004fc6:	6013      	str	r3, [r2, #0]
 8004fc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004fcc:	4323      	orrs	r3, r4
 8004fce:	f000 855a 	beq.w	8005a86 <_dtoa_r+0xb3e>
 8004fd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004fd4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005234 <_dtoa_r+0x2ec>
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 855c 	beq.w	8005a96 <_dtoa_r+0xb4e>
 8004fde:	f10a 0303 	add.w	r3, sl, #3
 8004fe2:	f000 bd56 	b.w	8005a92 <_dtoa_r+0xb4a>
 8004fe6:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004fea:	2200      	movs	r2, #0
 8004fec:	ec51 0b17 	vmov	r0, r1, d7
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8004ff6:	f7fb fd87 	bl	8000b08 <__aeabi_dcmpeq>
 8004ffa:	4680      	mov	r8, r0
 8004ffc:	b158      	cbz	r0, 8005016 <_dtoa_r+0xce>
 8004ffe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005000:	2301      	movs	r3, #1
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005006:	b113      	cbz	r3, 800500e <_dtoa_r+0xc6>
 8005008:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800500a:	4b86      	ldr	r3, [pc, #536]	@ (8005224 <_dtoa_r+0x2dc>)
 800500c:	6013      	str	r3, [r2, #0]
 800500e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005238 <_dtoa_r+0x2f0>
 8005012:	f000 bd40 	b.w	8005a96 <_dtoa_r+0xb4e>
 8005016:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800501a:	aa14      	add	r2, sp, #80	@ 0x50
 800501c:	a915      	add	r1, sp, #84	@ 0x54
 800501e:	4648      	mov	r0, r9
 8005020:	f001 fa3e 	bl	80064a0 <__d2b>
 8005024:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005028:	9002      	str	r0, [sp, #8]
 800502a:	2e00      	cmp	r6, #0
 800502c:	d078      	beq.n	8005120 <_dtoa_r+0x1d8>
 800502e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005030:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800503c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005040:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005044:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005048:	4619      	mov	r1, r3
 800504a:	2200      	movs	r2, #0
 800504c:	4b76      	ldr	r3, [pc, #472]	@ (8005228 <_dtoa_r+0x2e0>)
 800504e:	f7fb f93b 	bl	80002c8 <__aeabi_dsub>
 8005052:	a36b      	add	r3, pc, #428	@ (adr r3, 8005200 <_dtoa_r+0x2b8>)
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	f7fb faee 	bl	8000638 <__aeabi_dmul>
 800505c:	a36a      	add	r3, pc, #424	@ (adr r3, 8005208 <_dtoa_r+0x2c0>)
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb f933 	bl	80002cc <__adddf3>
 8005066:	4604      	mov	r4, r0
 8005068:	4630      	mov	r0, r6
 800506a:	460d      	mov	r5, r1
 800506c:	f7fb fa7a 	bl	8000564 <__aeabi_i2d>
 8005070:	a367      	add	r3, pc, #412	@ (adr r3, 8005210 <_dtoa_r+0x2c8>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb fadf 	bl	8000638 <__aeabi_dmul>
 800507a:	4602      	mov	r2, r0
 800507c:	460b      	mov	r3, r1
 800507e:	4620      	mov	r0, r4
 8005080:	4629      	mov	r1, r5
 8005082:	f7fb f923 	bl	80002cc <__adddf3>
 8005086:	4604      	mov	r4, r0
 8005088:	460d      	mov	r5, r1
 800508a:	f7fb fd85 	bl	8000b98 <__aeabi_d2iz>
 800508e:	2200      	movs	r2, #0
 8005090:	4607      	mov	r7, r0
 8005092:	2300      	movs	r3, #0
 8005094:	4620      	mov	r0, r4
 8005096:	4629      	mov	r1, r5
 8005098:	f7fb fd40 	bl	8000b1c <__aeabi_dcmplt>
 800509c:	b140      	cbz	r0, 80050b0 <_dtoa_r+0x168>
 800509e:	4638      	mov	r0, r7
 80050a0:	f7fb fa60 	bl	8000564 <__aeabi_i2d>
 80050a4:	4622      	mov	r2, r4
 80050a6:	462b      	mov	r3, r5
 80050a8:	f7fb fd2e 	bl	8000b08 <__aeabi_dcmpeq>
 80050ac:	b900      	cbnz	r0, 80050b0 <_dtoa_r+0x168>
 80050ae:	3f01      	subs	r7, #1
 80050b0:	2f16      	cmp	r7, #22
 80050b2:	d852      	bhi.n	800515a <_dtoa_r+0x212>
 80050b4:	4b5d      	ldr	r3, [pc, #372]	@ (800522c <_dtoa_r+0x2e4>)
 80050b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80050c2:	f7fb fd2b 	bl	8000b1c <__aeabi_dcmplt>
 80050c6:	2800      	cmp	r0, #0
 80050c8:	d049      	beq.n	800515e <_dtoa_r+0x216>
 80050ca:	3f01      	subs	r7, #1
 80050cc:	2300      	movs	r3, #0
 80050ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80050d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80050d2:	1b9b      	subs	r3, r3, r6
 80050d4:	1e5a      	subs	r2, r3, #1
 80050d6:	bf45      	ittet	mi
 80050d8:	f1c3 0301 	rsbmi	r3, r3, #1
 80050dc:	9300      	strmi	r3, [sp, #0]
 80050de:	2300      	movpl	r3, #0
 80050e0:	2300      	movmi	r3, #0
 80050e2:	9206      	str	r2, [sp, #24]
 80050e4:	bf54      	ite	pl
 80050e6:	9300      	strpl	r3, [sp, #0]
 80050e8:	9306      	strmi	r3, [sp, #24]
 80050ea:	2f00      	cmp	r7, #0
 80050ec:	db39      	blt.n	8005162 <_dtoa_r+0x21a>
 80050ee:	9b06      	ldr	r3, [sp, #24]
 80050f0:	970d      	str	r7, [sp, #52]	@ 0x34
 80050f2:	443b      	add	r3, r7
 80050f4:	9306      	str	r3, [sp, #24]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9308      	str	r3, [sp, #32]
 80050fa:	9b07      	ldr	r3, [sp, #28]
 80050fc:	2b09      	cmp	r3, #9
 80050fe:	d863      	bhi.n	80051c8 <_dtoa_r+0x280>
 8005100:	2b05      	cmp	r3, #5
 8005102:	bfc4      	itt	gt
 8005104:	3b04      	subgt	r3, #4
 8005106:	9307      	strgt	r3, [sp, #28]
 8005108:	9b07      	ldr	r3, [sp, #28]
 800510a:	f1a3 0302 	sub.w	r3, r3, #2
 800510e:	bfcc      	ite	gt
 8005110:	2400      	movgt	r4, #0
 8005112:	2401      	movle	r4, #1
 8005114:	2b03      	cmp	r3, #3
 8005116:	d863      	bhi.n	80051e0 <_dtoa_r+0x298>
 8005118:	e8df f003 	tbb	[pc, r3]
 800511c:	2b375452 	.word	0x2b375452
 8005120:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005124:	441e      	add	r6, r3
 8005126:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800512a:	2b20      	cmp	r3, #32
 800512c:	bfc1      	itttt	gt
 800512e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005132:	409f      	lslgt	r7, r3
 8005134:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005138:	fa24 f303 	lsrgt.w	r3, r4, r3
 800513c:	bfd6      	itet	le
 800513e:	f1c3 0320 	rsble	r3, r3, #32
 8005142:	ea47 0003 	orrgt.w	r0, r7, r3
 8005146:	fa04 f003 	lslle.w	r0, r4, r3
 800514a:	f7fb f9fb 	bl	8000544 <__aeabi_ui2d>
 800514e:	2201      	movs	r2, #1
 8005150:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005154:	3e01      	subs	r6, #1
 8005156:	9212      	str	r2, [sp, #72]	@ 0x48
 8005158:	e776      	b.n	8005048 <_dtoa_r+0x100>
 800515a:	2301      	movs	r3, #1
 800515c:	e7b7      	b.n	80050ce <_dtoa_r+0x186>
 800515e:	9010      	str	r0, [sp, #64]	@ 0x40
 8005160:	e7b6      	b.n	80050d0 <_dtoa_r+0x188>
 8005162:	9b00      	ldr	r3, [sp, #0]
 8005164:	1bdb      	subs	r3, r3, r7
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	427b      	negs	r3, r7
 800516a:	9308      	str	r3, [sp, #32]
 800516c:	2300      	movs	r3, #0
 800516e:	930d      	str	r3, [sp, #52]	@ 0x34
 8005170:	e7c3      	b.n	80050fa <_dtoa_r+0x1b2>
 8005172:	2301      	movs	r3, #1
 8005174:	9309      	str	r3, [sp, #36]	@ 0x24
 8005176:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005178:	eb07 0b03 	add.w	fp, r7, r3
 800517c:	f10b 0301 	add.w	r3, fp, #1
 8005180:	2b01      	cmp	r3, #1
 8005182:	9303      	str	r3, [sp, #12]
 8005184:	bfb8      	it	lt
 8005186:	2301      	movlt	r3, #1
 8005188:	e006      	b.n	8005198 <_dtoa_r+0x250>
 800518a:	2301      	movs	r3, #1
 800518c:	9309      	str	r3, [sp, #36]	@ 0x24
 800518e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005190:	2b00      	cmp	r3, #0
 8005192:	dd28      	ble.n	80051e6 <_dtoa_r+0x29e>
 8005194:	469b      	mov	fp, r3
 8005196:	9303      	str	r3, [sp, #12]
 8005198:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800519c:	2100      	movs	r1, #0
 800519e:	2204      	movs	r2, #4
 80051a0:	f102 0514 	add.w	r5, r2, #20
 80051a4:	429d      	cmp	r5, r3
 80051a6:	d926      	bls.n	80051f6 <_dtoa_r+0x2ae>
 80051a8:	6041      	str	r1, [r0, #4]
 80051aa:	4648      	mov	r0, r9
 80051ac:	f000 fd9c 	bl	8005ce8 <_Balloc>
 80051b0:	4682      	mov	sl, r0
 80051b2:	2800      	cmp	r0, #0
 80051b4:	d142      	bne.n	800523c <_dtoa_r+0x2f4>
 80051b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005230 <_dtoa_r+0x2e8>)
 80051b8:	4602      	mov	r2, r0
 80051ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80051be:	e6da      	b.n	8004f76 <_dtoa_r+0x2e>
 80051c0:	2300      	movs	r3, #0
 80051c2:	e7e3      	b.n	800518c <_dtoa_r+0x244>
 80051c4:	2300      	movs	r3, #0
 80051c6:	e7d5      	b.n	8005174 <_dtoa_r+0x22c>
 80051c8:	2401      	movs	r4, #1
 80051ca:	2300      	movs	r3, #0
 80051cc:	9307      	str	r3, [sp, #28]
 80051ce:	9409      	str	r4, [sp, #36]	@ 0x24
 80051d0:	f04f 3bff 	mov.w	fp, #4294967295
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8cd b00c 	str.w	fp, [sp, #12]
 80051da:	2312      	movs	r3, #18
 80051dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80051de:	e7db      	b.n	8005198 <_dtoa_r+0x250>
 80051e0:	2301      	movs	r3, #1
 80051e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80051e4:	e7f4      	b.n	80051d0 <_dtoa_r+0x288>
 80051e6:	f04f 0b01 	mov.w	fp, #1
 80051ea:	f8cd b00c 	str.w	fp, [sp, #12]
 80051ee:	465b      	mov	r3, fp
 80051f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80051f4:	e7d0      	b.n	8005198 <_dtoa_r+0x250>
 80051f6:	3101      	adds	r1, #1
 80051f8:	0052      	lsls	r2, r2, #1
 80051fa:	e7d1      	b.n	80051a0 <_dtoa_r+0x258>
 80051fc:	f3af 8000 	nop.w
 8005200:	636f4361 	.word	0x636f4361
 8005204:	3fd287a7 	.word	0x3fd287a7
 8005208:	8b60c8b3 	.word	0x8b60c8b3
 800520c:	3fc68a28 	.word	0x3fc68a28
 8005210:	509f79fb 	.word	0x509f79fb
 8005214:	3fd34413 	.word	0x3fd34413
 8005218:	0800859a 	.word	0x0800859a
 800521c:	080085b1 	.word	0x080085b1
 8005220:	7ff00000 	.word	0x7ff00000
 8005224:	08008565 	.word	0x08008565
 8005228:	3ff80000 	.word	0x3ff80000
 800522c:	08008760 	.word	0x08008760
 8005230:	08008609 	.word	0x08008609
 8005234:	08008596 	.word	0x08008596
 8005238:	08008564 	.word	0x08008564
 800523c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005240:	6018      	str	r0, [r3, #0]
 8005242:	9b03      	ldr	r3, [sp, #12]
 8005244:	2b0e      	cmp	r3, #14
 8005246:	f200 80a1 	bhi.w	800538c <_dtoa_r+0x444>
 800524a:	2c00      	cmp	r4, #0
 800524c:	f000 809e 	beq.w	800538c <_dtoa_r+0x444>
 8005250:	2f00      	cmp	r7, #0
 8005252:	dd33      	ble.n	80052bc <_dtoa_r+0x374>
 8005254:	4b9c      	ldr	r3, [pc, #624]	@ (80054c8 <_dtoa_r+0x580>)
 8005256:	f007 020f 	and.w	r2, r7, #15
 800525a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800525e:	ed93 7b00 	vldr	d7, [r3]
 8005262:	05f8      	lsls	r0, r7, #23
 8005264:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005268:	ea4f 1427 	mov.w	r4, r7, asr #4
 800526c:	d516      	bpl.n	800529c <_dtoa_r+0x354>
 800526e:	4b97      	ldr	r3, [pc, #604]	@ (80054cc <_dtoa_r+0x584>)
 8005270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005278:	f7fb fb08 	bl	800088c <__aeabi_ddiv>
 800527c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005280:	f004 040f 	and.w	r4, r4, #15
 8005284:	2603      	movs	r6, #3
 8005286:	4d91      	ldr	r5, [pc, #580]	@ (80054cc <_dtoa_r+0x584>)
 8005288:	b954      	cbnz	r4, 80052a0 <_dtoa_r+0x358>
 800528a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800528e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005292:	f7fb fafb 	bl	800088c <__aeabi_ddiv>
 8005296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800529a:	e028      	b.n	80052ee <_dtoa_r+0x3a6>
 800529c:	2602      	movs	r6, #2
 800529e:	e7f2      	b.n	8005286 <_dtoa_r+0x33e>
 80052a0:	07e1      	lsls	r1, r4, #31
 80052a2:	d508      	bpl.n	80052b6 <_dtoa_r+0x36e>
 80052a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80052a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80052ac:	f7fb f9c4 	bl	8000638 <__aeabi_dmul>
 80052b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80052b4:	3601      	adds	r6, #1
 80052b6:	1064      	asrs	r4, r4, #1
 80052b8:	3508      	adds	r5, #8
 80052ba:	e7e5      	b.n	8005288 <_dtoa_r+0x340>
 80052bc:	f000 80af 	beq.w	800541e <_dtoa_r+0x4d6>
 80052c0:	427c      	negs	r4, r7
 80052c2:	4b81      	ldr	r3, [pc, #516]	@ (80054c8 <_dtoa_r+0x580>)
 80052c4:	4d81      	ldr	r5, [pc, #516]	@ (80054cc <_dtoa_r+0x584>)
 80052c6:	f004 020f 	and.w	r2, r4, #15
 80052ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80052ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80052d6:	f7fb f9af 	bl	8000638 <__aeabi_dmul>
 80052da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052de:	1124      	asrs	r4, r4, #4
 80052e0:	2300      	movs	r3, #0
 80052e2:	2602      	movs	r6, #2
 80052e4:	2c00      	cmp	r4, #0
 80052e6:	f040 808f 	bne.w	8005408 <_dtoa_r+0x4c0>
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1d3      	bne.n	8005296 <_dtoa_r+0x34e>
 80052ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80052f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 8094 	beq.w	8005422 <_dtoa_r+0x4da>
 80052fa:	4b75      	ldr	r3, [pc, #468]	@ (80054d0 <_dtoa_r+0x588>)
 80052fc:	2200      	movs	r2, #0
 80052fe:	4620      	mov	r0, r4
 8005300:	4629      	mov	r1, r5
 8005302:	f7fb fc0b 	bl	8000b1c <__aeabi_dcmplt>
 8005306:	2800      	cmp	r0, #0
 8005308:	f000 808b 	beq.w	8005422 <_dtoa_r+0x4da>
 800530c:	9b03      	ldr	r3, [sp, #12]
 800530e:	2b00      	cmp	r3, #0
 8005310:	f000 8087 	beq.w	8005422 <_dtoa_r+0x4da>
 8005314:	f1bb 0f00 	cmp.w	fp, #0
 8005318:	dd34      	ble.n	8005384 <_dtoa_r+0x43c>
 800531a:	4620      	mov	r0, r4
 800531c:	4b6d      	ldr	r3, [pc, #436]	@ (80054d4 <_dtoa_r+0x58c>)
 800531e:	2200      	movs	r2, #0
 8005320:	4629      	mov	r1, r5
 8005322:	f7fb f989 	bl	8000638 <__aeabi_dmul>
 8005326:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800532a:	f107 38ff 	add.w	r8, r7, #4294967295
 800532e:	3601      	adds	r6, #1
 8005330:	465c      	mov	r4, fp
 8005332:	4630      	mov	r0, r6
 8005334:	f7fb f916 	bl	8000564 <__aeabi_i2d>
 8005338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800533c:	f7fb f97c 	bl	8000638 <__aeabi_dmul>
 8005340:	4b65      	ldr	r3, [pc, #404]	@ (80054d8 <_dtoa_r+0x590>)
 8005342:	2200      	movs	r2, #0
 8005344:	f7fa ffc2 	bl	80002cc <__adddf3>
 8005348:	4605      	mov	r5, r0
 800534a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800534e:	2c00      	cmp	r4, #0
 8005350:	d16a      	bne.n	8005428 <_dtoa_r+0x4e0>
 8005352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005356:	4b61      	ldr	r3, [pc, #388]	@ (80054dc <_dtoa_r+0x594>)
 8005358:	2200      	movs	r2, #0
 800535a:	f7fa ffb5 	bl	80002c8 <__aeabi_dsub>
 800535e:	4602      	mov	r2, r0
 8005360:	460b      	mov	r3, r1
 8005362:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005366:	462a      	mov	r2, r5
 8005368:	4633      	mov	r3, r6
 800536a:	f7fb fbf5 	bl	8000b58 <__aeabi_dcmpgt>
 800536e:	2800      	cmp	r0, #0
 8005370:	f040 8298 	bne.w	80058a4 <_dtoa_r+0x95c>
 8005374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005378:	462a      	mov	r2, r5
 800537a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800537e:	f7fb fbcd 	bl	8000b1c <__aeabi_dcmplt>
 8005382:	bb38      	cbnz	r0, 80053d4 <_dtoa_r+0x48c>
 8005384:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005388:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800538c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800538e:	2b00      	cmp	r3, #0
 8005390:	f2c0 8157 	blt.w	8005642 <_dtoa_r+0x6fa>
 8005394:	2f0e      	cmp	r7, #14
 8005396:	f300 8154 	bgt.w	8005642 <_dtoa_r+0x6fa>
 800539a:	4b4b      	ldr	r3, [pc, #300]	@ (80054c8 <_dtoa_r+0x580>)
 800539c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80053a0:	ed93 7b00 	vldr	d7, [r3]
 80053a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	ed8d 7b00 	vstr	d7, [sp]
 80053ac:	f280 80e5 	bge.w	800557a <_dtoa_r+0x632>
 80053b0:	9b03      	ldr	r3, [sp, #12]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f300 80e1 	bgt.w	800557a <_dtoa_r+0x632>
 80053b8:	d10c      	bne.n	80053d4 <_dtoa_r+0x48c>
 80053ba:	4b48      	ldr	r3, [pc, #288]	@ (80054dc <_dtoa_r+0x594>)
 80053bc:	2200      	movs	r2, #0
 80053be:	ec51 0b17 	vmov	r0, r1, d7
 80053c2:	f7fb f939 	bl	8000638 <__aeabi_dmul>
 80053c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053ca:	f7fb fbbb 	bl	8000b44 <__aeabi_dcmpge>
 80053ce:	2800      	cmp	r0, #0
 80053d0:	f000 8266 	beq.w	80058a0 <_dtoa_r+0x958>
 80053d4:	2400      	movs	r4, #0
 80053d6:	4625      	mov	r5, r4
 80053d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80053da:	4656      	mov	r6, sl
 80053dc:	ea6f 0803 	mvn.w	r8, r3
 80053e0:	2700      	movs	r7, #0
 80053e2:	4621      	mov	r1, r4
 80053e4:	4648      	mov	r0, r9
 80053e6:	f000 fcbf 	bl	8005d68 <_Bfree>
 80053ea:	2d00      	cmp	r5, #0
 80053ec:	f000 80bd 	beq.w	800556a <_dtoa_r+0x622>
 80053f0:	b12f      	cbz	r7, 80053fe <_dtoa_r+0x4b6>
 80053f2:	42af      	cmp	r7, r5
 80053f4:	d003      	beq.n	80053fe <_dtoa_r+0x4b6>
 80053f6:	4639      	mov	r1, r7
 80053f8:	4648      	mov	r0, r9
 80053fa:	f000 fcb5 	bl	8005d68 <_Bfree>
 80053fe:	4629      	mov	r1, r5
 8005400:	4648      	mov	r0, r9
 8005402:	f000 fcb1 	bl	8005d68 <_Bfree>
 8005406:	e0b0      	b.n	800556a <_dtoa_r+0x622>
 8005408:	07e2      	lsls	r2, r4, #31
 800540a:	d505      	bpl.n	8005418 <_dtoa_r+0x4d0>
 800540c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005410:	f7fb f912 	bl	8000638 <__aeabi_dmul>
 8005414:	3601      	adds	r6, #1
 8005416:	2301      	movs	r3, #1
 8005418:	1064      	asrs	r4, r4, #1
 800541a:	3508      	adds	r5, #8
 800541c:	e762      	b.n	80052e4 <_dtoa_r+0x39c>
 800541e:	2602      	movs	r6, #2
 8005420:	e765      	b.n	80052ee <_dtoa_r+0x3a6>
 8005422:	9c03      	ldr	r4, [sp, #12]
 8005424:	46b8      	mov	r8, r7
 8005426:	e784      	b.n	8005332 <_dtoa_r+0x3ea>
 8005428:	4b27      	ldr	r3, [pc, #156]	@ (80054c8 <_dtoa_r+0x580>)
 800542a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800542c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005430:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005434:	4454      	add	r4, sl
 8005436:	2900      	cmp	r1, #0
 8005438:	d054      	beq.n	80054e4 <_dtoa_r+0x59c>
 800543a:	4929      	ldr	r1, [pc, #164]	@ (80054e0 <_dtoa_r+0x598>)
 800543c:	2000      	movs	r0, #0
 800543e:	f7fb fa25 	bl	800088c <__aeabi_ddiv>
 8005442:	4633      	mov	r3, r6
 8005444:	462a      	mov	r2, r5
 8005446:	f7fa ff3f 	bl	80002c8 <__aeabi_dsub>
 800544a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800544e:	4656      	mov	r6, sl
 8005450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005454:	f7fb fba0 	bl	8000b98 <__aeabi_d2iz>
 8005458:	4605      	mov	r5, r0
 800545a:	f7fb f883 	bl	8000564 <__aeabi_i2d>
 800545e:	4602      	mov	r2, r0
 8005460:	460b      	mov	r3, r1
 8005462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005466:	f7fa ff2f 	bl	80002c8 <__aeabi_dsub>
 800546a:	3530      	adds	r5, #48	@ 0x30
 800546c:	4602      	mov	r2, r0
 800546e:	460b      	mov	r3, r1
 8005470:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005474:	f806 5b01 	strb.w	r5, [r6], #1
 8005478:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800547c:	f7fb fb4e 	bl	8000b1c <__aeabi_dcmplt>
 8005480:	2800      	cmp	r0, #0
 8005482:	d172      	bne.n	800556a <_dtoa_r+0x622>
 8005484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005488:	4911      	ldr	r1, [pc, #68]	@ (80054d0 <_dtoa_r+0x588>)
 800548a:	2000      	movs	r0, #0
 800548c:	f7fa ff1c 	bl	80002c8 <__aeabi_dsub>
 8005490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005494:	f7fb fb42 	bl	8000b1c <__aeabi_dcmplt>
 8005498:	2800      	cmp	r0, #0
 800549a:	f040 80b4 	bne.w	8005606 <_dtoa_r+0x6be>
 800549e:	42a6      	cmp	r6, r4
 80054a0:	f43f af70 	beq.w	8005384 <_dtoa_r+0x43c>
 80054a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80054a8:	4b0a      	ldr	r3, [pc, #40]	@ (80054d4 <_dtoa_r+0x58c>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	f7fb f8c4 	bl	8000638 <__aeabi_dmul>
 80054b0:	4b08      	ldr	r3, [pc, #32]	@ (80054d4 <_dtoa_r+0x58c>)
 80054b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80054b6:	2200      	movs	r2, #0
 80054b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054bc:	f7fb f8bc 	bl	8000638 <__aeabi_dmul>
 80054c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054c4:	e7c4      	b.n	8005450 <_dtoa_r+0x508>
 80054c6:	bf00      	nop
 80054c8:	08008760 	.word	0x08008760
 80054cc:	08008738 	.word	0x08008738
 80054d0:	3ff00000 	.word	0x3ff00000
 80054d4:	40240000 	.word	0x40240000
 80054d8:	401c0000 	.word	0x401c0000
 80054dc:	40140000 	.word	0x40140000
 80054e0:	3fe00000 	.word	0x3fe00000
 80054e4:	4631      	mov	r1, r6
 80054e6:	4628      	mov	r0, r5
 80054e8:	f7fb f8a6 	bl	8000638 <__aeabi_dmul>
 80054ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80054f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 80054f2:	4656      	mov	r6, sl
 80054f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054f8:	f7fb fb4e 	bl	8000b98 <__aeabi_d2iz>
 80054fc:	4605      	mov	r5, r0
 80054fe:	f7fb f831 	bl	8000564 <__aeabi_i2d>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800550a:	f7fa fedd 	bl	80002c8 <__aeabi_dsub>
 800550e:	3530      	adds	r5, #48	@ 0x30
 8005510:	f806 5b01 	strb.w	r5, [r6], #1
 8005514:	4602      	mov	r2, r0
 8005516:	460b      	mov	r3, r1
 8005518:	42a6      	cmp	r6, r4
 800551a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	d124      	bne.n	800556e <_dtoa_r+0x626>
 8005524:	4baf      	ldr	r3, [pc, #700]	@ (80057e4 <_dtoa_r+0x89c>)
 8005526:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800552a:	f7fa fecf 	bl	80002cc <__adddf3>
 800552e:	4602      	mov	r2, r0
 8005530:	460b      	mov	r3, r1
 8005532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005536:	f7fb fb0f 	bl	8000b58 <__aeabi_dcmpgt>
 800553a:	2800      	cmp	r0, #0
 800553c:	d163      	bne.n	8005606 <_dtoa_r+0x6be>
 800553e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005542:	49a8      	ldr	r1, [pc, #672]	@ (80057e4 <_dtoa_r+0x89c>)
 8005544:	2000      	movs	r0, #0
 8005546:	f7fa febf 	bl	80002c8 <__aeabi_dsub>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005552:	f7fb fae3 	bl	8000b1c <__aeabi_dcmplt>
 8005556:	2800      	cmp	r0, #0
 8005558:	f43f af14 	beq.w	8005384 <_dtoa_r+0x43c>
 800555c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800555e:	1e73      	subs	r3, r6, #1
 8005560:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005562:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005566:	2b30      	cmp	r3, #48	@ 0x30
 8005568:	d0f8      	beq.n	800555c <_dtoa_r+0x614>
 800556a:	4647      	mov	r7, r8
 800556c:	e03b      	b.n	80055e6 <_dtoa_r+0x69e>
 800556e:	4b9e      	ldr	r3, [pc, #632]	@ (80057e8 <_dtoa_r+0x8a0>)
 8005570:	f7fb f862 	bl	8000638 <__aeabi_dmul>
 8005574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005578:	e7bc      	b.n	80054f4 <_dtoa_r+0x5ac>
 800557a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800557e:	4656      	mov	r6, sl
 8005580:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005584:	4620      	mov	r0, r4
 8005586:	4629      	mov	r1, r5
 8005588:	f7fb f980 	bl	800088c <__aeabi_ddiv>
 800558c:	f7fb fb04 	bl	8000b98 <__aeabi_d2iz>
 8005590:	4680      	mov	r8, r0
 8005592:	f7fa ffe7 	bl	8000564 <__aeabi_i2d>
 8005596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800559a:	f7fb f84d 	bl	8000638 <__aeabi_dmul>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4620      	mov	r0, r4
 80055a4:	4629      	mov	r1, r5
 80055a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80055aa:	f7fa fe8d 	bl	80002c8 <__aeabi_dsub>
 80055ae:	f806 4b01 	strb.w	r4, [r6], #1
 80055b2:	9d03      	ldr	r5, [sp, #12]
 80055b4:	eba6 040a 	sub.w	r4, r6, sl
 80055b8:	42a5      	cmp	r5, r4
 80055ba:	4602      	mov	r2, r0
 80055bc:	460b      	mov	r3, r1
 80055be:	d133      	bne.n	8005628 <_dtoa_r+0x6e0>
 80055c0:	f7fa fe84 	bl	80002cc <__adddf3>
 80055c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055c8:	4604      	mov	r4, r0
 80055ca:	460d      	mov	r5, r1
 80055cc:	f7fb fac4 	bl	8000b58 <__aeabi_dcmpgt>
 80055d0:	b9c0      	cbnz	r0, 8005604 <_dtoa_r+0x6bc>
 80055d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055d6:	4620      	mov	r0, r4
 80055d8:	4629      	mov	r1, r5
 80055da:	f7fb fa95 	bl	8000b08 <__aeabi_dcmpeq>
 80055de:	b110      	cbz	r0, 80055e6 <_dtoa_r+0x69e>
 80055e0:	f018 0f01 	tst.w	r8, #1
 80055e4:	d10e      	bne.n	8005604 <_dtoa_r+0x6bc>
 80055e6:	9902      	ldr	r1, [sp, #8]
 80055e8:	4648      	mov	r0, r9
 80055ea:	f000 fbbd 	bl	8005d68 <_Bfree>
 80055ee:	2300      	movs	r3, #0
 80055f0:	7033      	strb	r3, [r6, #0]
 80055f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80055f4:	3701      	adds	r7, #1
 80055f6:	601f      	str	r7, [r3, #0]
 80055f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 824b 	beq.w	8005a96 <_dtoa_r+0xb4e>
 8005600:	601e      	str	r6, [r3, #0]
 8005602:	e248      	b.n	8005a96 <_dtoa_r+0xb4e>
 8005604:	46b8      	mov	r8, r7
 8005606:	4633      	mov	r3, r6
 8005608:	461e      	mov	r6, r3
 800560a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800560e:	2a39      	cmp	r2, #57	@ 0x39
 8005610:	d106      	bne.n	8005620 <_dtoa_r+0x6d8>
 8005612:	459a      	cmp	sl, r3
 8005614:	d1f8      	bne.n	8005608 <_dtoa_r+0x6c0>
 8005616:	2230      	movs	r2, #48	@ 0x30
 8005618:	f108 0801 	add.w	r8, r8, #1
 800561c:	f88a 2000 	strb.w	r2, [sl]
 8005620:	781a      	ldrb	r2, [r3, #0]
 8005622:	3201      	adds	r2, #1
 8005624:	701a      	strb	r2, [r3, #0]
 8005626:	e7a0      	b.n	800556a <_dtoa_r+0x622>
 8005628:	4b6f      	ldr	r3, [pc, #444]	@ (80057e8 <_dtoa_r+0x8a0>)
 800562a:	2200      	movs	r2, #0
 800562c:	f7fb f804 	bl	8000638 <__aeabi_dmul>
 8005630:	2200      	movs	r2, #0
 8005632:	2300      	movs	r3, #0
 8005634:	4604      	mov	r4, r0
 8005636:	460d      	mov	r5, r1
 8005638:	f7fb fa66 	bl	8000b08 <__aeabi_dcmpeq>
 800563c:	2800      	cmp	r0, #0
 800563e:	d09f      	beq.n	8005580 <_dtoa_r+0x638>
 8005640:	e7d1      	b.n	80055e6 <_dtoa_r+0x69e>
 8005642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005644:	2a00      	cmp	r2, #0
 8005646:	f000 80ea 	beq.w	800581e <_dtoa_r+0x8d6>
 800564a:	9a07      	ldr	r2, [sp, #28]
 800564c:	2a01      	cmp	r2, #1
 800564e:	f300 80cd 	bgt.w	80057ec <_dtoa_r+0x8a4>
 8005652:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005654:	2a00      	cmp	r2, #0
 8005656:	f000 80c1 	beq.w	80057dc <_dtoa_r+0x894>
 800565a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800565e:	9c08      	ldr	r4, [sp, #32]
 8005660:	9e00      	ldr	r6, [sp, #0]
 8005662:	9a00      	ldr	r2, [sp, #0]
 8005664:	441a      	add	r2, r3
 8005666:	9200      	str	r2, [sp, #0]
 8005668:	9a06      	ldr	r2, [sp, #24]
 800566a:	2101      	movs	r1, #1
 800566c:	441a      	add	r2, r3
 800566e:	4648      	mov	r0, r9
 8005670:	9206      	str	r2, [sp, #24]
 8005672:	f000 fc77 	bl	8005f64 <__i2b>
 8005676:	4605      	mov	r5, r0
 8005678:	b166      	cbz	r6, 8005694 <_dtoa_r+0x74c>
 800567a:	9b06      	ldr	r3, [sp, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	dd09      	ble.n	8005694 <_dtoa_r+0x74c>
 8005680:	42b3      	cmp	r3, r6
 8005682:	9a00      	ldr	r2, [sp, #0]
 8005684:	bfa8      	it	ge
 8005686:	4633      	movge	r3, r6
 8005688:	1ad2      	subs	r2, r2, r3
 800568a:	9200      	str	r2, [sp, #0]
 800568c:	9a06      	ldr	r2, [sp, #24]
 800568e:	1af6      	subs	r6, r6, r3
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	9306      	str	r3, [sp, #24]
 8005694:	9b08      	ldr	r3, [sp, #32]
 8005696:	b30b      	cbz	r3, 80056dc <_dtoa_r+0x794>
 8005698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80c6 	beq.w	800582c <_dtoa_r+0x8e4>
 80056a0:	2c00      	cmp	r4, #0
 80056a2:	f000 80c0 	beq.w	8005826 <_dtoa_r+0x8de>
 80056a6:	4629      	mov	r1, r5
 80056a8:	4622      	mov	r2, r4
 80056aa:	4648      	mov	r0, r9
 80056ac:	f000 fd12 	bl	80060d4 <__pow5mult>
 80056b0:	9a02      	ldr	r2, [sp, #8]
 80056b2:	4601      	mov	r1, r0
 80056b4:	4605      	mov	r5, r0
 80056b6:	4648      	mov	r0, r9
 80056b8:	f000 fc6a 	bl	8005f90 <__multiply>
 80056bc:	9902      	ldr	r1, [sp, #8]
 80056be:	4680      	mov	r8, r0
 80056c0:	4648      	mov	r0, r9
 80056c2:	f000 fb51 	bl	8005d68 <_Bfree>
 80056c6:	9b08      	ldr	r3, [sp, #32]
 80056c8:	1b1b      	subs	r3, r3, r4
 80056ca:	9308      	str	r3, [sp, #32]
 80056cc:	f000 80b1 	beq.w	8005832 <_dtoa_r+0x8ea>
 80056d0:	9a08      	ldr	r2, [sp, #32]
 80056d2:	4641      	mov	r1, r8
 80056d4:	4648      	mov	r0, r9
 80056d6:	f000 fcfd 	bl	80060d4 <__pow5mult>
 80056da:	9002      	str	r0, [sp, #8]
 80056dc:	2101      	movs	r1, #1
 80056de:	4648      	mov	r0, r9
 80056e0:	f000 fc40 	bl	8005f64 <__i2b>
 80056e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056e6:	4604      	mov	r4, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 81d8 	beq.w	8005a9e <_dtoa_r+0xb56>
 80056ee:	461a      	mov	r2, r3
 80056f0:	4601      	mov	r1, r0
 80056f2:	4648      	mov	r0, r9
 80056f4:	f000 fcee 	bl	80060d4 <__pow5mult>
 80056f8:	9b07      	ldr	r3, [sp, #28]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	4604      	mov	r4, r0
 80056fe:	f300 809f 	bgt.w	8005840 <_dtoa_r+0x8f8>
 8005702:	9b04      	ldr	r3, [sp, #16]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f040 8097 	bne.w	8005838 <_dtoa_r+0x8f0>
 800570a:	9b05      	ldr	r3, [sp, #20]
 800570c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005710:	2b00      	cmp	r3, #0
 8005712:	f040 8093 	bne.w	800583c <_dtoa_r+0x8f4>
 8005716:	9b05      	ldr	r3, [sp, #20]
 8005718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800571c:	0d1b      	lsrs	r3, r3, #20
 800571e:	051b      	lsls	r3, r3, #20
 8005720:	b133      	cbz	r3, 8005730 <_dtoa_r+0x7e8>
 8005722:	9b00      	ldr	r3, [sp, #0]
 8005724:	3301      	adds	r3, #1
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	9b06      	ldr	r3, [sp, #24]
 800572a:	3301      	adds	r3, #1
 800572c:	9306      	str	r3, [sp, #24]
 800572e:	2301      	movs	r3, #1
 8005730:	9308      	str	r3, [sp, #32]
 8005732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 81b8 	beq.w	8005aaa <_dtoa_r+0xb62>
 800573a:	6923      	ldr	r3, [r4, #16]
 800573c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005740:	6918      	ldr	r0, [r3, #16]
 8005742:	f000 fbc3 	bl	8005ecc <__hi0bits>
 8005746:	f1c0 0020 	rsb	r0, r0, #32
 800574a:	9b06      	ldr	r3, [sp, #24]
 800574c:	4418      	add	r0, r3
 800574e:	f010 001f 	ands.w	r0, r0, #31
 8005752:	f000 8082 	beq.w	800585a <_dtoa_r+0x912>
 8005756:	f1c0 0320 	rsb	r3, r0, #32
 800575a:	2b04      	cmp	r3, #4
 800575c:	dd73      	ble.n	8005846 <_dtoa_r+0x8fe>
 800575e:	9b00      	ldr	r3, [sp, #0]
 8005760:	f1c0 001c 	rsb	r0, r0, #28
 8005764:	4403      	add	r3, r0
 8005766:	9300      	str	r3, [sp, #0]
 8005768:	9b06      	ldr	r3, [sp, #24]
 800576a:	4403      	add	r3, r0
 800576c:	4406      	add	r6, r0
 800576e:	9306      	str	r3, [sp, #24]
 8005770:	9b00      	ldr	r3, [sp, #0]
 8005772:	2b00      	cmp	r3, #0
 8005774:	dd05      	ble.n	8005782 <_dtoa_r+0x83a>
 8005776:	9902      	ldr	r1, [sp, #8]
 8005778:	461a      	mov	r2, r3
 800577a:	4648      	mov	r0, r9
 800577c:	f000 fd04 	bl	8006188 <__lshift>
 8005780:	9002      	str	r0, [sp, #8]
 8005782:	9b06      	ldr	r3, [sp, #24]
 8005784:	2b00      	cmp	r3, #0
 8005786:	dd05      	ble.n	8005794 <_dtoa_r+0x84c>
 8005788:	4621      	mov	r1, r4
 800578a:	461a      	mov	r2, r3
 800578c:	4648      	mov	r0, r9
 800578e:	f000 fcfb 	bl	8006188 <__lshift>
 8005792:	4604      	mov	r4, r0
 8005794:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d061      	beq.n	800585e <_dtoa_r+0x916>
 800579a:	9802      	ldr	r0, [sp, #8]
 800579c:	4621      	mov	r1, r4
 800579e:	f000 fd5f 	bl	8006260 <__mcmp>
 80057a2:	2800      	cmp	r0, #0
 80057a4:	da5b      	bge.n	800585e <_dtoa_r+0x916>
 80057a6:	2300      	movs	r3, #0
 80057a8:	9902      	ldr	r1, [sp, #8]
 80057aa:	220a      	movs	r2, #10
 80057ac:	4648      	mov	r0, r9
 80057ae:	f000 fafd 	bl	8005dac <__multadd>
 80057b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057b4:	9002      	str	r0, [sp, #8]
 80057b6:	f107 38ff 	add.w	r8, r7, #4294967295
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 8177 	beq.w	8005aae <_dtoa_r+0xb66>
 80057c0:	4629      	mov	r1, r5
 80057c2:	2300      	movs	r3, #0
 80057c4:	220a      	movs	r2, #10
 80057c6:	4648      	mov	r0, r9
 80057c8:	f000 faf0 	bl	8005dac <__multadd>
 80057cc:	f1bb 0f00 	cmp.w	fp, #0
 80057d0:	4605      	mov	r5, r0
 80057d2:	dc6f      	bgt.n	80058b4 <_dtoa_r+0x96c>
 80057d4:	9b07      	ldr	r3, [sp, #28]
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	dc49      	bgt.n	800586e <_dtoa_r+0x926>
 80057da:	e06b      	b.n	80058b4 <_dtoa_r+0x96c>
 80057dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80057de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80057e2:	e73c      	b.n	800565e <_dtoa_r+0x716>
 80057e4:	3fe00000 	.word	0x3fe00000
 80057e8:	40240000 	.word	0x40240000
 80057ec:	9b03      	ldr	r3, [sp, #12]
 80057ee:	1e5c      	subs	r4, r3, #1
 80057f0:	9b08      	ldr	r3, [sp, #32]
 80057f2:	42a3      	cmp	r3, r4
 80057f4:	db09      	blt.n	800580a <_dtoa_r+0x8c2>
 80057f6:	1b1c      	subs	r4, r3, r4
 80057f8:	9b03      	ldr	r3, [sp, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f6bf af30 	bge.w	8005660 <_dtoa_r+0x718>
 8005800:	9b00      	ldr	r3, [sp, #0]
 8005802:	9a03      	ldr	r2, [sp, #12]
 8005804:	1a9e      	subs	r6, r3, r2
 8005806:	2300      	movs	r3, #0
 8005808:	e72b      	b.n	8005662 <_dtoa_r+0x71a>
 800580a:	9b08      	ldr	r3, [sp, #32]
 800580c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800580e:	9408      	str	r4, [sp, #32]
 8005810:	1ae3      	subs	r3, r4, r3
 8005812:	441a      	add	r2, r3
 8005814:	9e00      	ldr	r6, [sp, #0]
 8005816:	9b03      	ldr	r3, [sp, #12]
 8005818:	920d      	str	r2, [sp, #52]	@ 0x34
 800581a:	2400      	movs	r4, #0
 800581c:	e721      	b.n	8005662 <_dtoa_r+0x71a>
 800581e:	9c08      	ldr	r4, [sp, #32]
 8005820:	9e00      	ldr	r6, [sp, #0]
 8005822:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005824:	e728      	b.n	8005678 <_dtoa_r+0x730>
 8005826:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800582a:	e751      	b.n	80056d0 <_dtoa_r+0x788>
 800582c:	9a08      	ldr	r2, [sp, #32]
 800582e:	9902      	ldr	r1, [sp, #8]
 8005830:	e750      	b.n	80056d4 <_dtoa_r+0x78c>
 8005832:	f8cd 8008 	str.w	r8, [sp, #8]
 8005836:	e751      	b.n	80056dc <_dtoa_r+0x794>
 8005838:	2300      	movs	r3, #0
 800583a:	e779      	b.n	8005730 <_dtoa_r+0x7e8>
 800583c:	9b04      	ldr	r3, [sp, #16]
 800583e:	e777      	b.n	8005730 <_dtoa_r+0x7e8>
 8005840:	2300      	movs	r3, #0
 8005842:	9308      	str	r3, [sp, #32]
 8005844:	e779      	b.n	800573a <_dtoa_r+0x7f2>
 8005846:	d093      	beq.n	8005770 <_dtoa_r+0x828>
 8005848:	9a00      	ldr	r2, [sp, #0]
 800584a:	331c      	adds	r3, #28
 800584c:	441a      	add	r2, r3
 800584e:	9200      	str	r2, [sp, #0]
 8005850:	9a06      	ldr	r2, [sp, #24]
 8005852:	441a      	add	r2, r3
 8005854:	441e      	add	r6, r3
 8005856:	9206      	str	r2, [sp, #24]
 8005858:	e78a      	b.n	8005770 <_dtoa_r+0x828>
 800585a:	4603      	mov	r3, r0
 800585c:	e7f4      	b.n	8005848 <_dtoa_r+0x900>
 800585e:	9b03      	ldr	r3, [sp, #12]
 8005860:	2b00      	cmp	r3, #0
 8005862:	46b8      	mov	r8, r7
 8005864:	dc20      	bgt.n	80058a8 <_dtoa_r+0x960>
 8005866:	469b      	mov	fp, r3
 8005868:	9b07      	ldr	r3, [sp, #28]
 800586a:	2b02      	cmp	r3, #2
 800586c:	dd1e      	ble.n	80058ac <_dtoa_r+0x964>
 800586e:	f1bb 0f00 	cmp.w	fp, #0
 8005872:	f47f adb1 	bne.w	80053d8 <_dtoa_r+0x490>
 8005876:	4621      	mov	r1, r4
 8005878:	465b      	mov	r3, fp
 800587a:	2205      	movs	r2, #5
 800587c:	4648      	mov	r0, r9
 800587e:	f000 fa95 	bl	8005dac <__multadd>
 8005882:	4601      	mov	r1, r0
 8005884:	4604      	mov	r4, r0
 8005886:	9802      	ldr	r0, [sp, #8]
 8005888:	f000 fcea 	bl	8006260 <__mcmp>
 800588c:	2800      	cmp	r0, #0
 800588e:	f77f ada3 	ble.w	80053d8 <_dtoa_r+0x490>
 8005892:	4656      	mov	r6, sl
 8005894:	2331      	movs	r3, #49	@ 0x31
 8005896:	f806 3b01 	strb.w	r3, [r6], #1
 800589a:	f108 0801 	add.w	r8, r8, #1
 800589e:	e59f      	b.n	80053e0 <_dtoa_r+0x498>
 80058a0:	9c03      	ldr	r4, [sp, #12]
 80058a2:	46b8      	mov	r8, r7
 80058a4:	4625      	mov	r5, r4
 80058a6:	e7f4      	b.n	8005892 <_dtoa_r+0x94a>
 80058a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80058ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8101 	beq.w	8005ab6 <_dtoa_r+0xb6e>
 80058b4:	2e00      	cmp	r6, #0
 80058b6:	dd05      	ble.n	80058c4 <_dtoa_r+0x97c>
 80058b8:	4629      	mov	r1, r5
 80058ba:	4632      	mov	r2, r6
 80058bc:	4648      	mov	r0, r9
 80058be:	f000 fc63 	bl	8006188 <__lshift>
 80058c2:	4605      	mov	r5, r0
 80058c4:	9b08      	ldr	r3, [sp, #32]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d05c      	beq.n	8005984 <_dtoa_r+0xa3c>
 80058ca:	6869      	ldr	r1, [r5, #4]
 80058cc:	4648      	mov	r0, r9
 80058ce:	f000 fa0b 	bl	8005ce8 <_Balloc>
 80058d2:	4606      	mov	r6, r0
 80058d4:	b928      	cbnz	r0, 80058e2 <_dtoa_r+0x99a>
 80058d6:	4b82      	ldr	r3, [pc, #520]	@ (8005ae0 <_dtoa_r+0xb98>)
 80058d8:	4602      	mov	r2, r0
 80058da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80058de:	f7ff bb4a 	b.w	8004f76 <_dtoa_r+0x2e>
 80058e2:	692a      	ldr	r2, [r5, #16]
 80058e4:	3202      	adds	r2, #2
 80058e6:	0092      	lsls	r2, r2, #2
 80058e8:	f105 010c 	add.w	r1, r5, #12
 80058ec:	300c      	adds	r0, #12
 80058ee:	f002 f93f 	bl	8007b70 <memcpy>
 80058f2:	2201      	movs	r2, #1
 80058f4:	4631      	mov	r1, r6
 80058f6:	4648      	mov	r0, r9
 80058f8:	f000 fc46 	bl	8006188 <__lshift>
 80058fc:	f10a 0301 	add.w	r3, sl, #1
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	eb0a 030b 	add.w	r3, sl, fp
 8005906:	9308      	str	r3, [sp, #32]
 8005908:	9b04      	ldr	r3, [sp, #16]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	462f      	mov	r7, r5
 8005910:	9306      	str	r3, [sp, #24]
 8005912:	4605      	mov	r5, r0
 8005914:	9b00      	ldr	r3, [sp, #0]
 8005916:	9802      	ldr	r0, [sp, #8]
 8005918:	4621      	mov	r1, r4
 800591a:	f103 3bff 	add.w	fp, r3, #4294967295
 800591e:	f7ff fa8b 	bl	8004e38 <quorem>
 8005922:	4603      	mov	r3, r0
 8005924:	3330      	adds	r3, #48	@ 0x30
 8005926:	9003      	str	r0, [sp, #12]
 8005928:	4639      	mov	r1, r7
 800592a:	9802      	ldr	r0, [sp, #8]
 800592c:	9309      	str	r3, [sp, #36]	@ 0x24
 800592e:	f000 fc97 	bl	8006260 <__mcmp>
 8005932:	462a      	mov	r2, r5
 8005934:	9004      	str	r0, [sp, #16]
 8005936:	4621      	mov	r1, r4
 8005938:	4648      	mov	r0, r9
 800593a:	f000 fcad 	bl	8006298 <__mdiff>
 800593e:	68c2      	ldr	r2, [r0, #12]
 8005940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005942:	4606      	mov	r6, r0
 8005944:	bb02      	cbnz	r2, 8005988 <_dtoa_r+0xa40>
 8005946:	4601      	mov	r1, r0
 8005948:	9802      	ldr	r0, [sp, #8]
 800594a:	f000 fc89 	bl	8006260 <__mcmp>
 800594e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005950:	4602      	mov	r2, r0
 8005952:	4631      	mov	r1, r6
 8005954:	4648      	mov	r0, r9
 8005956:	920c      	str	r2, [sp, #48]	@ 0x30
 8005958:	9309      	str	r3, [sp, #36]	@ 0x24
 800595a:	f000 fa05 	bl	8005d68 <_Bfree>
 800595e:	9b07      	ldr	r3, [sp, #28]
 8005960:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005962:	9e00      	ldr	r6, [sp, #0]
 8005964:	ea42 0103 	orr.w	r1, r2, r3
 8005968:	9b06      	ldr	r3, [sp, #24]
 800596a:	4319      	orrs	r1, r3
 800596c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800596e:	d10d      	bne.n	800598c <_dtoa_r+0xa44>
 8005970:	2b39      	cmp	r3, #57	@ 0x39
 8005972:	d027      	beq.n	80059c4 <_dtoa_r+0xa7c>
 8005974:	9a04      	ldr	r2, [sp, #16]
 8005976:	2a00      	cmp	r2, #0
 8005978:	dd01      	ble.n	800597e <_dtoa_r+0xa36>
 800597a:	9b03      	ldr	r3, [sp, #12]
 800597c:	3331      	adds	r3, #49	@ 0x31
 800597e:	f88b 3000 	strb.w	r3, [fp]
 8005982:	e52e      	b.n	80053e2 <_dtoa_r+0x49a>
 8005984:	4628      	mov	r0, r5
 8005986:	e7b9      	b.n	80058fc <_dtoa_r+0x9b4>
 8005988:	2201      	movs	r2, #1
 800598a:	e7e2      	b.n	8005952 <_dtoa_r+0xa0a>
 800598c:	9904      	ldr	r1, [sp, #16]
 800598e:	2900      	cmp	r1, #0
 8005990:	db04      	blt.n	800599c <_dtoa_r+0xa54>
 8005992:	9807      	ldr	r0, [sp, #28]
 8005994:	4301      	orrs	r1, r0
 8005996:	9806      	ldr	r0, [sp, #24]
 8005998:	4301      	orrs	r1, r0
 800599a:	d120      	bne.n	80059de <_dtoa_r+0xa96>
 800599c:	2a00      	cmp	r2, #0
 800599e:	ddee      	ble.n	800597e <_dtoa_r+0xa36>
 80059a0:	9902      	ldr	r1, [sp, #8]
 80059a2:	9300      	str	r3, [sp, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	4648      	mov	r0, r9
 80059a8:	f000 fbee 	bl	8006188 <__lshift>
 80059ac:	4621      	mov	r1, r4
 80059ae:	9002      	str	r0, [sp, #8]
 80059b0:	f000 fc56 	bl	8006260 <__mcmp>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	9b00      	ldr	r3, [sp, #0]
 80059b8:	dc02      	bgt.n	80059c0 <_dtoa_r+0xa78>
 80059ba:	d1e0      	bne.n	800597e <_dtoa_r+0xa36>
 80059bc:	07da      	lsls	r2, r3, #31
 80059be:	d5de      	bpl.n	800597e <_dtoa_r+0xa36>
 80059c0:	2b39      	cmp	r3, #57	@ 0x39
 80059c2:	d1da      	bne.n	800597a <_dtoa_r+0xa32>
 80059c4:	2339      	movs	r3, #57	@ 0x39
 80059c6:	f88b 3000 	strb.w	r3, [fp]
 80059ca:	4633      	mov	r3, r6
 80059cc:	461e      	mov	r6, r3
 80059ce:	3b01      	subs	r3, #1
 80059d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80059d4:	2a39      	cmp	r2, #57	@ 0x39
 80059d6:	d04e      	beq.n	8005a76 <_dtoa_r+0xb2e>
 80059d8:	3201      	adds	r2, #1
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e501      	b.n	80053e2 <_dtoa_r+0x49a>
 80059de:	2a00      	cmp	r2, #0
 80059e0:	dd03      	ble.n	80059ea <_dtoa_r+0xaa2>
 80059e2:	2b39      	cmp	r3, #57	@ 0x39
 80059e4:	d0ee      	beq.n	80059c4 <_dtoa_r+0xa7c>
 80059e6:	3301      	adds	r3, #1
 80059e8:	e7c9      	b.n	800597e <_dtoa_r+0xa36>
 80059ea:	9a00      	ldr	r2, [sp, #0]
 80059ec:	9908      	ldr	r1, [sp, #32]
 80059ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 80059f2:	428a      	cmp	r2, r1
 80059f4:	d028      	beq.n	8005a48 <_dtoa_r+0xb00>
 80059f6:	9902      	ldr	r1, [sp, #8]
 80059f8:	2300      	movs	r3, #0
 80059fa:	220a      	movs	r2, #10
 80059fc:	4648      	mov	r0, r9
 80059fe:	f000 f9d5 	bl	8005dac <__multadd>
 8005a02:	42af      	cmp	r7, r5
 8005a04:	9002      	str	r0, [sp, #8]
 8005a06:	f04f 0300 	mov.w	r3, #0
 8005a0a:	f04f 020a 	mov.w	r2, #10
 8005a0e:	4639      	mov	r1, r7
 8005a10:	4648      	mov	r0, r9
 8005a12:	d107      	bne.n	8005a24 <_dtoa_r+0xadc>
 8005a14:	f000 f9ca 	bl	8005dac <__multadd>
 8005a18:	4607      	mov	r7, r0
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	9b00      	ldr	r3, [sp, #0]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	9300      	str	r3, [sp, #0]
 8005a22:	e777      	b.n	8005914 <_dtoa_r+0x9cc>
 8005a24:	f000 f9c2 	bl	8005dac <__multadd>
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4607      	mov	r7, r0
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	220a      	movs	r2, #10
 8005a30:	4648      	mov	r0, r9
 8005a32:	f000 f9bb 	bl	8005dac <__multadd>
 8005a36:	4605      	mov	r5, r0
 8005a38:	e7f0      	b.n	8005a1c <_dtoa_r+0xad4>
 8005a3a:	f1bb 0f00 	cmp.w	fp, #0
 8005a3e:	bfcc      	ite	gt
 8005a40:	465e      	movgt	r6, fp
 8005a42:	2601      	movle	r6, #1
 8005a44:	4456      	add	r6, sl
 8005a46:	2700      	movs	r7, #0
 8005a48:	9902      	ldr	r1, [sp, #8]
 8005a4a:	9300      	str	r3, [sp, #0]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	4648      	mov	r0, r9
 8005a50:	f000 fb9a 	bl	8006188 <__lshift>
 8005a54:	4621      	mov	r1, r4
 8005a56:	9002      	str	r0, [sp, #8]
 8005a58:	f000 fc02 	bl	8006260 <__mcmp>
 8005a5c:	2800      	cmp	r0, #0
 8005a5e:	dcb4      	bgt.n	80059ca <_dtoa_r+0xa82>
 8005a60:	d102      	bne.n	8005a68 <_dtoa_r+0xb20>
 8005a62:	9b00      	ldr	r3, [sp, #0]
 8005a64:	07db      	lsls	r3, r3, #31
 8005a66:	d4b0      	bmi.n	80059ca <_dtoa_r+0xa82>
 8005a68:	4633      	mov	r3, r6
 8005a6a:	461e      	mov	r6, r3
 8005a6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a70:	2a30      	cmp	r2, #48	@ 0x30
 8005a72:	d0fa      	beq.n	8005a6a <_dtoa_r+0xb22>
 8005a74:	e4b5      	b.n	80053e2 <_dtoa_r+0x49a>
 8005a76:	459a      	cmp	sl, r3
 8005a78:	d1a8      	bne.n	80059cc <_dtoa_r+0xa84>
 8005a7a:	2331      	movs	r3, #49	@ 0x31
 8005a7c:	f108 0801 	add.w	r8, r8, #1
 8005a80:	f88a 3000 	strb.w	r3, [sl]
 8005a84:	e4ad      	b.n	80053e2 <_dtoa_r+0x49a>
 8005a86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005ae4 <_dtoa_r+0xb9c>
 8005a8c:	b11b      	cbz	r3, 8005a96 <_dtoa_r+0xb4e>
 8005a8e:	f10a 0308 	add.w	r3, sl, #8
 8005a92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005a94:	6013      	str	r3, [r2, #0]
 8005a96:	4650      	mov	r0, sl
 8005a98:	b017      	add	sp, #92	@ 0x5c
 8005a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a9e:	9b07      	ldr	r3, [sp, #28]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	f77f ae2e 	ble.w	8005702 <_dtoa_r+0x7ba>
 8005aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005aa8:	9308      	str	r3, [sp, #32]
 8005aaa:	2001      	movs	r0, #1
 8005aac:	e64d      	b.n	800574a <_dtoa_r+0x802>
 8005aae:	f1bb 0f00 	cmp.w	fp, #0
 8005ab2:	f77f aed9 	ble.w	8005868 <_dtoa_r+0x920>
 8005ab6:	4656      	mov	r6, sl
 8005ab8:	9802      	ldr	r0, [sp, #8]
 8005aba:	4621      	mov	r1, r4
 8005abc:	f7ff f9bc 	bl	8004e38 <quorem>
 8005ac0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005ac4:	f806 3b01 	strb.w	r3, [r6], #1
 8005ac8:	eba6 020a 	sub.w	r2, r6, sl
 8005acc:	4593      	cmp	fp, r2
 8005ace:	ddb4      	ble.n	8005a3a <_dtoa_r+0xaf2>
 8005ad0:	9902      	ldr	r1, [sp, #8]
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	220a      	movs	r2, #10
 8005ad6:	4648      	mov	r0, r9
 8005ad8:	f000 f968 	bl	8005dac <__multadd>
 8005adc:	9002      	str	r0, [sp, #8]
 8005ade:	e7eb      	b.n	8005ab8 <_dtoa_r+0xb70>
 8005ae0:	08008609 	.word	0x08008609
 8005ae4:	0800858d 	.word	0x0800858d

08005ae8 <_free_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4605      	mov	r5, r0
 8005aec:	2900      	cmp	r1, #0
 8005aee:	d041      	beq.n	8005b74 <_free_r+0x8c>
 8005af0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005af4:	1f0c      	subs	r4, r1, #4
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	bfb8      	it	lt
 8005afa:	18e4      	addlt	r4, r4, r3
 8005afc:	f000 f8e8 	bl	8005cd0 <__malloc_lock>
 8005b00:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <_free_r+0x90>)
 8005b02:	6813      	ldr	r3, [r2, #0]
 8005b04:	b933      	cbnz	r3, 8005b14 <_free_r+0x2c>
 8005b06:	6063      	str	r3, [r4, #4]
 8005b08:	6014      	str	r4, [r2, #0]
 8005b0a:	4628      	mov	r0, r5
 8005b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b10:	f000 b8e4 	b.w	8005cdc <__malloc_unlock>
 8005b14:	42a3      	cmp	r3, r4
 8005b16:	d908      	bls.n	8005b2a <_free_r+0x42>
 8005b18:	6820      	ldr	r0, [r4, #0]
 8005b1a:	1821      	adds	r1, r4, r0
 8005b1c:	428b      	cmp	r3, r1
 8005b1e:	bf01      	itttt	eq
 8005b20:	6819      	ldreq	r1, [r3, #0]
 8005b22:	685b      	ldreq	r3, [r3, #4]
 8005b24:	1809      	addeq	r1, r1, r0
 8005b26:	6021      	streq	r1, [r4, #0]
 8005b28:	e7ed      	b.n	8005b06 <_free_r+0x1e>
 8005b2a:	461a      	mov	r2, r3
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	b10b      	cbz	r3, 8005b34 <_free_r+0x4c>
 8005b30:	42a3      	cmp	r3, r4
 8005b32:	d9fa      	bls.n	8005b2a <_free_r+0x42>
 8005b34:	6811      	ldr	r1, [r2, #0]
 8005b36:	1850      	adds	r0, r2, r1
 8005b38:	42a0      	cmp	r0, r4
 8005b3a:	d10b      	bne.n	8005b54 <_free_r+0x6c>
 8005b3c:	6820      	ldr	r0, [r4, #0]
 8005b3e:	4401      	add	r1, r0
 8005b40:	1850      	adds	r0, r2, r1
 8005b42:	4283      	cmp	r3, r0
 8005b44:	6011      	str	r1, [r2, #0]
 8005b46:	d1e0      	bne.n	8005b0a <_free_r+0x22>
 8005b48:	6818      	ldr	r0, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	6053      	str	r3, [r2, #4]
 8005b4e:	4408      	add	r0, r1
 8005b50:	6010      	str	r0, [r2, #0]
 8005b52:	e7da      	b.n	8005b0a <_free_r+0x22>
 8005b54:	d902      	bls.n	8005b5c <_free_r+0x74>
 8005b56:	230c      	movs	r3, #12
 8005b58:	602b      	str	r3, [r5, #0]
 8005b5a:	e7d6      	b.n	8005b0a <_free_r+0x22>
 8005b5c:	6820      	ldr	r0, [r4, #0]
 8005b5e:	1821      	adds	r1, r4, r0
 8005b60:	428b      	cmp	r3, r1
 8005b62:	bf04      	itt	eq
 8005b64:	6819      	ldreq	r1, [r3, #0]
 8005b66:	685b      	ldreq	r3, [r3, #4]
 8005b68:	6063      	str	r3, [r4, #4]
 8005b6a:	bf04      	itt	eq
 8005b6c:	1809      	addeq	r1, r1, r0
 8005b6e:	6021      	streq	r1, [r4, #0]
 8005b70:	6054      	str	r4, [r2, #4]
 8005b72:	e7ca      	b.n	8005b0a <_free_r+0x22>
 8005b74:	bd38      	pop	{r3, r4, r5, pc}
 8005b76:	bf00      	nop
 8005b78:	200004e4 	.word	0x200004e4

08005b7c <malloc>:
 8005b7c:	4b02      	ldr	r3, [pc, #8]	@ (8005b88 <malloc+0xc>)
 8005b7e:	4601      	mov	r1, r0
 8005b80:	6818      	ldr	r0, [r3, #0]
 8005b82:	f000 b825 	b.w	8005bd0 <_malloc_r>
 8005b86:	bf00      	nop
 8005b88:	20000018 	.word	0x20000018

08005b8c <sbrk_aligned>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4e0f      	ldr	r6, [pc, #60]	@ (8005bcc <sbrk_aligned+0x40>)
 8005b90:	460c      	mov	r4, r1
 8005b92:	6831      	ldr	r1, [r6, #0]
 8005b94:	4605      	mov	r5, r0
 8005b96:	b911      	cbnz	r1, 8005b9e <sbrk_aligned+0x12>
 8005b98:	f001 ffda 	bl	8007b50 <_sbrk_r>
 8005b9c:	6030      	str	r0, [r6, #0]
 8005b9e:	4621      	mov	r1, r4
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	f001 ffd5 	bl	8007b50 <_sbrk_r>
 8005ba6:	1c43      	adds	r3, r0, #1
 8005ba8:	d103      	bne.n	8005bb2 <sbrk_aligned+0x26>
 8005baa:	f04f 34ff 	mov.w	r4, #4294967295
 8005bae:	4620      	mov	r0, r4
 8005bb0:	bd70      	pop	{r4, r5, r6, pc}
 8005bb2:	1cc4      	adds	r4, r0, #3
 8005bb4:	f024 0403 	bic.w	r4, r4, #3
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d0f8      	beq.n	8005bae <sbrk_aligned+0x22>
 8005bbc:	1a21      	subs	r1, r4, r0
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f001 ffc6 	bl	8007b50 <_sbrk_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	d1f2      	bne.n	8005bae <sbrk_aligned+0x22>
 8005bc8:	e7ef      	b.n	8005baa <sbrk_aligned+0x1e>
 8005bca:	bf00      	nop
 8005bcc:	200004e0 	.word	0x200004e0

08005bd0 <_malloc_r>:
 8005bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bd4:	1ccd      	adds	r5, r1, #3
 8005bd6:	f025 0503 	bic.w	r5, r5, #3
 8005bda:	3508      	adds	r5, #8
 8005bdc:	2d0c      	cmp	r5, #12
 8005bde:	bf38      	it	cc
 8005be0:	250c      	movcc	r5, #12
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	4606      	mov	r6, r0
 8005be6:	db01      	blt.n	8005bec <_malloc_r+0x1c>
 8005be8:	42a9      	cmp	r1, r5
 8005bea:	d904      	bls.n	8005bf6 <_malloc_r+0x26>
 8005bec:	230c      	movs	r3, #12
 8005bee:	6033      	str	r3, [r6, #0]
 8005bf0:	2000      	movs	r0, #0
 8005bf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005bf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005ccc <_malloc_r+0xfc>
 8005bfa:	f000 f869 	bl	8005cd0 <__malloc_lock>
 8005bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8005c02:	461c      	mov	r4, r3
 8005c04:	bb44      	cbnz	r4, 8005c58 <_malloc_r+0x88>
 8005c06:	4629      	mov	r1, r5
 8005c08:	4630      	mov	r0, r6
 8005c0a:	f7ff ffbf 	bl	8005b8c <sbrk_aligned>
 8005c0e:	1c43      	adds	r3, r0, #1
 8005c10:	4604      	mov	r4, r0
 8005c12:	d158      	bne.n	8005cc6 <_malloc_r+0xf6>
 8005c14:	f8d8 4000 	ldr.w	r4, [r8]
 8005c18:	4627      	mov	r7, r4
 8005c1a:	2f00      	cmp	r7, #0
 8005c1c:	d143      	bne.n	8005ca6 <_malloc_r+0xd6>
 8005c1e:	2c00      	cmp	r4, #0
 8005c20:	d04b      	beq.n	8005cba <_malloc_r+0xea>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	4639      	mov	r1, r7
 8005c26:	4630      	mov	r0, r6
 8005c28:	eb04 0903 	add.w	r9, r4, r3
 8005c2c:	f001 ff90 	bl	8007b50 <_sbrk_r>
 8005c30:	4581      	cmp	r9, r0
 8005c32:	d142      	bne.n	8005cba <_malloc_r+0xea>
 8005c34:	6821      	ldr	r1, [r4, #0]
 8005c36:	1a6d      	subs	r5, r5, r1
 8005c38:	4629      	mov	r1, r5
 8005c3a:	4630      	mov	r0, r6
 8005c3c:	f7ff ffa6 	bl	8005b8c <sbrk_aligned>
 8005c40:	3001      	adds	r0, #1
 8005c42:	d03a      	beq.n	8005cba <_malloc_r+0xea>
 8005c44:	6823      	ldr	r3, [r4, #0]
 8005c46:	442b      	add	r3, r5
 8005c48:	6023      	str	r3, [r4, #0]
 8005c4a:	f8d8 3000 	ldr.w	r3, [r8]
 8005c4e:	685a      	ldr	r2, [r3, #4]
 8005c50:	bb62      	cbnz	r2, 8005cac <_malloc_r+0xdc>
 8005c52:	f8c8 7000 	str.w	r7, [r8]
 8005c56:	e00f      	b.n	8005c78 <_malloc_r+0xa8>
 8005c58:	6822      	ldr	r2, [r4, #0]
 8005c5a:	1b52      	subs	r2, r2, r5
 8005c5c:	d420      	bmi.n	8005ca0 <_malloc_r+0xd0>
 8005c5e:	2a0b      	cmp	r2, #11
 8005c60:	d917      	bls.n	8005c92 <_malloc_r+0xc2>
 8005c62:	1961      	adds	r1, r4, r5
 8005c64:	42a3      	cmp	r3, r4
 8005c66:	6025      	str	r5, [r4, #0]
 8005c68:	bf18      	it	ne
 8005c6a:	6059      	strne	r1, [r3, #4]
 8005c6c:	6863      	ldr	r3, [r4, #4]
 8005c6e:	bf08      	it	eq
 8005c70:	f8c8 1000 	streq.w	r1, [r8]
 8005c74:	5162      	str	r2, [r4, r5]
 8005c76:	604b      	str	r3, [r1, #4]
 8005c78:	4630      	mov	r0, r6
 8005c7a:	f000 f82f 	bl	8005cdc <__malloc_unlock>
 8005c7e:	f104 000b 	add.w	r0, r4, #11
 8005c82:	1d23      	adds	r3, r4, #4
 8005c84:	f020 0007 	bic.w	r0, r0, #7
 8005c88:	1ac2      	subs	r2, r0, r3
 8005c8a:	bf1c      	itt	ne
 8005c8c:	1a1b      	subne	r3, r3, r0
 8005c8e:	50a3      	strne	r3, [r4, r2]
 8005c90:	e7af      	b.n	8005bf2 <_malloc_r+0x22>
 8005c92:	6862      	ldr	r2, [r4, #4]
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	bf0c      	ite	eq
 8005c98:	f8c8 2000 	streq.w	r2, [r8]
 8005c9c:	605a      	strne	r2, [r3, #4]
 8005c9e:	e7eb      	b.n	8005c78 <_malloc_r+0xa8>
 8005ca0:	4623      	mov	r3, r4
 8005ca2:	6864      	ldr	r4, [r4, #4]
 8005ca4:	e7ae      	b.n	8005c04 <_malloc_r+0x34>
 8005ca6:	463c      	mov	r4, r7
 8005ca8:	687f      	ldr	r7, [r7, #4]
 8005caa:	e7b6      	b.n	8005c1a <_malloc_r+0x4a>
 8005cac:	461a      	mov	r2, r3
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d1fb      	bne.n	8005cac <_malloc_r+0xdc>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	6053      	str	r3, [r2, #4]
 8005cb8:	e7de      	b.n	8005c78 <_malloc_r+0xa8>
 8005cba:	230c      	movs	r3, #12
 8005cbc:	6033      	str	r3, [r6, #0]
 8005cbe:	4630      	mov	r0, r6
 8005cc0:	f000 f80c 	bl	8005cdc <__malloc_unlock>
 8005cc4:	e794      	b.n	8005bf0 <_malloc_r+0x20>
 8005cc6:	6005      	str	r5, [r0, #0]
 8005cc8:	e7d6      	b.n	8005c78 <_malloc_r+0xa8>
 8005cca:	bf00      	nop
 8005ccc:	200004e4 	.word	0x200004e4

08005cd0 <__malloc_lock>:
 8005cd0:	4801      	ldr	r0, [pc, #4]	@ (8005cd8 <__malloc_lock+0x8>)
 8005cd2:	f7ff b8a8 	b.w	8004e26 <__retarget_lock_acquire_recursive>
 8005cd6:	bf00      	nop
 8005cd8:	200004dc 	.word	0x200004dc

08005cdc <__malloc_unlock>:
 8005cdc:	4801      	ldr	r0, [pc, #4]	@ (8005ce4 <__malloc_unlock+0x8>)
 8005cde:	f7ff b8a3 	b.w	8004e28 <__retarget_lock_release_recursive>
 8005ce2:	bf00      	nop
 8005ce4:	200004dc 	.word	0x200004dc

08005ce8 <_Balloc>:
 8005ce8:	b570      	push	{r4, r5, r6, lr}
 8005cea:	69c6      	ldr	r6, [r0, #28]
 8005cec:	4604      	mov	r4, r0
 8005cee:	460d      	mov	r5, r1
 8005cf0:	b976      	cbnz	r6, 8005d10 <_Balloc+0x28>
 8005cf2:	2010      	movs	r0, #16
 8005cf4:	f7ff ff42 	bl	8005b7c <malloc>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	61e0      	str	r0, [r4, #28]
 8005cfc:	b920      	cbnz	r0, 8005d08 <_Balloc+0x20>
 8005cfe:	4b18      	ldr	r3, [pc, #96]	@ (8005d60 <_Balloc+0x78>)
 8005d00:	4818      	ldr	r0, [pc, #96]	@ (8005d64 <_Balloc+0x7c>)
 8005d02:	216b      	movs	r1, #107	@ 0x6b
 8005d04:	f001 ff4c 	bl	8007ba0 <__assert_func>
 8005d08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d0c:	6006      	str	r6, [r0, #0]
 8005d0e:	60c6      	str	r6, [r0, #12]
 8005d10:	69e6      	ldr	r6, [r4, #28]
 8005d12:	68f3      	ldr	r3, [r6, #12]
 8005d14:	b183      	cbz	r3, 8005d38 <_Balloc+0x50>
 8005d16:	69e3      	ldr	r3, [r4, #28]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005d1e:	b9b8      	cbnz	r0, 8005d50 <_Balloc+0x68>
 8005d20:	2101      	movs	r1, #1
 8005d22:	fa01 f605 	lsl.w	r6, r1, r5
 8005d26:	1d72      	adds	r2, r6, #5
 8005d28:	0092      	lsls	r2, r2, #2
 8005d2a:	4620      	mov	r0, r4
 8005d2c:	f001 ff56 	bl	8007bdc <_calloc_r>
 8005d30:	b160      	cbz	r0, 8005d4c <_Balloc+0x64>
 8005d32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005d36:	e00e      	b.n	8005d56 <_Balloc+0x6e>
 8005d38:	2221      	movs	r2, #33	@ 0x21
 8005d3a:	2104      	movs	r1, #4
 8005d3c:	4620      	mov	r0, r4
 8005d3e:	f001 ff4d 	bl	8007bdc <_calloc_r>
 8005d42:	69e3      	ldr	r3, [r4, #28]
 8005d44:	60f0      	str	r0, [r6, #12]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e4      	bne.n	8005d16 <_Balloc+0x2e>
 8005d4c:	2000      	movs	r0, #0
 8005d4e:	bd70      	pop	{r4, r5, r6, pc}
 8005d50:	6802      	ldr	r2, [r0, #0]
 8005d52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005d56:	2300      	movs	r3, #0
 8005d58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005d5c:	e7f7      	b.n	8005d4e <_Balloc+0x66>
 8005d5e:	bf00      	nop
 8005d60:	0800859a 	.word	0x0800859a
 8005d64:	0800861a 	.word	0x0800861a

08005d68 <_Bfree>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	69c6      	ldr	r6, [r0, #28]
 8005d6c:	4605      	mov	r5, r0
 8005d6e:	460c      	mov	r4, r1
 8005d70:	b976      	cbnz	r6, 8005d90 <_Bfree+0x28>
 8005d72:	2010      	movs	r0, #16
 8005d74:	f7ff ff02 	bl	8005b7c <malloc>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	61e8      	str	r0, [r5, #28]
 8005d7c:	b920      	cbnz	r0, 8005d88 <_Bfree+0x20>
 8005d7e:	4b09      	ldr	r3, [pc, #36]	@ (8005da4 <_Bfree+0x3c>)
 8005d80:	4809      	ldr	r0, [pc, #36]	@ (8005da8 <_Bfree+0x40>)
 8005d82:	218f      	movs	r1, #143	@ 0x8f
 8005d84:	f001 ff0c 	bl	8007ba0 <__assert_func>
 8005d88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005d8c:	6006      	str	r6, [r0, #0]
 8005d8e:	60c6      	str	r6, [r0, #12]
 8005d90:	b13c      	cbz	r4, 8005da2 <_Bfree+0x3a>
 8005d92:	69eb      	ldr	r3, [r5, #28]
 8005d94:	6862      	ldr	r2, [r4, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d9c:	6021      	str	r1, [r4, #0]
 8005d9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005da2:	bd70      	pop	{r4, r5, r6, pc}
 8005da4:	0800859a 	.word	0x0800859a
 8005da8:	0800861a 	.word	0x0800861a

08005dac <__multadd>:
 8005dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005db0:	690d      	ldr	r5, [r1, #16]
 8005db2:	4607      	mov	r7, r0
 8005db4:	460c      	mov	r4, r1
 8005db6:	461e      	mov	r6, r3
 8005db8:	f101 0c14 	add.w	ip, r1, #20
 8005dbc:	2000      	movs	r0, #0
 8005dbe:	f8dc 3000 	ldr.w	r3, [ip]
 8005dc2:	b299      	uxth	r1, r3
 8005dc4:	fb02 6101 	mla	r1, r2, r1, r6
 8005dc8:	0c1e      	lsrs	r6, r3, #16
 8005dca:	0c0b      	lsrs	r3, r1, #16
 8005dcc:	fb02 3306 	mla	r3, r2, r6, r3
 8005dd0:	b289      	uxth	r1, r1
 8005dd2:	3001      	adds	r0, #1
 8005dd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005dd8:	4285      	cmp	r5, r0
 8005dda:	f84c 1b04 	str.w	r1, [ip], #4
 8005dde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005de2:	dcec      	bgt.n	8005dbe <__multadd+0x12>
 8005de4:	b30e      	cbz	r6, 8005e2a <__multadd+0x7e>
 8005de6:	68a3      	ldr	r3, [r4, #8]
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dc19      	bgt.n	8005e20 <__multadd+0x74>
 8005dec:	6861      	ldr	r1, [r4, #4]
 8005dee:	4638      	mov	r0, r7
 8005df0:	3101      	adds	r1, #1
 8005df2:	f7ff ff79 	bl	8005ce8 <_Balloc>
 8005df6:	4680      	mov	r8, r0
 8005df8:	b928      	cbnz	r0, 8005e06 <__multadd+0x5a>
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8005e30 <__multadd+0x84>)
 8005dfe:	480d      	ldr	r0, [pc, #52]	@ (8005e34 <__multadd+0x88>)
 8005e00:	21ba      	movs	r1, #186	@ 0xba
 8005e02:	f001 fecd 	bl	8007ba0 <__assert_func>
 8005e06:	6922      	ldr	r2, [r4, #16]
 8005e08:	3202      	adds	r2, #2
 8005e0a:	f104 010c 	add.w	r1, r4, #12
 8005e0e:	0092      	lsls	r2, r2, #2
 8005e10:	300c      	adds	r0, #12
 8005e12:	f001 fead 	bl	8007b70 <memcpy>
 8005e16:	4621      	mov	r1, r4
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff ffa5 	bl	8005d68 <_Bfree>
 8005e1e:	4644      	mov	r4, r8
 8005e20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005e24:	3501      	adds	r5, #1
 8005e26:	615e      	str	r6, [r3, #20]
 8005e28:	6125      	str	r5, [r4, #16]
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e30:	08008609 	.word	0x08008609
 8005e34:	0800861a 	.word	0x0800861a

08005e38 <__s2b>:
 8005e38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	4615      	mov	r5, r2
 8005e40:	461f      	mov	r7, r3
 8005e42:	2209      	movs	r2, #9
 8005e44:	3308      	adds	r3, #8
 8005e46:	4606      	mov	r6, r0
 8005e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	2201      	movs	r2, #1
 8005e50:	429a      	cmp	r2, r3
 8005e52:	db09      	blt.n	8005e68 <__s2b+0x30>
 8005e54:	4630      	mov	r0, r6
 8005e56:	f7ff ff47 	bl	8005ce8 <_Balloc>
 8005e5a:	b940      	cbnz	r0, 8005e6e <__s2b+0x36>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	4b19      	ldr	r3, [pc, #100]	@ (8005ec4 <__s2b+0x8c>)
 8005e60:	4819      	ldr	r0, [pc, #100]	@ (8005ec8 <__s2b+0x90>)
 8005e62:	21d3      	movs	r1, #211	@ 0xd3
 8005e64:	f001 fe9c 	bl	8007ba0 <__assert_func>
 8005e68:	0052      	lsls	r2, r2, #1
 8005e6a:	3101      	adds	r1, #1
 8005e6c:	e7f0      	b.n	8005e50 <__s2b+0x18>
 8005e6e:	9b08      	ldr	r3, [sp, #32]
 8005e70:	6143      	str	r3, [r0, #20]
 8005e72:	2d09      	cmp	r5, #9
 8005e74:	f04f 0301 	mov.w	r3, #1
 8005e78:	6103      	str	r3, [r0, #16]
 8005e7a:	dd16      	ble.n	8005eaa <__s2b+0x72>
 8005e7c:	f104 0909 	add.w	r9, r4, #9
 8005e80:	46c8      	mov	r8, r9
 8005e82:	442c      	add	r4, r5
 8005e84:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005e88:	4601      	mov	r1, r0
 8005e8a:	3b30      	subs	r3, #48	@ 0x30
 8005e8c:	220a      	movs	r2, #10
 8005e8e:	4630      	mov	r0, r6
 8005e90:	f7ff ff8c 	bl	8005dac <__multadd>
 8005e94:	45a0      	cmp	r8, r4
 8005e96:	d1f5      	bne.n	8005e84 <__s2b+0x4c>
 8005e98:	f1a5 0408 	sub.w	r4, r5, #8
 8005e9c:	444c      	add	r4, r9
 8005e9e:	1b2d      	subs	r5, r5, r4
 8005ea0:	1963      	adds	r3, r4, r5
 8005ea2:	42bb      	cmp	r3, r7
 8005ea4:	db04      	blt.n	8005eb0 <__s2b+0x78>
 8005ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eaa:	340a      	adds	r4, #10
 8005eac:	2509      	movs	r5, #9
 8005eae:	e7f6      	b.n	8005e9e <__s2b+0x66>
 8005eb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005eb4:	4601      	mov	r1, r0
 8005eb6:	3b30      	subs	r3, #48	@ 0x30
 8005eb8:	220a      	movs	r2, #10
 8005eba:	4630      	mov	r0, r6
 8005ebc:	f7ff ff76 	bl	8005dac <__multadd>
 8005ec0:	e7ee      	b.n	8005ea0 <__s2b+0x68>
 8005ec2:	bf00      	nop
 8005ec4:	08008609 	.word	0x08008609
 8005ec8:	0800861a 	.word	0x0800861a

08005ecc <__hi0bits>:
 8005ecc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	bf36      	itet	cc
 8005ed4:	0403      	lslcc	r3, r0, #16
 8005ed6:	2000      	movcs	r0, #0
 8005ed8:	2010      	movcc	r0, #16
 8005eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005ede:	bf3c      	itt	cc
 8005ee0:	021b      	lslcc	r3, r3, #8
 8005ee2:	3008      	addcc	r0, #8
 8005ee4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005ee8:	bf3c      	itt	cc
 8005eea:	011b      	lslcc	r3, r3, #4
 8005eec:	3004      	addcc	r0, #4
 8005eee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ef2:	bf3c      	itt	cc
 8005ef4:	009b      	lslcc	r3, r3, #2
 8005ef6:	3002      	addcc	r0, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	db05      	blt.n	8005f08 <__hi0bits+0x3c>
 8005efc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005f00:	f100 0001 	add.w	r0, r0, #1
 8005f04:	bf08      	it	eq
 8005f06:	2020      	moveq	r0, #32
 8005f08:	4770      	bx	lr

08005f0a <__lo0bits>:
 8005f0a:	6803      	ldr	r3, [r0, #0]
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	f013 0007 	ands.w	r0, r3, #7
 8005f12:	d00b      	beq.n	8005f2c <__lo0bits+0x22>
 8005f14:	07d9      	lsls	r1, r3, #31
 8005f16:	d421      	bmi.n	8005f5c <__lo0bits+0x52>
 8005f18:	0798      	lsls	r0, r3, #30
 8005f1a:	bf49      	itett	mi
 8005f1c:	085b      	lsrmi	r3, r3, #1
 8005f1e:	089b      	lsrpl	r3, r3, #2
 8005f20:	2001      	movmi	r0, #1
 8005f22:	6013      	strmi	r3, [r2, #0]
 8005f24:	bf5c      	itt	pl
 8005f26:	6013      	strpl	r3, [r2, #0]
 8005f28:	2002      	movpl	r0, #2
 8005f2a:	4770      	bx	lr
 8005f2c:	b299      	uxth	r1, r3
 8005f2e:	b909      	cbnz	r1, 8005f34 <__lo0bits+0x2a>
 8005f30:	0c1b      	lsrs	r3, r3, #16
 8005f32:	2010      	movs	r0, #16
 8005f34:	b2d9      	uxtb	r1, r3
 8005f36:	b909      	cbnz	r1, 8005f3c <__lo0bits+0x32>
 8005f38:	3008      	adds	r0, #8
 8005f3a:	0a1b      	lsrs	r3, r3, #8
 8005f3c:	0719      	lsls	r1, r3, #28
 8005f3e:	bf04      	itt	eq
 8005f40:	091b      	lsreq	r3, r3, #4
 8005f42:	3004      	addeq	r0, #4
 8005f44:	0799      	lsls	r1, r3, #30
 8005f46:	bf04      	itt	eq
 8005f48:	089b      	lsreq	r3, r3, #2
 8005f4a:	3002      	addeq	r0, #2
 8005f4c:	07d9      	lsls	r1, r3, #31
 8005f4e:	d403      	bmi.n	8005f58 <__lo0bits+0x4e>
 8005f50:	085b      	lsrs	r3, r3, #1
 8005f52:	f100 0001 	add.w	r0, r0, #1
 8005f56:	d003      	beq.n	8005f60 <__lo0bits+0x56>
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4770      	bx	lr
 8005f5c:	2000      	movs	r0, #0
 8005f5e:	4770      	bx	lr
 8005f60:	2020      	movs	r0, #32
 8005f62:	4770      	bx	lr

08005f64 <__i2b>:
 8005f64:	b510      	push	{r4, lr}
 8005f66:	460c      	mov	r4, r1
 8005f68:	2101      	movs	r1, #1
 8005f6a:	f7ff febd 	bl	8005ce8 <_Balloc>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	b928      	cbnz	r0, 8005f7e <__i2b+0x1a>
 8005f72:	4b05      	ldr	r3, [pc, #20]	@ (8005f88 <__i2b+0x24>)
 8005f74:	4805      	ldr	r0, [pc, #20]	@ (8005f8c <__i2b+0x28>)
 8005f76:	f240 1145 	movw	r1, #325	@ 0x145
 8005f7a:	f001 fe11 	bl	8007ba0 <__assert_func>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	6144      	str	r4, [r0, #20]
 8005f82:	6103      	str	r3, [r0, #16]
 8005f84:	bd10      	pop	{r4, pc}
 8005f86:	bf00      	nop
 8005f88:	08008609 	.word	0x08008609
 8005f8c:	0800861a 	.word	0x0800861a

08005f90 <__multiply>:
 8005f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f94:	4617      	mov	r7, r2
 8005f96:	690a      	ldr	r2, [r1, #16]
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	bfa8      	it	ge
 8005f9e:	463b      	movge	r3, r7
 8005fa0:	4689      	mov	r9, r1
 8005fa2:	bfa4      	itt	ge
 8005fa4:	460f      	movge	r7, r1
 8005fa6:	4699      	movge	r9, r3
 8005fa8:	693d      	ldr	r5, [r7, #16]
 8005faa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	eb05 060a 	add.w	r6, r5, sl
 8005fb6:	42b3      	cmp	r3, r6
 8005fb8:	b085      	sub	sp, #20
 8005fba:	bfb8      	it	lt
 8005fbc:	3101      	addlt	r1, #1
 8005fbe:	f7ff fe93 	bl	8005ce8 <_Balloc>
 8005fc2:	b930      	cbnz	r0, 8005fd2 <__multiply+0x42>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	4b41      	ldr	r3, [pc, #260]	@ (80060cc <__multiply+0x13c>)
 8005fc8:	4841      	ldr	r0, [pc, #260]	@ (80060d0 <__multiply+0x140>)
 8005fca:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8005fce:	f001 fde7 	bl	8007ba0 <__assert_func>
 8005fd2:	f100 0414 	add.w	r4, r0, #20
 8005fd6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005fda:	4623      	mov	r3, r4
 8005fdc:	2200      	movs	r2, #0
 8005fde:	4573      	cmp	r3, lr
 8005fe0:	d320      	bcc.n	8006024 <__multiply+0x94>
 8005fe2:	f107 0814 	add.w	r8, r7, #20
 8005fe6:	f109 0114 	add.w	r1, r9, #20
 8005fea:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005fee:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8005ff2:	9302      	str	r3, [sp, #8]
 8005ff4:	1beb      	subs	r3, r5, r7
 8005ff6:	3b15      	subs	r3, #21
 8005ff8:	f023 0303 	bic.w	r3, r3, #3
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	3715      	adds	r7, #21
 8006000:	42bd      	cmp	r5, r7
 8006002:	bf38      	it	cc
 8006004:	2304      	movcc	r3, #4
 8006006:	9301      	str	r3, [sp, #4]
 8006008:	9b02      	ldr	r3, [sp, #8]
 800600a:	9103      	str	r1, [sp, #12]
 800600c:	428b      	cmp	r3, r1
 800600e:	d80c      	bhi.n	800602a <__multiply+0x9a>
 8006010:	2e00      	cmp	r6, #0
 8006012:	dd03      	ble.n	800601c <__multiply+0x8c>
 8006014:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006018:	2b00      	cmp	r3, #0
 800601a:	d055      	beq.n	80060c8 <__multiply+0x138>
 800601c:	6106      	str	r6, [r0, #16]
 800601e:	b005      	add	sp, #20
 8006020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006024:	f843 2b04 	str.w	r2, [r3], #4
 8006028:	e7d9      	b.n	8005fde <__multiply+0x4e>
 800602a:	f8b1 a000 	ldrh.w	sl, [r1]
 800602e:	f1ba 0f00 	cmp.w	sl, #0
 8006032:	d01f      	beq.n	8006074 <__multiply+0xe4>
 8006034:	46c4      	mov	ip, r8
 8006036:	46a1      	mov	r9, r4
 8006038:	2700      	movs	r7, #0
 800603a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800603e:	f8d9 3000 	ldr.w	r3, [r9]
 8006042:	fa1f fb82 	uxth.w	fp, r2
 8006046:	b29b      	uxth	r3, r3
 8006048:	fb0a 330b 	mla	r3, sl, fp, r3
 800604c:	443b      	add	r3, r7
 800604e:	f8d9 7000 	ldr.w	r7, [r9]
 8006052:	0c12      	lsrs	r2, r2, #16
 8006054:	0c3f      	lsrs	r7, r7, #16
 8006056:	fb0a 7202 	mla	r2, sl, r2, r7
 800605a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800605e:	b29b      	uxth	r3, r3
 8006060:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006064:	4565      	cmp	r5, ip
 8006066:	f849 3b04 	str.w	r3, [r9], #4
 800606a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800606e:	d8e4      	bhi.n	800603a <__multiply+0xaa>
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	50e7      	str	r7, [r4, r3]
 8006074:	9b03      	ldr	r3, [sp, #12]
 8006076:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800607a:	3104      	adds	r1, #4
 800607c:	f1b9 0f00 	cmp.w	r9, #0
 8006080:	d020      	beq.n	80060c4 <__multiply+0x134>
 8006082:	6823      	ldr	r3, [r4, #0]
 8006084:	4647      	mov	r7, r8
 8006086:	46a4      	mov	ip, r4
 8006088:	f04f 0a00 	mov.w	sl, #0
 800608c:	f8b7 b000 	ldrh.w	fp, [r7]
 8006090:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006094:	fb09 220b 	mla	r2, r9, fp, r2
 8006098:	4452      	add	r2, sl
 800609a:	b29b      	uxth	r3, r3
 800609c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060a0:	f84c 3b04 	str.w	r3, [ip], #4
 80060a4:	f857 3b04 	ldr.w	r3, [r7], #4
 80060a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060ac:	f8bc 3000 	ldrh.w	r3, [ip]
 80060b0:	fb09 330a 	mla	r3, r9, sl, r3
 80060b4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80060b8:	42bd      	cmp	r5, r7
 80060ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80060be:	d8e5      	bhi.n	800608c <__multiply+0xfc>
 80060c0:	9a01      	ldr	r2, [sp, #4]
 80060c2:	50a3      	str	r3, [r4, r2]
 80060c4:	3404      	adds	r4, #4
 80060c6:	e79f      	b.n	8006008 <__multiply+0x78>
 80060c8:	3e01      	subs	r6, #1
 80060ca:	e7a1      	b.n	8006010 <__multiply+0x80>
 80060cc:	08008609 	.word	0x08008609
 80060d0:	0800861a 	.word	0x0800861a

080060d4 <__pow5mult>:
 80060d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060d8:	4615      	mov	r5, r2
 80060da:	f012 0203 	ands.w	r2, r2, #3
 80060de:	4607      	mov	r7, r0
 80060e0:	460e      	mov	r6, r1
 80060e2:	d007      	beq.n	80060f4 <__pow5mult+0x20>
 80060e4:	4c25      	ldr	r4, [pc, #148]	@ (800617c <__pow5mult+0xa8>)
 80060e6:	3a01      	subs	r2, #1
 80060e8:	2300      	movs	r3, #0
 80060ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80060ee:	f7ff fe5d 	bl	8005dac <__multadd>
 80060f2:	4606      	mov	r6, r0
 80060f4:	10ad      	asrs	r5, r5, #2
 80060f6:	d03d      	beq.n	8006174 <__pow5mult+0xa0>
 80060f8:	69fc      	ldr	r4, [r7, #28]
 80060fa:	b97c      	cbnz	r4, 800611c <__pow5mult+0x48>
 80060fc:	2010      	movs	r0, #16
 80060fe:	f7ff fd3d 	bl	8005b7c <malloc>
 8006102:	4602      	mov	r2, r0
 8006104:	61f8      	str	r0, [r7, #28]
 8006106:	b928      	cbnz	r0, 8006114 <__pow5mult+0x40>
 8006108:	4b1d      	ldr	r3, [pc, #116]	@ (8006180 <__pow5mult+0xac>)
 800610a:	481e      	ldr	r0, [pc, #120]	@ (8006184 <__pow5mult+0xb0>)
 800610c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006110:	f001 fd46 	bl	8007ba0 <__assert_func>
 8006114:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006118:	6004      	str	r4, [r0, #0]
 800611a:	60c4      	str	r4, [r0, #12]
 800611c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006120:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006124:	b94c      	cbnz	r4, 800613a <__pow5mult+0x66>
 8006126:	f240 2171 	movw	r1, #625	@ 0x271
 800612a:	4638      	mov	r0, r7
 800612c:	f7ff ff1a 	bl	8005f64 <__i2b>
 8006130:	2300      	movs	r3, #0
 8006132:	f8c8 0008 	str.w	r0, [r8, #8]
 8006136:	4604      	mov	r4, r0
 8006138:	6003      	str	r3, [r0, #0]
 800613a:	f04f 0900 	mov.w	r9, #0
 800613e:	07eb      	lsls	r3, r5, #31
 8006140:	d50a      	bpl.n	8006158 <__pow5mult+0x84>
 8006142:	4631      	mov	r1, r6
 8006144:	4622      	mov	r2, r4
 8006146:	4638      	mov	r0, r7
 8006148:	f7ff ff22 	bl	8005f90 <__multiply>
 800614c:	4631      	mov	r1, r6
 800614e:	4680      	mov	r8, r0
 8006150:	4638      	mov	r0, r7
 8006152:	f7ff fe09 	bl	8005d68 <_Bfree>
 8006156:	4646      	mov	r6, r8
 8006158:	106d      	asrs	r5, r5, #1
 800615a:	d00b      	beq.n	8006174 <__pow5mult+0xa0>
 800615c:	6820      	ldr	r0, [r4, #0]
 800615e:	b938      	cbnz	r0, 8006170 <__pow5mult+0x9c>
 8006160:	4622      	mov	r2, r4
 8006162:	4621      	mov	r1, r4
 8006164:	4638      	mov	r0, r7
 8006166:	f7ff ff13 	bl	8005f90 <__multiply>
 800616a:	6020      	str	r0, [r4, #0]
 800616c:	f8c0 9000 	str.w	r9, [r0]
 8006170:	4604      	mov	r4, r0
 8006172:	e7e4      	b.n	800613e <__pow5mult+0x6a>
 8006174:	4630      	mov	r0, r6
 8006176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617a:	bf00      	nop
 800617c:	0800872c 	.word	0x0800872c
 8006180:	0800859a 	.word	0x0800859a
 8006184:	0800861a 	.word	0x0800861a

08006188 <__lshift>:
 8006188:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800618c:	460c      	mov	r4, r1
 800618e:	6849      	ldr	r1, [r1, #4]
 8006190:	6923      	ldr	r3, [r4, #16]
 8006192:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006196:	68a3      	ldr	r3, [r4, #8]
 8006198:	4607      	mov	r7, r0
 800619a:	4691      	mov	r9, r2
 800619c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061a0:	f108 0601 	add.w	r6, r8, #1
 80061a4:	42b3      	cmp	r3, r6
 80061a6:	db0b      	blt.n	80061c0 <__lshift+0x38>
 80061a8:	4638      	mov	r0, r7
 80061aa:	f7ff fd9d 	bl	8005ce8 <_Balloc>
 80061ae:	4605      	mov	r5, r0
 80061b0:	b948      	cbnz	r0, 80061c6 <__lshift+0x3e>
 80061b2:	4602      	mov	r2, r0
 80061b4:	4b28      	ldr	r3, [pc, #160]	@ (8006258 <__lshift+0xd0>)
 80061b6:	4829      	ldr	r0, [pc, #164]	@ (800625c <__lshift+0xd4>)
 80061b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80061bc:	f001 fcf0 	bl	8007ba0 <__assert_func>
 80061c0:	3101      	adds	r1, #1
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	e7ee      	b.n	80061a4 <__lshift+0x1c>
 80061c6:	2300      	movs	r3, #0
 80061c8:	f100 0114 	add.w	r1, r0, #20
 80061cc:	f100 0210 	add.w	r2, r0, #16
 80061d0:	4618      	mov	r0, r3
 80061d2:	4553      	cmp	r3, sl
 80061d4:	db33      	blt.n	800623e <__lshift+0xb6>
 80061d6:	6920      	ldr	r0, [r4, #16]
 80061d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061dc:	f104 0314 	add.w	r3, r4, #20
 80061e0:	f019 091f 	ands.w	r9, r9, #31
 80061e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80061e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80061ec:	d02b      	beq.n	8006246 <__lshift+0xbe>
 80061ee:	f1c9 0e20 	rsb	lr, r9, #32
 80061f2:	468a      	mov	sl, r1
 80061f4:	2200      	movs	r2, #0
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	fa00 f009 	lsl.w	r0, r0, r9
 80061fc:	4310      	orrs	r0, r2
 80061fe:	f84a 0b04 	str.w	r0, [sl], #4
 8006202:	f853 2b04 	ldr.w	r2, [r3], #4
 8006206:	459c      	cmp	ip, r3
 8006208:	fa22 f20e 	lsr.w	r2, r2, lr
 800620c:	d8f3      	bhi.n	80061f6 <__lshift+0x6e>
 800620e:	ebac 0304 	sub.w	r3, ip, r4
 8006212:	3b15      	subs	r3, #21
 8006214:	f023 0303 	bic.w	r3, r3, #3
 8006218:	3304      	adds	r3, #4
 800621a:	f104 0015 	add.w	r0, r4, #21
 800621e:	4560      	cmp	r0, ip
 8006220:	bf88      	it	hi
 8006222:	2304      	movhi	r3, #4
 8006224:	50ca      	str	r2, [r1, r3]
 8006226:	b10a      	cbz	r2, 800622c <__lshift+0xa4>
 8006228:	f108 0602 	add.w	r6, r8, #2
 800622c:	3e01      	subs	r6, #1
 800622e:	4638      	mov	r0, r7
 8006230:	612e      	str	r6, [r5, #16]
 8006232:	4621      	mov	r1, r4
 8006234:	f7ff fd98 	bl	8005d68 <_Bfree>
 8006238:	4628      	mov	r0, r5
 800623a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006242:	3301      	adds	r3, #1
 8006244:	e7c5      	b.n	80061d2 <__lshift+0x4a>
 8006246:	3904      	subs	r1, #4
 8006248:	f853 2b04 	ldr.w	r2, [r3], #4
 800624c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006250:	459c      	cmp	ip, r3
 8006252:	d8f9      	bhi.n	8006248 <__lshift+0xc0>
 8006254:	e7ea      	b.n	800622c <__lshift+0xa4>
 8006256:	bf00      	nop
 8006258:	08008609 	.word	0x08008609
 800625c:	0800861a 	.word	0x0800861a

08006260 <__mcmp>:
 8006260:	690a      	ldr	r2, [r1, #16]
 8006262:	4603      	mov	r3, r0
 8006264:	6900      	ldr	r0, [r0, #16]
 8006266:	1a80      	subs	r0, r0, r2
 8006268:	b530      	push	{r4, r5, lr}
 800626a:	d10e      	bne.n	800628a <__mcmp+0x2a>
 800626c:	3314      	adds	r3, #20
 800626e:	3114      	adds	r1, #20
 8006270:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006274:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006278:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800627c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006280:	4295      	cmp	r5, r2
 8006282:	d003      	beq.n	800628c <__mcmp+0x2c>
 8006284:	d205      	bcs.n	8006292 <__mcmp+0x32>
 8006286:	f04f 30ff 	mov.w	r0, #4294967295
 800628a:	bd30      	pop	{r4, r5, pc}
 800628c:	42a3      	cmp	r3, r4
 800628e:	d3f3      	bcc.n	8006278 <__mcmp+0x18>
 8006290:	e7fb      	b.n	800628a <__mcmp+0x2a>
 8006292:	2001      	movs	r0, #1
 8006294:	e7f9      	b.n	800628a <__mcmp+0x2a>
	...

08006298 <__mdiff>:
 8006298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800629c:	4689      	mov	r9, r1
 800629e:	4606      	mov	r6, r0
 80062a0:	4611      	mov	r1, r2
 80062a2:	4648      	mov	r0, r9
 80062a4:	4614      	mov	r4, r2
 80062a6:	f7ff ffdb 	bl	8006260 <__mcmp>
 80062aa:	1e05      	subs	r5, r0, #0
 80062ac:	d112      	bne.n	80062d4 <__mdiff+0x3c>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff fd19 	bl	8005ce8 <_Balloc>
 80062b6:	4602      	mov	r2, r0
 80062b8:	b928      	cbnz	r0, 80062c6 <__mdiff+0x2e>
 80062ba:	4b3f      	ldr	r3, [pc, #252]	@ (80063b8 <__mdiff+0x120>)
 80062bc:	f240 2137 	movw	r1, #567	@ 0x237
 80062c0:	483e      	ldr	r0, [pc, #248]	@ (80063bc <__mdiff+0x124>)
 80062c2:	f001 fc6d 	bl	8007ba0 <__assert_func>
 80062c6:	2301      	movs	r3, #1
 80062c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80062cc:	4610      	mov	r0, r2
 80062ce:	b003      	add	sp, #12
 80062d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d4:	bfbc      	itt	lt
 80062d6:	464b      	movlt	r3, r9
 80062d8:	46a1      	movlt	r9, r4
 80062da:	4630      	mov	r0, r6
 80062dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80062e0:	bfba      	itte	lt
 80062e2:	461c      	movlt	r4, r3
 80062e4:	2501      	movlt	r5, #1
 80062e6:	2500      	movge	r5, #0
 80062e8:	f7ff fcfe 	bl	8005ce8 <_Balloc>
 80062ec:	4602      	mov	r2, r0
 80062ee:	b918      	cbnz	r0, 80062f8 <__mdiff+0x60>
 80062f0:	4b31      	ldr	r3, [pc, #196]	@ (80063b8 <__mdiff+0x120>)
 80062f2:	f240 2145 	movw	r1, #581	@ 0x245
 80062f6:	e7e3      	b.n	80062c0 <__mdiff+0x28>
 80062f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80062fc:	6926      	ldr	r6, [r4, #16]
 80062fe:	60c5      	str	r5, [r0, #12]
 8006300:	f109 0310 	add.w	r3, r9, #16
 8006304:	f109 0514 	add.w	r5, r9, #20
 8006308:	f104 0e14 	add.w	lr, r4, #20
 800630c:	f100 0b14 	add.w	fp, r0, #20
 8006310:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006314:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006318:	9301      	str	r3, [sp, #4]
 800631a:	46d9      	mov	r9, fp
 800631c:	f04f 0c00 	mov.w	ip, #0
 8006320:	9b01      	ldr	r3, [sp, #4]
 8006322:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006326:	f853 af04 	ldr.w	sl, [r3, #4]!
 800632a:	9301      	str	r3, [sp, #4]
 800632c:	fa1f f38a 	uxth.w	r3, sl
 8006330:	4619      	mov	r1, r3
 8006332:	b283      	uxth	r3, r0
 8006334:	1acb      	subs	r3, r1, r3
 8006336:	0c00      	lsrs	r0, r0, #16
 8006338:	4463      	add	r3, ip
 800633a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800633e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006342:	b29b      	uxth	r3, r3
 8006344:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006348:	4576      	cmp	r6, lr
 800634a:	f849 3b04 	str.w	r3, [r9], #4
 800634e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006352:	d8e5      	bhi.n	8006320 <__mdiff+0x88>
 8006354:	1b33      	subs	r3, r6, r4
 8006356:	3b15      	subs	r3, #21
 8006358:	f023 0303 	bic.w	r3, r3, #3
 800635c:	3415      	adds	r4, #21
 800635e:	3304      	adds	r3, #4
 8006360:	42a6      	cmp	r6, r4
 8006362:	bf38      	it	cc
 8006364:	2304      	movcc	r3, #4
 8006366:	441d      	add	r5, r3
 8006368:	445b      	add	r3, fp
 800636a:	461e      	mov	r6, r3
 800636c:	462c      	mov	r4, r5
 800636e:	4544      	cmp	r4, r8
 8006370:	d30e      	bcc.n	8006390 <__mdiff+0xf8>
 8006372:	f108 0103 	add.w	r1, r8, #3
 8006376:	1b49      	subs	r1, r1, r5
 8006378:	f021 0103 	bic.w	r1, r1, #3
 800637c:	3d03      	subs	r5, #3
 800637e:	45a8      	cmp	r8, r5
 8006380:	bf38      	it	cc
 8006382:	2100      	movcc	r1, #0
 8006384:	440b      	add	r3, r1
 8006386:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800638a:	b191      	cbz	r1, 80063b2 <__mdiff+0x11a>
 800638c:	6117      	str	r7, [r2, #16]
 800638e:	e79d      	b.n	80062cc <__mdiff+0x34>
 8006390:	f854 1b04 	ldr.w	r1, [r4], #4
 8006394:	46e6      	mov	lr, ip
 8006396:	0c08      	lsrs	r0, r1, #16
 8006398:	fa1c fc81 	uxtah	ip, ip, r1
 800639c:	4471      	add	r1, lr
 800639e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80063a2:	b289      	uxth	r1, r1
 80063a4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80063a8:	f846 1b04 	str.w	r1, [r6], #4
 80063ac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80063b0:	e7dd      	b.n	800636e <__mdiff+0xd6>
 80063b2:	3f01      	subs	r7, #1
 80063b4:	e7e7      	b.n	8006386 <__mdiff+0xee>
 80063b6:	bf00      	nop
 80063b8:	08008609 	.word	0x08008609
 80063bc:	0800861a 	.word	0x0800861a

080063c0 <__ulp>:
 80063c0:	b082      	sub	sp, #8
 80063c2:	ed8d 0b00 	vstr	d0, [sp]
 80063c6:	9a01      	ldr	r2, [sp, #4]
 80063c8:	4b0f      	ldr	r3, [pc, #60]	@ (8006408 <__ulp+0x48>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	dc08      	bgt.n	80063e6 <__ulp+0x26>
 80063d4:	425b      	negs	r3, r3
 80063d6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80063da:	ea4f 5223 	mov.w	r2, r3, asr #20
 80063de:	da04      	bge.n	80063ea <__ulp+0x2a>
 80063e0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80063e4:	4113      	asrs	r3, r2
 80063e6:	2200      	movs	r2, #0
 80063e8:	e008      	b.n	80063fc <__ulp+0x3c>
 80063ea:	f1a2 0314 	sub.w	r3, r2, #20
 80063ee:	2b1e      	cmp	r3, #30
 80063f0:	bfda      	itte	le
 80063f2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80063f6:	40da      	lsrle	r2, r3
 80063f8:	2201      	movgt	r2, #1
 80063fa:	2300      	movs	r3, #0
 80063fc:	4619      	mov	r1, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	ec41 0b10 	vmov	d0, r0, r1
 8006404:	b002      	add	sp, #8
 8006406:	4770      	bx	lr
 8006408:	7ff00000 	.word	0x7ff00000

0800640c <__b2d>:
 800640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006410:	6906      	ldr	r6, [r0, #16]
 8006412:	f100 0814 	add.w	r8, r0, #20
 8006416:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800641a:	1f37      	subs	r7, r6, #4
 800641c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006420:	4610      	mov	r0, r2
 8006422:	f7ff fd53 	bl	8005ecc <__hi0bits>
 8006426:	f1c0 0320 	rsb	r3, r0, #32
 800642a:	280a      	cmp	r0, #10
 800642c:	600b      	str	r3, [r1, #0]
 800642e:	491b      	ldr	r1, [pc, #108]	@ (800649c <__b2d+0x90>)
 8006430:	dc15      	bgt.n	800645e <__b2d+0x52>
 8006432:	f1c0 0c0b 	rsb	ip, r0, #11
 8006436:	fa22 f30c 	lsr.w	r3, r2, ip
 800643a:	45b8      	cmp	r8, r7
 800643c:	ea43 0501 	orr.w	r5, r3, r1
 8006440:	bf34      	ite	cc
 8006442:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006446:	2300      	movcs	r3, #0
 8006448:	3015      	adds	r0, #21
 800644a:	fa02 f000 	lsl.w	r0, r2, r0
 800644e:	fa23 f30c 	lsr.w	r3, r3, ip
 8006452:	4303      	orrs	r3, r0
 8006454:	461c      	mov	r4, r3
 8006456:	ec45 4b10 	vmov	d0, r4, r5
 800645a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800645e:	45b8      	cmp	r8, r7
 8006460:	bf3a      	itte	cc
 8006462:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006466:	f1a6 0708 	subcc.w	r7, r6, #8
 800646a:	2300      	movcs	r3, #0
 800646c:	380b      	subs	r0, #11
 800646e:	d012      	beq.n	8006496 <__b2d+0x8a>
 8006470:	f1c0 0120 	rsb	r1, r0, #32
 8006474:	fa23 f401 	lsr.w	r4, r3, r1
 8006478:	4082      	lsls	r2, r0
 800647a:	4322      	orrs	r2, r4
 800647c:	4547      	cmp	r7, r8
 800647e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006482:	bf8c      	ite	hi
 8006484:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006488:	2200      	movls	r2, #0
 800648a:	4083      	lsls	r3, r0
 800648c:	40ca      	lsrs	r2, r1
 800648e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006492:	4313      	orrs	r3, r2
 8006494:	e7de      	b.n	8006454 <__b2d+0x48>
 8006496:	ea42 0501 	orr.w	r5, r2, r1
 800649a:	e7db      	b.n	8006454 <__b2d+0x48>
 800649c:	3ff00000 	.word	0x3ff00000

080064a0 <__d2b>:
 80064a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80064a4:	460f      	mov	r7, r1
 80064a6:	2101      	movs	r1, #1
 80064a8:	ec59 8b10 	vmov	r8, r9, d0
 80064ac:	4616      	mov	r6, r2
 80064ae:	f7ff fc1b 	bl	8005ce8 <_Balloc>
 80064b2:	4604      	mov	r4, r0
 80064b4:	b930      	cbnz	r0, 80064c4 <__d2b+0x24>
 80064b6:	4602      	mov	r2, r0
 80064b8:	4b23      	ldr	r3, [pc, #140]	@ (8006548 <__d2b+0xa8>)
 80064ba:	4824      	ldr	r0, [pc, #144]	@ (800654c <__d2b+0xac>)
 80064bc:	f240 310f 	movw	r1, #783	@ 0x30f
 80064c0:	f001 fb6e 	bl	8007ba0 <__assert_func>
 80064c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80064c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80064cc:	b10d      	cbz	r5, 80064d2 <__d2b+0x32>
 80064ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80064d2:	9301      	str	r3, [sp, #4]
 80064d4:	f1b8 0300 	subs.w	r3, r8, #0
 80064d8:	d023      	beq.n	8006522 <__d2b+0x82>
 80064da:	4668      	mov	r0, sp
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	f7ff fd14 	bl	8005f0a <__lo0bits>
 80064e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80064e6:	b1d0      	cbz	r0, 800651e <__d2b+0x7e>
 80064e8:	f1c0 0320 	rsb	r3, r0, #32
 80064ec:	fa02 f303 	lsl.w	r3, r2, r3
 80064f0:	430b      	orrs	r3, r1
 80064f2:	40c2      	lsrs	r2, r0
 80064f4:	6163      	str	r3, [r4, #20]
 80064f6:	9201      	str	r2, [sp, #4]
 80064f8:	9b01      	ldr	r3, [sp, #4]
 80064fa:	61a3      	str	r3, [r4, #24]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	bf0c      	ite	eq
 8006500:	2201      	moveq	r2, #1
 8006502:	2202      	movne	r2, #2
 8006504:	6122      	str	r2, [r4, #16]
 8006506:	b1a5      	cbz	r5, 8006532 <__d2b+0x92>
 8006508:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800650c:	4405      	add	r5, r0
 800650e:	603d      	str	r5, [r7, #0]
 8006510:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006514:	6030      	str	r0, [r6, #0]
 8006516:	4620      	mov	r0, r4
 8006518:	b003      	add	sp, #12
 800651a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800651e:	6161      	str	r1, [r4, #20]
 8006520:	e7ea      	b.n	80064f8 <__d2b+0x58>
 8006522:	a801      	add	r0, sp, #4
 8006524:	f7ff fcf1 	bl	8005f0a <__lo0bits>
 8006528:	9b01      	ldr	r3, [sp, #4]
 800652a:	6163      	str	r3, [r4, #20]
 800652c:	3020      	adds	r0, #32
 800652e:	2201      	movs	r2, #1
 8006530:	e7e8      	b.n	8006504 <__d2b+0x64>
 8006532:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006536:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800653a:	6038      	str	r0, [r7, #0]
 800653c:	6918      	ldr	r0, [r3, #16]
 800653e:	f7ff fcc5 	bl	8005ecc <__hi0bits>
 8006542:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006546:	e7e5      	b.n	8006514 <__d2b+0x74>
 8006548:	08008609 	.word	0x08008609
 800654c:	0800861a 	.word	0x0800861a

08006550 <__ratio>:
 8006550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006554:	b085      	sub	sp, #20
 8006556:	e9cd 1000 	strd	r1, r0, [sp]
 800655a:	a902      	add	r1, sp, #8
 800655c:	f7ff ff56 	bl	800640c <__b2d>
 8006560:	9800      	ldr	r0, [sp, #0]
 8006562:	a903      	add	r1, sp, #12
 8006564:	ec55 4b10 	vmov	r4, r5, d0
 8006568:	f7ff ff50 	bl	800640c <__b2d>
 800656c:	9b01      	ldr	r3, [sp, #4]
 800656e:	6919      	ldr	r1, [r3, #16]
 8006570:	9b00      	ldr	r3, [sp, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	1ac9      	subs	r1, r1, r3
 8006576:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800657a:	1a9b      	subs	r3, r3, r2
 800657c:	ec5b ab10 	vmov	sl, fp, d0
 8006580:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfce      	itee	gt
 8006588:	462a      	movgt	r2, r5
 800658a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800658e:	465a      	movle	r2, fp
 8006590:	462f      	mov	r7, r5
 8006592:	46d9      	mov	r9, fp
 8006594:	bfcc      	ite	gt
 8006596:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800659a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800659e:	464b      	mov	r3, r9
 80065a0:	4652      	mov	r2, sl
 80065a2:	4620      	mov	r0, r4
 80065a4:	4639      	mov	r1, r7
 80065a6:	f7fa f971 	bl	800088c <__aeabi_ddiv>
 80065aa:	ec41 0b10 	vmov	d0, r0, r1
 80065ae:	b005      	add	sp, #20
 80065b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080065b4 <__copybits>:
 80065b4:	3901      	subs	r1, #1
 80065b6:	b570      	push	{r4, r5, r6, lr}
 80065b8:	1149      	asrs	r1, r1, #5
 80065ba:	6914      	ldr	r4, [r2, #16]
 80065bc:	3101      	adds	r1, #1
 80065be:	f102 0314 	add.w	r3, r2, #20
 80065c2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80065c6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80065ca:	1f05      	subs	r5, r0, #4
 80065cc:	42a3      	cmp	r3, r4
 80065ce:	d30c      	bcc.n	80065ea <__copybits+0x36>
 80065d0:	1aa3      	subs	r3, r4, r2
 80065d2:	3b11      	subs	r3, #17
 80065d4:	f023 0303 	bic.w	r3, r3, #3
 80065d8:	3211      	adds	r2, #17
 80065da:	42a2      	cmp	r2, r4
 80065dc:	bf88      	it	hi
 80065de:	2300      	movhi	r3, #0
 80065e0:	4418      	add	r0, r3
 80065e2:	2300      	movs	r3, #0
 80065e4:	4288      	cmp	r0, r1
 80065e6:	d305      	bcc.n	80065f4 <__copybits+0x40>
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	f853 6b04 	ldr.w	r6, [r3], #4
 80065ee:	f845 6f04 	str.w	r6, [r5, #4]!
 80065f2:	e7eb      	b.n	80065cc <__copybits+0x18>
 80065f4:	f840 3b04 	str.w	r3, [r0], #4
 80065f8:	e7f4      	b.n	80065e4 <__copybits+0x30>

080065fa <__any_on>:
 80065fa:	f100 0214 	add.w	r2, r0, #20
 80065fe:	6900      	ldr	r0, [r0, #16]
 8006600:	114b      	asrs	r3, r1, #5
 8006602:	4298      	cmp	r0, r3
 8006604:	b510      	push	{r4, lr}
 8006606:	db11      	blt.n	800662c <__any_on+0x32>
 8006608:	dd0a      	ble.n	8006620 <__any_on+0x26>
 800660a:	f011 011f 	ands.w	r1, r1, #31
 800660e:	d007      	beq.n	8006620 <__any_on+0x26>
 8006610:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006614:	fa24 f001 	lsr.w	r0, r4, r1
 8006618:	fa00 f101 	lsl.w	r1, r0, r1
 800661c:	428c      	cmp	r4, r1
 800661e:	d10b      	bne.n	8006638 <__any_on+0x3e>
 8006620:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006624:	4293      	cmp	r3, r2
 8006626:	d803      	bhi.n	8006630 <__any_on+0x36>
 8006628:	2000      	movs	r0, #0
 800662a:	bd10      	pop	{r4, pc}
 800662c:	4603      	mov	r3, r0
 800662e:	e7f7      	b.n	8006620 <__any_on+0x26>
 8006630:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006634:	2900      	cmp	r1, #0
 8006636:	d0f5      	beq.n	8006624 <__any_on+0x2a>
 8006638:	2001      	movs	r0, #1
 800663a:	e7f6      	b.n	800662a <__any_on+0x30>

0800663c <sulp>:
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4604      	mov	r4, r0
 8006640:	460d      	mov	r5, r1
 8006642:	ec45 4b10 	vmov	d0, r4, r5
 8006646:	4616      	mov	r6, r2
 8006648:	f7ff feba 	bl	80063c0 <__ulp>
 800664c:	ec51 0b10 	vmov	r0, r1, d0
 8006650:	b17e      	cbz	r6, 8006672 <sulp+0x36>
 8006652:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006656:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800665a:	2b00      	cmp	r3, #0
 800665c:	dd09      	ble.n	8006672 <sulp+0x36>
 800665e:	051b      	lsls	r3, r3, #20
 8006660:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006664:	2400      	movs	r4, #0
 8006666:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800666a:	4622      	mov	r2, r4
 800666c:	462b      	mov	r3, r5
 800666e:	f7f9 ffe3 	bl	8000638 <__aeabi_dmul>
 8006672:	ec41 0b10 	vmov	d0, r0, r1
 8006676:	bd70      	pop	{r4, r5, r6, pc}

08006678 <_strtod_l>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	b09f      	sub	sp, #124	@ 0x7c
 800667e:	460c      	mov	r4, r1
 8006680:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006682:	2200      	movs	r2, #0
 8006684:	921a      	str	r2, [sp, #104]	@ 0x68
 8006686:	9005      	str	r0, [sp, #20]
 8006688:	f04f 0a00 	mov.w	sl, #0
 800668c:	f04f 0b00 	mov.w	fp, #0
 8006690:	460a      	mov	r2, r1
 8006692:	9219      	str	r2, [sp, #100]	@ 0x64
 8006694:	7811      	ldrb	r1, [r2, #0]
 8006696:	292b      	cmp	r1, #43	@ 0x2b
 8006698:	d04a      	beq.n	8006730 <_strtod_l+0xb8>
 800669a:	d838      	bhi.n	800670e <_strtod_l+0x96>
 800669c:	290d      	cmp	r1, #13
 800669e:	d832      	bhi.n	8006706 <_strtod_l+0x8e>
 80066a0:	2908      	cmp	r1, #8
 80066a2:	d832      	bhi.n	800670a <_strtod_l+0x92>
 80066a4:	2900      	cmp	r1, #0
 80066a6:	d03b      	beq.n	8006720 <_strtod_l+0xa8>
 80066a8:	2200      	movs	r2, #0
 80066aa:	920e      	str	r2, [sp, #56]	@ 0x38
 80066ac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80066ae:	782a      	ldrb	r2, [r5, #0]
 80066b0:	2a30      	cmp	r2, #48	@ 0x30
 80066b2:	f040 80b2 	bne.w	800681a <_strtod_l+0x1a2>
 80066b6:	786a      	ldrb	r2, [r5, #1]
 80066b8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80066bc:	2a58      	cmp	r2, #88	@ 0x58
 80066be:	d16e      	bne.n	800679e <_strtod_l+0x126>
 80066c0:	9302      	str	r3, [sp, #8]
 80066c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066c4:	9301      	str	r3, [sp, #4]
 80066c6:	ab1a      	add	r3, sp, #104	@ 0x68
 80066c8:	9300      	str	r3, [sp, #0]
 80066ca:	4a8f      	ldr	r2, [pc, #572]	@ (8006908 <_strtod_l+0x290>)
 80066cc:	9805      	ldr	r0, [sp, #20]
 80066ce:	ab1b      	add	r3, sp, #108	@ 0x6c
 80066d0:	a919      	add	r1, sp, #100	@ 0x64
 80066d2:	f001 faff 	bl	8007cd4 <__gethex>
 80066d6:	f010 060f 	ands.w	r6, r0, #15
 80066da:	4604      	mov	r4, r0
 80066dc:	d005      	beq.n	80066ea <_strtod_l+0x72>
 80066de:	2e06      	cmp	r6, #6
 80066e0:	d128      	bne.n	8006734 <_strtod_l+0xbc>
 80066e2:	3501      	adds	r5, #1
 80066e4:	2300      	movs	r3, #0
 80066e6:	9519      	str	r5, [sp, #100]	@ 0x64
 80066e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80066ea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	f040 858e 	bne.w	800720e <_strtod_l+0xb96>
 80066f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80066f4:	b1cb      	cbz	r3, 800672a <_strtod_l+0xb2>
 80066f6:	4652      	mov	r2, sl
 80066f8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80066fc:	ec43 2b10 	vmov	d0, r2, r3
 8006700:	b01f      	add	sp, #124	@ 0x7c
 8006702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006706:	2920      	cmp	r1, #32
 8006708:	d1ce      	bne.n	80066a8 <_strtod_l+0x30>
 800670a:	3201      	adds	r2, #1
 800670c:	e7c1      	b.n	8006692 <_strtod_l+0x1a>
 800670e:	292d      	cmp	r1, #45	@ 0x2d
 8006710:	d1ca      	bne.n	80066a8 <_strtod_l+0x30>
 8006712:	2101      	movs	r1, #1
 8006714:	910e      	str	r1, [sp, #56]	@ 0x38
 8006716:	1c51      	adds	r1, r2, #1
 8006718:	9119      	str	r1, [sp, #100]	@ 0x64
 800671a:	7852      	ldrb	r2, [r2, #1]
 800671c:	2a00      	cmp	r2, #0
 800671e:	d1c5      	bne.n	80066ac <_strtod_l+0x34>
 8006720:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006722:	9419      	str	r4, [sp, #100]	@ 0x64
 8006724:	2b00      	cmp	r3, #0
 8006726:	f040 8570 	bne.w	800720a <_strtod_l+0xb92>
 800672a:	4652      	mov	r2, sl
 800672c:	465b      	mov	r3, fp
 800672e:	e7e5      	b.n	80066fc <_strtod_l+0x84>
 8006730:	2100      	movs	r1, #0
 8006732:	e7ef      	b.n	8006714 <_strtod_l+0x9c>
 8006734:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006736:	b13a      	cbz	r2, 8006748 <_strtod_l+0xd0>
 8006738:	2135      	movs	r1, #53	@ 0x35
 800673a:	a81c      	add	r0, sp, #112	@ 0x70
 800673c:	f7ff ff3a 	bl	80065b4 <__copybits>
 8006740:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006742:	9805      	ldr	r0, [sp, #20]
 8006744:	f7ff fb10 	bl	8005d68 <_Bfree>
 8006748:	3e01      	subs	r6, #1
 800674a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800674c:	2e04      	cmp	r6, #4
 800674e:	d806      	bhi.n	800675e <_strtod_l+0xe6>
 8006750:	e8df f006 	tbb	[pc, r6]
 8006754:	201d0314 	.word	0x201d0314
 8006758:	14          	.byte	0x14
 8006759:	00          	.byte	0x00
 800675a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800675e:	05e1      	lsls	r1, r4, #23
 8006760:	bf48      	it	mi
 8006762:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006766:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800676a:	0d1b      	lsrs	r3, r3, #20
 800676c:	051b      	lsls	r3, r3, #20
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1bb      	bne.n	80066ea <_strtod_l+0x72>
 8006772:	f7fe fb2d 	bl	8004dd0 <__errno>
 8006776:	2322      	movs	r3, #34	@ 0x22
 8006778:	6003      	str	r3, [r0, #0]
 800677a:	e7b6      	b.n	80066ea <_strtod_l+0x72>
 800677c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006780:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006784:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006788:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800678c:	e7e7      	b.n	800675e <_strtod_l+0xe6>
 800678e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8006910 <_strtod_l+0x298>
 8006792:	e7e4      	b.n	800675e <_strtod_l+0xe6>
 8006794:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006798:	f04f 3aff 	mov.w	sl, #4294967295
 800679c:	e7df      	b.n	800675e <_strtod_l+0xe6>
 800679e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	9219      	str	r2, [sp, #100]	@ 0x64
 80067a4:	785b      	ldrb	r3, [r3, #1]
 80067a6:	2b30      	cmp	r3, #48	@ 0x30
 80067a8:	d0f9      	beq.n	800679e <_strtod_l+0x126>
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d09d      	beq.n	80066ea <_strtod_l+0x72>
 80067ae:	2301      	movs	r3, #1
 80067b0:	2700      	movs	r7, #0
 80067b2:	9308      	str	r3, [sp, #32]
 80067b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067b6:	930c      	str	r3, [sp, #48]	@ 0x30
 80067b8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80067ba:	46b9      	mov	r9, r7
 80067bc:	220a      	movs	r2, #10
 80067be:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80067c0:	7805      	ldrb	r5, [r0, #0]
 80067c2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80067c6:	b2d9      	uxtb	r1, r3
 80067c8:	2909      	cmp	r1, #9
 80067ca:	d928      	bls.n	800681e <_strtod_l+0x1a6>
 80067cc:	494f      	ldr	r1, [pc, #316]	@ (800690c <_strtod_l+0x294>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	f001 f9ac 	bl	8007b2c <strncmp>
 80067d4:	2800      	cmp	r0, #0
 80067d6:	d032      	beq.n	800683e <_strtod_l+0x1c6>
 80067d8:	2000      	movs	r0, #0
 80067da:	462a      	mov	r2, r5
 80067dc:	900a      	str	r0, [sp, #40]	@ 0x28
 80067de:	464d      	mov	r5, r9
 80067e0:	4603      	mov	r3, r0
 80067e2:	2a65      	cmp	r2, #101	@ 0x65
 80067e4:	d001      	beq.n	80067ea <_strtod_l+0x172>
 80067e6:	2a45      	cmp	r2, #69	@ 0x45
 80067e8:	d114      	bne.n	8006814 <_strtod_l+0x19c>
 80067ea:	b91d      	cbnz	r5, 80067f4 <_strtod_l+0x17c>
 80067ec:	9a08      	ldr	r2, [sp, #32]
 80067ee:	4302      	orrs	r2, r0
 80067f0:	d096      	beq.n	8006720 <_strtod_l+0xa8>
 80067f2:	2500      	movs	r5, #0
 80067f4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80067f6:	1c62      	adds	r2, r4, #1
 80067f8:	9219      	str	r2, [sp, #100]	@ 0x64
 80067fa:	7862      	ldrb	r2, [r4, #1]
 80067fc:	2a2b      	cmp	r2, #43	@ 0x2b
 80067fe:	d07a      	beq.n	80068f6 <_strtod_l+0x27e>
 8006800:	2a2d      	cmp	r2, #45	@ 0x2d
 8006802:	d07e      	beq.n	8006902 <_strtod_l+0x28a>
 8006804:	f04f 0c00 	mov.w	ip, #0
 8006808:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800680c:	2909      	cmp	r1, #9
 800680e:	f240 8085 	bls.w	800691c <_strtod_l+0x2a4>
 8006812:	9419      	str	r4, [sp, #100]	@ 0x64
 8006814:	f04f 0800 	mov.w	r8, #0
 8006818:	e0a5      	b.n	8006966 <_strtod_l+0x2ee>
 800681a:	2300      	movs	r3, #0
 800681c:	e7c8      	b.n	80067b0 <_strtod_l+0x138>
 800681e:	f1b9 0f08 	cmp.w	r9, #8
 8006822:	bfd8      	it	le
 8006824:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8006826:	f100 0001 	add.w	r0, r0, #1
 800682a:	bfda      	itte	le
 800682c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006830:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8006832:	fb02 3707 	mlagt	r7, r2, r7, r3
 8006836:	f109 0901 	add.w	r9, r9, #1
 800683a:	9019      	str	r0, [sp, #100]	@ 0x64
 800683c:	e7bf      	b.n	80067be <_strtod_l+0x146>
 800683e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	9219      	str	r2, [sp, #100]	@ 0x64
 8006844:	785a      	ldrb	r2, [r3, #1]
 8006846:	f1b9 0f00 	cmp.w	r9, #0
 800684a:	d03b      	beq.n	80068c4 <_strtod_l+0x24c>
 800684c:	900a      	str	r0, [sp, #40]	@ 0x28
 800684e:	464d      	mov	r5, r9
 8006850:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006854:	2b09      	cmp	r3, #9
 8006856:	d912      	bls.n	800687e <_strtod_l+0x206>
 8006858:	2301      	movs	r3, #1
 800685a:	e7c2      	b.n	80067e2 <_strtod_l+0x16a>
 800685c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800685e:	1c5a      	adds	r2, r3, #1
 8006860:	9219      	str	r2, [sp, #100]	@ 0x64
 8006862:	785a      	ldrb	r2, [r3, #1]
 8006864:	3001      	adds	r0, #1
 8006866:	2a30      	cmp	r2, #48	@ 0x30
 8006868:	d0f8      	beq.n	800685c <_strtod_l+0x1e4>
 800686a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800686e:	2b08      	cmp	r3, #8
 8006870:	f200 84d2 	bhi.w	8007218 <_strtod_l+0xba0>
 8006874:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006876:	900a      	str	r0, [sp, #40]	@ 0x28
 8006878:	2000      	movs	r0, #0
 800687a:	930c      	str	r3, [sp, #48]	@ 0x30
 800687c:	4605      	mov	r5, r0
 800687e:	3a30      	subs	r2, #48	@ 0x30
 8006880:	f100 0301 	add.w	r3, r0, #1
 8006884:	d018      	beq.n	80068b8 <_strtod_l+0x240>
 8006886:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006888:	4419      	add	r1, r3
 800688a:	910a      	str	r1, [sp, #40]	@ 0x28
 800688c:	462e      	mov	r6, r5
 800688e:	f04f 0e0a 	mov.w	lr, #10
 8006892:	1c71      	adds	r1, r6, #1
 8006894:	eba1 0c05 	sub.w	ip, r1, r5
 8006898:	4563      	cmp	r3, ip
 800689a:	dc15      	bgt.n	80068c8 <_strtod_l+0x250>
 800689c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80068a0:	182b      	adds	r3, r5, r0
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	f105 0501 	add.w	r5, r5, #1
 80068a8:	4405      	add	r5, r0
 80068aa:	dc1a      	bgt.n	80068e2 <_strtod_l+0x26a>
 80068ac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80068ae:	230a      	movs	r3, #10
 80068b0:	fb03 2301 	mla	r3, r3, r1, r2
 80068b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068b6:	2300      	movs	r3, #0
 80068b8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80068ba:	1c51      	adds	r1, r2, #1
 80068bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80068be:	7852      	ldrb	r2, [r2, #1]
 80068c0:	4618      	mov	r0, r3
 80068c2:	e7c5      	b.n	8006850 <_strtod_l+0x1d8>
 80068c4:	4648      	mov	r0, r9
 80068c6:	e7ce      	b.n	8006866 <_strtod_l+0x1ee>
 80068c8:	2e08      	cmp	r6, #8
 80068ca:	dc05      	bgt.n	80068d8 <_strtod_l+0x260>
 80068cc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80068ce:	fb0e f606 	mul.w	r6, lr, r6
 80068d2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80068d4:	460e      	mov	r6, r1
 80068d6:	e7dc      	b.n	8006892 <_strtod_l+0x21a>
 80068d8:	2910      	cmp	r1, #16
 80068da:	bfd8      	it	le
 80068dc:	fb0e f707 	mulle.w	r7, lr, r7
 80068e0:	e7f8      	b.n	80068d4 <_strtod_l+0x25c>
 80068e2:	2b0f      	cmp	r3, #15
 80068e4:	bfdc      	itt	le
 80068e6:	230a      	movle	r3, #10
 80068e8:	fb03 2707 	mlale	r7, r3, r7, r2
 80068ec:	e7e3      	b.n	80068b6 <_strtod_l+0x23e>
 80068ee:	2300      	movs	r3, #0
 80068f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f2:	2301      	movs	r3, #1
 80068f4:	e77a      	b.n	80067ec <_strtod_l+0x174>
 80068f6:	f04f 0c00 	mov.w	ip, #0
 80068fa:	1ca2      	adds	r2, r4, #2
 80068fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80068fe:	78a2      	ldrb	r2, [r4, #2]
 8006900:	e782      	b.n	8006808 <_strtod_l+0x190>
 8006902:	f04f 0c01 	mov.w	ip, #1
 8006906:	e7f8      	b.n	80068fa <_strtod_l+0x282>
 8006908:	0800883c 	.word	0x0800883c
 800690c:	08008673 	.word	0x08008673
 8006910:	7ff00000 	.word	0x7ff00000
 8006914:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006916:	1c51      	adds	r1, r2, #1
 8006918:	9119      	str	r1, [sp, #100]	@ 0x64
 800691a:	7852      	ldrb	r2, [r2, #1]
 800691c:	2a30      	cmp	r2, #48	@ 0x30
 800691e:	d0f9      	beq.n	8006914 <_strtod_l+0x29c>
 8006920:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006924:	2908      	cmp	r1, #8
 8006926:	f63f af75 	bhi.w	8006814 <_strtod_l+0x19c>
 800692a:	3a30      	subs	r2, #48	@ 0x30
 800692c:	9209      	str	r2, [sp, #36]	@ 0x24
 800692e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006930:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006932:	f04f 080a 	mov.w	r8, #10
 8006936:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006938:	1c56      	adds	r6, r2, #1
 800693a:	9619      	str	r6, [sp, #100]	@ 0x64
 800693c:	7852      	ldrb	r2, [r2, #1]
 800693e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006942:	f1be 0f09 	cmp.w	lr, #9
 8006946:	d939      	bls.n	80069bc <_strtod_l+0x344>
 8006948:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800694a:	1a76      	subs	r6, r6, r1
 800694c:	2e08      	cmp	r6, #8
 800694e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006952:	dc03      	bgt.n	800695c <_strtod_l+0x2e4>
 8006954:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006956:	4588      	cmp	r8, r1
 8006958:	bfa8      	it	ge
 800695a:	4688      	movge	r8, r1
 800695c:	f1bc 0f00 	cmp.w	ip, #0
 8006960:	d001      	beq.n	8006966 <_strtod_l+0x2ee>
 8006962:	f1c8 0800 	rsb	r8, r8, #0
 8006966:	2d00      	cmp	r5, #0
 8006968:	d14e      	bne.n	8006a08 <_strtod_l+0x390>
 800696a:	9908      	ldr	r1, [sp, #32]
 800696c:	4308      	orrs	r0, r1
 800696e:	f47f aebc 	bne.w	80066ea <_strtod_l+0x72>
 8006972:	2b00      	cmp	r3, #0
 8006974:	f47f aed4 	bne.w	8006720 <_strtod_l+0xa8>
 8006978:	2a69      	cmp	r2, #105	@ 0x69
 800697a:	d028      	beq.n	80069ce <_strtod_l+0x356>
 800697c:	dc25      	bgt.n	80069ca <_strtod_l+0x352>
 800697e:	2a49      	cmp	r2, #73	@ 0x49
 8006980:	d025      	beq.n	80069ce <_strtod_l+0x356>
 8006982:	2a4e      	cmp	r2, #78	@ 0x4e
 8006984:	f47f aecc 	bne.w	8006720 <_strtod_l+0xa8>
 8006988:	499a      	ldr	r1, [pc, #616]	@ (8006bf4 <_strtod_l+0x57c>)
 800698a:	a819      	add	r0, sp, #100	@ 0x64
 800698c:	f001 fbc4 	bl	8008118 <__match>
 8006990:	2800      	cmp	r0, #0
 8006992:	f43f aec5 	beq.w	8006720 <_strtod_l+0xa8>
 8006996:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b28      	cmp	r3, #40	@ 0x28
 800699c:	d12e      	bne.n	80069fc <_strtod_l+0x384>
 800699e:	4996      	ldr	r1, [pc, #600]	@ (8006bf8 <_strtod_l+0x580>)
 80069a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80069a2:	a819      	add	r0, sp, #100	@ 0x64
 80069a4:	f001 fbcc 	bl	8008140 <__hexnan>
 80069a8:	2805      	cmp	r0, #5
 80069aa:	d127      	bne.n	80069fc <_strtod_l+0x384>
 80069ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80069ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80069b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80069b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80069ba:	e696      	b.n	80066ea <_strtod_l+0x72>
 80069bc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069be:	fb08 2101 	mla	r1, r8, r1, r2
 80069c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80069c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80069c8:	e7b5      	b.n	8006936 <_strtod_l+0x2be>
 80069ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80069cc:	e7da      	b.n	8006984 <_strtod_l+0x30c>
 80069ce:	498b      	ldr	r1, [pc, #556]	@ (8006bfc <_strtod_l+0x584>)
 80069d0:	a819      	add	r0, sp, #100	@ 0x64
 80069d2:	f001 fba1 	bl	8008118 <__match>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f aea2 	beq.w	8006720 <_strtod_l+0xa8>
 80069dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069de:	4988      	ldr	r1, [pc, #544]	@ (8006c00 <_strtod_l+0x588>)
 80069e0:	3b01      	subs	r3, #1
 80069e2:	a819      	add	r0, sp, #100	@ 0x64
 80069e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80069e6:	f001 fb97 	bl	8008118 <__match>
 80069ea:	b910      	cbnz	r0, 80069f2 <_strtod_l+0x37a>
 80069ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ee:	3301      	adds	r3, #1
 80069f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80069f2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006c10 <_strtod_l+0x598>
 80069f6:	f04f 0a00 	mov.w	sl, #0
 80069fa:	e676      	b.n	80066ea <_strtod_l+0x72>
 80069fc:	4881      	ldr	r0, [pc, #516]	@ (8006c04 <_strtod_l+0x58c>)
 80069fe:	f001 f8c7 	bl	8007b90 <nan>
 8006a02:	ec5b ab10 	vmov	sl, fp, d0
 8006a06:	e670      	b.n	80066ea <_strtod_l+0x72>
 8006a08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a0a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006a0c:	eba8 0303 	sub.w	r3, r8, r3
 8006a10:	f1b9 0f00 	cmp.w	r9, #0
 8006a14:	bf08      	it	eq
 8006a16:	46a9      	moveq	r9, r5
 8006a18:	2d10      	cmp	r5, #16
 8006a1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a1c:	462c      	mov	r4, r5
 8006a1e:	bfa8      	it	ge
 8006a20:	2410      	movge	r4, #16
 8006a22:	f7f9 fd8f 	bl	8000544 <__aeabi_ui2d>
 8006a26:	2d09      	cmp	r5, #9
 8006a28:	4682      	mov	sl, r0
 8006a2a:	468b      	mov	fp, r1
 8006a2c:	dc13      	bgt.n	8006a56 <_strtod_l+0x3de>
 8006a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f43f ae5a 	beq.w	80066ea <_strtod_l+0x72>
 8006a36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a38:	dd78      	ble.n	8006b2c <_strtod_l+0x4b4>
 8006a3a:	2b16      	cmp	r3, #22
 8006a3c:	dc5f      	bgt.n	8006afe <_strtod_l+0x486>
 8006a3e:	4972      	ldr	r1, [pc, #456]	@ (8006c08 <_strtod_l+0x590>)
 8006a40:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a48:	4652      	mov	r2, sl
 8006a4a:	465b      	mov	r3, fp
 8006a4c:	f7f9 fdf4 	bl	8000638 <__aeabi_dmul>
 8006a50:	4682      	mov	sl, r0
 8006a52:	468b      	mov	fp, r1
 8006a54:	e649      	b.n	80066ea <_strtod_l+0x72>
 8006a56:	4b6c      	ldr	r3, [pc, #432]	@ (8006c08 <_strtod_l+0x590>)
 8006a58:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a5c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006a60:	f7f9 fdea 	bl	8000638 <__aeabi_dmul>
 8006a64:	4682      	mov	sl, r0
 8006a66:	4638      	mov	r0, r7
 8006a68:	468b      	mov	fp, r1
 8006a6a:	f7f9 fd6b 	bl	8000544 <__aeabi_ui2d>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4650      	mov	r0, sl
 8006a74:	4659      	mov	r1, fp
 8006a76:	f7f9 fc29 	bl	80002cc <__adddf3>
 8006a7a:	2d0f      	cmp	r5, #15
 8006a7c:	4682      	mov	sl, r0
 8006a7e:	468b      	mov	fp, r1
 8006a80:	ddd5      	ble.n	8006a2e <_strtod_l+0x3b6>
 8006a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a84:	1b2c      	subs	r4, r5, r4
 8006a86:	441c      	add	r4, r3
 8006a88:	2c00      	cmp	r4, #0
 8006a8a:	f340 8093 	ble.w	8006bb4 <_strtod_l+0x53c>
 8006a8e:	f014 030f 	ands.w	r3, r4, #15
 8006a92:	d00a      	beq.n	8006aaa <_strtod_l+0x432>
 8006a94:	495c      	ldr	r1, [pc, #368]	@ (8006c08 <_strtod_l+0x590>)
 8006a96:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a9a:	4652      	mov	r2, sl
 8006a9c:	465b      	mov	r3, fp
 8006a9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006aa2:	f7f9 fdc9 	bl	8000638 <__aeabi_dmul>
 8006aa6:	4682      	mov	sl, r0
 8006aa8:	468b      	mov	fp, r1
 8006aaa:	f034 040f 	bics.w	r4, r4, #15
 8006aae:	d073      	beq.n	8006b98 <_strtod_l+0x520>
 8006ab0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006ab4:	dd49      	ble.n	8006b4a <_strtod_l+0x4d2>
 8006ab6:	2400      	movs	r4, #0
 8006ab8:	46a0      	mov	r8, r4
 8006aba:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006abc:	46a1      	mov	r9, r4
 8006abe:	9a05      	ldr	r2, [sp, #20]
 8006ac0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006c10 <_strtod_l+0x598>
 8006ac4:	2322      	movs	r3, #34	@ 0x22
 8006ac6:	6013      	str	r3, [r2, #0]
 8006ac8:	f04f 0a00 	mov.w	sl, #0
 8006acc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f43f ae0b 	beq.w	80066ea <_strtod_l+0x72>
 8006ad4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ad6:	9805      	ldr	r0, [sp, #20]
 8006ad8:	f7ff f946 	bl	8005d68 <_Bfree>
 8006adc:	9805      	ldr	r0, [sp, #20]
 8006ade:	4649      	mov	r1, r9
 8006ae0:	f7ff f942 	bl	8005d68 <_Bfree>
 8006ae4:	9805      	ldr	r0, [sp, #20]
 8006ae6:	4641      	mov	r1, r8
 8006ae8:	f7ff f93e 	bl	8005d68 <_Bfree>
 8006aec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006aee:	9805      	ldr	r0, [sp, #20]
 8006af0:	f7ff f93a 	bl	8005d68 <_Bfree>
 8006af4:	9805      	ldr	r0, [sp, #20]
 8006af6:	4621      	mov	r1, r4
 8006af8:	f7ff f936 	bl	8005d68 <_Bfree>
 8006afc:	e5f5      	b.n	80066ea <_strtod_l+0x72>
 8006afe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b00:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b04:	4293      	cmp	r3, r2
 8006b06:	dbbc      	blt.n	8006a82 <_strtod_l+0x40a>
 8006b08:	4c3f      	ldr	r4, [pc, #252]	@ (8006c08 <_strtod_l+0x590>)
 8006b0a:	f1c5 050f 	rsb	r5, r5, #15
 8006b0e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b12:	4652      	mov	r2, sl
 8006b14:	465b      	mov	r3, fp
 8006b16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b1a:	f7f9 fd8d 	bl	8000638 <__aeabi_dmul>
 8006b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b20:	1b5d      	subs	r5, r3, r5
 8006b22:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b26:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b2a:	e78f      	b.n	8006a4c <_strtod_l+0x3d4>
 8006b2c:	3316      	adds	r3, #22
 8006b2e:	dba8      	blt.n	8006a82 <_strtod_l+0x40a>
 8006b30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b32:	eba3 0808 	sub.w	r8, r3, r8
 8006b36:	4b34      	ldr	r3, [pc, #208]	@ (8006c08 <_strtod_l+0x590>)
 8006b38:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b3c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006b40:	4650      	mov	r0, sl
 8006b42:	4659      	mov	r1, fp
 8006b44:	f7f9 fea2 	bl	800088c <__aeabi_ddiv>
 8006b48:	e782      	b.n	8006a50 <_strtod_l+0x3d8>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	4f2f      	ldr	r7, [pc, #188]	@ (8006c0c <_strtod_l+0x594>)
 8006b4e:	1124      	asrs	r4, r4, #4
 8006b50:	4650      	mov	r0, sl
 8006b52:	4659      	mov	r1, fp
 8006b54:	461e      	mov	r6, r3
 8006b56:	2c01      	cmp	r4, #1
 8006b58:	dc21      	bgt.n	8006b9e <_strtod_l+0x526>
 8006b5a:	b10b      	cbz	r3, 8006b60 <_strtod_l+0x4e8>
 8006b5c:	4682      	mov	sl, r0
 8006b5e:	468b      	mov	fp, r1
 8006b60:	492a      	ldr	r1, [pc, #168]	@ (8006c0c <_strtod_l+0x594>)
 8006b62:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006b66:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006b6a:	4652      	mov	r2, sl
 8006b6c:	465b      	mov	r3, fp
 8006b6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b72:	f7f9 fd61 	bl	8000638 <__aeabi_dmul>
 8006b76:	4b26      	ldr	r3, [pc, #152]	@ (8006c10 <_strtod_l+0x598>)
 8006b78:	460a      	mov	r2, r1
 8006b7a:	400b      	ands	r3, r1
 8006b7c:	4925      	ldr	r1, [pc, #148]	@ (8006c14 <_strtod_l+0x59c>)
 8006b7e:	428b      	cmp	r3, r1
 8006b80:	4682      	mov	sl, r0
 8006b82:	d898      	bhi.n	8006ab6 <_strtod_l+0x43e>
 8006b84:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006b88:	428b      	cmp	r3, r1
 8006b8a:	bf86      	itte	hi
 8006b8c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006c18 <_strtod_l+0x5a0>
 8006b90:	f04f 3aff 	movhi.w	sl, #4294967295
 8006b94:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9308      	str	r3, [sp, #32]
 8006b9c:	e076      	b.n	8006c8c <_strtod_l+0x614>
 8006b9e:	07e2      	lsls	r2, r4, #31
 8006ba0:	d504      	bpl.n	8006bac <_strtod_l+0x534>
 8006ba2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ba6:	f7f9 fd47 	bl	8000638 <__aeabi_dmul>
 8006baa:	2301      	movs	r3, #1
 8006bac:	3601      	adds	r6, #1
 8006bae:	1064      	asrs	r4, r4, #1
 8006bb0:	3708      	adds	r7, #8
 8006bb2:	e7d0      	b.n	8006b56 <_strtod_l+0x4de>
 8006bb4:	d0f0      	beq.n	8006b98 <_strtod_l+0x520>
 8006bb6:	4264      	negs	r4, r4
 8006bb8:	f014 020f 	ands.w	r2, r4, #15
 8006bbc:	d00a      	beq.n	8006bd4 <_strtod_l+0x55c>
 8006bbe:	4b12      	ldr	r3, [pc, #72]	@ (8006c08 <_strtod_l+0x590>)
 8006bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bc4:	4650      	mov	r0, sl
 8006bc6:	4659      	mov	r1, fp
 8006bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bcc:	f7f9 fe5e 	bl	800088c <__aeabi_ddiv>
 8006bd0:	4682      	mov	sl, r0
 8006bd2:	468b      	mov	fp, r1
 8006bd4:	1124      	asrs	r4, r4, #4
 8006bd6:	d0df      	beq.n	8006b98 <_strtod_l+0x520>
 8006bd8:	2c1f      	cmp	r4, #31
 8006bda:	dd1f      	ble.n	8006c1c <_strtod_l+0x5a4>
 8006bdc:	2400      	movs	r4, #0
 8006bde:	46a0      	mov	r8, r4
 8006be0:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006be2:	46a1      	mov	r9, r4
 8006be4:	9a05      	ldr	r2, [sp, #20]
 8006be6:	2322      	movs	r3, #34	@ 0x22
 8006be8:	f04f 0a00 	mov.w	sl, #0
 8006bec:	f04f 0b00 	mov.w	fp, #0
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	e76b      	b.n	8006acc <_strtod_l+0x454>
 8006bf4:	08008561 	.word	0x08008561
 8006bf8:	08008828 	.word	0x08008828
 8006bfc:	08008559 	.word	0x08008559
 8006c00:	08008590 	.word	0x08008590
 8006c04:	080086c9 	.word	0x080086c9
 8006c08:	08008760 	.word	0x08008760
 8006c0c:	08008738 	.word	0x08008738
 8006c10:	7ff00000 	.word	0x7ff00000
 8006c14:	7ca00000 	.word	0x7ca00000
 8006c18:	7fefffff 	.word	0x7fefffff
 8006c1c:	f014 0310 	ands.w	r3, r4, #16
 8006c20:	bf18      	it	ne
 8006c22:	236a      	movne	r3, #106	@ 0x6a
 8006c24:	4ea9      	ldr	r6, [pc, #676]	@ (8006ecc <_strtod_l+0x854>)
 8006c26:	9308      	str	r3, [sp, #32]
 8006c28:	4650      	mov	r0, sl
 8006c2a:	4659      	mov	r1, fp
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	07e7      	lsls	r7, r4, #31
 8006c30:	d504      	bpl.n	8006c3c <_strtod_l+0x5c4>
 8006c32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c36:	f7f9 fcff 	bl	8000638 <__aeabi_dmul>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	1064      	asrs	r4, r4, #1
 8006c3e:	f106 0608 	add.w	r6, r6, #8
 8006c42:	d1f4      	bne.n	8006c2e <_strtod_l+0x5b6>
 8006c44:	b10b      	cbz	r3, 8006c4a <_strtod_l+0x5d2>
 8006c46:	4682      	mov	sl, r0
 8006c48:	468b      	mov	fp, r1
 8006c4a:	9b08      	ldr	r3, [sp, #32]
 8006c4c:	b1b3      	cbz	r3, 8006c7c <_strtod_l+0x604>
 8006c4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	4659      	mov	r1, fp
 8006c5a:	dd0f      	ble.n	8006c7c <_strtod_l+0x604>
 8006c5c:	2b1f      	cmp	r3, #31
 8006c5e:	dd56      	ble.n	8006d0e <_strtod_l+0x696>
 8006c60:	2b34      	cmp	r3, #52	@ 0x34
 8006c62:	bfde      	ittt	le
 8006c64:	f04f 33ff 	movle.w	r3, #4294967295
 8006c68:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006c6c:	4093      	lslle	r3, r2
 8006c6e:	f04f 0a00 	mov.w	sl, #0
 8006c72:	bfcc      	ite	gt
 8006c74:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006c78:	ea03 0b01 	andle.w	fp, r3, r1
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	2300      	movs	r3, #0
 8006c80:	4650      	mov	r0, sl
 8006c82:	4659      	mov	r1, fp
 8006c84:	f7f9 ff40 	bl	8000b08 <__aeabi_dcmpeq>
 8006c88:	2800      	cmp	r0, #0
 8006c8a:	d1a7      	bne.n	8006bdc <_strtod_l+0x564>
 8006c8c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c8e:	9300      	str	r3, [sp, #0]
 8006c90:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006c92:	9805      	ldr	r0, [sp, #20]
 8006c94:	462b      	mov	r3, r5
 8006c96:	464a      	mov	r2, r9
 8006c98:	f7ff f8ce 	bl	8005e38 <__s2b>
 8006c9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	f43f af09 	beq.w	8006ab6 <_strtod_l+0x43e>
 8006ca4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ca6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ca8:	2a00      	cmp	r2, #0
 8006caa:	eba3 0308 	sub.w	r3, r3, r8
 8006cae:	bfa8      	it	ge
 8006cb0:	2300      	movge	r3, #0
 8006cb2:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006cba:	9316      	str	r3, [sp, #88]	@ 0x58
 8006cbc:	46a0      	mov	r8, r4
 8006cbe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cc0:	9805      	ldr	r0, [sp, #20]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	f7ff f810 	bl	8005ce8 <_Balloc>
 8006cc8:	4681      	mov	r9, r0
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	f43f aef7 	beq.w	8006abe <_strtod_l+0x446>
 8006cd0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006cd2:	691a      	ldr	r2, [r3, #16]
 8006cd4:	3202      	adds	r2, #2
 8006cd6:	f103 010c 	add.w	r1, r3, #12
 8006cda:	0092      	lsls	r2, r2, #2
 8006cdc:	300c      	adds	r0, #12
 8006cde:	f000 ff47 	bl	8007b70 <memcpy>
 8006ce2:	ec4b ab10 	vmov	d0, sl, fp
 8006ce6:	9805      	ldr	r0, [sp, #20]
 8006ce8:	aa1c      	add	r2, sp, #112	@ 0x70
 8006cea:	a91b      	add	r1, sp, #108	@ 0x6c
 8006cec:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006cf0:	f7ff fbd6 	bl	80064a0 <__d2b>
 8006cf4:	901a      	str	r0, [sp, #104]	@ 0x68
 8006cf6:	2800      	cmp	r0, #0
 8006cf8:	f43f aee1 	beq.w	8006abe <_strtod_l+0x446>
 8006cfc:	9805      	ldr	r0, [sp, #20]
 8006cfe:	2101      	movs	r1, #1
 8006d00:	f7ff f930 	bl	8005f64 <__i2b>
 8006d04:	4680      	mov	r8, r0
 8006d06:	b948      	cbnz	r0, 8006d1c <_strtod_l+0x6a4>
 8006d08:	f04f 0800 	mov.w	r8, #0
 8006d0c:	e6d7      	b.n	8006abe <_strtod_l+0x446>
 8006d0e:	f04f 32ff 	mov.w	r2, #4294967295
 8006d12:	fa02 f303 	lsl.w	r3, r2, r3
 8006d16:	ea03 0a0a 	and.w	sl, r3, sl
 8006d1a:	e7af      	b.n	8006c7c <_strtod_l+0x604>
 8006d1c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d1e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d20:	2d00      	cmp	r5, #0
 8006d22:	bfab      	itete	ge
 8006d24:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d26:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d28:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d2a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006d2c:	bfac      	ite	ge
 8006d2e:	18ef      	addge	r7, r5, r3
 8006d30:	1b5e      	sublt	r6, r3, r5
 8006d32:	9b08      	ldr	r3, [sp, #32]
 8006d34:	1aed      	subs	r5, r5, r3
 8006d36:	4415      	add	r5, r2
 8006d38:	4b65      	ldr	r3, [pc, #404]	@ (8006ed0 <_strtod_l+0x858>)
 8006d3a:	3d01      	subs	r5, #1
 8006d3c:	429d      	cmp	r5, r3
 8006d3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006d42:	da50      	bge.n	8006de6 <_strtod_l+0x76e>
 8006d44:	1b5b      	subs	r3, r3, r5
 8006d46:	2b1f      	cmp	r3, #31
 8006d48:	eba2 0203 	sub.w	r2, r2, r3
 8006d4c:	f04f 0101 	mov.w	r1, #1
 8006d50:	dc3d      	bgt.n	8006dce <_strtod_l+0x756>
 8006d52:	fa01 f303 	lsl.w	r3, r1, r3
 8006d56:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006d58:	2300      	movs	r3, #0
 8006d5a:	9310      	str	r3, [sp, #64]	@ 0x40
 8006d5c:	18bd      	adds	r5, r7, r2
 8006d5e:	9b08      	ldr	r3, [sp, #32]
 8006d60:	42af      	cmp	r7, r5
 8006d62:	4416      	add	r6, r2
 8006d64:	441e      	add	r6, r3
 8006d66:	463b      	mov	r3, r7
 8006d68:	bfa8      	it	ge
 8006d6a:	462b      	movge	r3, r5
 8006d6c:	42b3      	cmp	r3, r6
 8006d6e:	bfa8      	it	ge
 8006d70:	4633      	movge	r3, r6
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	bfc2      	ittt	gt
 8006d76:	1aed      	subgt	r5, r5, r3
 8006d78:	1af6      	subgt	r6, r6, r3
 8006d7a:	1aff      	subgt	r7, r7, r3
 8006d7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	dd16      	ble.n	8006db0 <_strtod_l+0x738>
 8006d82:	4641      	mov	r1, r8
 8006d84:	9805      	ldr	r0, [sp, #20]
 8006d86:	461a      	mov	r2, r3
 8006d88:	f7ff f9a4 	bl	80060d4 <__pow5mult>
 8006d8c:	4680      	mov	r8, r0
 8006d8e:	2800      	cmp	r0, #0
 8006d90:	d0ba      	beq.n	8006d08 <_strtod_l+0x690>
 8006d92:	4601      	mov	r1, r0
 8006d94:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006d96:	9805      	ldr	r0, [sp, #20]
 8006d98:	f7ff f8fa 	bl	8005f90 <__multiply>
 8006d9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8006d9e:	2800      	cmp	r0, #0
 8006da0:	f43f ae8d 	beq.w	8006abe <_strtod_l+0x446>
 8006da4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006da6:	9805      	ldr	r0, [sp, #20]
 8006da8:	f7fe ffde 	bl	8005d68 <_Bfree>
 8006dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dae:	931a      	str	r3, [sp, #104]	@ 0x68
 8006db0:	2d00      	cmp	r5, #0
 8006db2:	dc1d      	bgt.n	8006df0 <_strtod_l+0x778>
 8006db4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	dd23      	ble.n	8006e02 <_strtod_l+0x78a>
 8006dba:	4649      	mov	r1, r9
 8006dbc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006dbe:	9805      	ldr	r0, [sp, #20]
 8006dc0:	f7ff f988 	bl	80060d4 <__pow5mult>
 8006dc4:	4681      	mov	r9, r0
 8006dc6:	b9e0      	cbnz	r0, 8006e02 <_strtod_l+0x78a>
 8006dc8:	f04f 0900 	mov.w	r9, #0
 8006dcc:	e677      	b.n	8006abe <_strtod_l+0x446>
 8006dce:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006dd2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006dd6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006dda:	35e2      	adds	r5, #226	@ 0xe2
 8006ddc:	fa01 f305 	lsl.w	r3, r1, r5
 8006de0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006de2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006de4:	e7ba      	b.n	8006d5c <_strtod_l+0x6e4>
 8006de6:	2300      	movs	r3, #0
 8006de8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006dea:	2301      	movs	r3, #1
 8006dec:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006dee:	e7b5      	b.n	8006d5c <_strtod_l+0x6e4>
 8006df0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006df2:	9805      	ldr	r0, [sp, #20]
 8006df4:	462a      	mov	r2, r5
 8006df6:	f7ff f9c7 	bl	8006188 <__lshift>
 8006dfa:	901a      	str	r0, [sp, #104]	@ 0x68
 8006dfc:	2800      	cmp	r0, #0
 8006dfe:	d1d9      	bne.n	8006db4 <_strtod_l+0x73c>
 8006e00:	e65d      	b.n	8006abe <_strtod_l+0x446>
 8006e02:	2e00      	cmp	r6, #0
 8006e04:	dd07      	ble.n	8006e16 <_strtod_l+0x79e>
 8006e06:	4649      	mov	r1, r9
 8006e08:	9805      	ldr	r0, [sp, #20]
 8006e0a:	4632      	mov	r2, r6
 8006e0c:	f7ff f9bc 	bl	8006188 <__lshift>
 8006e10:	4681      	mov	r9, r0
 8006e12:	2800      	cmp	r0, #0
 8006e14:	d0d8      	beq.n	8006dc8 <_strtod_l+0x750>
 8006e16:	2f00      	cmp	r7, #0
 8006e18:	dd08      	ble.n	8006e2c <_strtod_l+0x7b4>
 8006e1a:	4641      	mov	r1, r8
 8006e1c:	9805      	ldr	r0, [sp, #20]
 8006e1e:	463a      	mov	r2, r7
 8006e20:	f7ff f9b2 	bl	8006188 <__lshift>
 8006e24:	4680      	mov	r8, r0
 8006e26:	2800      	cmp	r0, #0
 8006e28:	f43f ae49 	beq.w	8006abe <_strtod_l+0x446>
 8006e2c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e2e:	9805      	ldr	r0, [sp, #20]
 8006e30:	464a      	mov	r2, r9
 8006e32:	f7ff fa31 	bl	8006298 <__mdiff>
 8006e36:	4604      	mov	r4, r0
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	f43f ae40 	beq.w	8006abe <_strtod_l+0x446>
 8006e3e:	68c3      	ldr	r3, [r0, #12]
 8006e40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e42:	2300      	movs	r3, #0
 8006e44:	60c3      	str	r3, [r0, #12]
 8006e46:	4641      	mov	r1, r8
 8006e48:	f7ff fa0a 	bl	8006260 <__mcmp>
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	da45      	bge.n	8006edc <_strtod_l+0x864>
 8006e50:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e52:	ea53 030a 	orrs.w	r3, r3, sl
 8006e56:	d16b      	bne.n	8006f30 <_strtod_l+0x8b8>
 8006e58:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d167      	bne.n	8006f30 <_strtod_l+0x8b8>
 8006e60:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e64:	0d1b      	lsrs	r3, r3, #20
 8006e66:	051b      	lsls	r3, r3, #20
 8006e68:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006e6c:	d960      	bls.n	8006f30 <_strtod_l+0x8b8>
 8006e6e:	6963      	ldr	r3, [r4, #20]
 8006e70:	b913      	cbnz	r3, 8006e78 <_strtod_l+0x800>
 8006e72:	6923      	ldr	r3, [r4, #16]
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	dd5b      	ble.n	8006f30 <_strtod_l+0x8b8>
 8006e78:	4621      	mov	r1, r4
 8006e7a:	2201      	movs	r2, #1
 8006e7c:	9805      	ldr	r0, [sp, #20]
 8006e7e:	f7ff f983 	bl	8006188 <__lshift>
 8006e82:	4641      	mov	r1, r8
 8006e84:	4604      	mov	r4, r0
 8006e86:	f7ff f9eb 	bl	8006260 <__mcmp>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	dd50      	ble.n	8006f30 <_strtod_l+0x8b8>
 8006e8e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006e92:	9a08      	ldr	r2, [sp, #32]
 8006e94:	0d1b      	lsrs	r3, r3, #20
 8006e96:	051b      	lsls	r3, r3, #20
 8006e98:	2a00      	cmp	r2, #0
 8006e9a:	d06a      	beq.n	8006f72 <_strtod_l+0x8fa>
 8006e9c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ea0:	d867      	bhi.n	8006f72 <_strtod_l+0x8fa>
 8006ea2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ea6:	f67f ae9d 	bls.w	8006be4 <_strtod_l+0x56c>
 8006eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8006ed4 <_strtod_l+0x85c>)
 8006eac:	4650      	mov	r0, sl
 8006eae:	4659      	mov	r1, fp
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f7f9 fbc1 	bl	8000638 <__aeabi_dmul>
 8006eb6:	4b08      	ldr	r3, [pc, #32]	@ (8006ed8 <_strtod_l+0x860>)
 8006eb8:	400b      	ands	r3, r1
 8006eba:	4682      	mov	sl, r0
 8006ebc:	468b      	mov	fp, r1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	f47f ae08 	bne.w	8006ad4 <_strtod_l+0x45c>
 8006ec4:	9a05      	ldr	r2, [sp, #20]
 8006ec6:	2322      	movs	r3, #34	@ 0x22
 8006ec8:	6013      	str	r3, [r2, #0]
 8006eca:	e603      	b.n	8006ad4 <_strtod_l+0x45c>
 8006ecc:	08008850 	.word	0x08008850
 8006ed0:	fffffc02 	.word	0xfffffc02
 8006ed4:	39500000 	.word	0x39500000
 8006ed8:	7ff00000 	.word	0x7ff00000
 8006edc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006ee0:	d165      	bne.n	8006fae <_strtod_l+0x936>
 8006ee2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006ee4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ee8:	b35a      	cbz	r2, 8006f42 <_strtod_l+0x8ca>
 8006eea:	4a9f      	ldr	r2, [pc, #636]	@ (8007168 <_strtod_l+0xaf0>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d12b      	bne.n	8006f48 <_strtod_l+0x8d0>
 8006ef0:	9b08      	ldr	r3, [sp, #32]
 8006ef2:	4651      	mov	r1, sl
 8006ef4:	b303      	cbz	r3, 8006f38 <_strtod_l+0x8c0>
 8006ef6:	4b9d      	ldr	r3, [pc, #628]	@ (800716c <_strtod_l+0xaf4>)
 8006ef8:	465a      	mov	r2, fp
 8006efa:	4013      	ands	r3, r2
 8006efc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f00:	f04f 32ff 	mov.w	r2, #4294967295
 8006f04:	d81b      	bhi.n	8006f3e <_strtod_l+0x8c6>
 8006f06:	0d1b      	lsrs	r3, r3, #20
 8006f08:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f10:	4299      	cmp	r1, r3
 8006f12:	d119      	bne.n	8006f48 <_strtod_l+0x8d0>
 8006f14:	4b96      	ldr	r3, [pc, #600]	@ (8007170 <_strtod_l+0xaf8>)
 8006f16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d102      	bne.n	8006f22 <_strtod_l+0x8aa>
 8006f1c:	3101      	adds	r1, #1
 8006f1e:	f43f adce 	beq.w	8006abe <_strtod_l+0x446>
 8006f22:	4b92      	ldr	r3, [pc, #584]	@ (800716c <_strtod_l+0xaf4>)
 8006f24:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f26:	401a      	ands	r2, r3
 8006f28:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006f2c:	f04f 0a00 	mov.w	sl, #0
 8006f30:	9b08      	ldr	r3, [sp, #32]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d1b9      	bne.n	8006eaa <_strtod_l+0x832>
 8006f36:	e5cd      	b.n	8006ad4 <_strtod_l+0x45c>
 8006f38:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3c:	e7e8      	b.n	8006f10 <_strtod_l+0x898>
 8006f3e:	4613      	mov	r3, r2
 8006f40:	e7e6      	b.n	8006f10 <_strtod_l+0x898>
 8006f42:	ea53 030a 	orrs.w	r3, r3, sl
 8006f46:	d0a2      	beq.n	8006e8e <_strtod_l+0x816>
 8006f48:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f4a:	b1db      	cbz	r3, 8006f84 <_strtod_l+0x90c>
 8006f4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f4e:	4213      	tst	r3, r2
 8006f50:	d0ee      	beq.n	8006f30 <_strtod_l+0x8b8>
 8006f52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f54:	9a08      	ldr	r2, [sp, #32]
 8006f56:	4650      	mov	r0, sl
 8006f58:	4659      	mov	r1, fp
 8006f5a:	b1bb      	cbz	r3, 8006f8c <_strtod_l+0x914>
 8006f5c:	f7ff fb6e 	bl	800663c <sulp>
 8006f60:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f64:	ec53 2b10 	vmov	r2, r3, d0
 8006f68:	f7f9 f9b0 	bl	80002cc <__adddf3>
 8006f6c:	4682      	mov	sl, r0
 8006f6e:	468b      	mov	fp, r1
 8006f70:	e7de      	b.n	8006f30 <_strtod_l+0x8b8>
 8006f72:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006f76:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006f7a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006f7e:	f04f 3aff 	mov.w	sl, #4294967295
 8006f82:	e7d5      	b.n	8006f30 <_strtod_l+0x8b8>
 8006f84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006f86:	ea13 0f0a 	tst.w	r3, sl
 8006f8a:	e7e1      	b.n	8006f50 <_strtod_l+0x8d8>
 8006f8c:	f7ff fb56 	bl	800663c <sulp>
 8006f90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006f94:	ec53 2b10 	vmov	r2, r3, d0
 8006f98:	f7f9 f996 	bl	80002c8 <__aeabi_dsub>
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	4682      	mov	sl, r0
 8006fa2:	468b      	mov	fp, r1
 8006fa4:	f7f9 fdb0 	bl	8000b08 <__aeabi_dcmpeq>
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d0c1      	beq.n	8006f30 <_strtod_l+0x8b8>
 8006fac:	e61a      	b.n	8006be4 <_strtod_l+0x56c>
 8006fae:	4641      	mov	r1, r8
 8006fb0:	4620      	mov	r0, r4
 8006fb2:	f7ff facd 	bl	8006550 <__ratio>
 8006fb6:	ec57 6b10 	vmov	r6, r7, d0
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	f7f9 fdb4 	bl	8000b30 <__aeabi_dcmple>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d06f      	beq.n	80070ac <_strtod_l+0xa34>
 8006fcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d17a      	bne.n	80070c8 <_strtod_l+0xa50>
 8006fd2:	f1ba 0f00 	cmp.w	sl, #0
 8006fd6:	d158      	bne.n	800708a <_strtod_l+0xa12>
 8006fd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fda:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d15a      	bne.n	8007098 <_strtod_l+0xa20>
 8006fe2:	4b64      	ldr	r3, [pc, #400]	@ (8007174 <_strtod_l+0xafc>)
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	4639      	mov	r1, r7
 8006fea:	f7f9 fd97 	bl	8000b1c <__aeabi_dcmplt>
 8006fee:	2800      	cmp	r0, #0
 8006ff0:	d159      	bne.n	80070a6 <_strtod_l+0xa2e>
 8006ff2:	4630      	mov	r0, r6
 8006ff4:	4639      	mov	r1, r7
 8006ff6:	4b60      	ldr	r3, [pc, #384]	@ (8007178 <_strtod_l+0xb00>)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f7f9 fb1d 	bl	8000638 <__aeabi_dmul>
 8006ffe:	4606      	mov	r6, r0
 8007000:	460f      	mov	r7, r1
 8007002:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007006:	9606      	str	r6, [sp, #24]
 8007008:	9307      	str	r3, [sp, #28]
 800700a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800700e:	4d57      	ldr	r5, [pc, #348]	@ (800716c <_strtod_l+0xaf4>)
 8007010:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007016:	401d      	ands	r5, r3
 8007018:	4b58      	ldr	r3, [pc, #352]	@ (800717c <_strtod_l+0xb04>)
 800701a:	429d      	cmp	r5, r3
 800701c:	f040 80b2 	bne.w	8007184 <_strtod_l+0xb0c>
 8007020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007022:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007026:	ec4b ab10 	vmov	d0, sl, fp
 800702a:	f7ff f9c9 	bl	80063c0 <__ulp>
 800702e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007032:	ec51 0b10 	vmov	r0, r1, d0
 8007036:	f7f9 faff 	bl	8000638 <__aeabi_dmul>
 800703a:	4652      	mov	r2, sl
 800703c:	465b      	mov	r3, fp
 800703e:	f7f9 f945 	bl	80002cc <__adddf3>
 8007042:	460b      	mov	r3, r1
 8007044:	4949      	ldr	r1, [pc, #292]	@ (800716c <_strtod_l+0xaf4>)
 8007046:	4a4e      	ldr	r2, [pc, #312]	@ (8007180 <_strtod_l+0xb08>)
 8007048:	4019      	ands	r1, r3
 800704a:	4291      	cmp	r1, r2
 800704c:	4682      	mov	sl, r0
 800704e:	d942      	bls.n	80070d6 <_strtod_l+0xa5e>
 8007050:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007052:	4b47      	ldr	r3, [pc, #284]	@ (8007170 <_strtod_l+0xaf8>)
 8007054:	429a      	cmp	r2, r3
 8007056:	d103      	bne.n	8007060 <_strtod_l+0x9e8>
 8007058:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800705a:	3301      	adds	r3, #1
 800705c:	f43f ad2f 	beq.w	8006abe <_strtod_l+0x446>
 8007060:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007170 <_strtod_l+0xaf8>
 8007064:	f04f 3aff 	mov.w	sl, #4294967295
 8007068:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800706a:	9805      	ldr	r0, [sp, #20]
 800706c:	f7fe fe7c 	bl	8005d68 <_Bfree>
 8007070:	9805      	ldr	r0, [sp, #20]
 8007072:	4649      	mov	r1, r9
 8007074:	f7fe fe78 	bl	8005d68 <_Bfree>
 8007078:	9805      	ldr	r0, [sp, #20]
 800707a:	4641      	mov	r1, r8
 800707c:	f7fe fe74 	bl	8005d68 <_Bfree>
 8007080:	9805      	ldr	r0, [sp, #20]
 8007082:	4621      	mov	r1, r4
 8007084:	f7fe fe70 	bl	8005d68 <_Bfree>
 8007088:	e619      	b.n	8006cbe <_strtod_l+0x646>
 800708a:	f1ba 0f01 	cmp.w	sl, #1
 800708e:	d103      	bne.n	8007098 <_strtod_l+0xa20>
 8007090:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007092:	2b00      	cmp	r3, #0
 8007094:	f43f ada6 	beq.w	8006be4 <_strtod_l+0x56c>
 8007098:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007148 <_strtod_l+0xad0>
 800709c:	4f35      	ldr	r7, [pc, #212]	@ (8007174 <_strtod_l+0xafc>)
 800709e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80070a2:	2600      	movs	r6, #0
 80070a4:	e7b1      	b.n	800700a <_strtod_l+0x992>
 80070a6:	4f34      	ldr	r7, [pc, #208]	@ (8007178 <_strtod_l+0xb00>)
 80070a8:	2600      	movs	r6, #0
 80070aa:	e7aa      	b.n	8007002 <_strtod_l+0x98a>
 80070ac:	4b32      	ldr	r3, [pc, #200]	@ (8007178 <_strtod_l+0xb00>)
 80070ae:	4630      	mov	r0, r6
 80070b0:	4639      	mov	r1, r7
 80070b2:	2200      	movs	r2, #0
 80070b4:	f7f9 fac0 	bl	8000638 <__aeabi_dmul>
 80070b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070ba:	4606      	mov	r6, r0
 80070bc:	460f      	mov	r7, r1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d09f      	beq.n	8007002 <_strtod_l+0x98a>
 80070c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80070c6:	e7a0      	b.n	800700a <_strtod_l+0x992>
 80070c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007150 <_strtod_l+0xad8>
 80070cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80070d0:	ec57 6b17 	vmov	r6, r7, d7
 80070d4:	e799      	b.n	800700a <_strtod_l+0x992>
 80070d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80070da:	9b08      	ldr	r3, [sp, #32]
 80070dc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1c1      	bne.n	8007068 <_strtod_l+0x9f0>
 80070e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80070e8:	0d1b      	lsrs	r3, r3, #20
 80070ea:	051b      	lsls	r3, r3, #20
 80070ec:	429d      	cmp	r5, r3
 80070ee:	d1bb      	bne.n	8007068 <_strtod_l+0x9f0>
 80070f0:	4630      	mov	r0, r6
 80070f2:	4639      	mov	r1, r7
 80070f4:	f7f9 fe00 	bl	8000cf8 <__aeabi_d2lz>
 80070f8:	f7f9 fa70 	bl	80005dc <__aeabi_l2d>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4630      	mov	r0, r6
 8007102:	4639      	mov	r1, r7
 8007104:	f7f9 f8e0 	bl	80002c8 <__aeabi_dsub>
 8007108:	460b      	mov	r3, r1
 800710a:	4602      	mov	r2, r0
 800710c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007110:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007114:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007116:	ea46 060a 	orr.w	r6, r6, sl
 800711a:	431e      	orrs	r6, r3
 800711c:	d06f      	beq.n	80071fe <_strtod_l+0xb86>
 800711e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007158 <_strtod_l+0xae0>)
 8007120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007124:	f7f9 fcfa 	bl	8000b1c <__aeabi_dcmplt>
 8007128:	2800      	cmp	r0, #0
 800712a:	f47f acd3 	bne.w	8006ad4 <_strtod_l+0x45c>
 800712e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007160 <_strtod_l+0xae8>)
 8007130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007134:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007138:	f7f9 fd0e 	bl	8000b58 <__aeabi_dcmpgt>
 800713c:	2800      	cmp	r0, #0
 800713e:	d093      	beq.n	8007068 <_strtod_l+0x9f0>
 8007140:	e4c8      	b.n	8006ad4 <_strtod_l+0x45c>
 8007142:	bf00      	nop
 8007144:	f3af 8000 	nop.w
 8007148:	00000000 	.word	0x00000000
 800714c:	bff00000 	.word	0xbff00000
 8007150:	00000000 	.word	0x00000000
 8007154:	3ff00000 	.word	0x3ff00000
 8007158:	94a03595 	.word	0x94a03595
 800715c:	3fdfffff 	.word	0x3fdfffff
 8007160:	35afe535 	.word	0x35afe535
 8007164:	3fe00000 	.word	0x3fe00000
 8007168:	000fffff 	.word	0x000fffff
 800716c:	7ff00000 	.word	0x7ff00000
 8007170:	7fefffff 	.word	0x7fefffff
 8007174:	3ff00000 	.word	0x3ff00000
 8007178:	3fe00000 	.word	0x3fe00000
 800717c:	7fe00000 	.word	0x7fe00000
 8007180:	7c9fffff 	.word	0x7c9fffff
 8007184:	9b08      	ldr	r3, [sp, #32]
 8007186:	b323      	cbz	r3, 80071d2 <_strtod_l+0xb5a>
 8007188:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800718c:	d821      	bhi.n	80071d2 <_strtod_l+0xb5a>
 800718e:	a328      	add	r3, pc, #160	@ (adr r3, 8007230 <_strtod_l+0xbb8>)
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	4630      	mov	r0, r6
 8007196:	4639      	mov	r1, r7
 8007198:	f7f9 fcca 	bl	8000b30 <__aeabi_dcmple>
 800719c:	b1a0      	cbz	r0, 80071c8 <_strtod_l+0xb50>
 800719e:	4639      	mov	r1, r7
 80071a0:	4630      	mov	r0, r6
 80071a2:	f7f9 fd21 	bl	8000be8 <__aeabi_d2uiz>
 80071a6:	2801      	cmp	r0, #1
 80071a8:	bf38      	it	cc
 80071aa:	2001      	movcc	r0, #1
 80071ac:	f7f9 f9ca 	bl	8000544 <__aeabi_ui2d>
 80071b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071b2:	4606      	mov	r6, r0
 80071b4:	460f      	mov	r7, r1
 80071b6:	b9fb      	cbnz	r3, 80071f8 <_strtod_l+0xb80>
 80071b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071bc:	9014      	str	r0, [sp, #80]	@ 0x50
 80071be:	9315      	str	r3, [sp, #84]	@ 0x54
 80071c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80071c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80071c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80071ce:	1b5b      	subs	r3, r3, r5
 80071d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80071d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80071d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80071da:	f7ff f8f1 	bl	80063c0 <__ulp>
 80071de:	4650      	mov	r0, sl
 80071e0:	ec53 2b10 	vmov	r2, r3, d0
 80071e4:	4659      	mov	r1, fp
 80071e6:	f7f9 fa27 	bl	8000638 <__aeabi_dmul>
 80071ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80071ee:	f7f9 f86d 	bl	80002cc <__adddf3>
 80071f2:	4682      	mov	sl, r0
 80071f4:	468b      	mov	fp, r1
 80071f6:	e770      	b.n	80070da <_strtod_l+0xa62>
 80071f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80071fc:	e7e0      	b.n	80071c0 <_strtod_l+0xb48>
 80071fe:	a30e      	add	r3, pc, #56	@ (adr r3, 8007238 <_strtod_l+0xbc0>)
 8007200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007204:	f7f9 fc8a 	bl	8000b1c <__aeabi_dcmplt>
 8007208:	e798      	b.n	800713c <_strtod_l+0xac4>
 800720a:	2300      	movs	r3, #0
 800720c:	930e      	str	r3, [sp, #56]	@ 0x38
 800720e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007210:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007212:	6013      	str	r3, [r2, #0]
 8007214:	f7ff ba6d 	b.w	80066f2 <_strtod_l+0x7a>
 8007218:	2a65      	cmp	r2, #101	@ 0x65
 800721a:	f43f ab68 	beq.w	80068ee <_strtod_l+0x276>
 800721e:	2a45      	cmp	r2, #69	@ 0x45
 8007220:	f43f ab65 	beq.w	80068ee <_strtod_l+0x276>
 8007224:	2301      	movs	r3, #1
 8007226:	f7ff bba0 	b.w	800696a <_strtod_l+0x2f2>
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w
 8007230:	ffc00000 	.word	0xffc00000
 8007234:	41dfffff 	.word	0x41dfffff
 8007238:	94a03595 	.word	0x94a03595
 800723c:	3fcfffff 	.word	0x3fcfffff

08007240 <_strtod_r>:
 8007240:	4b01      	ldr	r3, [pc, #4]	@ (8007248 <_strtod_r+0x8>)
 8007242:	f7ff ba19 	b.w	8006678 <_strtod_l>
 8007246:	bf00      	nop
 8007248:	20000068 	.word	0x20000068

0800724c <_strtol_l.isra.0>:
 800724c:	2b24      	cmp	r3, #36	@ 0x24
 800724e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007252:	4686      	mov	lr, r0
 8007254:	4690      	mov	r8, r2
 8007256:	d801      	bhi.n	800725c <_strtol_l.isra.0+0x10>
 8007258:	2b01      	cmp	r3, #1
 800725a:	d106      	bne.n	800726a <_strtol_l.isra.0+0x1e>
 800725c:	f7fd fdb8 	bl	8004dd0 <__errno>
 8007260:	2316      	movs	r3, #22
 8007262:	6003      	str	r3, [r0, #0]
 8007264:	2000      	movs	r0, #0
 8007266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800726a:	4834      	ldr	r0, [pc, #208]	@ (800733c <_strtol_l.isra.0+0xf0>)
 800726c:	460d      	mov	r5, r1
 800726e:	462a      	mov	r2, r5
 8007270:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007274:	5d06      	ldrb	r6, [r0, r4]
 8007276:	f016 0608 	ands.w	r6, r6, #8
 800727a:	d1f8      	bne.n	800726e <_strtol_l.isra.0+0x22>
 800727c:	2c2d      	cmp	r4, #45	@ 0x2d
 800727e:	d110      	bne.n	80072a2 <_strtol_l.isra.0+0x56>
 8007280:	782c      	ldrb	r4, [r5, #0]
 8007282:	2601      	movs	r6, #1
 8007284:	1c95      	adds	r5, r2, #2
 8007286:	f033 0210 	bics.w	r2, r3, #16
 800728a:	d115      	bne.n	80072b8 <_strtol_l.isra.0+0x6c>
 800728c:	2c30      	cmp	r4, #48	@ 0x30
 800728e:	d10d      	bne.n	80072ac <_strtol_l.isra.0+0x60>
 8007290:	782a      	ldrb	r2, [r5, #0]
 8007292:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007296:	2a58      	cmp	r2, #88	@ 0x58
 8007298:	d108      	bne.n	80072ac <_strtol_l.isra.0+0x60>
 800729a:	786c      	ldrb	r4, [r5, #1]
 800729c:	3502      	adds	r5, #2
 800729e:	2310      	movs	r3, #16
 80072a0:	e00a      	b.n	80072b8 <_strtol_l.isra.0+0x6c>
 80072a2:	2c2b      	cmp	r4, #43	@ 0x2b
 80072a4:	bf04      	itt	eq
 80072a6:	782c      	ldrbeq	r4, [r5, #0]
 80072a8:	1c95      	addeq	r5, r2, #2
 80072aa:	e7ec      	b.n	8007286 <_strtol_l.isra.0+0x3a>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1f6      	bne.n	800729e <_strtol_l.isra.0+0x52>
 80072b0:	2c30      	cmp	r4, #48	@ 0x30
 80072b2:	bf14      	ite	ne
 80072b4:	230a      	movne	r3, #10
 80072b6:	2308      	moveq	r3, #8
 80072b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072c0:	2200      	movs	r2, #0
 80072c2:	fbbc f9f3 	udiv	r9, ip, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80072cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072d0:	2f09      	cmp	r7, #9
 80072d2:	d80f      	bhi.n	80072f4 <_strtol_l.isra.0+0xa8>
 80072d4:	463c      	mov	r4, r7
 80072d6:	42a3      	cmp	r3, r4
 80072d8:	dd1b      	ble.n	8007312 <_strtol_l.isra.0+0xc6>
 80072da:	1c57      	adds	r7, r2, #1
 80072dc:	d007      	beq.n	80072ee <_strtol_l.isra.0+0xa2>
 80072de:	4581      	cmp	r9, r0
 80072e0:	d314      	bcc.n	800730c <_strtol_l.isra.0+0xc0>
 80072e2:	d101      	bne.n	80072e8 <_strtol_l.isra.0+0x9c>
 80072e4:	45a2      	cmp	sl, r4
 80072e6:	db11      	blt.n	800730c <_strtol_l.isra.0+0xc0>
 80072e8:	fb00 4003 	mla	r0, r0, r3, r4
 80072ec:	2201      	movs	r2, #1
 80072ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072f2:	e7eb      	b.n	80072cc <_strtol_l.isra.0+0x80>
 80072f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80072f8:	2f19      	cmp	r7, #25
 80072fa:	d801      	bhi.n	8007300 <_strtol_l.isra.0+0xb4>
 80072fc:	3c37      	subs	r4, #55	@ 0x37
 80072fe:	e7ea      	b.n	80072d6 <_strtol_l.isra.0+0x8a>
 8007300:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007304:	2f19      	cmp	r7, #25
 8007306:	d804      	bhi.n	8007312 <_strtol_l.isra.0+0xc6>
 8007308:	3c57      	subs	r4, #87	@ 0x57
 800730a:	e7e4      	b.n	80072d6 <_strtol_l.isra.0+0x8a>
 800730c:	f04f 32ff 	mov.w	r2, #4294967295
 8007310:	e7ed      	b.n	80072ee <_strtol_l.isra.0+0xa2>
 8007312:	1c53      	adds	r3, r2, #1
 8007314:	d108      	bne.n	8007328 <_strtol_l.isra.0+0xdc>
 8007316:	2322      	movs	r3, #34	@ 0x22
 8007318:	f8ce 3000 	str.w	r3, [lr]
 800731c:	4660      	mov	r0, ip
 800731e:	f1b8 0f00 	cmp.w	r8, #0
 8007322:	d0a0      	beq.n	8007266 <_strtol_l.isra.0+0x1a>
 8007324:	1e69      	subs	r1, r5, #1
 8007326:	e006      	b.n	8007336 <_strtol_l.isra.0+0xea>
 8007328:	b106      	cbz	r6, 800732c <_strtol_l.isra.0+0xe0>
 800732a:	4240      	negs	r0, r0
 800732c:	f1b8 0f00 	cmp.w	r8, #0
 8007330:	d099      	beq.n	8007266 <_strtol_l.isra.0+0x1a>
 8007332:	2a00      	cmp	r2, #0
 8007334:	d1f6      	bne.n	8007324 <_strtol_l.isra.0+0xd8>
 8007336:	f8c8 1000 	str.w	r1, [r8]
 800733a:	e794      	b.n	8007266 <_strtol_l.isra.0+0x1a>
 800733c:	08008879 	.word	0x08008879

08007340 <_strtol_r>:
 8007340:	f7ff bf84 	b.w	800724c <_strtol_l.isra.0>

08007344 <__ssputs_r>:
 8007344:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007348:	688e      	ldr	r6, [r1, #8]
 800734a:	461f      	mov	r7, r3
 800734c:	42be      	cmp	r6, r7
 800734e:	680b      	ldr	r3, [r1, #0]
 8007350:	4682      	mov	sl, r0
 8007352:	460c      	mov	r4, r1
 8007354:	4690      	mov	r8, r2
 8007356:	d82d      	bhi.n	80073b4 <__ssputs_r+0x70>
 8007358:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800735c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007360:	d026      	beq.n	80073b0 <__ssputs_r+0x6c>
 8007362:	6965      	ldr	r5, [r4, #20]
 8007364:	6909      	ldr	r1, [r1, #16]
 8007366:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800736a:	eba3 0901 	sub.w	r9, r3, r1
 800736e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007372:	1c7b      	adds	r3, r7, #1
 8007374:	444b      	add	r3, r9
 8007376:	106d      	asrs	r5, r5, #1
 8007378:	429d      	cmp	r5, r3
 800737a:	bf38      	it	cc
 800737c:	461d      	movcc	r5, r3
 800737e:	0553      	lsls	r3, r2, #21
 8007380:	d527      	bpl.n	80073d2 <__ssputs_r+0x8e>
 8007382:	4629      	mov	r1, r5
 8007384:	f7fe fc24 	bl	8005bd0 <_malloc_r>
 8007388:	4606      	mov	r6, r0
 800738a:	b360      	cbz	r0, 80073e6 <__ssputs_r+0xa2>
 800738c:	6921      	ldr	r1, [r4, #16]
 800738e:	464a      	mov	r2, r9
 8007390:	f000 fbee 	bl	8007b70 <memcpy>
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800739a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800739e:	81a3      	strh	r3, [r4, #12]
 80073a0:	6126      	str	r6, [r4, #16]
 80073a2:	6165      	str	r5, [r4, #20]
 80073a4:	444e      	add	r6, r9
 80073a6:	eba5 0509 	sub.w	r5, r5, r9
 80073aa:	6026      	str	r6, [r4, #0]
 80073ac:	60a5      	str	r5, [r4, #8]
 80073ae:	463e      	mov	r6, r7
 80073b0:	42be      	cmp	r6, r7
 80073b2:	d900      	bls.n	80073b6 <__ssputs_r+0x72>
 80073b4:	463e      	mov	r6, r7
 80073b6:	6820      	ldr	r0, [r4, #0]
 80073b8:	4632      	mov	r2, r6
 80073ba:	4641      	mov	r1, r8
 80073bc:	f000 fb9c 	bl	8007af8 <memmove>
 80073c0:	68a3      	ldr	r3, [r4, #8]
 80073c2:	1b9b      	subs	r3, r3, r6
 80073c4:	60a3      	str	r3, [r4, #8]
 80073c6:	6823      	ldr	r3, [r4, #0]
 80073c8:	4433      	add	r3, r6
 80073ca:	6023      	str	r3, [r4, #0]
 80073cc:	2000      	movs	r0, #0
 80073ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073d2:	462a      	mov	r2, r5
 80073d4:	f000 ff61 	bl	800829a <_realloc_r>
 80073d8:	4606      	mov	r6, r0
 80073da:	2800      	cmp	r0, #0
 80073dc:	d1e0      	bne.n	80073a0 <__ssputs_r+0x5c>
 80073de:	6921      	ldr	r1, [r4, #16]
 80073e0:	4650      	mov	r0, sl
 80073e2:	f7fe fb81 	bl	8005ae8 <_free_r>
 80073e6:	230c      	movs	r3, #12
 80073e8:	f8ca 3000 	str.w	r3, [sl]
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f2:	81a3      	strh	r3, [r4, #12]
 80073f4:	f04f 30ff 	mov.w	r0, #4294967295
 80073f8:	e7e9      	b.n	80073ce <__ssputs_r+0x8a>
	...

080073fc <_svfiprintf_r>:
 80073fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007400:	4698      	mov	r8, r3
 8007402:	898b      	ldrh	r3, [r1, #12]
 8007404:	061b      	lsls	r3, r3, #24
 8007406:	b09d      	sub	sp, #116	@ 0x74
 8007408:	4607      	mov	r7, r0
 800740a:	460d      	mov	r5, r1
 800740c:	4614      	mov	r4, r2
 800740e:	d510      	bpl.n	8007432 <_svfiprintf_r+0x36>
 8007410:	690b      	ldr	r3, [r1, #16]
 8007412:	b973      	cbnz	r3, 8007432 <_svfiprintf_r+0x36>
 8007414:	2140      	movs	r1, #64	@ 0x40
 8007416:	f7fe fbdb 	bl	8005bd0 <_malloc_r>
 800741a:	6028      	str	r0, [r5, #0]
 800741c:	6128      	str	r0, [r5, #16]
 800741e:	b930      	cbnz	r0, 800742e <_svfiprintf_r+0x32>
 8007420:	230c      	movs	r3, #12
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	f04f 30ff 	mov.w	r0, #4294967295
 8007428:	b01d      	add	sp, #116	@ 0x74
 800742a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800742e:	2340      	movs	r3, #64	@ 0x40
 8007430:	616b      	str	r3, [r5, #20]
 8007432:	2300      	movs	r3, #0
 8007434:	9309      	str	r3, [sp, #36]	@ 0x24
 8007436:	2320      	movs	r3, #32
 8007438:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800743c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007440:	2330      	movs	r3, #48	@ 0x30
 8007442:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80075e0 <_svfiprintf_r+0x1e4>
 8007446:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800744a:	f04f 0901 	mov.w	r9, #1
 800744e:	4623      	mov	r3, r4
 8007450:	469a      	mov	sl, r3
 8007452:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007456:	b10a      	cbz	r2, 800745c <_svfiprintf_r+0x60>
 8007458:	2a25      	cmp	r2, #37	@ 0x25
 800745a:	d1f9      	bne.n	8007450 <_svfiprintf_r+0x54>
 800745c:	ebba 0b04 	subs.w	fp, sl, r4
 8007460:	d00b      	beq.n	800747a <_svfiprintf_r+0x7e>
 8007462:	465b      	mov	r3, fp
 8007464:	4622      	mov	r2, r4
 8007466:	4629      	mov	r1, r5
 8007468:	4638      	mov	r0, r7
 800746a:	f7ff ff6b 	bl	8007344 <__ssputs_r>
 800746e:	3001      	adds	r0, #1
 8007470:	f000 80a7 	beq.w	80075c2 <_svfiprintf_r+0x1c6>
 8007474:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007476:	445a      	add	r2, fp
 8007478:	9209      	str	r2, [sp, #36]	@ 0x24
 800747a:	f89a 3000 	ldrb.w	r3, [sl]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f000 809f 	beq.w	80075c2 <_svfiprintf_r+0x1c6>
 8007484:	2300      	movs	r3, #0
 8007486:	f04f 32ff 	mov.w	r2, #4294967295
 800748a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800748e:	f10a 0a01 	add.w	sl, sl, #1
 8007492:	9304      	str	r3, [sp, #16]
 8007494:	9307      	str	r3, [sp, #28]
 8007496:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800749a:	931a      	str	r3, [sp, #104]	@ 0x68
 800749c:	4654      	mov	r4, sl
 800749e:	2205      	movs	r2, #5
 80074a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074a4:	484e      	ldr	r0, [pc, #312]	@ (80075e0 <_svfiprintf_r+0x1e4>)
 80074a6:	f7f8 feb3 	bl	8000210 <memchr>
 80074aa:	9a04      	ldr	r2, [sp, #16]
 80074ac:	b9d8      	cbnz	r0, 80074e6 <_svfiprintf_r+0xea>
 80074ae:	06d0      	lsls	r0, r2, #27
 80074b0:	bf44      	itt	mi
 80074b2:	2320      	movmi	r3, #32
 80074b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074b8:	0711      	lsls	r1, r2, #28
 80074ba:	bf44      	itt	mi
 80074bc:	232b      	movmi	r3, #43	@ 0x2b
 80074be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074c2:	f89a 3000 	ldrb.w	r3, [sl]
 80074c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80074c8:	d015      	beq.n	80074f6 <_svfiprintf_r+0xfa>
 80074ca:	9a07      	ldr	r2, [sp, #28]
 80074cc:	4654      	mov	r4, sl
 80074ce:	2000      	movs	r0, #0
 80074d0:	f04f 0c0a 	mov.w	ip, #10
 80074d4:	4621      	mov	r1, r4
 80074d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074da:	3b30      	subs	r3, #48	@ 0x30
 80074dc:	2b09      	cmp	r3, #9
 80074de:	d94b      	bls.n	8007578 <_svfiprintf_r+0x17c>
 80074e0:	b1b0      	cbz	r0, 8007510 <_svfiprintf_r+0x114>
 80074e2:	9207      	str	r2, [sp, #28]
 80074e4:	e014      	b.n	8007510 <_svfiprintf_r+0x114>
 80074e6:	eba0 0308 	sub.w	r3, r0, r8
 80074ea:	fa09 f303 	lsl.w	r3, r9, r3
 80074ee:	4313      	orrs	r3, r2
 80074f0:	9304      	str	r3, [sp, #16]
 80074f2:	46a2      	mov	sl, r4
 80074f4:	e7d2      	b.n	800749c <_svfiprintf_r+0xa0>
 80074f6:	9b03      	ldr	r3, [sp, #12]
 80074f8:	1d19      	adds	r1, r3, #4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	9103      	str	r1, [sp, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bfbb      	ittet	lt
 8007502:	425b      	neglt	r3, r3
 8007504:	f042 0202 	orrlt.w	r2, r2, #2
 8007508:	9307      	strge	r3, [sp, #28]
 800750a:	9307      	strlt	r3, [sp, #28]
 800750c:	bfb8      	it	lt
 800750e:	9204      	strlt	r2, [sp, #16]
 8007510:	7823      	ldrb	r3, [r4, #0]
 8007512:	2b2e      	cmp	r3, #46	@ 0x2e
 8007514:	d10a      	bne.n	800752c <_svfiprintf_r+0x130>
 8007516:	7863      	ldrb	r3, [r4, #1]
 8007518:	2b2a      	cmp	r3, #42	@ 0x2a
 800751a:	d132      	bne.n	8007582 <_svfiprintf_r+0x186>
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	1d1a      	adds	r2, r3, #4
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	9203      	str	r2, [sp, #12]
 8007524:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007528:	3402      	adds	r4, #2
 800752a:	9305      	str	r3, [sp, #20]
 800752c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80075f0 <_svfiprintf_r+0x1f4>
 8007530:	7821      	ldrb	r1, [r4, #0]
 8007532:	2203      	movs	r2, #3
 8007534:	4650      	mov	r0, sl
 8007536:	f7f8 fe6b 	bl	8000210 <memchr>
 800753a:	b138      	cbz	r0, 800754c <_svfiprintf_r+0x150>
 800753c:	9b04      	ldr	r3, [sp, #16]
 800753e:	eba0 000a 	sub.w	r0, r0, sl
 8007542:	2240      	movs	r2, #64	@ 0x40
 8007544:	4082      	lsls	r2, r0
 8007546:	4313      	orrs	r3, r2
 8007548:	3401      	adds	r4, #1
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007550:	4824      	ldr	r0, [pc, #144]	@ (80075e4 <_svfiprintf_r+0x1e8>)
 8007552:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007556:	2206      	movs	r2, #6
 8007558:	f7f8 fe5a 	bl	8000210 <memchr>
 800755c:	2800      	cmp	r0, #0
 800755e:	d036      	beq.n	80075ce <_svfiprintf_r+0x1d2>
 8007560:	4b21      	ldr	r3, [pc, #132]	@ (80075e8 <_svfiprintf_r+0x1ec>)
 8007562:	bb1b      	cbnz	r3, 80075ac <_svfiprintf_r+0x1b0>
 8007564:	9b03      	ldr	r3, [sp, #12]
 8007566:	3307      	adds	r3, #7
 8007568:	f023 0307 	bic.w	r3, r3, #7
 800756c:	3308      	adds	r3, #8
 800756e:	9303      	str	r3, [sp, #12]
 8007570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007572:	4433      	add	r3, r6
 8007574:	9309      	str	r3, [sp, #36]	@ 0x24
 8007576:	e76a      	b.n	800744e <_svfiprintf_r+0x52>
 8007578:	fb0c 3202 	mla	r2, ip, r2, r3
 800757c:	460c      	mov	r4, r1
 800757e:	2001      	movs	r0, #1
 8007580:	e7a8      	b.n	80074d4 <_svfiprintf_r+0xd8>
 8007582:	2300      	movs	r3, #0
 8007584:	3401      	adds	r4, #1
 8007586:	9305      	str	r3, [sp, #20]
 8007588:	4619      	mov	r1, r3
 800758a:	f04f 0c0a 	mov.w	ip, #10
 800758e:	4620      	mov	r0, r4
 8007590:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007594:	3a30      	subs	r2, #48	@ 0x30
 8007596:	2a09      	cmp	r2, #9
 8007598:	d903      	bls.n	80075a2 <_svfiprintf_r+0x1a6>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d0c6      	beq.n	800752c <_svfiprintf_r+0x130>
 800759e:	9105      	str	r1, [sp, #20]
 80075a0:	e7c4      	b.n	800752c <_svfiprintf_r+0x130>
 80075a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80075a6:	4604      	mov	r4, r0
 80075a8:	2301      	movs	r3, #1
 80075aa:	e7f0      	b.n	800758e <_svfiprintf_r+0x192>
 80075ac:	ab03      	add	r3, sp, #12
 80075ae:	9300      	str	r3, [sp, #0]
 80075b0:	462a      	mov	r2, r5
 80075b2:	4b0e      	ldr	r3, [pc, #56]	@ (80075ec <_svfiprintf_r+0x1f0>)
 80075b4:	a904      	add	r1, sp, #16
 80075b6:	4638      	mov	r0, r7
 80075b8:	f7fc fcba 	bl	8003f30 <_printf_float>
 80075bc:	1c42      	adds	r2, r0, #1
 80075be:	4606      	mov	r6, r0
 80075c0:	d1d6      	bne.n	8007570 <_svfiprintf_r+0x174>
 80075c2:	89ab      	ldrh	r3, [r5, #12]
 80075c4:	065b      	lsls	r3, r3, #25
 80075c6:	f53f af2d 	bmi.w	8007424 <_svfiprintf_r+0x28>
 80075ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80075cc:	e72c      	b.n	8007428 <_svfiprintf_r+0x2c>
 80075ce:	ab03      	add	r3, sp, #12
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	462a      	mov	r2, r5
 80075d4:	4b05      	ldr	r3, [pc, #20]	@ (80075ec <_svfiprintf_r+0x1f0>)
 80075d6:	a904      	add	r1, sp, #16
 80075d8:	4638      	mov	r0, r7
 80075da:	f7fc ff41 	bl	8004460 <_printf_i>
 80075de:	e7ed      	b.n	80075bc <_svfiprintf_r+0x1c0>
 80075e0:	08008675 	.word	0x08008675
 80075e4:	0800867f 	.word	0x0800867f
 80075e8:	08003f31 	.word	0x08003f31
 80075ec:	08007345 	.word	0x08007345
 80075f0:	0800867b 	.word	0x0800867b

080075f4 <__sfputc_r>:
 80075f4:	6893      	ldr	r3, [r2, #8]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	b410      	push	{r4}
 80075fc:	6093      	str	r3, [r2, #8]
 80075fe:	da08      	bge.n	8007612 <__sfputc_r+0x1e>
 8007600:	6994      	ldr	r4, [r2, #24]
 8007602:	42a3      	cmp	r3, r4
 8007604:	db01      	blt.n	800760a <__sfputc_r+0x16>
 8007606:	290a      	cmp	r1, #10
 8007608:	d103      	bne.n	8007612 <__sfputc_r+0x1e>
 800760a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800760e:	f000 b9df 	b.w	80079d0 <__swbuf_r>
 8007612:	6813      	ldr	r3, [r2, #0]
 8007614:	1c58      	adds	r0, r3, #1
 8007616:	6010      	str	r0, [r2, #0]
 8007618:	7019      	strb	r1, [r3, #0]
 800761a:	4608      	mov	r0, r1
 800761c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007620:	4770      	bx	lr

08007622 <__sfputs_r>:
 8007622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007624:	4606      	mov	r6, r0
 8007626:	460f      	mov	r7, r1
 8007628:	4614      	mov	r4, r2
 800762a:	18d5      	adds	r5, r2, r3
 800762c:	42ac      	cmp	r4, r5
 800762e:	d101      	bne.n	8007634 <__sfputs_r+0x12>
 8007630:	2000      	movs	r0, #0
 8007632:	e007      	b.n	8007644 <__sfputs_r+0x22>
 8007634:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007638:	463a      	mov	r2, r7
 800763a:	4630      	mov	r0, r6
 800763c:	f7ff ffda 	bl	80075f4 <__sfputc_r>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d1f3      	bne.n	800762c <__sfputs_r+0xa>
 8007644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007648 <_vfiprintf_r>:
 8007648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	460d      	mov	r5, r1
 800764e:	b09d      	sub	sp, #116	@ 0x74
 8007650:	4614      	mov	r4, r2
 8007652:	4698      	mov	r8, r3
 8007654:	4606      	mov	r6, r0
 8007656:	b118      	cbz	r0, 8007660 <_vfiprintf_r+0x18>
 8007658:	6a03      	ldr	r3, [r0, #32]
 800765a:	b90b      	cbnz	r3, 8007660 <_vfiprintf_r+0x18>
 800765c:	f7fd fab8 	bl	8004bd0 <__sinit>
 8007660:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007662:	07d9      	lsls	r1, r3, #31
 8007664:	d405      	bmi.n	8007672 <_vfiprintf_r+0x2a>
 8007666:	89ab      	ldrh	r3, [r5, #12]
 8007668:	059a      	lsls	r2, r3, #22
 800766a:	d402      	bmi.n	8007672 <_vfiprintf_r+0x2a>
 800766c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800766e:	f7fd fbda 	bl	8004e26 <__retarget_lock_acquire_recursive>
 8007672:	89ab      	ldrh	r3, [r5, #12]
 8007674:	071b      	lsls	r3, r3, #28
 8007676:	d501      	bpl.n	800767c <_vfiprintf_r+0x34>
 8007678:	692b      	ldr	r3, [r5, #16]
 800767a:	b99b      	cbnz	r3, 80076a4 <_vfiprintf_r+0x5c>
 800767c:	4629      	mov	r1, r5
 800767e:	4630      	mov	r0, r6
 8007680:	f000 f9e4 	bl	8007a4c <__swsetup_r>
 8007684:	b170      	cbz	r0, 80076a4 <_vfiprintf_r+0x5c>
 8007686:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007688:	07dc      	lsls	r4, r3, #31
 800768a:	d504      	bpl.n	8007696 <_vfiprintf_r+0x4e>
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	b01d      	add	sp, #116	@ 0x74
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	89ab      	ldrh	r3, [r5, #12]
 8007698:	0598      	lsls	r0, r3, #22
 800769a:	d4f7      	bmi.n	800768c <_vfiprintf_r+0x44>
 800769c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800769e:	f7fd fbc3 	bl	8004e28 <__retarget_lock_release_recursive>
 80076a2:	e7f3      	b.n	800768c <_vfiprintf_r+0x44>
 80076a4:	2300      	movs	r3, #0
 80076a6:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a8:	2320      	movs	r3, #32
 80076aa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80076b2:	2330      	movs	r3, #48	@ 0x30
 80076b4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007864 <_vfiprintf_r+0x21c>
 80076b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076bc:	f04f 0901 	mov.w	r9, #1
 80076c0:	4623      	mov	r3, r4
 80076c2:	469a      	mov	sl, r3
 80076c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076c8:	b10a      	cbz	r2, 80076ce <_vfiprintf_r+0x86>
 80076ca:	2a25      	cmp	r2, #37	@ 0x25
 80076cc:	d1f9      	bne.n	80076c2 <_vfiprintf_r+0x7a>
 80076ce:	ebba 0b04 	subs.w	fp, sl, r4
 80076d2:	d00b      	beq.n	80076ec <_vfiprintf_r+0xa4>
 80076d4:	465b      	mov	r3, fp
 80076d6:	4622      	mov	r2, r4
 80076d8:	4629      	mov	r1, r5
 80076da:	4630      	mov	r0, r6
 80076dc:	f7ff ffa1 	bl	8007622 <__sfputs_r>
 80076e0:	3001      	adds	r0, #1
 80076e2:	f000 80a7 	beq.w	8007834 <_vfiprintf_r+0x1ec>
 80076e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076e8:	445a      	add	r2, fp
 80076ea:	9209      	str	r2, [sp, #36]	@ 0x24
 80076ec:	f89a 3000 	ldrb.w	r3, [sl]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	f000 809f 	beq.w	8007834 <_vfiprintf_r+0x1ec>
 80076f6:	2300      	movs	r3, #0
 80076f8:	f04f 32ff 	mov.w	r2, #4294967295
 80076fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007700:	f10a 0a01 	add.w	sl, sl, #1
 8007704:	9304      	str	r3, [sp, #16]
 8007706:	9307      	str	r3, [sp, #28]
 8007708:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800770c:	931a      	str	r3, [sp, #104]	@ 0x68
 800770e:	4654      	mov	r4, sl
 8007710:	2205      	movs	r2, #5
 8007712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007716:	4853      	ldr	r0, [pc, #332]	@ (8007864 <_vfiprintf_r+0x21c>)
 8007718:	f7f8 fd7a 	bl	8000210 <memchr>
 800771c:	9a04      	ldr	r2, [sp, #16]
 800771e:	b9d8      	cbnz	r0, 8007758 <_vfiprintf_r+0x110>
 8007720:	06d1      	lsls	r1, r2, #27
 8007722:	bf44      	itt	mi
 8007724:	2320      	movmi	r3, #32
 8007726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800772a:	0713      	lsls	r3, r2, #28
 800772c:	bf44      	itt	mi
 800772e:	232b      	movmi	r3, #43	@ 0x2b
 8007730:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007734:	f89a 3000 	ldrb.w	r3, [sl]
 8007738:	2b2a      	cmp	r3, #42	@ 0x2a
 800773a:	d015      	beq.n	8007768 <_vfiprintf_r+0x120>
 800773c:	9a07      	ldr	r2, [sp, #28]
 800773e:	4654      	mov	r4, sl
 8007740:	2000      	movs	r0, #0
 8007742:	f04f 0c0a 	mov.w	ip, #10
 8007746:	4621      	mov	r1, r4
 8007748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800774c:	3b30      	subs	r3, #48	@ 0x30
 800774e:	2b09      	cmp	r3, #9
 8007750:	d94b      	bls.n	80077ea <_vfiprintf_r+0x1a2>
 8007752:	b1b0      	cbz	r0, 8007782 <_vfiprintf_r+0x13a>
 8007754:	9207      	str	r2, [sp, #28]
 8007756:	e014      	b.n	8007782 <_vfiprintf_r+0x13a>
 8007758:	eba0 0308 	sub.w	r3, r0, r8
 800775c:	fa09 f303 	lsl.w	r3, r9, r3
 8007760:	4313      	orrs	r3, r2
 8007762:	9304      	str	r3, [sp, #16]
 8007764:	46a2      	mov	sl, r4
 8007766:	e7d2      	b.n	800770e <_vfiprintf_r+0xc6>
 8007768:	9b03      	ldr	r3, [sp, #12]
 800776a:	1d19      	adds	r1, r3, #4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	9103      	str	r1, [sp, #12]
 8007770:	2b00      	cmp	r3, #0
 8007772:	bfbb      	ittet	lt
 8007774:	425b      	neglt	r3, r3
 8007776:	f042 0202 	orrlt.w	r2, r2, #2
 800777a:	9307      	strge	r3, [sp, #28]
 800777c:	9307      	strlt	r3, [sp, #28]
 800777e:	bfb8      	it	lt
 8007780:	9204      	strlt	r2, [sp, #16]
 8007782:	7823      	ldrb	r3, [r4, #0]
 8007784:	2b2e      	cmp	r3, #46	@ 0x2e
 8007786:	d10a      	bne.n	800779e <_vfiprintf_r+0x156>
 8007788:	7863      	ldrb	r3, [r4, #1]
 800778a:	2b2a      	cmp	r3, #42	@ 0x2a
 800778c:	d132      	bne.n	80077f4 <_vfiprintf_r+0x1ac>
 800778e:	9b03      	ldr	r3, [sp, #12]
 8007790:	1d1a      	adds	r2, r3, #4
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	9203      	str	r2, [sp, #12]
 8007796:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800779a:	3402      	adds	r4, #2
 800779c:	9305      	str	r3, [sp, #20]
 800779e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007874 <_vfiprintf_r+0x22c>
 80077a2:	7821      	ldrb	r1, [r4, #0]
 80077a4:	2203      	movs	r2, #3
 80077a6:	4650      	mov	r0, sl
 80077a8:	f7f8 fd32 	bl	8000210 <memchr>
 80077ac:	b138      	cbz	r0, 80077be <_vfiprintf_r+0x176>
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	eba0 000a 	sub.w	r0, r0, sl
 80077b4:	2240      	movs	r2, #64	@ 0x40
 80077b6:	4082      	lsls	r2, r0
 80077b8:	4313      	orrs	r3, r2
 80077ba:	3401      	adds	r4, #1
 80077bc:	9304      	str	r3, [sp, #16]
 80077be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077c2:	4829      	ldr	r0, [pc, #164]	@ (8007868 <_vfiprintf_r+0x220>)
 80077c4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077c8:	2206      	movs	r2, #6
 80077ca:	f7f8 fd21 	bl	8000210 <memchr>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d03f      	beq.n	8007852 <_vfiprintf_r+0x20a>
 80077d2:	4b26      	ldr	r3, [pc, #152]	@ (800786c <_vfiprintf_r+0x224>)
 80077d4:	bb1b      	cbnz	r3, 800781e <_vfiprintf_r+0x1d6>
 80077d6:	9b03      	ldr	r3, [sp, #12]
 80077d8:	3307      	adds	r3, #7
 80077da:	f023 0307 	bic.w	r3, r3, #7
 80077de:	3308      	adds	r3, #8
 80077e0:	9303      	str	r3, [sp, #12]
 80077e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e4:	443b      	add	r3, r7
 80077e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80077e8:	e76a      	b.n	80076c0 <_vfiprintf_r+0x78>
 80077ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80077ee:	460c      	mov	r4, r1
 80077f0:	2001      	movs	r0, #1
 80077f2:	e7a8      	b.n	8007746 <_vfiprintf_r+0xfe>
 80077f4:	2300      	movs	r3, #0
 80077f6:	3401      	adds	r4, #1
 80077f8:	9305      	str	r3, [sp, #20]
 80077fa:	4619      	mov	r1, r3
 80077fc:	f04f 0c0a 	mov.w	ip, #10
 8007800:	4620      	mov	r0, r4
 8007802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007806:	3a30      	subs	r2, #48	@ 0x30
 8007808:	2a09      	cmp	r2, #9
 800780a:	d903      	bls.n	8007814 <_vfiprintf_r+0x1cc>
 800780c:	2b00      	cmp	r3, #0
 800780e:	d0c6      	beq.n	800779e <_vfiprintf_r+0x156>
 8007810:	9105      	str	r1, [sp, #20]
 8007812:	e7c4      	b.n	800779e <_vfiprintf_r+0x156>
 8007814:	fb0c 2101 	mla	r1, ip, r1, r2
 8007818:	4604      	mov	r4, r0
 800781a:	2301      	movs	r3, #1
 800781c:	e7f0      	b.n	8007800 <_vfiprintf_r+0x1b8>
 800781e:	ab03      	add	r3, sp, #12
 8007820:	9300      	str	r3, [sp, #0]
 8007822:	462a      	mov	r2, r5
 8007824:	4b12      	ldr	r3, [pc, #72]	@ (8007870 <_vfiprintf_r+0x228>)
 8007826:	a904      	add	r1, sp, #16
 8007828:	4630      	mov	r0, r6
 800782a:	f7fc fb81 	bl	8003f30 <_printf_float>
 800782e:	4607      	mov	r7, r0
 8007830:	1c78      	adds	r0, r7, #1
 8007832:	d1d6      	bne.n	80077e2 <_vfiprintf_r+0x19a>
 8007834:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007836:	07d9      	lsls	r1, r3, #31
 8007838:	d405      	bmi.n	8007846 <_vfiprintf_r+0x1fe>
 800783a:	89ab      	ldrh	r3, [r5, #12]
 800783c:	059a      	lsls	r2, r3, #22
 800783e:	d402      	bmi.n	8007846 <_vfiprintf_r+0x1fe>
 8007840:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007842:	f7fd faf1 	bl	8004e28 <__retarget_lock_release_recursive>
 8007846:	89ab      	ldrh	r3, [r5, #12]
 8007848:	065b      	lsls	r3, r3, #25
 800784a:	f53f af1f 	bmi.w	800768c <_vfiprintf_r+0x44>
 800784e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007850:	e71e      	b.n	8007690 <_vfiprintf_r+0x48>
 8007852:	ab03      	add	r3, sp, #12
 8007854:	9300      	str	r3, [sp, #0]
 8007856:	462a      	mov	r2, r5
 8007858:	4b05      	ldr	r3, [pc, #20]	@ (8007870 <_vfiprintf_r+0x228>)
 800785a:	a904      	add	r1, sp, #16
 800785c:	4630      	mov	r0, r6
 800785e:	f7fc fdff 	bl	8004460 <_printf_i>
 8007862:	e7e4      	b.n	800782e <_vfiprintf_r+0x1e6>
 8007864:	08008675 	.word	0x08008675
 8007868:	0800867f 	.word	0x0800867f
 800786c:	08003f31 	.word	0x08003f31
 8007870:	08007623 	.word	0x08007623
 8007874:	0800867b 	.word	0x0800867b

08007878 <__sflush_r>:
 8007878:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800787c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007880:	0716      	lsls	r6, r2, #28
 8007882:	4605      	mov	r5, r0
 8007884:	460c      	mov	r4, r1
 8007886:	d454      	bmi.n	8007932 <__sflush_r+0xba>
 8007888:	684b      	ldr	r3, [r1, #4]
 800788a:	2b00      	cmp	r3, #0
 800788c:	dc02      	bgt.n	8007894 <__sflush_r+0x1c>
 800788e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007890:	2b00      	cmp	r3, #0
 8007892:	dd48      	ble.n	8007926 <__sflush_r+0xae>
 8007894:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007896:	2e00      	cmp	r6, #0
 8007898:	d045      	beq.n	8007926 <__sflush_r+0xae>
 800789a:	2300      	movs	r3, #0
 800789c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80078a0:	682f      	ldr	r7, [r5, #0]
 80078a2:	6a21      	ldr	r1, [r4, #32]
 80078a4:	602b      	str	r3, [r5, #0]
 80078a6:	d030      	beq.n	800790a <__sflush_r+0x92>
 80078a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	0759      	lsls	r1, r3, #29
 80078ae:	d505      	bpl.n	80078bc <__sflush_r+0x44>
 80078b0:	6863      	ldr	r3, [r4, #4]
 80078b2:	1ad2      	subs	r2, r2, r3
 80078b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80078b6:	b10b      	cbz	r3, 80078bc <__sflush_r+0x44>
 80078b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80078ba:	1ad2      	subs	r2, r2, r3
 80078bc:	2300      	movs	r3, #0
 80078be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078c0:	6a21      	ldr	r1, [r4, #32]
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b0      	blx	r6
 80078c6:	1c43      	adds	r3, r0, #1
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	d106      	bne.n	80078da <__sflush_r+0x62>
 80078cc:	6829      	ldr	r1, [r5, #0]
 80078ce:	291d      	cmp	r1, #29
 80078d0:	d82b      	bhi.n	800792a <__sflush_r+0xb2>
 80078d2:	4a2a      	ldr	r2, [pc, #168]	@ (800797c <__sflush_r+0x104>)
 80078d4:	40ca      	lsrs	r2, r1
 80078d6:	07d6      	lsls	r6, r2, #31
 80078d8:	d527      	bpl.n	800792a <__sflush_r+0xb2>
 80078da:	2200      	movs	r2, #0
 80078dc:	6062      	str	r2, [r4, #4]
 80078de:	04d9      	lsls	r1, r3, #19
 80078e0:	6922      	ldr	r2, [r4, #16]
 80078e2:	6022      	str	r2, [r4, #0]
 80078e4:	d504      	bpl.n	80078f0 <__sflush_r+0x78>
 80078e6:	1c42      	adds	r2, r0, #1
 80078e8:	d101      	bne.n	80078ee <__sflush_r+0x76>
 80078ea:	682b      	ldr	r3, [r5, #0]
 80078ec:	b903      	cbnz	r3, 80078f0 <__sflush_r+0x78>
 80078ee:	6560      	str	r0, [r4, #84]	@ 0x54
 80078f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078f2:	602f      	str	r7, [r5, #0]
 80078f4:	b1b9      	cbz	r1, 8007926 <__sflush_r+0xae>
 80078f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078fa:	4299      	cmp	r1, r3
 80078fc:	d002      	beq.n	8007904 <__sflush_r+0x8c>
 80078fe:	4628      	mov	r0, r5
 8007900:	f7fe f8f2 	bl	8005ae8 <_free_r>
 8007904:	2300      	movs	r3, #0
 8007906:	6363      	str	r3, [r4, #52]	@ 0x34
 8007908:	e00d      	b.n	8007926 <__sflush_r+0xae>
 800790a:	2301      	movs	r3, #1
 800790c:	4628      	mov	r0, r5
 800790e:	47b0      	blx	r6
 8007910:	4602      	mov	r2, r0
 8007912:	1c50      	adds	r0, r2, #1
 8007914:	d1c9      	bne.n	80078aa <__sflush_r+0x32>
 8007916:	682b      	ldr	r3, [r5, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0c6      	beq.n	80078aa <__sflush_r+0x32>
 800791c:	2b1d      	cmp	r3, #29
 800791e:	d001      	beq.n	8007924 <__sflush_r+0xac>
 8007920:	2b16      	cmp	r3, #22
 8007922:	d11e      	bne.n	8007962 <__sflush_r+0xea>
 8007924:	602f      	str	r7, [r5, #0]
 8007926:	2000      	movs	r0, #0
 8007928:	e022      	b.n	8007970 <__sflush_r+0xf8>
 800792a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800792e:	b21b      	sxth	r3, r3
 8007930:	e01b      	b.n	800796a <__sflush_r+0xf2>
 8007932:	690f      	ldr	r7, [r1, #16]
 8007934:	2f00      	cmp	r7, #0
 8007936:	d0f6      	beq.n	8007926 <__sflush_r+0xae>
 8007938:	0793      	lsls	r3, r2, #30
 800793a:	680e      	ldr	r6, [r1, #0]
 800793c:	bf08      	it	eq
 800793e:	694b      	ldreq	r3, [r1, #20]
 8007940:	600f      	str	r7, [r1, #0]
 8007942:	bf18      	it	ne
 8007944:	2300      	movne	r3, #0
 8007946:	eba6 0807 	sub.w	r8, r6, r7
 800794a:	608b      	str	r3, [r1, #8]
 800794c:	f1b8 0f00 	cmp.w	r8, #0
 8007950:	dde9      	ble.n	8007926 <__sflush_r+0xae>
 8007952:	6a21      	ldr	r1, [r4, #32]
 8007954:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007956:	4643      	mov	r3, r8
 8007958:	463a      	mov	r2, r7
 800795a:	4628      	mov	r0, r5
 800795c:	47b0      	blx	r6
 800795e:	2800      	cmp	r0, #0
 8007960:	dc08      	bgt.n	8007974 <__sflush_r+0xfc>
 8007962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007966:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800796a:	81a3      	strh	r3, [r4, #12]
 800796c:	f04f 30ff 	mov.w	r0, #4294967295
 8007970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007974:	4407      	add	r7, r0
 8007976:	eba8 0800 	sub.w	r8, r8, r0
 800797a:	e7e7      	b.n	800794c <__sflush_r+0xd4>
 800797c:	20400001 	.word	0x20400001

08007980 <_fflush_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	690b      	ldr	r3, [r1, #16]
 8007984:	4605      	mov	r5, r0
 8007986:	460c      	mov	r4, r1
 8007988:	b913      	cbnz	r3, 8007990 <_fflush_r+0x10>
 800798a:	2500      	movs	r5, #0
 800798c:	4628      	mov	r0, r5
 800798e:	bd38      	pop	{r3, r4, r5, pc}
 8007990:	b118      	cbz	r0, 800799a <_fflush_r+0x1a>
 8007992:	6a03      	ldr	r3, [r0, #32]
 8007994:	b90b      	cbnz	r3, 800799a <_fflush_r+0x1a>
 8007996:	f7fd f91b 	bl	8004bd0 <__sinit>
 800799a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d0f3      	beq.n	800798a <_fflush_r+0xa>
 80079a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80079a4:	07d0      	lsls	r0, r2, #31
 80079a6:	d404      	bmi.n	80079b2 <_fflush_r+0x32>
 80079a8:	0599      	lsls	r1, r3, #22
 80079aa:	d402      	bmi.n	80079b2 <_fflush_r+0x32>
 80079ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ae:	f7fd fa3a 	bl	8004e26 <__retarget_lock_acquire_recursive>
 80079b2:	4628      	mov	r0, r5
 80079b4:	4621      	mov	r1, r4
 80079b6:	f7ff ff5f 	bl	8007878 <__sflush_r>
 80079ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80079bc:	07da      	lsls	r2, r3, #31
 80079be:	4605      	mov	r5, r0
 80079c0:	d4e4      	bmi.n	800798c <_fflush_r+0xc>
 80079c2:	89a3      	ldrh	r3, [r4, #12]
 80079c4:	059b      	lsls	r3, r3, #22
 80079c6:	d4e1      	bmi.n	800798c <_fflush_r+0xc>
 80079c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079ca:	f7fd fa2d 	bl	8004e28 <__retarget_lock_release_recursive>
 80079ce:	e7dd      	b.n	800798c <_fflush_r+0xc>

080079d0 <__swbuf_r>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	460e      	mov	r6, r1
 80079d4:	4614      	mov	r4, r2
 80079d6:	4605      	mov	r5, r0
 80079d8:	b118      	cbz	r0, 80079e2 <__swbuf_r+0x12>
 80079da:	6a03      	ldr	r3, [r0, #32]
 80079dc:	b90b      	cbnz	r3, 80079e2 <__swbuf_r+0x12>
 80079de:	f7fd f8f7 	bl	8004bd0 <__sinit>
 80079e2:	69a3      	ldr	r3, [r4, #24]
 80079e4:	60a3      	str	r3, [r4, #8]
 80079e6:	89a3      	ldrh	r3, [r4, #12]
 80079e8:	071a      	lsls	r2, r3, #28
 80079ea:	d501      	bpl.n	80079f0 <__swbuf_r+0x20>
 80079ec:	6923      	ldr	r3, [r4, #16]
 80079ee:	b943      	cbnz	r3, 8007a02 <__swbuf_r+0x32>
 80079f0:	4621      	mov	r1, r4
 80079f2:	4628      	mov	r0, r5
 80079f4:	f000 f82a 	bl	8007a4c <__swsetup_r>
 80079f8:	b118      	cbz	r0, 8007a02 <__swbuf_r+0x32>
 80079fa:	f04f 37ff 	mov.w	r7, #4294967295
 80079fe:	4638      	mov	r0, r7
 8007a00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a02:	6823      	ldr	r3, [r4, #0]
 8007a04:	6922      	ldr	r2, [r4, #16]
 8007a06:	1a98      	subs	r0, r3, r2
 8007a08:	6963      	ldr	r3, [r4, #20]
 8007a0a:	b2f6      	uxtb	r6, r6
 8007a0c:	4283      	cmp	r3, r0
 8007a0e:	4637      	mov	r7, r6
 8007a10:	dc05      	bgt.n	8007a1e <__swbuf_r+0x4e>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f7ff ffb3 	bl	8007980 <_fflush_r>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d1ed      	bne.n	80079fa <__swbuf_r+0x2a>
 8007a1e:	68a3      	ldr	r3, [r4, #8]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	60a3      	str	r3, [r4, #8]
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	1c5a      	adds	r2, r3, #1
 8007a28:	6022      	str	r2, [r4, #0]
 8007a2a:	701e      	strb	r6, [r3, #0]
 8007a2c:	6962      	ldr	r2, [r4, #20]
 8007a2e:	1c43      	adds	r3, r0, #1
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d004      	beq.n	8007a3e <__swbuf_r+0x6e>
 8007a34:	89a3      	ldrh	r3, [r4, #12]
 8007a36:	07db      	lsls	r3, r3, #31
 8007a38:	d5e1      	bpl.n	80079fe <__swbuf_r+0x2e>
 8007a3a:	2e0a      	cmp	r6, #10
 8007a3c:	d1df      	bne.n	80079fe <__swbuf_r+0x2e>
 8007a3e:	4621      	mov	r1, r4
 8007a40:	4628      	mov	r0, r5
 8007a42:	f7ff ff9d 	bl	8007980 <_fflush_r>
 8007a46:	2800      	cmp	r0, #0
 8007a48:	d0d9      	beq.n	80079fe <__swbuf_r+0x2e>
 8007a4a:	e7d6      	b.n	80079fa <__swbuf_r+0x2a>

08007a4c <__swsetup_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4b29      	ldr	r3, [pc, #164]	@ (8007af4 <__swsetup_r+0xa8>)
 8007a50:	4605      	mov	r5, r0
 8007a52:	6818      	ldr	r0, [r3, #0]
 8007a54:	460c      	mov	r4, r1
 8007a56:	b118      	cbz	r0, 8007a60 <__swsetup_r+0x14>
 8007a58:	6a03      	ldr	r3, [r0, #32]
 8007a5a:	b90b      	cbnz	r3, 8007a60 <__swsetup_r+0x14>
 8007a5c:	f7fd f8b8 	bl	8004bd0 <__sinit>
 8007a60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a64:	0719      	lsls	r1, r3, #28
 8007a66:	d422      	bmi.n	8007aae <__swsetup_r+0x62>
 8007a68:	06da      	lsls	r2, r3, #27
 8007a6a:	d407      	bmi.n	8007a7c <__swsetup_r+0x30>
 8007a6c:	2209      	movs	r2, #9
 8007a6e:	602a      	str	r2, [r5, #0]
 8007a70:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a74:	81a3      	strh	r3, [r4, #12]
 8007a76:	f04f 30ff 	mov.w	r0, #4294967295
 8007a7a:	e033      	b.n	8007ae4 <__swsetup_r+0x98>
 8007a7c:	0758      	lsls	r0, r3, #29
 8007a7e:	d512      	bpl.n	8007aa6 <__swsetup_r+0x5a>
 8007a80:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a82:	b141      	cbz	r1, 8007a96 <__swsetup_r+0x4a>
 8007a84:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a88:	4299      	cmp	r1, r3
 8007a8a:	d002      	beq.n	8007a92 <__swsetup_r+0x46>
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f7fe f82b 	bl	8005ae8 <_free_r>
 8007a92:	2300      	movs	r3, #0
 8007a94:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6063      	str	r3, [r4, #4]
 8007aa2:	6923      	ldr	r3, [r4, #16]
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	f043 0308 	orr.w	r3, r3, #8
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	b94b      	cbnz	r3, 8007ac6 <__swsetup_r+0x7a>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007abc:	d003      	beq.n	8007ac6 <__swsetup_r+0x7a>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4628      	mov	r0, r5
 8007ac2:	f000 fc5d 	bl	8008380 <__smakebuf_r>
 8007ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aca:	f013 0201 	ands.w	r2, r3, #1
 8007ace:	d00a      	beq.n	8007ae6 <__swsetup_r+0x9a>
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	60a2      	str	r2, [r4, #8]
 8007ad4:	6962      	ldr	r2, [r4, #20]
 8007ad6:	4252      	negs	r2, r2
 8007ad8:	61a2      	str	r2, [r4, #24]
 8007ada:	6922      	ldr	r2, [r4, #16]
 8007adc:	b942      	cbnz	r2, 8007af0 <__swsetup_r+0xa4>
 8007ade:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ae2:	d1c5      	bne.n	8007a70 <__swsetup_r+0x24>
 8007ae4:	bd38      	pop	{r3, r4, r5, pc}
 8007ae6:	0799      	lsls	r1, r3, #30
 8007ae8:	bf58      	it	pl
 8007aea:	6962      	ldrpl	r2, [r4, #20]
 8007aec:	60a2      	str	r2, [r4, #8]
 8007aee:	e7f4      	b.n	8007ada <__swsetup_r+0x8e>
 8007af0:	2000      	movs	r0, #0
 8007af2:	e7f7      	b.n	8007ae4 <__swsetup_r+0x98>
 8007af4:	20000018 	.word	0x20000018

08007af8 <memmove>:
 8007af8:	4288      	cmp	r0, r1
 8007afa:	b510      	push	{r4, lr}
 8007afc:	eb01 0402 	add.w	r4, r1, r2
 8007b00:	d902      	bls.n	8007b08 <memmove+0x10>
 8007b02:	4284      	cmp	r4, r0
 8007b04:	4623      	mov	r3, r4
 8007b06:	d807      	bhi.n	8007b18 <memmove+0x20>
 8007b08:	1e43      	subs	r3, r0, #1
 8007b0a:	42a1      	cmp	r1, r4
 8007b0c:	d008      	beq.n	8007b20 <memmove+0x28>
 8007b0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007b12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007b16:	e7f8      	b.n	8007b0a <memmove+0x12>
 8007b18:	4402      	add	r2, r0
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	428a      	cmp	r2, r1
 8007b1e:	d100      	bne.n	8007b22 <memmove+0x2a>
 8007b20:	bd10      	pop	{r4, pc}
 8007b22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007b26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007b2a:	e7f7      	b.n	8007b1c <memmove+0x24>

08007b2c <strncmp>:
 8007b2c:	b510      	push	{r4, lr}
 8007b2e:	b16a      	cbz	r2, 8007b4c <strncmp+0x20>
 8007b30:	3901      	subs	r1, #1
 8007b32:	1884      	adds	r4, r0, r2
 8007b34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b38:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d103      	bne.n	8007b48 <strncmp+0x1c>
 8007b40:	42a0      	cmp	r0, r4
 8007b42:	d001      	beq.n	8007b48 <strncmp+0x1c>
 8007b44:	2a00      	cmp	r2, #0
 8007b46:	d1f5      	bne.n	8007b34 <strncmp+0x8>
 8007b48:	1ad0      	subs	r0, r2, r3
 8007b4a:	bd10      	pop	{r4, pc}
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	e7fc      	b.n	8007b4a <strncmp+0x1e>

08007b50 <_sbrk_r>:
 8007b50:	b538      	push	{r3, r4, r5, lr}
 8007b52:	4d06      	ldr	r5, [pc, #24]	@ (8007b6c <_sbrk_r+0x1c>)
 8007b54:	2300      	movs	r3, #0
 8007b56:	4604      	mov	r4, r0
 8007b58:	4608      	mov	r0, r1
 8007b5a:	602b      	str	r3, [r5, #0]
 8007b5c:	f7f9 fe9c 	bl	8001898 <_sbrk>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_sbrk_r+0x1a>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_sbrk_r+0x1a>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	200004d8 	.word	0x200004d8

08007b70 <memcpy>:
 8007b70:	440a      	add	r2, r1
 8007b72:	4291      	cmp	r1, r2
 8007b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b78:	d100      	bne.n	8007b7c <memcpy+0xc>
 8007b7a:	4770      	bx	lr
 8007b7c:	b510      	push	{r4, lr}
 8007b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b86:	4291      	cmp	r1, r2
 8007b88:	d1f9      	bne.n	8007b7e <memcpy+0xe>
 8007b8a:	bd10      	pop	{r4, pc}
 8007b8c:	0000      	movs	r0, r0
	...

08007b90 <nan>:
 8007b90:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007b98 <nan+0x8>
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	00000000 	.word	0x00000000
 8007b9c:	7ff80000 	.word	0x7ff80000

08007ba0 <__assert_func>:
 8007ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ba2:	4614      	mov	r4, r2
 8007ba4:	461a      	mov	r2, r3
 8007ba6:	4b09      	ldr	r3, [pc, #36]	@ (8007bcc <__assert_func+0x2c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	4605      	mov	r5, r0
 8007bac:	68d8      	ldr	r0, [r3, #12]
 8007bae:	b14c      	cbz	r4, 8007bc4 <__assert_func+0x24>
 8007bb0:	4b07      	ldr	r3, [pc, #28]	@ (8007bd0 <__assert_func+0x30>)
 8007bb2:	9100      	str	r1, [sp, #0]
 8007bb4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007bb8:	4906      	ldr	r1, [pc, #24]	@ (8007bd4 <__assert_func+0x34>)
 8007bba:	462b      	mov	r3, r5
 8007bbc:	f000 fba8 	bl	8008310 <fiprintf>
 8007bc0:	f000 fc3c 	bl	800843c <abort>
 8007bc4:	4b04      	ldr	r3, [pc, #16]	@ (8007bd8 <__assert_func+0x38>)
 8007bc6:	461c      	mov	r4, r3
 8007bc8:	e7f3      	b.n	8007bb2 <__assert_func+0x12>
 8007bca:	bf00      	nop
 8007bcc:	20000018 	.word	0x20000018
 8007bd0:	0800868e 	.word	0x0800868e
 8007bd4:	0800869b 	.word	0x0800869b
 8007bd8:	080086c9 	.word	0x080086c9

08007bdc <_calloc_r>:
 8007bdc:	b570      	push	{r4, r5, r6, lr}
 8007bde:	fba1 5402 	umull	r5, r4, r1, r2
 8007be2:	b934      	cbnz	r4, 8007bf2 <_calloc_r+0x16>
 8007be4:	4629      	mov	r1, r5
 8007be6:	f7fd fff3 	bl	8005bd0 <_malloc_r>
 8007bea:	4606      	mov	r6, r0
 8007bec:	b928      	cbnz	r0, 8007bfa <_calloc_r+0x1e>
 8007bee:	4630      	mov	r0, r6
 8007bf0:	bd70      	pop	{r4, r5, r6, pc}
 8007bf2:	220c      	movs	r2, #12
 8007bf4:	6002      	str	r2, [r0, #0]
 8007bf6:	2600      	movs	r6, #0
 8007bf8:	e7f9      	b.n	8007bee <_calloc_r+0x12>
 8007bfa:	462a      	mov	r2, r5
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	f7fd f894 	bl	8004d2a <memset>
 8007c02:	e7f4      	b.n	8007bee <_calloc_r+0x12>

08007c04 <rshift>:
 8007c04:	6903      	ldr	r3, [r0, #16]
 8007c06:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007c0a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007c0e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007c12:	f100 0414 	add.w	r4, r0, #20
 8007c16:	dd45      	ble.n	8007ca4 <rshift+0xa0>
 8007c18:	f011 011f 	ands.w	r1, r1, #31
 8007c1c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007c20:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007c24:	d10c      	bne.n	8007c40 <rshift+0x3c>
 8007c26:	f100 0710 	add.w	r7, r0, #16
 8007c2a:	4629      	mov	r1, r5
 8007c2c:	42b1      	cmp	r1, r6
 8007c2e:	d334      	bcc.n	8007c9a <rshift+0x96>
 8007c30:	1a9b      	subs	r3, r3, r2
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	1eea      	subs	r2, r5, #3
 8007c36:	4296      	cmp	r6, r2
 8007c38:	bf38      	it	cc
 8007c3a:	2300      	movcc	r3, #0
 8007c3c:	4423      	add	r3, r4
 8007c3e:	e015      	b.n	8007c6c <rshift+0x68>
 8007c40:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007c44:	f1c1 0820 	rsb	r8, r1, #32
 8007c48:	40cf      	lsrs	r7, r1
 8007c4a:	f105 0e04 	add.w	lr, r5, #4
 8007c4e:	46a1      	mov	r9, r4
 8007c50:	4576      	cmp	r6, lr
 8007c52:	46f4      	mov	ip, lr
 8007c54:	d815      	bhi.n	8007c82 <rshift+0x7e>
 8007c56:	1a9a      	subs	r2, r3, r2
 8007c58:	0092      	lsls	r2, r2, #2
 8007c5a:	3a04      	subs	r2, #4
 8007c5c:	3501      	adds	r5, #1
 8007c5e:	42ae      	cmp	r6, r5
 8007c60:	bf38      	it	cc
 8007c62:	2200      	movcc	r2, #0
 8007c64:	18a3      	adds	r3, r4, r2
 8007c66:	50a7      	str	r7, [r4, r2]
 8007c68:	b107      	cbz	r7, 8007c6c <rshift+0x68>
 8007c6a:	3304      	adds	r3, #4
 8007c6c:	1b1a      	subs	r2, r3, r4
 8007c6e:	42a3      	cmp	r3, r4
 8007c70:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007c74:	bf08      	it	eq
 8007c76:	2300      	moveq	r3, #0
 8007c78:	6102      	str	r2, [r0, #16]
 8007c7a:	bf08      	it	eq
 8007c7c:	6143      	streq	r3, [r0, #20]
 8007c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c82:	f8dc c000 	ldr.w	ip, [ip]
 8007c86:	fa0c fc08 	lsl.w	ip, ip, r8
 8007c8a:	ea4c 0707 	orr.w	r7, ip, r7
 8007c8e:	f849 7b04 	str.w	r7, [r9], #4
 8007c92:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007c96:	40cf      	lsrs	r7, r1
 8007c98:	e7da      	b.n	8007c50 <rshift+0x4c>
 8007c9a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007c9e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007ca2:	e7c3      	b.n	8007c2c <rshift+0x28>
 8007ca4:	4623      	mov	r3, r4
 8007ca6:	e7e1      	b.n	8007c6c <rshift+0x68>

08007ca8 <__hexdig_fun>:
 8007ca8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d802      	bhi.n	8007cb6 <__hexdig_fun+0xe>
 8007cb0:	3820      	subs	r0, #32
 8007cb2:	b2c0      	uxtb	r0, r0
 8007cb4:	4770      	bx	lr
 8007cb6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	d801      	bhi.n	8007cc2 <__hexdig_fun+0x1a>
 8007cbe:	3847      	subs	r0, #71	@ 0x47
 8007cc0:	e7f7      	b.n	8007cb2 <__hexdig_fun+0xa>
 8007cc2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007cc6:	2b05      	cmp	r3, #5
 8007cc8:	d801      	bhi.n	8007cce <__hexdig_fun+0x26>
 8007cca:	3827      	subs	r0, #39	@ 0x27
 8007ccc:	e7f1      	b.n	8007cb2 <__hexdig_fun+0xa>
 8007cce:	2000      	movs	r0, #0
 8007cd0:	4770      	bx	lr
	...

08007cd4 <__gethex>:
 8007cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cd8:	b085      	sub	sp, #20
 8007cda:	468a      	mov	sl, r1
 8007cdc:	9302      	str	r3, [sp, #8]
 8007cde:	680b      	ldr	r3, [r1, #0]
 8007ce0:	9001      	str	r0, [sp, #4]
 8007ce2:	4690      	mov	r8, r2
 8007ce4:	1c9c      	adds	r4, r3, #2
 8007ce6:	46a1      	mov	r9, r4
 8007ce8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007cec:	2830      	cmp	r0, #48	@ 0x30
 8007cee:	d0fa      	beq.n	8007ce6 <__gethex+0x12>
 8007cf0:	eba9 0303 	sub.w	r3, r9, r3
 8007cf4:	f1a3 0b02 	sub.w	fp, r3, #2
 8007cf8:	f7ff ffd6 	bl	8007ca8 <__hexdig_fun>
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	2800      	cmp	r0, #0
 8007d00:	d168      	bne.n	8007dd4 <__gethex+0x100>
 8007d02:	49a0      	ldr	r1, [pc, #640]	@ (8007f84 <__gethex+0x2b0>)
 8007d04:	2201      	movs	r2, #1
 8007d06:	4648      	mov	r0, r9
 8007d08:	f7ff ff10 	bl	8007b2c <strncmp>
 8007d0c:	4607      	mov	r7, r0
 8007d0e:	2800      	cmp	r0, #0
 8007d10:	d167      	bne.n	8007de2 <__gethex+0x10e>
 8007d12:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007d16:	4626      	mov	r6, r4
 8007d18:	f7ff ffc6 	bl	8007ca8 <__hexdig_fun>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	d062      	beq.n	8007de6 <__gethex+0x112>
 8007d20:	4623      	mov	r3, r4
 8007d22:	7818      	ldrb	r0, [r3, #0]
 8007d24:	2830      	cmp	r0, #48	@ 0x30
 8007d26:	4699      	mov	r9, r3
 8007d28:	f103 0301 	add.w	r3, r3, #1
 8007d2c:	d0f9      	beq.n	8007d22 <__gethex+0x4e>
 8007d2e:	f7ff ffbb 	bl	8007ca8 <__hexdig_fun>
 8007d32:	fab0 f580 	clz	r5, r0
 8007d36:	096d      	lsrs	r5, r5, #5
 8007d38:	f04f 0b01 	mov.w	fp, #1
 8007d3c:	464a      	mov	r2, r9
 8007d3e:	4616      	mov	r6, r2
 8007d40:	3201      	adds	r2, #1
 8007d42:	7830      	ldrb	r0, [r6, #0]
 8007d44:	f7ff ffb0 	bl	8007ca8 <__hexdig_fun>
 8007d48:	2800      	cmp	r0, #0
 8007d4a:	d1f8      	bne.n	8007d3e <__gethex+0x6a>
 8007d4c:	498d      	ldr	r1, [pc, #564]	@ (8007f84 <__gethex+0x2b0>)
 8007d4e:	2201      	movs	r2, #1
 8007d50:	4630      	mov	r0, r6
 8007d52:	f7ff feeb 	bl	8007b2c <strncmp>
 8007d56:	2800      	cmp	r0, #0
 8007d58:	d13f      	bne.n	8007dda <__gethex+0x106>
 8007d5a:	b944      	cbnz	r4, 8007d6e <__gethex+0x9a>
 8007d5c:	1c74      	adds	r4, r6, #1
 8007d5e:	4622      	mov	r2, r4
 8007d60:	4616      	mov	r6, r2
 8007d62:	3201      	adds	r2, #1
 8007d64:	7830      	ldrb	r0, [r6, #0]
 8007d66:	f7ff ff9f 	bl	8007ca8 <__hexdig_fun>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d1f8      	bne.n	8007d60 <__gethex+0x8c>
 8007d6e:	1ba4      	subs	r4, r4, r6
 8007d70:	00a7      	lsls	r7, r4, #2
 8007d72:	7833      	ldrb	r3, [r6, #0]
 8007d74:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007d78:	2b50      	cmp	r3, #80	@ 0x50
 8007d7a:	d13e      	bne.n	8007dfa <__gethex+0x126>
 8007d7c:	7873      	ldrb	r3, [r6, #1]
 8007d7e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007d80:	d033      	beq.n	8007dea <__gethex+0x116>
 8007d82:	2b2d      	cmp	r3, #45	@ 0x2d
 8007d84:	d034      	beq.n	8007df0 <__gethex+0x11c>
 8007d86:	1c71      	adds	r1, r6, #1
 8007d88:	2400      	movs	r4, #0
 8007d8a:	7808      	ldrb	r0, [r1, #0]
 8007d8c:	f7ff ff8c 	bl	8007ca8 <__hexdig_fun>
 8007d90:	1e43      	subs	r3, r0, #1
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	2b18      	cmp	r3, #24
 8007d96:	d830      	bhi.n	8007dfa <__gethex+0x126>
 8007d98:	f1a0 0210 	sub.w	r2, r0, #16
 8007d9c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007da0:	f7ff ff82 	bl	8007ca8 <__hexdig_fun>
 8007da4:	f100 3cff 	add.w	ip, r0, #4294967295
 8007da8:	fa5f fc8c 	uxtb.w	ip, ip
 8007dac:	f1bc 0f18 	cmp.w	ip, #24
 8007db0:	f04f 030a 	mov.w	r3, #10
 8007db4:	d91e      	bls.n	8007df4 <__gethex+0x120>
 8007db6:	b104      	cbz	r4, 8007dba <__gethex+0xe6>
 8007db8:	4252      	negs	r2, r2
 8007dba:	4417      	add	r7, r2
 8007dbc:	f8ca 1000 	str.w	r1, [sl]
 8007dc0:	b1ed      	cbz	r5, 8007dfe <__gethex+0x12a>
 8007dc2:	f1bb 0f00 	cmp.w	fp, #0
 8007dc6:	bf0c      	ite	eq
 8007dc8:	2506      	moveq	r5, #6
 8007dca:	2500      	movne	r5, #0
 8007dcc:	4628      	mov	r0, r5
 8007dce:	b005      	add	sp, #20
 8007dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dd4:	2500      	movs	r5, #0
 8007dd6:	462c      	mov	r4, r5
 8007dd8:	e7b0      	b.n	8007d3c <__gethex+0x68>
 8007dda:	2c00      	cmp	r4, #0
 8007ddc:	d1c7      	bne.n	8007d6e <__gethex+0x9a>
 8007dde:	4627      	mov	r7, r4
 8007de0:	e7c7      	b.n	8007d72 <__gethex+0x9e>
 8007de2:	464e      	mov	r6, r9
 8007de4:	462f      	mov	r7, r5
 8007de6:	2501      	movs	r5, #1
 8007de8:	e7c3      	b.n	8007d72 <__gethex+0x9e>
 8007dea:	2400      	movs	r4, #0
 8007dec:	1cb1      	adds	r1, r6, #2
 8007dee:	e7cc      	b.n	8007d8a <__gethex+0xb6>
 8007df0:	2401      	movs	r4, #1
 8007df2:	e7fb      	b.n	8007dec <__gethex+0x118>
 8007df4:	fb03 0002 	mla	r0, r3, r2, r0
 8007df8:	e7ce      	b.n	8007d98 <__gethex+0xc4>
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	e7de      	b.n	8007dbc <__gethex+0xe8>
 8007dfe:	eba6 0309 	sub.w	r3, r6, r9
 8007e02:	3b01      	subs	r3, #1
 8007e04:	4629      	mov	r1, r5
 8007e06:	2b07      	cmp	r3, #7
 8007e08:	dc0a      	bgt.n	8007e20 <__gethex+0x14c>
 8007e0a:	9801      	ldr	r0, [sp, #4]
 8007e0c:	f7fd ff6c 	bl	8005ce8 <_Balloc>
 8007e10:	4604      	mov	r4, r0
 8007e12:	b940      	cbnz	r0, 8007e26 <__gethex+0x152>
 8007e14:	4b5c      	ldr	r3, [pc, #368]	@ (8007f88 <__gethex+0x2b4>)
 8007e16:	4602      	mov	r2, r0
 8007e18:	21e4      	movs	r1, #228	@ 0xe4
 8007e1a:	485c      	ldr	r0, [pc, #368]	@ (8007f8c <__gethex+0x2b8>)
 8007e1c:	f7ff fec0 	bl	8007ba0 <__assert_func>
 8007e20:	3101      	adds	r1, #1
 8007e22:	105b      	asrs	r3, r3, #1
 8007e24:	e7ef      	b.n	8007e06 <__gethex+0x132>
 8007e26:	f100 0a14 	add.w	sl, r0, #20
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	4655      	mov	r5, sl
 8007e2e:	469b      	mov	fp, r3
 8007e30:	45b1      	cmp	r9, r6
 8007e32:	d337      	bcc.n	8007ea4 <__gethex+0x1d0>
 8007e34:	f845 bb04 	str.w	fp, [r5], #4
 8007e38:	eba5 050a 	sub.w	r5, r5, sl
 8007e3c:	10ad      	asrs	r5, r5, #2
 8007e3e:	6125      	str	r5, [r4, #16]
 8007e40:	4658      	mov	r0, fp
 8007e42:	f7fe f843 	bl	8005ecc <__hi0bits>
 8007e46:	016d      	lsls	r5, r5, #5
 8007e48:	f8d8 6000 	ldr.w	r6, [r8]
 8007e4c:	1a2d      	subs	r5, r5, r0
 8007e4e:	42b5      	cmp	r5, r6
 8007e50:	dd54      	ble.n	8007efc <__gethex+0x228>
 8007e52:	1bad      	subs	r5, r5, r6
 8007e54:	4629      	mov	r1, r5
 8007e56:	4620      	mov	r0, r4
 8007e58:	f7fe fbcf 	bl	80065fa <__any_on>
 8007e5c:	4681      	mov	r9, r0
 8007e5e:	b178      	cbz	r0, 8007e80 <__gethex+0x1ac>
 8007e60:	1e6b      	subs	r3, r5, #1
 8007e62:	1159      	asrs	r1, r3, #5
 8007e64:	f003 021f 	and.w	r2, r3, #31
 8007e68:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007e6c:	f04f 0901 	mov.w	r9, #1
 8007e70:	fa09 f202 	lsl.w	r2, r9, r2
 8007e74:	420a      	tst	r2, r1
 8007e76:	d003      	beq.n	8007e80 <__gethex+0x1ac>
 8007e78:	454b      	cmp	r3, r9
 8007e7a:	dc36      	bgt.n	8007eea <__gethex+0x216>
 8007e7c:	f04f 0902 	mov.w	r9, #2
 8007e80:	4629      	mov	r1, r5
 8007e82:	4620      	mov	r0, r4
 8007e84:	f7ff febe 	bl	8007c04 <rshift>
 8007e88:	442f      	add	r7, r5
 8007e8a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007e8e:	42bb      	cmp	r3, r7
 8007e90:	da42      	bge.n	8007f18 <__gethex+0x244>
 8007e92:	9801      	ldr	r0, [sp, #4]
 8007e94:	4621      	mov	r1, r4
 8007e96:	f7fd ff67 	bl	8005d68 <_Bfree>
 8007e9a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	6013      	str	r3, [r2, #0]
 8007ea0:	25a3      	movs	r5, #163	@ 0xa3
 8007ea2:	e793      	b.n	8007dcc <__gethex+0xf8>
 8007ea4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007ea8:	2a2e      	cmp	r2, #46	@ 0x2e
 8007eaa:	d012      	beq.n	8007ed2 <__gethex+0x1fe>
 8007eac:	2b20      	cmp	r3, #32
 8007eae:	d104      	bne.n	8007eba <__gethex+0x1e6>
 8007eb0:	f845 bb04 	str.w	fp, [r5], #4
 8007eb4:	f04f 0b00 	mov.w	fp, #0
 8007eb8:	465b      	mov	r3, fp
 8007eba:	7830      	ldrb	r0, [r6, #0]
 8007ebc:	9303      	str	r3, [sp, #12]
 8007ebe:	f7ff fef3 	bl	8007ca8 <__hexdig_fun>
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	f000 000f 	and.w	r0, r0, #15
 8007ec8:	4098      	lsls	r0, r3
 8007eca:	ea4b 0b00 	orr.w	fp, fp, r0
 8007ece:	3304      	adds	r3, #4
 8007ed0:	e7ae      	b.n	8007e30 <__gethex+0x15c>
 8007ed2:	45b1      	cmp	r9, r6
 8007ed4:	d8ea      	bhi.n	8007eac <__gethex+0x1d8>
 8007ed6:	492b      	ldr	r1, [pc, #172]	@ (8007f84 <__gethex+0x2b0>)
 8007ed8:	9303      	str	r3, [sp, #12]
 8007eda:	2201      	movs	r2, #1
 8007edc:	4630      	mov	r0, r6
 8007ede:	f7ff fe25 	bl	8007b2c <strncmp>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d1e1      	bne.n	8007eac <__gethex+0x1d8>
 8007ee8:	e7a2      	b.n	8007e30 <__gethex+0x15c>
 8007eea:	1ea9      	subs	r1, r5, #2
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7fe fb84 	bl	80065fa <__any_on>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d0c2      	beq.n	8007e7c <__gethex+0x1a8>
 8007ef6:	f04f 0903 	mov.w	r9, #3
 8007efa:	e7c1      	b.n	8007e80 <__gethex+0x1ac>
 8007efc:	da09      	bge.n	8007f12 <__gethex+0x23e>
 8007efe:	1b75      	subs	r5, r6, r5
 8007f00:	4621      	mov	r1, r4
 8007f02:	9801      	ldr	r0, [sp, #4]
 8007f04:	462a      	mov	r2, r5
 8007f06:	f7fe f93f 	bl	8006188 <__lshift>
 8007f0a:	1b7f      	subs	r7, r7, r5
 8007f0c:	4604      	mov	r4, r0
 8007f0e:	f100 0a14 	add.w	sl, r0, #20
 8007f12:	f04f 0900 	mov.w	r9, #0
 8007f16:	e7b8      	b.n	8007e8a <__gethex+0x1b6>
 8007f18:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007f1c:	42bd      	cmp	r5, r7
 8007f1e:	dd6f      	ble.n	8008000 <__gethex+0x32c>
 8007f20:	1bed      	subs	r5, r5, r7
 8007f22:	42ae      	cmp	r6, r5
 8007f24:	dc34      	bgt.n	8007f90 <__gethex+0x2bc>
 8007f26:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f2a:	2b02      	cmp	r3, #2
 8007f2c:	d022      	beq.n	8007f74 <__gethex+0x2a0>
 8007f2e:	2b03      	cmp	r3, #3
 8007f30:	d024      	beq.n	8007f7c <__gethex+0x2a8>
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	d115      	bne.n	8007f62 <__gethex+0x28e>
 8007f36:	42ae      	cmp	r6, r5
 8007f38:	d113      	bne.n	8007f62 <__gethex+0x28e>
 8007f3a:	2e01      	cmp	r6, #1
 8007f3c:	d10b      	bne.n	8007f56 <__gethex+0x282>
 8007f3e:	9a02      	ldr	r2, [sp, #8]
 8007f40:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007f44:	6013      	str	r3, [r2, #0]
 8007f46:	2301      	movs	r3, #1
 8007f48:	6123      	str	r3, [r4, #16]
 8007f4a:	f8ca 3000 	str.w	r3, [sl]
 8007f4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f50:	2562      	movs	r5, #98	@ 0x62
 8007f52:	601c      	str	r4, [r3, #0]
 8007f54:	e73a      	b.n	8007dcc <__gethex+0xf8>
 8007f56:	1e71      	subs	r1, r6, #1
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f7fe fb4e 	bl	80065fa <__any_on>
 8007f5e:	2800      	cmp	r0, #0
 8007f60:	d1ed      	bne.n	8007f3e <__gethex+0x26a>
 8007f62:	9801      	ldr	r0, [sp, #4]
 8007f64:	4621      	mov	r1, r4
 8007f66:	f7fd feff 	bl	8005d68 <_Bfree>
 8007f6a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	6013      	str	r3, [r2, #0]
 8007f70:	2550      	movs	r5, #80	@ 0x50
 8007f72:	e72b      	b.n	8007dcc <__gethex+0xf8>
 8007f74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1f3      	bne.n	8007f62 <__gethex+0x28e>
 8007f7a:	e7e0      	b.n	8007f3e <__gethex+0x26a>
 8007f7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1dd      	bne.n	8007f3e <__gethex+0x26a>
 8007f82:	e7ee      	b.n	8007f62 <__gethex+0x28e>
 8007f84:	08008673 	.word	0x08008673
 8007f88:	08008609 	.word	0x08008609
 8007f8c:	080086ca 	.word	0x080086ca
 8007f90:	1e6f      	subs	r7, r5, #1
 8007f92:	f1b9 0f00 	cmp.w	r9, #0
 8007f96:	d130      	bne.n	8007ffa <__gethex+0x326>
 8007f98:	b127      	cbz	r7, 8007fa4 <__gethex+0x2d0>
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f7fe fb2c 	bl	80065fa <__any_on>
 8007fa2:	4681      	mov	r9, r0
 8007fa4:	117a      	asrs	r2, r7, #5
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8007fac:	f007 071f 	and.w	r7, r7, #31
 8007fb0:	40bb      	lsls	r3, r7
 8007fb2:	4213      	tst	r3, r2
 8007fb4:	4629      	mov	r1, r5
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	bf18      	it	ne
 8007fba:	f049 0902 	orrne.w	r9, r9, #2
 8007fbe:	f7ff fe21 	bl	8007c04 <rshift>
 8007fc2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8007fc6:	1b76      	subs	r6, r6, r5
 8007fc8:	2502      	movs	r5, #2
 8007fca:	f1b9 0f00 	cmp.w	r9, #0
 8007fce:	d047      	beq.n	8008060 <__gethex+0x38c>
 8007fd0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fd4:	2b02      	cmp	r3, #2
 8007fd6:	d015      	beq.n	8008004 <__gethex+0x330>
 8007fd8:	2b03      	cmp	r3, #3
 8007fda:	d017      	beq.n	800800c <__gethex+0x338>
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d109      	bne.n	8007ff4 <__gethex+0x320>
 8007fe0:	f019 0f02 	tst.w	r9, #2
 8007fe4:	d006      	beq.n	8007ff4 <__gethex+0x320>
 8007fe6:	f8da 3000 	ldr.w	r3, [sl]
 8007fea:	ea49 0903 	orr.w	r9, r9, r3
 8007fee:	f019 0f01 	tst.w	r9, #1
 8007ff2:	d10e      	bne.n	8008012 <__gethex+0x33e>
 8007ff4:	f045 0510 	orr.w	r5, r5, #16
 8007ff8:	e032      	b.n	8008060 <__gethex+0x38c>
 8007ffa:	f04f 0901 	mov.w	r9, #1
 8007ffe:	e7d1      	b.n	8007fa4 <__gethex+0x2d0>
 8008000:	2501      	movs	r5, #1
 8008002:	e7e2      	b.n	8007fca <__gethex+0x2f6>
 8008004:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008006:	f1c3 0301 	rsb	r3, r3, #1
 800800a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800800c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800800e:	2b00      	cmp	r3, #0
 8008010:	d0f0      	beq.n	8007ff4 <__gethex+0x320>
 8008012:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008016:	f104 0314 	add.w	r3, r4, #20
 800801a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800801e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008022:	f04f 0c00 	mov.w	ip, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f853 2b04 	ldr.w	r2, [r3], #4
 800802c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008030:	d01b      	beq.n	800806a <__gethex+0x396>
 8008032:	3201      	adds	r2, #1
 8008034:	6002      	str	r2, [r0, #0]
 8008036:	2d02      	cmp	r5, #2
 8008038:	f104 0314 	add.w	r3, r4, #20
 800803c:	d13c      	bne.n	80080b8 <__gethex+0x3e4>
 800803e:	f8d8 2000 	ldr.w	r2, [r8]
 8008042:	3a01      	subs	r2, #1
 8008044:	42b2      	cmp	r2, r6
 8008046:	d109      	bne.n	800805c <__gethex+0x388>
 8008048:	1171      	asrs	r1, r6, #5
 800804a:	2201      	movs	r2, #1
 800804c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008050:	f006 061f 	and.w	r6, r6, #31
 8008054:	fa02 f606 	lsl.w	r6, r2, r6
 8008058:	421e      	tst	r6, r3
 800805a:	d13a      	bne.n	80080d2 <__gethex+0x3fe>
 800805c:	f045 0520 	orr.w	r5, r5, #32
 8008060:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008062:	601c      	str	r4, [r3, #0]
 8008064:	9b02      	ldr	r3, [sp, #8]
 8008066:	601f      	str	r7, [r3, #0]
 8008068:	e6b0      	b.n	8007dcc <__gethex+0xf8>
 800806a:	4299      	cmp	r1, r3
 800806c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008070:	d8d9      	bhi.n	8008026 <__gethex+0x352>
 8008072:	68a3      	ldr	r3, [r4, #8]
 8008074:	459b      	cmp	fp, r3
 8008076:	db17      	blt.n	80080a8 <__gethex+0x3d4>
 8008078:	6861      	ldr	r1, [r4, #4]
 800807a:	9801      	ldr	r0, [sp, #4]
 800807c:	3101      	adds	r1, #1
 800807e:	f7fd fe33 	bl	8005ce8 <_Balloc>
 8008082:	4681      	mov	r9, r0
 8008084:	b918      	cbnz	r0, 800808e <__gethex+0x3ba>
 8008086:	4b1a      	ldr	r3, [pc, #104]	@ (80080f0 <__gethex+0x41c>)
 8008088:	4602      	mov	r2, r0
 800808a:	2184      	movs	r1, #132	@ 0x84
 800808c:	e6c5      	b.n	8007e1a <__gethex+0x146>
 800808e:	6922      	ldr	r2, [r4, #16]
 8008090:	3202      	adds	r2, #2
 8008092:	f104 010c 	add.w	r1, r4, #12
 8008096:	0092      	lsls	r2, r2, #2
 8008098:	300c      	adds	r0, #12
 800809a:	f7ff fd69 	bl	8007b70 <memcpy>
 800809e:	4621      	mov	r1, r4
 80080a0:	9801      	ldr	r0, [sp, #4]
 80080a2:	f7fd fe61 	bl	8005d68 <_Bfree>
 80080a6:	464c      	mov	r4, r9
 80080a8:	6923      	ldr	r3, [r4, #16]
 80080aa:	1c5a      	adds	r2, r3, #1
 80080ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080b0:	6122      	str	r2, [r4, #16]
 80080b2:	2201      	movs	r2, #1
 80080b4:	615a      	str	r2, [r3, #20]
 80080b6:	e7be      	b.n	8008036 <__gethex+0x362>
 80080b8:	6922      	ldr	r2, [r4, #16]
 80080ba:	455a      	cmp	r2, fp
 80080bc:	dd0b      	ble.n	80080d6 <__gethex+0x402>
 80080be:	2101      	movs	r1, #1
 80080c0:	4620      	mov	r0, r4
 80080c2:	f7ff fd9f 	bl	8007c04 <rshift>
 80080c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80080ca:	3701      	adds	r7, #1
 80080cc:	42bb      	cmp	r3, r7
 80080ce:	f6ff aee0 	blt.w	8007e92 <__gethex+0x1be>
 80080d2:	2501      	movs	r5, #1
 80080d4:	e7c2      	b.n	800805c <__gethex+0x388>
 80080d6:	f016 061f 	ands.w	r6, r6, #31
 80080da:	d0fa      	beq.n	80080d2 <__gethex+0x3fe>
 80080dc:	4453      	add	r3, sl
 80080de:	f1c6 0620 	rsb	r6, r6, #32
 80080e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80080e6:	f7fd fef1 	bl	8005ecc <__hi0bits>
 80080ea:	42b0      	cmp	r0, r6
 80080ec:	dbe7      	blt.n	80080be <__gethex+0x3ea>
 80080ee:	e7f0      	b.n	80080d2 <__gethex+0x3fe>
 80080f0:	08008609 	.word	0x08008609

080080f4 <L_shift>:
 80080f4:	f1c2 0208 	rsb	r2, r2, #8
 80080f8:	0092      	lsls	r2, r2, #2
 80080fa:	b570      	push	{r4, r5, r6, lr}
 80080fc:	f1c2 0620 	rsb	r6, r2, #32
 8008100:	6843      	ldr	r3, [r0, #4]
 8008102:	6804      	ldr	r4, [r0, #0]
 8008104:	fa03 f506 	lsl.w	r5, r3, r6
 8008108:	432c      	orrs	r4, r5
 800810a:	40d3      	lsrs	r3, r2
 800810c:	6004      	str	r4, [r0, #0]
 800810e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008112:	4288      	cmp	r0, r1
 8008114:	d3f4      	bcc.n	8008100 <L_shift+0xc>
 8008116:	bd70      	pop	{r4, r5, r6, pc}

08008118 <__match>:
 8008118:	b530      	push	{r4, r5, lr}
 800811a:	6803      	ldr	r3, [r0, #0]
 800811c:	3301      	adds	r3, #1
 800811e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008122:	b914      	cbnz	r4, 800812a <__match+0x12>
 8008124:	6003      	str	r3, [r0, #0]
 8008126:	2001      	movs	r0, #1
 8008128:	bd30      	pop	{r4, r5, pc}
 800812a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800812e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008132:	2d19      	cmp	r5, #25
 8008134:	bf98      	it	ls
 8008136:	3220      	addls	r2, #32
 8008138:	42a2      	cmp	r2, r4
 800813a:	d0f0      	beq.n	800811e <__match+0x6>
 800813c:	2000      	movs	r0, #0
 800813e:	e7f3      	b.n	8008128 <__match+0x10>

08008140 <__hexnan>:
 8008140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008144:	680b      	ldr	r3, [r1, #0]
 8008146:	6801      	ldr	r1, [r0, #0]
 8008148:	115e      	asrs	r6, r3, #5
 800814a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800814e:	f013 031f 	ands.w	r3, r3, #31
 8008152:	b087      	sub	sp, #28
 8008154:	bf18      	it	ne
 8008156:	3604      	addne	r6, #4
 8008158:	2500      	movs	r5, #0
 800815a:	1f37      	subs	r7, r6, #4
 800815c:	4682      	mov	sl, r0
 800815e:	4690      	mov	r8, r2
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	f846 5c04 	str.w	r5, [r6, #-4]
 8008166:	46b9      	mov	r9, r7
 8008168:	463c      	mov	r4, r7
 800816a:	9502      	str	r5, [sp, #8]
 800816c:	46ab      	mov	fp, r5
 800816e:	784a      	ldrb	r2, [r1, #1]
 8008170:	1c4b      	adds	r3, r1, #1
 8008172:	9303      	str	r3, [sp, #12]
 8008174:	b342      	cbz	r2, 80081c8 <__hexnan+0x88>
 8008176:	4610      	mov	r0, r2
 8008178:	9105      	str	r1, [sp, #20]
 800817a:	9204      	str	r2, [sp, #16]
 800817c:	f7ff fd94 	bl	8007ca8 <__hexdig_fun>
 8008180:	2800      	cmp	r0, #0
 8008182:	d151      	bne.n	8008228 <__hexnan+0xe8>
 8008184:	9a04      	ldr	r2, [sp, #16]
 8008186:	9905      	ldr	r1, [sp, #20]
 8008188:	2a20      	cmp	r2, #32
 800818a:	d818      	bhi.n	80081be <__hexnan+0x7e>
 800818c:	9b02      	ldr	r3, [sp, #8]
 800818e:	459b      	cmp	fp, r3
 8008190:	dd13      	ble.n	80081ba <__hexnan+0x7a>
 8008192:	454c      	cmp	r4, r9
 8008194:	d206      	bcs.n	80081a4 <__hexnan+0x64>
 8008196:	2d07      	cmp	r5, #7
 8008198:	dc04      	bgt.n	80081a4 <__hexnan+0x64>
 800819a:	462a      	mov	r2, r5
 800819c:	4649      	mov	r1, r9
 800819e:	4620      	mov	r0, r4
 80081a0:	f7ff ffa8 	bl	80080f4 <L_shift>
 80081a4:	4544      	cmp	r4, r8
 80081a6:	d952      	bls.n	800824e <__hexnan+0x10e>
 80081a8:	2300      	movs	r3, #0
 80081aa:	f1a4 0904 	sub.w	r9, r4, #4
 80081ae:	f844 3c04 	str.w	r3, [r4, #-4]
 80081b2:	f8cd b008 	str.w	fp, [sp, #8]
 80081b6:	464c      	mov	r4, r9
 80081b8:	461d      	mov	r5, r3
 80081ba:	9903      	ldr	r1, [sp, #12]
 80081bc:	e7d7      	b.n	800816e <__hexnan+0x2e>
 80081be:	2a29      	cmp	r2, #41	@ 0x29
 80081c0:	d157      	bne.n	8008272 <__hexnan+0x132>
 80081c2:	3102      	adds	r1, #2
 80081c4:	f8ca 1000 	str.w	r1, [sl]
 80081c8:	f1bb 0f00 	cmp.w	fp, #0
 80081cc:	d051      	beq.n	8008272 <__hexnan+0x132>
 80081ce:	454c      	cmp	r4, r9
 80081d0:	d206      	bcs.n	80081e0 <__hexnan+0xa0>
 80081d2:	2d07      	cmp	r5, #7
 80081d4:	dc04      	bgt.n	80081e0 <__hexnan+0xa0>
 80081d6:	462a      	mov	r2, r5
 80081d8:	4649      	mov	r1, r9
 80081da:	4620      	mov	r0, r4
 80081dc:	f7ff ff8a 	bl	80080f4 <L_shift>
 80081e0:	4544      	cmp	r4, r8
 80081e2:	d936      	bls.n	8008252 <__hexnan+0x112>
 80081e4:	f1a8 0204 	sub.w	r2, r8, #4
 80081e8:	4623      	mov	r3, r4
 80081ea:	f853 1b04 	ldr.w	r1, [r3], #4
 80081ee:	f842 1f04 	str.w	r1, [r2, #4]!
 80081f2:	429f      	cmp	r7, r3
 80081f4:	d2f9      	bcs.n	80081ea <__hexnan+0xaa>
 80081f6:	1b3b      	subs	r3, r7, r4
 80081f8:	f023 0303 	bic.w	r3, r3, #3
 80081fc:	3304      	adds	r3, #4
 80081fe:	3401      	adds	r4, #1
 8008200:	3e03      	subs	r6, #3
 8008202:	42b4      	cmp	r4, r6
 8008204:	bf88      	it	hi
 8008206:	2304      	movhi	r3, #4
 8008208:	4443      	add	r3, r8
 800820a:	2200      	movs	r2, #0
 800820c:	f843 2b04 	str.w	r2, [r3], #4
 8008210:	429f      	cmp	r7, r3
 8008212:	d2fb      	bcs.n	800820c <__hexnan+0xcc>
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	b91b      	cbnz	r3, 8008220 <__hexnan+0xe0>
 8008218:	4547      	cmp	r7, r8
 800821a:	d128      	bne.n	800826e <__hexnan+0x12e>
 800821c:	2301      	movs	r3, #1
 800821e:	603b      	str	r3, [r7, #0]
 8008220:	2005      	movs	r0, #5
 8008222:	b007      	add	sp, #28
 8008224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008228:	3501      	adds	r5, #1
 800822a:	2d08      	cmp	r5, #8
 800822c:	f10b 0b01 	add.w	fp, fp, #1
 8008230:	dd06      	ble.n	8008240 <__hexnan+0x100>
 8008232:	4544      	cmp	r4, r8
 8008234:	d9c1      	bls.n	80081ba <__hexnan+0x7a>
 8008236:	2300      	movs	r3, #0
 8008238:	f844 3c04 	str.w	r3, [r4, #-4]
 800823c:	2501      	movs	r5, #1
 800823e:	3c04      	subs	r4, #4
 8008240:	6822      	ldr	r2, [r4, #0]
 8008242:	f000 000f 	and.w	r0, r0, #15
 8008246:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800824a:	6020      	str	r0, [r4, #0]
 800824c:	e7b5      	b.n	80081ba <__hexnan+0x7a>
 800824e:	2508      	movs	r5, #8
 8008250:	e7b3      	b.n	80081ba <__hexnan+0x7a>
 8008252:	9b01      	ldr	r3, [sp, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d0dd      	beq.n	8008214 <__hexnan+0xd4>
 8008258:	f1c3 0320 	rsb	r3, r3, #32
 800825c:	f04f 32ff 	mov.w	r2, #4294967295
 8008260:	40da      	lsrs	r2, r3
 8008262:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008266:	4013      	ands	r3, r2
 8008268:	f846 3c04 	str.w	r3, [r6, #-4]
 800826c:	e7d2      	b.n	8008214 <__hexnan+0xd4>
 800826e:	3f04      	subs	r7, #4
 8008270:	e7d0      	b.n	8008214 <__hexnan+0xd4>
 8008272:	2004      	movs	r0, #4
 8008274:	e7d5      	b.n	8008222 <__hexnan+0xe2>

08008276 <__ascii_mbtowc>:
 8008276:	b082      	sub	sp, #8
 8008278:	b901      	cbnz	r1, 800827c <__ascii_mbtowc+0x6>
 800827a:	a901      	add	r1, sp, #4
 800827c:	b142      	cbz	r2, 8008290 <__ascii_mbtowc+0x1a>
 800827e:	b14b      	cbz	r3, 8008294 <__ascii_mbtowc+0x1e>
 8008280:	7813      	ldrb	r3, [r2, #0]
 8008282:	600b      	str	r3, [r1, #0]
 8008284:	7812      	ldrb	r2, [r2, #0]
 8008286:	1e10      	subs	r0, r2, #0
 8008288:	bf18      	it	ne
 800828a:	2001      	movne	r0, #1
 800828c:	b002      	add	sp, #8
 800828e:	4770      	bx	lr
 8008290:	4610      	mov	r0, r2
 8008292:	e7fb      	b.n	800828c <__ascii_mbtowc+0x16>
 8008294:	f06f 0001 	mvn.w	r0, #1
 8008298:	e7f8      	b.n	800828c <__ascii_mbtowc+0x16>

0800829a <_realloc_r>:
 800829a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829e:	4607      	mov	r7, r0
 80082a0:	4614      	mov	r4, r2
 80082a2:	460d      	mov	r5, r1
 80082a4:	b921      	cbnz	r1, 80082b0 <_realloc_r+0x16>
 80082a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082aa:	4611      	mov	r1, r2
 80082ac:	f7fd bc90 	b.w	8005bd0 <_malloc_r>
 80082b0:	b92a      	cbnz	r2, 80082be <_realloc_r+0x24>
 80082b2:	f7fd fc19 	bl	8005ae8 <_free_r>
 80082b6:	4625      	mov	r5, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082be:	f000 f8c4 	bl	800844a <_malloc_usable_size_r>
 80082c2:	4284      	cmp	r4, r0
 80082c4:	4606      	mov	r6, r0
 80082c6:	d802      	bhi.n	80082ce <_realloc_r+0x34>
 80082c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082cc:	d8f4      	bhi.n	80082b8 <_realloc_r+0x1e>
 80082ce:	4621      	mov	r1, r4
 80082d0:	4638      	mov	r0, r7
 80082d2:	f7fd fc7d 	bl	8005bd0 <_malloc_r>
 80082d6:	4680      	mov	r8, r0
 80082d8:	b908      	cbnz	r0, 80082de <_realloc_r+0x44>
 80082da:	4645      	mov	r5, r8
 80082dc:	e7ec      	b.n	80082b8 <_realloc_r+0x1e>
 80082de:	42b4      	cmp	r4, r6
 80082e0:	4622      	mov	r2, r4
 80082e2:	4629      	mov	r1, r5
 80082e4:	bf28      	it	cs
 80082e6:	4632      	movcs	r2, r6
 80082e8:	f7ff fc42 	bl	8007b70 <memcpy>
 80082ec:	4629      	mov	r1, r5
 80082ee:	4638      	mov	r0, r7
 80082f0:	f7fd fbfa 	bl	8005ae8 <_free_r>
 80082f4:	e7f1      	b.n	80082da <_realloc_r+0x40>

080082f6 <__ascii_wctomb>:
 80082f6:	4603      	mov	r3, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	b141      	cbz	r1, 800830e <__ascii_wctomb+0x18>
 80082fc:	2aff      	cmp	r2, #255	@ 0xff
 80082fe:	d904      	bls.n	800830a <__ascii_wctomb+0x14>
 8008300:	228a      	movs	r2, #138	@ 0x8a
 8008302:	601a      	str	r2, [r3, #0]
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	4770      	bx	lr
 800830a:	700a      	strb	r2, [r1, #0]
 800830c:	2001      	movs	r0, #1
 800830e:	4770      	bx	lr

08008310 <fiprintf>:
 8008310:	b40e      	push	{r1, r2, r3}
 8008312:	b503      	push	{r0, r1, lr}
 8008314:	4601      	mov	r1, r0
 8008316:	ab03      	add	r3, sp, #12
 8008318:	4805      	ldr	r0, [pc, #20]	@ (8008330 <fiprintf+0x20>)
 800831a:	f853 2b04 	ldr.w	r2, [r3], #4
 800831e:	6800      	ldr	r0, [r0, #0]
 8008320:	9301      	str	r3, [sp, #4]
 8008322:	f7ff f991 	bl	8007648 <_vfiprintf_r>
 8008326:	b002      	add	sp, #8
 8008328:	f85d eb04 	ldr.w	lr, [sp], #4
 800832c:	b003      	add	sp, #12
 800832e:	4770      	bx	lr
 8008330:	20000018 	.word	0x20000018

08008334 <__swhatbuf_r>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	460c      	mov	r4, r1
 8008338:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800833c:	2900      	cmp	r1, #0
 800833e:	b096      	sub	sp, #88	@ 0x58
 8008340:	4615      	mov	r5, r2
 8008342:	461e      	mov	r6, r3
 8008344:	da0d      	bge.n	8008362 <__swhatbuf_r+0x2e>
 8008346:	89a3      	ldrh	r3, [r4, #12]
 8008348:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800834c:	f04f 0100 	mov.w	r1, #0
 8008350:	bf14      	ite	ne
 8008352:	2340      	movne	r3, #64	@ 0x40
 8008354:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008358:	2000      	movs	r0, #0
 800835a:	6031      	str	r1, [r6, #0]
 800835c:	602b      	str	r3, [r5, #0]
 800835e:	b016      	add	sp, #88	@ 0x58
 8008360:	bd70      	pop	{r4, r5, r6, pc}
 8008362:	466a      	mov	r2, sp
 8008364:	f000 f848 	bl	80083f8 <_fstat_r>
 8008368:	2800      	cmp	r0, #0
 800836a:	dbec      	blt.n	8008346 <__swhatbuf_r+0x12>
 800836c:	9901      	ldr	r1, [sp, #4]
 800836e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008372:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008376:	4259      	negs	r1, r3
 8008378:	4159      	adcs	r1, r3
 800837a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800837e:	e7eb      	b.n	8008358 <__swhatbuf_r+0x24>

08008380 <__smakebuf_r>:
 8008380:	898b      	ldrh	r3, [r1, #12]
 8008382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008384:	079d      	lsls	r5, r3, #30
 8008386:	4606      	mov	r6, r0
 8008388:	460c      	mov	r4, r1
 800838a:	d507      	bpl.n	800839c <__smakebuf_r+0x1c>
 800838c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008390:	6023      	str	r3, [r4, #0]
 8008392:	6123      	str	r3, [r4, #16]
 8008394:	2301      	movs	r3, #1
 8008396:	6163      	str	r3, [r4, #20]
 8008398:	b003      	add	sp, #12
 800839a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800839c:	ab01      	add	r3, sp, #4
 800839e:	466a      	mov	r2, sp
 80083a0:	f7ff ffc8 	bl	8008334 <__swhatbuf_r>
 80083a4:	9f00      	ldr	r7, [sp, #0]
 80083a6:	4605      	mov	r5, r0
 80083a8:	4639      	mov	r1, r7
 80083aa:	4630      	mov	r0, r6
 80083ac:	f7fd fc10 	bl	8005bd0 <_malloc_r>
 80083b0:	b948      	cbnz	r0, 80083c6 <__smakebuf_r+0x46>
 80083b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083b6:	059a      	lsls	r2, r3, #22
 80083b8:	d4ee      	bmi.n	8008398 <__smakebuf_r+0x18>
 80083ba:	f023 0303 	bic.w	r3, r3, #3
 80083be:	f043 0302 	orr.w	r3, r3, #2
 80083c2:	81a3      	strh	r3, [r4, #12]
 80083c4:	e7e2      	b.n	800838c <__smakebuf_r+0xc>
 80083c6:	89a3      	ldrh	r3, [r4, #12]
 80083c8:	6020      	str	r0, [r4, #0]
 80083ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083ce:	81a3      	strh	r3, [r4, #12]
 80083d0:	9b01      	ldr	r3, [sp, #4]
 80083d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80083d6:	b15b      	cbz	r3, 80083f0 <__smakebuf_r+0x70>
 80083d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083dc:	4630      	mov	r0, r6
 80083de:	f000 f81d 	bl	800841c <_isatty_r>
 80083e2:	b128      	cbz	r0, 80083f0 <__smakebuf_r+0x70>
 80083e4:	89a3      	ldrh	r3, [r4, #12]
 80083e6:	f023 0303 	bic.w	r3, r3, #3
 80083ea:	f043 0301 	orr.w	r3, r3, #1
 80083ee:	81a3      	strh	r3, [r4, #12]
 80083f0:	89a3      	ldrh	r3, [r4, #12]
 80083f2:	431d      	orrs	r5, r3
 80083f4:	81a5      	strh	r5, [r4, #12]
 80083f6:	e7cf      	b.n	8008398 <__smakebuf_r+0x18>

080083f8 <_fstat_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	@ (8008418 <_fstat_r+0x20>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	4611      	mov	r1, r2
 8008404:	602b      	str	r3, [r5, #0]
 8008406:	f7f9 fa1f 	bl	8001848 <_fstat>
 800840a:	1c43      	adds	r3, r0, #1
 800840c:	d102      	bne.n	8008414 <_fstat_r+0x1c>
 800840e:	682b      	ldr	r3, [r5, #0]
 8008410:	b103      	cbz	r3, 8008414 <_fstat_r+0x1c>
 8008412:	6023      	str	r3, [r4, #0]
 8008414:	bd38      	pop	{r3, r4, r5, pc}
 8008416:	bf00      	nop
 8008418:	200004d8 	.word	0x200004d8

0800841c <_isatty_r>:
 800841c:	b538      	push	{r3, r4, r5, lr}
 800841e:	4d06      	ldr	r5, [pc, #24]	@ (8008438 <_isatty_r+0x1c>)
 8008420:	2300      	movs	r3, #0
 8008422:	4604      	mov	r4, r0
 8008424:	4608      	mov	r0, r1
 8008426:	602b      	str	r3, [r5, #0]
 8008428:	f7f9 fa1e 	bl	8001868 <_isatty>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	d102      	bne.n	8008436 <_isatty_r+0x1a>
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	b103      	cbz	r3, 8008436 <_isatty_r+0x1a>
 8008434:	6023      	str	r3, [r4, #0]
 8008436:	bd38      	pop	{r3, r4, r5, pc}
 8008438:	200004d8 	.word	0x200004d8

0800843c <abort>:
 800843c:	b508      	push	{r3, lr}
 800843e:	2006      	movs	r0, #6
 8008440:	f000 f834 	bl	80084ac <raise>
 8008444:	2001      	movs	r0, #1
 8008446:	f7f9 f9cb 	bl	80017e0 <_exit>

0800844a <_malloc_usable_size_r>:
 800844a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844e:	1f18      	subs	r0, r3, #4
 8008450:	2b00      	cmp	r3, #0
 8008452:	bfbc      	itt	lt
 8008454:	580b      	ldrlt	r3, [r1, r0]
 8008456:	18c0      	addlt	r0, r0, r3
 8008458:	4770      	bx	lr

0800845a <_raise_r>:
 800845a:	291f      	cmp	r1, #31
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4605      	mov	r5, r0
 8008460:	460c      	mov	r4, r1
 8008462:	d904      	bls.n	800846e <_raise_r+0x14>
 8008464:	2316      	movs	r3, #22
 8008466:	6003      	str	r3, [r0, #0]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295
 800846c:	bd38      	pop	{r3, r4, r5, pc}
 800846e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008470:	b112      	cbz	r2, 8008478 <_raise_r+0x1e>
 8008472:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008476:	b94b      	cbnz	r3, 800848c <_raise_r+0x32>
 8008478:	4628      	mov	r0, r5
 800847a:	f000 f831 	bl	80084e0 <_getpid_r>
 800847e:	4622      	mov	r2, r4
 8008480:	4601      	mov	r1, r0
 8008482:	4628      	mov	r0, r5
 8008484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008488:	f000 b818 	b.w	80084bc <_kill_r>
 800848c:	2b01      	cmp	r3, #1
 800848e:	d00a      	beq.n	80084a6 <_raise_r+0x4c>
 8008490:	1c59      	adds	r1, r3, #1
 8008492:	d103      	bne.n	800849c <_raise_r+0x42>
 8008494:	2316      	movs	r3, #22
 8008496:	6003      	str	r3, [r0, #0]
 8008498:	2001      	movs	r0, #1
 800849a:	e7e7      	b.n	800846c <_raise_r+0x12>
 800849c:	2100      	movs	r1, #0
 800849e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80084a2:	4620      	mov	r0, r4
 80084a4:	4798      	blx	r3
 80084a6:	2000      	movs	r0, #0
 80084a8:	e7e0      	b.n	800846c <_raise_r+0x12>
	...

080084ac <raise>:
 80084ac:	4b02      	ldr	r3, [pc, #8]	@ (80084b8 <raise+0xc>)
 80084ae:	4601      	mov	r1, r0
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	f7ff bfd2 	b.w	800845a <_raise_r>
 80084b6:	bf00      	nop
 80084b8:	20000018 	.word	0x20000018

080084bc <_kill_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	@ (80084dc <_kill_r+0x20>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	4611      	mov	r1, r2
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	f7f9 f979 	bl	80017c0 <_kill>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	d102      	bne.n	80084d8 <_kill_r+0x1c>
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	b103      	cbz	r3, 80084d8 <_kill_r+0x1c>
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	bd38      	pop	{r3, r4, r5, pc}
 80084da:	bf00      	nop
 80084dc:	200004d8 	.word	0x200004d8

080084e0 <_getpid_r>:
 80084e0:	f7f9 b966 	b.w	80017b0 <_getpid>

080084e4 <_init>:
 80084e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e6:	bf00      	nop
 80084e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084ea:	bc08      	pop	{r3}
 80084ec:	469e      	mov	lr, r3
 80084ee:	4770      	bx	lr

080084f0 <_fini>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	bf00      	nop
 80084f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084f6:	bc08      	pop	{r3}
 80084f8:	469e      	mov	lr, r3
 80084fa:	4770      	bx	lr
