
project013-sw-NucleoF446RE-hcsr04-lcd16x2-led-speaker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008404  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  080085d8  080085d8  000095d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a54  08008a54  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008a54  08008a54  00009a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a5c  08008a5c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a5c  08008a5c  00009a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008a64  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d4  08008c38  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08008c38  0000a4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d56e  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dd7  00000000  00000000  00017772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf0  00000000  00000000  00019550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1d  00000000  00000000  0001a240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000229d7  00000000  00000000  0001ac5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000eedd  00000000  00000000  0003d634  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d29eb  00000000  00000000  0004c511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011eefc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c00  00000000  00000000  0011ef40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  00123b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080085bc 	.word	0x080085bc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	080085bc 	.word	0x080085bc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9be 	b.w	800105c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	468e      	mov	lr, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	4688      	mov	r8, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d962      	bls.n	8000e40 <__udivmoddi4+0xdc>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	b14e      	cbz	r6, 8000d94 <__udivmoddi4+0x30>
 8000d80:	f1c6 0320 	rsb	r3, r6, #32
 8000d84:	fa01 f806 	lsl.w	r8, r1, r6
 8000d88:	fa20 f303 	lsr.w	r3, r0, r3
 8000d8c:	40b7      	lsls	r7, r6
 8000d8e:	ea43 0808 	orr.w	r8, r3, r8
 8000d92:	40b4      	lsls	r4, r6
 8000d94:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d98:	fa1f fc87 	uxth.w	ip, r7
 8000d9c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000da0:	0c23      	lsrs	r3, r4, #16
 8000da2:	fb0e 8811 	mls	r8, lr, r1, r8
 8000da6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000daa:	fb01 f20c 	mul.w	r2, r1, ip
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db2:	18fb      	adds	r3, r7, r3
 8000db4:	f101 30ff 	add.w	r0, r1, #4294967295
 8000db8:	f080 80ea 	bcs.w	8000f90 <__udivmoddi4+0x22c>
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f240 80e7 	bls.w	8000f90 <__udivmoddi4+0x22c>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	443b      	add	r3, r7
 8000dc6:	1a9a      	subs	r2, r3, r2
 8000dc8:	b2a3      	uxth	r3, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dd6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dda:	459c      	cmp	ip, r3
 8000ddc:	d909      	bls.n	8000df2 <__udivmoddi4+0x8e>
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de4:	f080 80d6 	bcs.w	8000f94 <__udivmoddi4+0x230>
 8000de8:	459c      	cmp	ip, r3
 8000dea:	f240 80d3 	bls.w	8000f94 <__udivmoddi4+0x230>
 8000dee:	443b      	add	r3, r7
 8000df0:	3802      	subs	r0, #2
 8000df2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df6:	eba3 030c 	sub.w	r3, r3, ip
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11d      	cbz	r5, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40f3      	lsrs	r3, r6
 8000e00:	2200      	movs	r2, #0
 8000e02:	e9c5 3200 	strd	r3, r2, [r5]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d905      	bls.n	8000e1a <__udivmoddi4+0xb6>
 8000e0e:	b10d      	cbz	r5, 8000e14 <__udivmoddi4+0xb0>
 8000e10:	e9c5 0100 	strd	r0, r1, [r5]
 8000e14:	2100      	movs	r1, #0
 8000e16:	4608      	mov	r0, r1
 8000e18:	e7f5      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e1a:	fab3 f183 	clz	r1, r3
 8000e1e:	2900      	cmp	r1, #0
 8000e20:	d146      	bne.n	8000eb0 <__udivmoddi4+0x14c>
 8000e22:	4573      	cmp	r3, lr
 8000e24:	d302      	bcc.n	8000e2c <__udivmoddi4+0xc8>
 8000e26:	4282      	cmp	r2, r0
 8000e28:	f200 8105 	bhi.w	8001036 <__udivmoddi4+0x2d2>
 8000e2c:	1a84      	subs	r4, r0, r2
 8000e2e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e32:	2001      	movs	r0, #1
 8000e34:	4690      	mov	r8, r2
 8000e36:	2d00      	cmp	r5, #0
 8000e38:	d0e5      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e3a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e3e:	e7e2      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	f000 8090 	beq.w	8000f66 <__udivmoddi4+0x202>
 8000e46:	fab2 f682 	clz	r6, r2
 8000e4a:	2e00      	cmp	r6, #0
 8000e4c:	f040 80a4 	bne.w	8000f98 <__udivmoddi4+0x234>
 8000e50:	1a8a      	subs	r2, r1, r2
 8000e52:	0c03      	lsrs	r3, r0, #16
 8000e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e58:	b280      	uxth	r0, r0
 8000e5a:	b2bc      	uxth	r4, r7
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e62:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e6a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x11e>
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e78:	d202      	bcs.n	8000e80 <__udivmoddi4+0x11c>
 8000e7a:	429a      	cmp	r2, r3
 8000e7c:	f200 80e0 	bhi.w	8001040 <__udivmoddi4+0x2dc>
 8000e80:	46c4      	mov	ip, r8
 8000e82:	1a9b      	subs	r3, r3, r2
 8000e84:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e88:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e8c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e90:	fb02 f404 	mul.w	r4, r2, r4
 8000e94:	429c      	cmp	r4, r3
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x144>
 8000e98:	18fb      	adds	r3, r7, r3
 8000e9a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x142>
 8000ea0:	429c      	cmp	r4, r3
 8000ea2:	f200 80ca 	bhi.w	800103a <__udivmoddi4+0x2d6>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	1b1b      	subs	r3, r3, r4
 8000eaa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000eae:	e7a5      	b.n	8000dfc <__udivmoddi4+0x98>
 8000eb0:	f1c1 0620 	rsb	r6, r1, #32
 8000eb4:	408b      	lsls	r3, r1
 8000eb6:	fa22 f706 	lsr.w	r7, r2, r6
 8000eba:	431f      	orrs	r7, r3
 8000ebc:	fa0e f401 	lsl.w	r4, lr, r1
 8000ec0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ec4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ec8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000ecc:	4323      	orrs	r3, r4
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	fa1f fc87 	uxth.w	ip, r7
 8000ed6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eda:	0c1c      	lsrs	r4, r3, #16
 8000edc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ee0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ee4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	fa02 f201 	lsl.w	r2, r2, r1
 8000eee:	d909      	bls.n	8000f04 <__udivmoddi4+0x1a0>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ef6:	f080 809c 	bcs.w	8001032 <__udivmoddi4+0x2ce>
 8000efa:	45a6      	cmp	lr, r4
 8000efc:	f240 8099 	bls.w	8001032 <__udivmoddi4+0x2ce>
 8000f00:	3802      	subs	r0, #2
 8000f02:	443c      	add	r4, r7
 8000f04:	eba4 040e 	sub.w	r4, r4, lr
 8000f08:	fa1f fe83 	uxth.w	lr, r3
 8000f0c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f10:	fb09 4413 	mls	r4, r9, r3, r4
 8000f14:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f18:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x1ce>
 8000f20:	193c      	adds	r4, r7, r4
 8000f22:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f26:	f080 8082 	bcs.w	800102e <__udivmoddi4+0x2ca>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	d97f      	bls.n	800102e <__udivmoddi4+0x2ca>
 8000f2e:	3b02      	subs	r3, #2
 8000f30:	443c      	add	r4, r7
 8000f32:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f36:	eba4 040c 	sub.w	r4, r4, ip
 8000f3a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f3e:	4564      	cmp	r4, ip
 8000f40:	4673      	mov	r3, lr
 8000f42:	46e1      	mov	r9, ip
 8000f44:	d362      	bcc.n	800100c <__udivmoddi4+0x2a8>
 8000f46:	d05f      	beq.n	8001008 <__udivmoddi4+0x2a4>
 8000f48:	b15d      	cbz	r5, 8000f62 <__udivmoddi4+0x1fe>
 8000f4a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f4e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f52:	fa04 f606 	lsl.w	r6, r4, r6
 8000f56:	fa22 f301 	lsr.w	r3, r2, r1
 8000f5a:	431e      	orrs	r6, r3
 8000f5c:	40cc      	lsrs	r4, r1
 8000f5e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f62:	2100      	movs	r1, #0
 8000f64:	e74f      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000f66:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f6a:	0c01      	lsrs	r1, r0, #16
 8000f6c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f70:	b280      	uxth	r0, r0
 8000f72:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f76:	463b      	mov	r3, r7
 8000f78:	4638      	mov	r0, r7
 8000f7a:	463c      	mov	r4, r7
 8000f7c:	46b8      	mov	r8, r7
 8000f7e:	46be      	mov	lr, r7
 8000f80:	2620      	movs	r6, #32
 8000f82:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f86:	eba2 0208 	sub.w	r2, r2, r8
 8000f8a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f8e:	e766      	b.n	8000e5e <__udivmoddi4+0xfa>
 8000f90:	4601      	mov	r1, r0
 8000f92:	e718      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000f94:	4610      	mov	r0, r2
 8000f96:	e72c      	b.n	8000df2 <__udivmoddi4+0x8e>
 8000f98:	f1c6 0220 	rsb	r2, r6, #32
 8000f9c:	fa2e f302 	lsr.w	r3, lr, r2
 8000fa0:	40b7      	lsls	r7, r6
 8000fa2:	40b1      	lsls	r1, r6
 8000fa4:	fa20 f202 	lsr.w	r2, r0, r2
 8000fa8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000fac:	430a      	orrs	r2, r1
 8000fae:	fbb3 f8fe 	udiv	r8, r3, lr
 8000fb2:	b2bc      	uxth	r4, r7
 8000fb4:	fb0e 3318 	mls	r3, lr, r8, r3
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fbe:	fb08 f904 	mul.w	r9, r8, r4
 8000fc2:	40b0      	lsls	r0, r6
 8000fc4:	4589      	cmp	r9, r1
 8000fc6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000fca:	b280      	uxth	r0, r0
 8000fcc:	d93e      	bls.n	800104c <__udivmoddi4+0x2e8>
 8000fce:	1879      	adds	r1, r7, r1
 8000fd0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fd4:	d201      	bcs.n	8000fda <__udivmoddi4+0x276>
 8000fd6:	4589      	cmp	r9, r1
 8000fd8:	d81f      	bhi.n	800101a <__udivmoddi4+0x2b6>
 8000fda:	eba1 0109 	sub.w	r1, r1, r9
 8000fde:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe2:	fb09 f804 	mul.w	r8, r9, r4
 8000fe6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fea:	b292      	uxth	r2, r2
 8000fec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ff0:	4542      	cmp	r2, r8
 8000ff2:	d229      	bcs.n	8001048 <__udivmoddi4+0x2e4>
 8000ff4:	18ba      	adds	r2, r7, r2
 8000ff6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000ffa:	d2c4      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8000ffc:	4542      	cmp	r2, r8
 8000ffe:	d2c2      	bcs.n	8000f86 <__udivmoddi4+0x222>
 8001000:	f1a9 0102 	sub.w	r1, r9, #2
 8001004:	443a      	add	r2, r7
 8001006:	e7be      	b.n	8000f86 <__udivmoddi4+0x222>
 8001008:	45f0      	cmp	r8, lr
 800100a:	d29d      	bcs.n	8000f48 <__udivmoddi4+0x1e4>
 800100c:	ebbe 0302 	subs.w	r3, lr, r2
 8001010:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001014:	3801      	subs	r0, #1
 8001016:	46e1      	mov	r9, ip
 8001018:	e796      	b.n	8000f48 <__udivmoddi4+0x1e4>
 800101a:	eba7 0909 	sub.w	r9, r7, r9
 800101e:	4449      	add	r1, r9
 8001020:	f1a8 0c02 	sub.w	ip, r8, #2
 8001024:	fbb1 f9fe 	udiv	r9, r1, lr
 8001028:	fb09 f804 	mul.w	r8, r9, r4
 800102c:	e7db      	b.n	8000fe6 <__udivmoddi4+0x282>
 800102e:	4673      	mov	r3, lr
 8001030:	e77f      	b.n	8000f32 <__udivmoddi4+0x1ce>
 8001032:	4650      	mov	r0, sl
 8001034:	e766      	b.n	8000f04 <__udivmoddi4+0x1a0>
 8001036:	4608      	mov	r0, r1
 8001038:	e6fd      	b.n	8000e36 <__udivmoddi4+0xd2>
 800103a:	443b      	add	r3, r7
 800103c:	3a02      	subs	r2, #2
 800103e:	e733      	b.n	8000ea8 <__udivmoddi4+0x144>
 8001040:	f1ac 0c02 	sub.w	ip, ip, #2
 8001044:	443b      	add	r3, r7
 8001046:	e71c      	b.n	8000e82 <__udivmoddi4+0x11e>
 8001048:	4649      	mov	r1, r9
 800104a:	e79c      	b.n	8000f86 <__udivmoddi4+0x222>
 800104c:	eba1 0109 	sub.w	r1, r1, r9
 8001050:	46c4      	mov	ip, r8
 8001052:	fbb1 f9fe 	udiv	r9, r1, lr
 8001056:	fb09 f804 	mul.w	r8, r9, r4
 800105a:	e7c4      	b.n	8000fe6 <__udivmoddi4+0x282>

0800105c <__aeabi_idiv0>:
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop

08001060 <HAL_TIM_PeriodElapsedCallback>:
UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b086      	sub	sp, #24
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM3)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a25      	ldr	r2, [pc, #148]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d144      	bne.n	80010fc <HAL_TIM_PeriodElapsedCallback+0x9c>
    {
        float sum = 0.0f;
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
        uint8_t count = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	74fb      	strb	r3, [r7, #19]
        uint8_t i = last_index;
 800107c:	4b22      	ldr	r3, [pc, #136]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	74bb      	strb	r3, [r7, #18]

        // Loop through circular buffer between last_index and current index
        while (i != distance_index)
 8001082:	e01c      	b.n	80010be <HAL_TIM_PeriodElapsedCallback+0x5e>
        {
            sum += distance_buffer[i];
 8001084:	7cbb      	ldrb	r3, [r7, #18]
 8001086:	4a21      	ldr	r2, [pc, #132]	@ (800110c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	4413      	add	r3, r2
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ed97 7a05 	vldr	s14, [r7, #20]
 8001094:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001098:	edc7 7a05 	vstr	s15, [r7, #20]
            count++;
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	3301      	adds	r3, #1
 80010a0:	74fb      	strb	r3, [r7, #19]
            i = (i + 1) % DIST_BUFFER_SIZE;
 80010a2:	7cbb      	ldrb	r3, [r7, #18]
 80010a4:	3301      	adds	r3, #1
 80010a6:	4a1a      	ldr	r2, [pc, #104]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80010a8:	fb82 1203 	smull	r1, r2, r2, r3
 80010ac:	1111      	asrs	r1, r2, #4
 80010ae:	17da      	asrs	r2, r3, #31
 80010b0:	1a8a      	subs	r2, r1, r2
 80010b2:	2132      	movs	r1, #50	@ 0x32
 80010b4:	fb01 f202 	mul.w	r2, r1, r2
 80010b8:	1a9a      	subs	r2, r3, r2
 80010ba:	4613      	mov	r3, r2
 80010bc:	74bb      	strb	r3, [r7, #18]
        while (i != distance_index)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	7cba      	ldrb	r2, [r7, #18]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d1dd      	bne.n	8001084 <HAL_TIM_PeriodElapsedCallback+0x24>
        }

        if (count > 0)
 80010c8:	7cfb      	ldrb	r3, [r7, #19]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d012      	beq.n	80010f4 <HAL_TIM_PeriodElapsedCallback+0x94>
        {
            float avg = sum / count;
 80010ce:	7cfb      	ldrb	r3, [r7, #19]
 80010d0:	ee07 3a90 	vmov	s15, r3
 80010d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80010dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e0:	edc7 7a03 	vstr	s15, [r7, #12]
            printf("[TIM3 INT] Average distance from last interrupt: %.2f cm\r\n", avg);
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f7ff fa4f 	bl	8000588 <__aeabi_f2d>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	480a      	ldr	r0, [pc, #40]	@ (8001118 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010f0:	f003 fe10 	bl	8004d14 <iprintf>
        }

        // Update last_index to the current index
        last_index = distance_index;
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80010f6:	781a      	ldrb	r2, [r3, #0]
 80010f8:	4b03      	ldr	r3, [pc, #12]	@ (8001108 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80010fa:	701a      	strb	r2, [r3, #0]
    }
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40000400 	.word	0x40000400
 8001108:	200002b9 	.word	0x200002b9
 800110c:	200001f0 	.word	0x200001f0
 8001110:	51eb851f 	.word	0x51eb851f
 8001114:	200002b8 	.word	0x200002b8
 8001118:	080085d8 	.word	0x080085d8

0800111c <delay_us>:

/*--------------------------------------------------------------*/
/* Utility: microsecond delay using TIM2                        */
void delay_us(uint16_t us)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <delay_us+0x30>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(&htim2) < us);
 800112e:	bf00      	nop
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <delay_us+0x30>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	429a      	cmp	r2, r3
 800113a:	d3f9      	bcc.n	8001130 <delay_us+0x14>
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	200002bc 	.word	0x200002bc

08001150 <read_ultrasonic>:

/*--------------------------------------------------------------*/
/* Measure echo pulse duration in microseconds                  */
uint32_t read_ultrasonic(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
    uint32_t local_time = 0;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]

    // Ensure trigger low
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001160:	4818      	ldr	r0, [pc, #96]	@ (80011c4 <read_ultrasonic+0x74>)
 8001162:	f000 ffb1 	bl	80020c8 <HAL_GPIO_WritePin>
    HAL_Delay(2);
 8001166:	2002      	movs	r0, #2
 8001168:	f000 fccc 	bl	8001b04 <HAL_Delay>

    // Send 10 µs pulse
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800116c:	2201      	movs	r2, #1
 800116e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001172:	4814      	ldr	r0, [pc, #80]	@ (80011c4 <read_ultrasonic+0x74>)
 8001174:	f000 ffa8 	bl	80020c8 <HAL_GPIO_WritePin>
    delay_us(10);
 8001178:	200a      	movs	r0, #10
 800117a:	f7ff ffcf 	bl	800111c <delay_us>
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800117e:	2200      	movs	r2, #0
 8001180:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001184:	480f      	ldr	r0, [pc, #60]	@ (80011c4 <read_ultrasonic+0x74>)
 8001186:	f000 ff9f 	bl	80020c8 <HAL_GPIO_WritePin>

    // Wait for ECHO to go high
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_RESET);
 800118a:	bf00      	nop
 800118c:	2140      	movs	r1, #64	@ 0x40
 800118e:	480e      	ldr	r0, [pc, #56]	@ (80011c8 <read_ultrasonic+0x78>)
 8001190:	f000 ff82 	bl	8002098 <HAL_GPIO_ReadPin>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f8      	beq.n	800118c <read_ultrasonic+0x3c>

    __HAL_TIM_SET_COUNTER(&htim2, 0); // start counting
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <read_ultrasonic+0x7c>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2200      	movs	r2, #0
 80011a0:	625a      	str	r2, [r3, #36]	@ 0x24

    // Wait for ECHO to go low
    while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET);
 80011a2:	bf00      	nop
 80011a4:	2140      	movs	r1, #64	@ 0x40
 80011a6:	4808      	ldr	r0, [pc, #32]	@ (80011c8 <read_ultrasonic+0x78>)
 80011a8:	f000 ff76 	bl	8002098 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d0f8      	beq.n	80011a4 <read_ultrasonic+0x54>

    local_time = __HAL_TIM_GET_COUNTER(&htim2);
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <read_ultrasonic+0x7c>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011b8:	607b      	str	r3, [r7, #4]

    return local_time;
 80011ba:	687b      	ldr	r3, [r7, #4]
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40020000 	.word	0x40020000
 80011c8:	40020400 	.word	0x40020400
 80011cc:	200002bc 	.word	0x200002bc

080011d0 <store_distance>:
void store_distance(float value)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	ed87 0a01 	vstr	s0, [r7, #4]
    distance_buffer[distance_index] = value;
 80011da:	4b0e      	ldr	r3, [pc, #56]	@ (8001214 <store_distance+0x44>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	4a0e      	ldr	r2, [pc, #56]	@ (8001218 <store_distance+0x48>)
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	4413      	add	r3, r2
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	601a      	str	r2, [r3, #0]
    distance_index = (distance_index + 1) % DIST_BUFFER_SIZE;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001214 <store_distance+0x44>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <store_distance+0x4c>)
 80011f0:	fb82 1203 	smull	r1, r2, r2, r3
 80011f4:	1111      	asrs	r1, r2, #4
 80011f6:	17da      	asrs	r2, r3, #31
 80011f8:	1a8a      	subs	r2, r1, r2
 80011fa:	2132      	movs	r1, #50	@ 0x32
 80011fc:	fb01 f202 	mul.w	r2, r1, r2
 8001200:	1a9a      	subs	r2, r3, r2
 8001202:	b2d2      	uxtb	r2, r2
 8001204:	4b03      	ldr	r3, [pc, #12]	@ (8001214 <store_distance+0x44>)
 8001206:	701a      	strb	r2, [r3, #0]
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	200002b8 	.word	0x200002b8
 8001218:	200001f0 	.word	0x200001f0
 800121c:	51eb851f 	.word	0x51eb851f

08001220 <_write>:
/*--------------------------------------------------------------*/
int _write(int file, char *ptr, int len)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	60b9      	str	r1, [r7, #8]
 800122a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	b29a      	uxth	r2, r3
 8001230:	f04f 33ff 	mov.w	r3, #4294967295
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	4804      	ldr	r0, [pc, #16]	@ (8001248 <_write+0x28>)
 8001238:	f002 fa8a 	bl	8003750 <HAL_UART_Transmit>
    return len;
 800123c:	687b      	ldr	r3, [r7, #4]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000034c 	.word	0x2000034c

0800124c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001252:	f000 fbe5 	bl	8001a20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001256:	f000 f867 	bl	8001328 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800125a:	f000 f997 	bl	800158c <MX_GPIO_Init>
  MX_TIM2_Init();
 800125e:	f000 f8d1 	bl	8001404 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8001262:	f000 f969 	bl	8001538 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001266:	f000 f919 	bl	800149c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);   // start TIM2 once
 800126a:	4829      	ldr	r0, [pc, #164]	@ (8001310 <main+0xc4>)
 800126c:	f001 fd98 	bl	8002da0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8001270:	4828      	ldr	r0, [pc, #160]	@ (8001314 <main+0xc8>)
 8001272:	f001 fdfd 	bl	8002e70 <HAL_TIM_Base_Start_IT>
  One-way distance=(Time)/58
  */
  while (1)
  {
    /* USER CODE END WHILE */
      uint32_t time = read_ultrasonic();
 8001276:	f7ff ff6b 	bl	8001150 <read_ultrasonic>
 800127a:	6078      	str	r0, [r7, #4]
      float distance = (float)time / 58.0;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	ee07 3a90 	vmov	s15, r3
 8001282:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001286:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8001318 <main+0xcc>
 800128a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800128e:	edc7 7a00 	vstr	s15, [r7]
      store_distance(distance); // store in circular buffer
 8001292:	ed97 0a00 	vldr	s0, [r7]
 8001296:	f7ff ff9b 	bl	80011d0 <store_distance>
      //printf("Distance: %.2f cm\r\n", distance);
      if (distance < 20) {
 800129a:	edd7 7a00 	vldr	s15, [r7]
 800129e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80012a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012aa:	d50a      	bpl.n	80012c2 <main+0x76>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET); // turn led on
 80012ac:	2201      	movs	r2, #1
 80012ae:	2101      	movs	r1, #1
 80012b0:	481a      	ldr	r0, [pc, #104]	@ (800131c <main+0xd0>)
 80012b2:	f000 ff09 	bl	80020c8 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // turn buzzer off
 80012b6:	2200      	movs	r2, #0
 80012b8:	2102      	movs	r1, #2
 80012ba:	4818      	ldr	r0, [pc, #96]	@ (800131c <main+0xd0>)
 80012bc:	f000 ff04 	bl	80020c8 <HAL_GPIO_WritePin>
 80012c0:	e01d      	b.n	80012fe <main+0xb2>
      } else if (distance > 100) {
 80012c2:	edd7 7a00 	vldr	s15, [r7]
 80012c6:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001320 <main+0xd4>
 80012ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012d2:	dd0a      	ble.n	80012ea <main+0x9e>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // turn led off
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	4810      	ldr	r0, [pc, #64]	@ (800131c <main+0xd0>)
 80012da:	f000 fef5 	bl	80020c8 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET); // turn buzzer on
 80012de:	2201      	movs	r2, #1
 80012e0:	2102      	movs	r1, #2
 80012e2:	480e      	ldr	r0, [pc, #56]	@ (800131c <main+0xd0>)
 80012e4:	f000 fef0 	bl	80020c8 <HAL_GPIO_WritePin>
 80012e8:	e009      	b.n	80012fe <main+0xb2>
      } else {
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET); // turn led off
 80012ea:	2200      	movs	r2, #0
 80012ec:	2101      	movs	r1, #1
 80012ee:	480b      	ldr	r0, [pc, #44]	@ (800131c <main+0xd0>)
 80012f0:	f000 feea 	bl	80020c8 <HAL_GPIO_WritePin>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET); // turn buzzer off
 80012f4:	2200      	movs	r2, #0
 80012f6:	2102      	movs	r1, #2
 80012f8:	4808      	ldr	r0, [pc, #32]	@ (800131c <main+0xd0>)
 80012fa:	f000 fee5 	bl	80020c8 <HAL_GPIO_WritePin>
      }
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80012fe:	2120      	movs	r1, #32
 8001300:	4808      	ldr	r0, [pc, #32]	@ (8001324 <main+0xd8>)
 8001302:	f000 fefa 	bl	80020fa <HAL_GPIO_TogglePin>
      HAL_Delay(500);
 8001306:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800130a:	f000 fbfb 	bl	8001b04 <HAL_Delay>
  {
 800130e:	e7b2      	b.n	8001276 <main+0x2a>
 8001310:	200002bc 	.word	0x200002bc
 8001314:	20000304 	.word	0x20000304
 8001318:	42680000 	.word	0x42680000
 800131c:	40020400 	.word	0x40020400
 8001320:	42c80000 	.word	0x42c80000
 8001324:	40020000 	.word	0x40020000

08001328 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b094      	sub	sp, #80	@ 0x50
 800132c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800132e:	f107 031c 	add.w	r3, r7, #28
 8001332:	2234      	movs	r2, #52	@ 0x34
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f003 fd63 	bl	8004e02 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	4b2a      	ldr	r3, [pc, #168]	@ (80013fc <SystemClock_Config+0xd4>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001354:	4a29      	ldr	r2, [pc, #164]	@ (80013fc <SystemClock_Config+0xd4>)
 8001356:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800135a:	6413      	str	r3, [r2, #64]	@ 0x40
 800135c:	4b27      	ldr	r3, [pc, #156]	@ (80013fc <SystemClock_Config+0xd4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001360:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001368:	2300      	movs	r3, #0
 800136a:	603b      	str	r3, [r7, #0]
 800136c:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <SystemClock_Config+0xd8>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001374:	4a22      	ldr	r2, [pc, #136]	@ (8001400 <SystemClock_Config+0xd8>)
 8001376:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b20      	ldr	r3, [pc, #128]	@ (8001400 <SystemClock_Config+0xd8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001388:	2302      	movs	r3, #2
 800138a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800138c:	2301      	movs	r3, #1
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001390:	2310      	movs	r3, #16
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001394:	2302      	movs	r3, #2
 8001396:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001398:	2300      	movs	r3, #0
 800139a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800139c:	2310      	movs	r3, #16
 800139e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013a0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013a6:	2304      	movs	r3, #4
 80013a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013aa:	2302      	movs	r3, #2
 80013ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b2:	f107 031c 	add.w	r3, r7, #28
 80013b6:	4618      	mov	r0, r3
 80013b8:	f001 fa04 	bl	80027c4 <HAL_RCC_OscConfig>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013c2:	f000 f95b 	bl	800167c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c6:	230f      	movs	r3, #15
 80013c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ca:	2302      	movs	r3, #2
 80013cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013dc:	f107 0308 	add.w	r3, r7, #8
 80013e0:	2102      	movs	r1, #2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fea4 	bl	8002130 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013ee:	f000 f945 	bl	800167c <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	@ 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140a:	f107 0308 	add.w	r3, r7, #8
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001418:	463b      	mov	r3, r7
 800141a:	2200      	movs	r2, #0
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001420:	4b1d      	ldr	r3, [pc, #116]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001422:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001426:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001428:	4b1b      	ldr	r3, [pc, #108]	@ (8001498 <MX_TIM2_Init+0x94>)
 800142a:	2253      	movs	r2, #83	@ 0x53
 800142c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800142e:	4b1a      	ldr	r3, [pc, #104]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001434:	4b18      	ldr	r3, [pc, #96]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001436:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800143a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800143c:	4b16      	ldr	r3, [pc, #88]	@ (8001498 <MX_TIM2_Init+0x94>)
 800143e:	2200      	movs	r2, #0
 8001440:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001442:	4b15      	ldr	r3, [pc, #84]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001444:	2200      	movs	r2, #0
 8001446:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001448:	4813      	ldr	r0, [pc, #76]	@ (8001498 <MX_TIM2_Init+0x94>)
 800144a:	f001 fc59 	bl	8002d00 <HAL_TIM_Base_Init>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001454:	f000 f912 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001458:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800145c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4619      	mov	r1, r3
 8001464:	480c      	ldr	r0, [pc, #48]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001466:	f001 fe63 	bl	8003130 <HAL_TIM_ConfigClockSource>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001470:	f000 f904 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147c:	463b      	mov	r3, r7
 800147e:	4619      	mov	r1, r3
 8001480:	4805      	ldr	r0, [pc, #20]	@ (8001498 <MX_TIM2_Init+0x94>)
 8001482:	f002 f885 	bl	8003590 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800148c:	f000 f8f6 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001490:	bf00      	nop
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	200002bc 	.word	0x200002bc

0800149c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b086      	sub	sp, #24
 80014a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]
 80014ac:	609a      	str	r2, [r3, #8]
 80014ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b0:	463b      	mov	r3, r7
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001534 <MX_TIM3_Init+0x98>)
 80014bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8399;
 80014be:	4b1c      	ldr	r3, [pc, #112]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014c0:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80014c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49999;
 80014cc:	4b18      	ldr	r3, [pc, #96]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014ce:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80014d2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d4:	4b16      	ldr	r3, [pc, #88]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014da:	4b15      	ldr	r3, [pc, #84]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014e0:	4813      	ldr	r0, [pc, #76]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014e2:	f001 fc0d 	bl	8002d00 <HAL_TIM_Base_Init>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d001      	beq.n	80014f0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80014ec:	f000 f8c6 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014f6:	f107 0308 	add.w	r3, r7, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	480c      	ldr	r0, [pc, #48]	@ (8001530 <MX_TIM3_Init+0x94>)
 80014fe:	f001 fe17 	bl	8003130 <HAL_TIM_ConfigClockSource>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001508:	f000 f8b8 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800150c:	2300      	movs	r3, #0
 800150e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001514:	463b      	mov	r3, r7
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	@ (8001530 <MX_TIM3_Init+0x94>)
 800151a:	f002 f839 	bl	8003590 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001524:	f000 f8aa 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000304 	.word	0x20000304
 8001534:	40000400 	.word	0x40000400

08001538 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800153c:	4b11      	ldr	r3, [pc, #68]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 800153e:	4a12      	ldr	r2, [pc, #72]	@ (8001588 <MX_USART2_UART_Init+0x50>)
 8001540:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001542:	4b10      	ldr	r3, [pc, #64]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001548:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	4b0e      	ldr	r3, [pc, #56]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001552:	2200      	movs	r2, #0
 8001554:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800155c:	4b09      	ldr	r3, [pc, #36]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 800155e:	220c      	movs	r2, #12
 8001560:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001562:	4b08      	ldr	r3, [pc, #32]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001564:	2200      	movs	r2, #0
 8001566:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 800156a:	2200      	movs	r2, #0
 800156c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	@ (8001584 <MX_USART2_UART_Init+0x4c>)
 8001570:	f002 f89e 	bl	80036b0 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800157a:	f000 f87f 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000034c 	.word	0x2000034c
 8001588:	40004400 	.word	0x40004400

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
 80015a6:	4b32      	ldr	r3, [pc, #200]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015aa:	4a31      	ldr	r2, [pc, #196]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b2:	4b2f      	ldr	r3, [pc, #188]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015ba:	60bb      	str	r3, [r7, #8]
 80015bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015be:	2300      	movs	r3, #0
 80015c0:	607b      	str	r3, [r7, #4]
 80015c2:	4b2b      	ldr	r3, [pc, #172]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c6:	4a2a      	ldr	r2, [pc, #168]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ce:	4b28      	ldr	r3, [pc, #160]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	607b      	str	r3, [r7, #4]
 80015d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
 80015de:	4b24      	ldr	r3, [pc, #144]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	4a23      	ldr	r2, [pc, #140]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015e4:	f043 0302 	orr.w	r3, r3, #2
 80015e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015ea:	4b21      	ldr	r3, [pc, #132]	@ (8001670 <MX_GPIO_Init+0xe4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	f003 0302 	and.w	r3, r3, #2
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80015f6:	2200      	movs	r2, #0
 80015f8:	2120      	movs	r1, #32
 80015fa:	481e      	ldr	r0, [pc, #120]	@ (8001674 <MX_GPIO_Init+0xe8>)
 80015fc:	f000 fd64 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	2103      	movs	r1, #3
 8001604:	481c      	ldr	r0, [pc, #112]	@ (8001678 <MX_GPIO_Init+0xec>)
 8001606:	f000 fd5f 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001610:	4818      	ldr	r0, [pc, #96]	@ (8001674 <MX_GPIO_Init+0xe8>)
 8001612:	f000 fd59 	bl	80020c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_8;
 8001616:	f44f 7390 	mov.w	r3, #288	@ 0x120
 800161a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800161c:	2301      	movs	r3, #1
 800161e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4619      	mov	r1, r3
 800162e:	4811      	ldr	r0, [pc, #68]	@ (8001674 <MX_GPIO_Init+0xe8>)
 8001630:	f000 fb9e 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001634:	2303      	movs	r3, #3
 8001636:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001638:	2301      	movs	r3, #1
 800163a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001644:	f107 030c 	add.w	r3, r7, #12
 8001648:	4619      	mov	r1, r3
 800164a:	480b      	ldr	r0, [pc, #44]	@ (8001678 <MX_GPIO_Init+0xec>)
 800164c:	f000 fb90 	bl	8001d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001650:	2340      	movs	r3, #64	@ 0x40
 8001652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001654:	2300      	movs	r3, #0
 8001656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	4619      	mov	r1, r3
 8001662:	4805      	ldr	r0, [pc, #20]	@ (8001678 <MX_GPIO_Init+0xec>)
 8001664:	f000 fb84 	bl	8001d70 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001668:	bf00      	nop
 800166a:	3720      	adds	r7, #32
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020400 	.word	0x40020400

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <Error_Handler+0x8>

08001688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	607b      	str	r3, [r7, #4]
 8001692:	4b10      	ldr	r3, [pc, #64]	@ (80016d4 <HAL_MspInit+0x4c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	4a0f      	ldr	r2, [pc, #60]	@ (80016d4 <HAL_MspInit+0x4c>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169c:	6453      	str	r3, [r2, #68]	@ 0x44
 800169e:	4b0d      	ldr	r3, [pc, #52]	@ (80016d4 <HAL_MspInit+0x4c>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a6:	607b      	str	r3, [r7, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <HAL_MspInit+0x4c>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	4a08      	ldr	r2, [pc, #32]	@ (80016d4 <HAL_MspInit+0x4c>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ba:	4b06      	ldr	r3, [pc, #24]	@ (80016d4 <HAL_MspInit+0x4c>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	603b      	str	r3, [r7, #0]
 80016c4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016c6:	2007      	movs	r0, #7
 80016c8:	f000 fb10 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016cc:	bf00      	nop
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40023800 	.word	0x40023800

080016d8 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_TIM_Base_MspInit+0x70>)
 80016f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f2:	4a15      	ldr	r2, [pc, #84]	@ (8001748 <HAL_TIM_Base_MspInit+0x70>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <HAL_TIM_Base_MspInit+0x70>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001706:	e01a      	b.n	800173e <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM3)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a0f      	ldr	r2, [pc, #60]	@ (800174c <HAL_TIM_Base_MspInit+0x74>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d115      	bne.n	800173e <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <HAL_TIM_Base_MspInit+0x70>)
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	4a0b      	ldr	r2, [pc, #44]	@ (8001748 <HAL_TIM_Base_MspInit+0x70>)
 800171c:	f043 0302 	orr.w	r3, r3, #2
 8001720:	6413      	str	r3, [r2, #64]	@ 0x40
 8001722:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <HAL_TIM_Base_MspInit+0x70>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	f003 0302 	and.w	r3, r3, #2
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	201d      	movs	r0, #29
 8001734:	f000 fae5 	bl	8001d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001738:	201d      	movs	r0, #29
 800173a:	f000 fafe 	bl	8001d3a <HAL_NVIC_EnableIRQ>
}
 800173e:	bf00      	nop
 8001740:	3710      	adds	r7, #16
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40023800 	.word	0x40023800
 800174c:	40000400 	.word	0x40000400

08001750 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	@ 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	2200      	movs	r2, #0
 800175e:	601a      	str	r2, [r3, #0]
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	60da      	str	r2, [r3, #12]
 8001766:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a19      	ldr	r2, [pc, #100]	@ (80017d4 <HAL_UART_MspInit+0x84>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d12b      	bne.n	80017ca <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
 8001776:	4b18      	ldr	r3, [pc, #96]	@ (80017d8 <HAL_UART_MspInit+0x88>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	4a17      	ldr	r2, [pc, #92]	@ (80017d8 <HAL_UART_MspInit+0x88>)
 800177c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001780:	6413      	str	r3, [r2, #64]	@ 0x40
 8001782:	4b15      	ldr	r3, [pc, #84]	@ (80017d8 <HAL_UART_MspInit+0x88>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800178a:	613b      	str	r3, [r7, #16]
 800178c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	4b11      	ldr	r3, [pc, #68]	@ (80017d8 <HAL_UART_MspInit+0x88>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001796:	4a10      	ldr	r2, [pc, #64]	@ (80017d8 <HAL_UART_MspInit+0x88>)
 8001798:	f043 0301 	orr.w	r3, r3, #1
 800179c:	6313      	str	r3, [r2, #48]	@ 0x30
 800179e:	4b0e      	ldr	r3, [pc, #56]	@ (80017d8 <HAL_UART_MspInit+0x88>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017aa:	230c      	movs	r3, #12
 80017ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ba:	2307      	movs	r3, #7
 80017bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 0314 	add.w	r3, r7, #20
 80017c2:	4619      	mov	r1, r3
 80017c4:	4805      	ldr	r0, [pc, #20]	@ (80017dc <HAL_UART_MspInit+0x8c>)
 80017c6:	f000 fad3 	bl	8001d70 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80017ca:	bf00      	nop
 80017cc:	3728      	adds	r7, #40	@ 0x28
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40004400 	.word	0x40004400
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000

080017e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <NMI_Handler+0x4>

080017e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <HardFault_Handler+0x4>

080017f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <MemManage_Handler+0x4>

080017f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <BusFault_Handler+0x4>

08001800 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <UsageFault_Handler+0x4>

08001808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr

08001816 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001816:	b480      	push	{r7}
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001836:	f000 f945 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
	...

08001840 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <TIM3_IRQHandler+0x10>)
 8001846:	f001 fb83 	bl	8002f50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000304 	.word	0x20000304

08001854 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  return 1;
 8001858:	2301      	movs	r3, #1
}
 800185a:	4618      	mov	r0, r3
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <_kill>:

int _kill(int pid, int sig)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
 800186c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186e:	f003 fb1b 	bl	8004ea8 <__errno>
 8001872:	4603      	mov	r3, r0
 8001874:	2216      	movs	r2, #22
 8001876:	601a      	str	r2, [r3, #0]
  return -1;
 8001878:	f04f 33ff 	mov.w	r3, #4294967295
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <_exit>:

void _exit (int status)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7ff ffe7 	bl	8001864 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001896:	bf00      	nop
 8001898:	e7fd      	b.n	8001896 <_exit+0x12>

0800189a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b086      	sub	sp, #24
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	617b      	str	r3, [r7, #20]
 80018aa:	e00a      	b.n	80018c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ac:	f3af 8000 	nop.w
 80018b0:	4601      	mov	r1, r0
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	60ba      	str	r2, [r7, #8]
 80018b8:	b2ca      	uxtb	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	3301      	adds	r3, #1
 80018c0:	617b      	str	r3, [r7, #20]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	dbf0      	blt.n	80018ac <_read+0x12>
  }

  return len;
 80018ca:	687b      	ldr	r3, [r7, #4]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018fc:	605a      	str	r2, [r3, #4]
  return 0;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <_isatty>:

int _isatty(int file)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001914:	2301      	movs	r3, #1
}
 8001916:	4618      	mov	r0, r3
 8001918:	370c      	adds	r7, #12
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001922:	b480      	push	{r7}
 8001924:	b085      	sub	sp, #20
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001944:	4a14      	ldr	r2, [pc, #80]	@ (8001998 <_sbrk+0x5c>)
 8001946:	4b15      	ldr	r3, [pc, #84]	@ (800199c <_sbrk+0x60>)
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d102      	bne.n	800195e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <_sbrk+0x64>)
 800195a:	4a12      	ldr	r2, [pc, #72]	@ (80019a4 <_sbrk+0x68>)
 800195c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800195e:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	429a      	cmp	r2, r3
 800196a:	d207      	bcs.n	800197c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800196c:	f003 fa9c 	bl	8004ea8 <__errno>
 8001970:	4603      	mov	r3, r0
 8001972:	220c      	movs	r2, #12
 8001974:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001976:	f04f 33ff 	mov.w	r3, #4294967295
 800197a:	e009      	b.n	8001990 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001982:	4b07      	ldr	r3, [pc, #28]	@ (80019a0 <_sbrk+0x64>)
 8001984:	681a      	ldr	r2, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4413      	add	r3, r2
 800198a:	4a05      	ldr	r2, [pc, #20]	@ (80019a0 <_sbrk+0x64>)
 800198c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800198e:	68fb      	ldr	r3, [r7, #12]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20020000 	.word	0x20020000
 800199c:	00000400 	.word	0x00000400
 80019a0:	20000394 	.word	0x20000394
 80019a4:	200004e8 	.word	0x200004e8

080019a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <SystemInit+0x20>)
 80019ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019b2:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <SystemInit+0x20>)
 80019b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a04 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80019d0:	f7ff ffea 	bl	80019a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019d4:	480c      	ldr	r0, [pc, #48]	@ (8001a08 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019d6:	490d      	ldr	r1, [pc, #52]	@ (8001a0c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a10 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019dc:	e002      	b.n	80019e4 <LoopCopyDataInit>

080019de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019e2:	3304      	adds	r3, #4

080019e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e8:	d3f9      	bcc.n	80019de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001a14 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001a18 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f0:	e001      	b.n	80019f6 <LoopFillZerobss>

080019f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019f4:	3204      	adds	r2, #4

080019f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f8:	d3fb      	bcc.n	80019f2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019fa:	f003 fa5b 	bl	8004eb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fe:	f7ff fc25 	bl	800124c <main>
  bx  lr    
 8001a02:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a04:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a0c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a10:	08008a64 	.word	0x08008a64
  ldr r2, =_sbss
 8001a14:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a18:	200004e8 	.word	0x200004e8

08001a1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a1c:	e7fe      	b.n	8001a1c <ADC_IRQHandler>
	...

08001a20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <HAL_Init+0x40>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a0d      	ldr	r2, [pc, #52]	@ (8001a60 <HAL_Init+0x40>)
 8001a2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <HAL_Init+0x40>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0a      	ldr	r2, [pc, #40]	@ (8001a60 <HAL_Init+0x40>)
 8001a36:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <HAL_Init+0x40>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	@ (8001a60 <HAL_Init+0x40>)
 8001a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 f94f 	bl	8001cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fe18 	bl	8001688 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40023c00 	.word	0x40023c00

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f967 	bl	8001d56 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 f92f 	bl	8001d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a04      	ldr	r2, [pc, #16]	@ (8001ae8 <HAL_IncTick+0x24>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000398 	.word	0x20000398

08001aec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return uwTick;
 8001af0:	4b03      	ldr	r3, [pc, #12]	@ (8001b00 <HAL_GetTick+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000398 	.word	0x20000398

08001b04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b0c:	f7ff ffee 	bl	8001aec <HAL_GetTick>
 8001b10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d005      	beq.n	8001b2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b48 <HAL_Delay+0x44>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	461a      	mov	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4413      	add	r3, r2
 8001b28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b2a:	bf00      	nop
 8001b2c:	f7ff ffde 	bl	8001aec <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d8f7      	bhi.n	8001b2c <HAL_Delay+0x28>
  {
  }
}
 8001b3c:	bf00      	nop
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000008 	.word	0x20000008

08001b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b085      	sub	sp, #20
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f003 0307 	and.w	r3, r3, #7
 8001b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	@ (8001b90 <__NVIC_SetPriorityGrouping+0x44>)
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	60d3      	str	r3, [r2, #12]
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	e000ed00 	.word	0xe000ed00

08001b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b98:	4b04      	ldr	r3, [pc, #16]	@ (8001bac <__NVIC_GetPriorityGrouping+0x18>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	0a1b      	lsrs	r3, r3, #8
 8001b9e:	f003 0307 	and.w	r3, r3, #7
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	db0b      	blt.n	8001bda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	f003 021f 	and.w	r2, r3, #31
 8001bc8:	4907      	ldr	r1, [pc, #28]	@ (8001be8 <__NVIC_EnableIRQ+0x38>)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	2001      	movs	r0, #1
 8001bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100

08001bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	db0a      	blt.n	8001c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	490c      	ldr	r1, [pc, #48]	@ (8001c38 <__NVIC_SetPriority+0x4c>)
 8001c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0a:	0112      	lsls	r2, r2, #4
 8001c0c:	b2d2      	uxtb	r2, r2
 8001c0e:	440b      	add	r3, r1
 8001c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c14:	e00a      	b.n	8001c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	4908      	ldr	r1, [pc, #32]	@ (8001c3c <__NVIC_SetPriority+0x50>)
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	f003 030f 	and.w	r3, r3, #15
 8001c22:	3b04      	subs	r3, #4
 8001c24:	0112      	lsls	r2, r2, #4
 8001c26:	b2d2      	uxtb	r2, r2
 8001c28:	440b      	add	r3, r1
 8001c2a:	761a      	strb	r2, [r3, #24]
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	e000e100 	.word	0xe000e100
 8001c3c:	e000ed00 	.word	0xe000ed00

08001c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b089      	sub	sp, #36	@ 0x24
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f1c3 0307 	rsb	r3, r3, #7
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	bf28      	it	cs
 8001c5e:	2304      	movcs	r3, #4
 8001c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3304      	adds	r3, #4
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d902      	bls.n	8001c70 <NVIC_EncodePriority+0x30>
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	3b03      	subs	r3, #3
 8001c6e:	e000      	b.n	8001c72 <NVIC_EncodePriority+0x32>
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c74:	f04f 32ff 	mov.w	r2, #4294967295
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	401a      	ands	r2, r3
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c92:	43d9      	mvns	r1, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c98:	4313      	orrs	r3, r2
         );
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3724      	adds	r7, #36	@ 0x24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb8:	d301      	bcc.n	8001cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00f      	b.n	8001cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc6:	210f      	movs	r1, #15
 8001cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ccc:	f7ff ff8e 	bl	8001bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd6:	4b04      	ldr	r3, [pc, #16]	@ (8001ce8 <SysTick_Config+0x40>)
 8001cd8:	2207      	movs	r2, #7
 8001cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	e000e010 	.word	0xe000e010

08001cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f7ff ff29 	bl	8001b4c <__NVIC_SetPriorityGrouping>
}
 8001cfa:	bf00      	nop
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b086      	sub	sp, #24
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	4603      	mov	r3, r0
 8001d0a:	60b9      	str	r1, [r7, #8]
 8001d0c:	607a      	str	r2, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d14:	f7ff ff3e 	bl	8001b94 <__NVIC_GetPriorityGrouping>
 8001d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	68b9      	ldr	r1, [r7, #8]
 8001d1e:	6978      	ldr	r0, [r7, #20]
 8001d20:	f7ff ff8e 	bl	8001c40 <NVIC_EncodePriority>
 8001d24:	4602      	mov	r2, r0
 8001d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f7ff ff5d 	bl	8001bec <__NVIC_SetPriority>
}
 8001d32:	bf00      	nop
 8001d34:	3718      	adds	r7, #24
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}

08001d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	4603      	mov	r3, r0
 8001d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff ff31 	bl	8001bb0 <__NVIC_EnableIRQ>
}
 8001d4e:	bf00      	nop
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}

08001d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d56:	b580      	push	{r7, lr}
 8001d58:	b082      	sub	sp, #8
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f7ff ffa2 	bl	8001ca8 <SysTick_Config>
 8001d64:	4603      	mov	r3, r0
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	3708      	adds	r7, #8
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}
	...

08001d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d86:	2300      	movs	r3, #0
 8001d88:	61fb      	str	r3, [r7, #28]
 8001d8a:	e165      	b.n	8002058 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	f040 8154 	bne.w	8002052 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d005      	beq.n	8001dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d130      	bne.n	8001e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	2203      	movs	r2, #3
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	005b      	lsls	r3, r3, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	091b      	lsrs	r3, r3, #4
 8001e0e:	f003 0201 	and.w	r2, r3, #1
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d017      	beq.n	8001e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	fa02 f303 	lsl.w	r3, r2, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0303 	and.w	r3, r3, #3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d123      	bne.n	8001eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	08da      	lsrs	r2, r3, #3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3208      	adds	r2, #8
 8001e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	f003 0307 	and.w	r3, r3, #7
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	220f      	movs	r2, #15
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691a      	ldr	r2, [r3, #16]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	08da      	lsrs	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	69b9      	ldr	r1, [r7, #24]
 8001eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0203 	and.w	r2, r3, #3
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	69ba      	ldr	r2, [r7, #24]
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	f000 80ae 	beq.w	8002052 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b5d      	ldr	r3, [pc, #372]	@ (8002070 <HAL_GPIO_Init+0x300>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	4a5c      	ldr	r2, [pc, #368]	@ (8002070 <HAL_GPIO_Init+0x300>)
 8001f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f06:	4b5a      	ldr	r3, [pc, #360]	@ (8002070 <HAL_GPIO_Init+0x300>)
 8001f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f12:	4a58      	ldr	r2, [pc, #352]	@ (8002074 <HAL_GPIO_Init+0x304>)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	220f      	movs	r2, #15
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4a4f      	ldr	r2, [pc, #316]	@ (8002078 <HAL_GPIO_Init+0x308>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d025      	beq.n	8001f8a <HAL_GPIO_Init+0x21a>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a4e      	ldr	r2, [pc, #312]	@ (800207c <HAL_GPIO_Init+0x30c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d01f      	beq.n	8001f86 <HAL_GPIO_Init+0x216>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a4d      	ldr	r2, [pc, #308]	@ (8002080 <HAL_GPIO_Init+0x310>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d019      	beq.n	8001f82 <HAL_GPIO_Init+0x212>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a4c      	ldr	r2, [pc, #304]	@ (8002084 <HAL_GPIO_Init+0x314>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d013      	beq.n	8001f7e <HAL_GPIO_Init+0x20e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a4b      	ldr	r2, [pc, #300]	@ (8002088 <HAL_GPIO_Init+0x318>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00d      	beq.n	8001f7a <HAL_GPIO_Init+0x20a>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a4a      	ldr	r2, [pc, #296]	@ (800208c <HAL_GPIO_Init+0x31c>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <HAL_GPIO_Init+0x206>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a49      	ldr	r2, [pc, #292]	@ (8002090 <HAL_GPIO_Init+0x320>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_GPIO_Init+0x202>
 8001f6e:	2306      	movs	r3, #6
 8001f70:	e00c      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f72:	2307      	movs	r3, #7
 8001f74:	e00a      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f76:	2305      	movs	r3, #5
 8001f78:	e008      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f7a:	2304      	movs	r3, #4
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e004      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e002      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f86:	2301      	movs	r3, #1
 8001f88:	e000      	b.n	8001f8c <HAL_GPIO_Init+0x21c>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	69fa      	ldr	r2, [r7, #28]
 8001f8e:	f002 0203 	and.w	r2, r2, #3
 8001f92:	0092      	lsls	r2, r2, #2
 8001f94:	4093      	lsls	r3, r2
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f9c:	4935      	ldr	r1, [pc, #212]	@ (8002074 <HAL_GPIO_Init+0x304>)
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	089b      	lsrs	r3, r3, #2
 8001fa2:	3302      	adds	r3, #2
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001faa:	4b3a      	ldr	r3, [pc, #232]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fce:	4a31      	ldr	r2, [pc, #196]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fd4:	4b2f      	ldr	r3, [pc, #188]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d003      	beq.n	8001ff8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ff8:	4a26      	ldr	r2, [pc, #152]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001ffe:	4b25      	ldr	r3, [pc, #148]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d003      	beq.n	8002022 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	4313      	orrs	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002022:	4a1c      	ldr	r2, [pc, #112]	@ (8002094 <HAL_GPIO_Init+0x324>)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002028:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <HAL_GPIO_Init+0x324>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002044:	69ba      	ldr	r2, [r7, #24]
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	4313      	orrs	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800204c:	4a11      	ldr	r2, [pc, #68]	@ (8002094 <HAL_GPIO_Init+0x324>)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	3301      	adds	r3, #1
 8002056:	61fb      	str	r3, [r7, #28]
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	2b0f      	cmp	r3, #15
 800205c:	f67f ae96 	bls.w	8001d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002060:	bf00      	nop
 8002062:	bf00      	nop
 8002064:	3724      	adds	r7, #36	@ 0x24
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	40023800 	.word	0x40023800
 8002074:	40013800 	.word	0x40013800
 8002078:	40020000 	.word	0x40020000
 800207c:	40020400 	.word	0x40020400
 8002080:	40020800 	.word	0x40020800
 8002084:	40020c00 	.word	0x40020c00
 8002088:	40021000 	.word	0x40021000
 800208c:	40021400 	.word	0x40021400
 8002090:	40021800 	.word	0x40021800
 8002094:	40013c00 	.word	0x40013c00

08002098 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002098:	b480      	push	{r7}
 800209a:	b085      	sub	sp, #20
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691a      	ldr	r2, [r3, #16]
 80020a8:	887b      	ldrh	r3, [r7, #2]
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020b0:	2301      	movs	r3, #1
 80020b2:	73fb      	strb	r3, [r7, #15]
 80020b4:	e001      	b.n	80020ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	460b      	mov	r3, r1
 80020d2:	807b      	strh	r3, [r7, #2]
 80020d4:	4613      	mov	r3, r2
 80020d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020d8:	787b      	ldrb	r3, [r7, #1]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020de:	887a      	ldrh	r2, [r7, #2]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e4:	e003      	b.n	80020ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020e6:	887b      	ldrh	r3, [r7, #2]
 80020e8:	041a      	lsls	r2, r3, #16
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	619a      	str	r2, [r3, #24]
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr

080020fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020fa:	b480      	push	{r7}
 80020fc:	b085      	sub	sp, #20
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
 8002102:	460b      	mov	r3, r1
 8002104:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
 800210a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800210c:	887a      	ldrh	r2, [r7, #2]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	4013      	ands	r3, r2
 8002112:	041a      	lsls	r2, r3, #16
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	43d9      	mvns	r1, r3
 8002118:	887b      	ldrh	r3, [r7, #2]
 800211a:	400b      	ands	r3, r1
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	619a      	str	r2, [r3, #24]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
	...

08002130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e0cc      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002144:	4b68      	ldr	r3, [pc, #416]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 030f 	and.w	r3, r3, #15
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	429a      	cmp	r2, r3
 8002150:	d90c      	bls.n	800216c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002152:	4b65      	ldr	r3, [pc, #404]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002154:	683a      	ldr	r2, [r7, #0]
 8002156:	b2d2      	uxtb	r2, r2
 8002158:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800215a:	4b63      	ldr	r3, [pc, #396]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 030f 	and.w	r3, r3, #15
 8002162:	683a      	ldr	r2, [r7, #0]
 8002164:	429a      	cmp	r2, r3
 8002166:	d001      	beq.n	800216c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0b8      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d020      	beq.n	80021ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d005      	beq.n	8002190 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002184:	4b59      	ldr	r3, [pc, #356]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	4a58      	ldr	r2, [pc, #352]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800218a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800218e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0308 	and.w	r3, r3, #8
 8002198:	2b00      	cmp	r3, #0
 800219a:	d005      	beq.n	80021a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800219c:	4b53      	ldr	r3, [pc, #332]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	4a52      	ldr	r2, [pc, #328]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80021a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a8:	4b50      	ldr	r3, [pc, #320]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	494d      	ldr	r1, [pc, #308]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	4313      	orrs	r3, r2
 80021b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d044      	beq.n	8002250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d107      	bne.n	80021de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	4b47      	ldr	r3, [pc, #284]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d119      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e07f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d003      	beq.n	80021ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	2b03      	cmp	r3, #3
 80021ec:	d107      	bne.n	80021fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021ee:	4b3f      	ldr	r3, [pc, #252]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	e06f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fe:	4b3b      	ldr	r3, [pc, #236]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e067      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800220e:	4b37      	ldr	r3, [pc, #220]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f023 0203 	bic.w	r2, r3, #3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	4934      	ldr	r1, [pc, #208]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	4313      	orrs	r3, r2
 800221e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002220:	f7ff fc64 	bl	8001aec <HAL_GetTick>
 8002224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	e00a      	b.n	800223e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7ff fc60 	bl	8001aec <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002236:	4293      	cmp	r3, r2
 8002238:	d901      	bls.n	800223e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e04f      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800223e:	4b2b      	ldr	r3, [pc, #172]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	f003 020c 	and.w	r2, r3, #12
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	429a      	cmp	r2, r3
 800224e:	d1eb      	bne.n	8002228 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002250:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 030f 	and.w	r3, r3, #15
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	429a      	cmp	r2, r3
 800225c:	d20c      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800225e:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 030f 	and.w	r3, r3, #15
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d001      	beq.n	8002278 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e032      	b.n	80022de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0304 	and.w	r3, r3, #4
 8002280:	2b00      	cmp	r3, #0
 8002282:	d008      	beq.n	8002296 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002284:	4b19      	ldr	r3, [pc, #100]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	4916      	ldr	r1, [pc, #88]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	4313      	orrs	r3, r2
 8002294:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d009      	beq.n	80022b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022a2:	4b12      	ldr	r3, [pc, #72]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	691b      	ldr	r3, [r3, #16]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	490e      	ldr	r1, [pc, #56]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022b6:	f000 f855 	bl	8002364 <HAL_RCC_GetSysClockFreq>
 80022ba:	4602      	mov	r2, r0
 80022bc:	4b0b      	ldr	r3, [pc, #44]	@ (80022ec <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	091b      	lsrs	r3, r3, #4
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	490a      	ldr	r1, [pc, #40]	@ (80022f0 <HAL_RCC_ClockConfig+0x1c0>)
 80022c8:	5ccb      	ldrb	r3, [r1, r3]
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
 80022ce:	4a09      	ldr	r2, [pc, #36]	@ (80022f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80022d2:	4b09      	ldr	r3, [pc, #36]	@ (80022f8 <HAL_RCC_ClockConfig+0x1c8>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7ff fbc4 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023c00 	.word	0x40023c00
 80022ec:	40023800 	.word	0x40023800
 80022f0:	08008614 	.word	0x08008614
 80022f4:	20000000 	.word	0x20000000
 80022f8:	20000004 	.word	0x20000004

080022fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002300:	4b03      	ldr	r3, [pc, #12]	@ (8002310 <HAL_RCC_GetHCLKFreq+0x14>)
 8002302:	681b      	ldr	r3, [r3, #0]
}
 8002304:	4618      	mov	r0, r3
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000000 	.word	0x20000000

08002314 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002318:	f7ff fff0 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 800231c:	4602      	mov	r2, r0
 800231e:	4b05      	ldr	r3, [pc, #20]	@ (8002334 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	0a9b      	lsrs	r3, r3, #10
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	4903      	ldr	r1, [pc, #12]	@ (8002338 <HAL_RCC_GetPCLK1Freq+0x24>)
 800232a:	5ccb      	ldrb	r3, [r1, r3]
 800232c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002330:	4618      	mov	r0, r3
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40023800 	.word	0x40023800
 8002338:	08008624 	.word	0x08008624

0800233c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002340:	f7ff ffdc 	bl	80022fc <HAL_RCC_GetHCLKFreq>
 8002344:	4602      	mov	r2, r0
 8002346:	4b05      	ldr	r3, [pc, #20]	@ (800235c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	0b5b      	lsrs	r3, r3, #13
 800234c:	f003 0307 	and.w	r3, r3, #7
 8002350:	4903      	ldr	r1, [pc, #12]	@ (8002360 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002352:	5ccb      	ldrb	r3, [r1, r3]
 8002354:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002358:	4618      	mov	r0, r3
 800235a:	bd80      	pop	{r7, pc}
 800235c:	40023800 	.word	0x40023800
 8002360:	08008624 	.word	0x08008624

08002364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002368:	b0ae      	sub	sp, #184	@ 0xb8
 800236a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800236c:	2300      	movs	r3, #0
 800236e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800238a:	4bcb      	ldr	r3, [pc, #812]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b0c      	cmp	r3, #12
 8002394:	f200 8206 	bhi.w	80027a4 <HAL_RCC_GetSysClockFreq+0x440>
 8002398:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <HAL_RCC_GetSysClockFreq+0x3c>)
 800239a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800239e:	bf00      	nop
 80023a0:	080023d5 	.word	0x080023d5
 80023a4:	080027a5 	.word	0x080027a5
 80023a8:	080027a5 	.word	0x080027a5
 80023ac:	080027a5 	.word	0x080027a5
 80023b0:	080023dd 	.word	0x080023dd
 80023b4:	080027a5 	.word	0x080027a5
 80023b8:	080027a5 	.word	0x080027a5
 80023bc:	080027a5 	.word	0x080027a5
 80023c0:	080023e5 	.word	0x080023e5
 80023c4:	080027a5 	.word	0x080027a5
 80023c8:	080027a5 	.word	0x080027a5
 80023cc:	080027a5 	.word	0x080027a5
 80023d0:	080025d5 	.word	0x080025d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023d4:	4bb9      	ldr	r3, [pc, #740]	@ (80026bc <HAL_RCC_GetSysClockFreq+0x358>)
 80023d6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023da:	e1e7      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023dc:	4bb8      	ldr	r3, [pc, #736]	@ (80026c0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023e2:	e1e3      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023e4:	4bb4      	ldr	r3, [pc, #720]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023f0:	4bb1      	ldr	r3, [pc, #708]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d071      	beq.n	80024e0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023fc:	4bae      	ldr	r3, [pc, #696]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	099b      	lsrs	r3, r3, #6
 8002402:	2200      	movs	r2, #0
 8002404:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002408:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800240c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002414:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800241e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002422:	4622      	mov	r2, r4
 8002424:	462b      	mov	r3, r5
 8002426:	f04f 0000 	mov.w	r0, #0
 800242a:	f04f 0100 	mov.w	r1, #0
 800242e:	0159      	lsls	r1, r3, #5
 8002430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002434:	0150      	lsls	r0, r2, #5
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4621      	mov	r1, r4
 800243c:	1a51      	subs	r1, r2, r1
 800243e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002440:	4629      	mov	r1, r5
 8002442:	eb63 0301 	sbc.w	r3, r3, r1
 8002446:	647b      	str	r3, [r7, #68]	@ 0x44
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002454:	4649      	mov	r1, r9
 8002456:	018b      	lsls	r3, r1, #6
 8002458:	4641      	mov	r1, r8
 800245a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800245e:	4641      	mov	r1, r8
 8002460:	018a      	lsls	r2, r1, #6
 8002462:	4641      	mov	r1, r8
 8002464:	1a51      	subs	r1, r2, r1
 8002466:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002468:	4649      	mov	r1, r9
 800246a:	eb63 0301 	sbc.w	r3, r3, r1
 800246e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002470:	f04f 0200 	mov.w	r2, #0
 8002474:	f04f 0300 	mov.w	r3, #0
 8002478:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800247c:	4649      	mov	r1, r9
 800247e:	00cb      	lsls	r3, r1, #3
 8002480:	4641      	mov	r1, r8
 8002482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002486:	4641      	mov	r1, r8
 8002488:	00ca      	lsls	r2, r1, #3
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	4603      	mov	r3, r0
 8002490:	4622      	mov	r2, r4
 8002492:	189b      	adds	r3, r3, r2
 8002494:	633b      	str	r3, [r7, #48]	@ 0x30
 8002496:	462b      	mov	r3, r5
 8002498:	460a      	mov	r2, r1
 800249a:	eb42 0303 	adc.w	r3, r2, r3
 800249e:	637b      	str	r3, [r7, #52]	@ 0x34
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80024ac:	4629      	mov	r1, r5
 80024ae:	024b      	lsls	r3, r1, #9
 80024b0:	4621      	mov	r1, r4
 80024b2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b6:	4621      	mov	r1, r4
 80024b8:	024a      	lsls	r2, r1, #9
 80024ba:	4610      	mov	r0, r2
 80024bc:	4619      	mov	r1, r3
 80024be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024c2:	2200      	movs	r2, #0
 80024c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024cc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80024d0:	f7fe fbfa 	bl	8000cc8 <__aeabi_uldivmod>
 80024d4:	4602      	mov	r2, r0
 80024d6:	460b      	mov	r3, r1
 80024d8:	4613      	mov	r3, r2
 80024da:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024de:	e067      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024e0:	4b75      	ldr	r3, [pc, #468]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	099b      	lsrs	r3, r3, #6
 80024e6:	2200      	movs	r2, #0
 80024e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024ec:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80024f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024fa:	2300      	movs	r3, #0
 80024fc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024fe:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002502:	4622      	mov	r2, r4
 8002504:	462b      	mov	r3, r5
 8002506:	f04f 0000 	mov.w	r0, #0
 800250a:	f04f 0100 	mov.w	r1, #0
 800250e:	0159      	lsls	r1, r3, #5
 8002510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002514:	0150      	lsls	r0, r2, #5
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4621      	mov	r1, r4
 800251c:	1a51      	subs	r1, r2, r1
 800251e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002520:	4629      	mov	r1, r5
 8002522:	eb63 0301 	sbc.w	r3, r3, r1
 8002526:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002534:	4649      	mov	r1, r9
 8002536:	018b      	lsls	r3, r1, #6
 8002538:	4641      	mov	r1, r8
 800253a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800253e:	4641      	mov	r1, r8
 8002540:	018a      	lsls	r2, r1, #6
 8002542:	4641      	mov	r1, r8
 8002544:	ebb2 0a01 	subs.w	sl, r2, r1
 8002548:	4649      	mov	r1, r9
 800254a:	eb63 0b01 	sbc.w	fp, r3, r1
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800255a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800255e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002562:	4692      	mov	sl, r2
 8002564:	469b      	mov	fp, r3
 8002566:	4623      	mov	r3, r4
 8002568:	eb1a 0303 	adds.w	r3, sl, r3
 800256c:	623b      	str	r3, [r7, #32]
 800256e:	462b      	mov	r3, r5
 8002570:	eb4b 0303 	adc.w	r3, fp, r3
 8002574:	627b      	str	r3, [r7, #36]	@ 0x24
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002582:	4629      	mov	r1, r5
 8002584:	028b      	lsls	r3, r1, #10
 8002586:	4621      	mov	r1, r4
 8002588:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800258c:	4621      	mov	r1, r4
 800258e:	028a      	lsls	r2, r1, #10
 8002590:	4610      	mov	r0, r2
 8002592:	4619      	mov	r1, r3
 8002594:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002598:	2200      	movs	r2, #0
 800259a:	673b      	str	r3, [r7, #112]	@ 0x70
 800259c:	677a      	str	r2, [r7, #116]	@ 0x74
 800259e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80025a2:	f7fe fb91 	bl	8000cc8 <__aeabi_uldivmod>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4613      	mov	r3, r2
 80025ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80025b0:	4b41      	ldr	r3, [pc, #260]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	f003 0303 	and.w	r3, r3, #3
 80025ba:	3301      	adds	r3, #1
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80025c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025d2:	e0eb      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025d4:	4b38      	ldr	r3, [pc, #224]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025e0:	4b35      	ldr	r3, [pc, #212]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d06b      	beq.n	80026c4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ec:	4b32      	ldr	r3, [pc, #200]	@ (80026b8 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	099b      	lsrs	r3, r3, #6
 80025f2:	2200      	movs	r2, #0
 80025f4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025f8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025fe:	663b      	str	r3, [r7, #96]	@ 0x60
 8002600:	2300      	movs	r3, #0
 8002602:	667b      	str	r3, [r7, #100]	@ 0x64
 8002604:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002608:	4622      	mov	r2, r4
 800260a:	462b      	mov	r3, r5
 800260c:	f04f 0000 	mov.w	r0, #0
 8002610:	f04f 0100 	mov.w	r1, #0
 8002614:	0159      	lsls	r1, r3, #5
 8002616:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800261a:	0150      	lsls	r0, r2, #5
 800261c:	4602      	mov	r2, r0
 800261e:	460b      	mov	r3, r1
 8002620:	4621      	mov	r1, r4
 8002622:	1a51      	subs	r1, r2, r1
 8002624:	61b9      	str	r1, [r7, #24]
 8002626:	4629      	mov	r1, r5
 8002628:	eb63 0301 	sbc.w	r3, r3, r1
 800262c:	61fb      	str	r3, [r7, #28]
 800262e:	f04f 0200 	mov.w	r2, #0
 8002632:	f04f 0300 	mov.w	r3, #0
 8002636:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800263a:	4659      	mov	r1, fp
 800263c:	018b      	lsls	r3, r1, #6
 800263e:	4651      	mov	r1, sl
 8002640:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002644:	4651      	mov	r1, sl
 8002646:	018a      	lsls	r2, r1, #6
 8002648:	4651      	mov	r1, sl
 800264a:	ebb2 0801 	subs.w	r8, r2, r1
 800264e:	4659      	mov	r1, fp
 8002650:	eb63 0901 	sbc.w	r9, r3, r1
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002660:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002664:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002668:	4690      	mov	r8, r2
 800266a:	4699      	mov	r9, r3
 800266c:	4623      	mov	r3, r4
 800266e:	eb18 0303 	adds.w	r3, r8, r3
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	462b      	mov	r3, r5
 8002676:	eb49 0303 	adc.w	r3, r9, r3
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002688:	4629      	mov	r1, r5
 800268a:	024b      	lsls	r3, r1, #9
 800268c:	4621      	mov	r1, r4
 800268e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002692:	4621      	mov	r1, r4
 8002694:	024a      	lsls	r2, r1, #9
 8002696:	4610      	mov	r0, r2
 8002698:	4619      	mov	r1, r3
 800269a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800269e:	2200      	movs	r2, #0
 80026a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026a2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80026a4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80026a8:	f7fe fb0e 	bl	8000cc8 <__aeabi_uldivmod>
 80026ac:	4602      	mov	r2, r0
 80026ae:	460b      	mov	r3, r1
 80026b0:	4613      	mov	r3, r2
 80026b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80026b6:	e065      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x420>
 80026b8:	40023800 	.word	0x40023800
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026c4:	4b3d      	ldr	r3, [pc, #244]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x458>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	099b      	lsrs	r3, r3, #6
 80026ca:	2200      	movs	r2, #0
 80026cc:	4618      	mov	r0, r3
 80026ce:	4611      	mov	r1, r2
 80026d0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026d4:	653b      	str	r3, [r7, #80]	@ 0x50
 80026d6:	2300      	movs	r3, #0
 80026d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80026da:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80026de:	4642      	mov	r2, r8
 80026e0:	464b      	mov	r3, r9
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f04f 0100 	mov.w	r1, #0
 80026ea:	0159      	lsls	r1, r3, #5
 80026ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026f0:	0150      	lsls	r0, r2, #5
 80026f2:	4602      	mov	r2, r0
 80026f4:	460b      	mov	r3, r1
 80026f6:	4641      	mov	r1, r8
 80026f8:	1a51      	subs	r1, r2, r1
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	4649      	mov	r1, r9
 80026fe:	eb63 0301 	sbc.w	r3, r3, r1
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002710:	4659      	mov	r1, fp
 8002712:	018b      	lsls	r3, r1, #6
 8002714:	4651      	mov	r1, sl
 8002716:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800271a:	4651      	mov	r1, sl
 800271c:	018a      	lsls	r2, r1, #6
 800271e:	4651      	mov	r1, sl
 8002720:	1a54      	subs	r4, r2, r1
 8002722:	4659      	mov	r1, fp
 8002724:	eb63 0501 	sbc.w	r5, r3, r1
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	00eb      	lsls	r3, r5, #3
 8002732:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002736:	00e2      	lsls	r2, r4, #3
 8002738:	4614      	mov	r4, r2
 800273a:	461d      	mov	r5, r3
 800273c:	4643      	mov	r3, r8
 800273e:	18e3      	adds	r3, r4, r3
 8002740:	603b      	str	r3, [r7, #0]
 8002742:	464b      	mov	r3, r9
 8002744:	eb45 0303 	adc.w	r3, r5, r3
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	f04f 0200 	mov.w	r2, #0
 800274e:	f04f 0300 	mov.w	r3, #0
 8002752:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002756:	4629      	mov	r1, r5
 8002758:	028b      	lsls	r3, r1, #10
 800275a:	4621      	mov	r1, r4
 800275c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002760:	4621      	mov	r1, r4
 8002762:	028a      	lsls	r2, r1, #10
 8002764:	4610      	mov	r0, r2
 8002766:	4619      	mov	r1, r3
 8002768:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800276c:	2200      	movs	r2, #0
 800276e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002770:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002772:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002776:	f7fe faa7 	bl	8000cc8 <__aeabi_uldivmod>
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4613      	mov	r3, r2
 8002780:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002784:	4b0d      	ldr	r3, [pc, #52]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x458>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	0f1b      	lsrs	r3, r3, #28
 800278a:	f003 0307 	and.w	r3, r3, #7
 800278e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002796:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027a2:	e003      	b.n	80027ac <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027a4:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80027aa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	37b8      	adds	r7, #184	@ 0xb8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ba:	bf00      	nop
 80027bc:	40023800 	.word	0x40023800
 80027c0:	00f42400 	.word	0x00f42400

080027c4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e28d      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8083 	beq.w	80028ea <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027e4:	4b94      	ldr	r3, [pc, #592]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d019      	beq.n	8002824 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027f0:	4b91      	ldr	r3, [pc, #580]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f003 030c 	and.w	r3, r3, #12
        || \
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d106      	bne.n	800280a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027fc:	4b8e      	ldr	r3, [pc, #568]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002808:	d00c      	beq.n	8002824 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002812:	2b0c      	cmp	r3, #12
 8002814:	d112      	bne.n	800283c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002816:	4b88      	ldr	r3, [pc, #544]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800281e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002822:	d10b      	bne.n	800283c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002824:	4b84      	ldr	r3, [pc, #528]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d05b      	beq.n	80028e8 <HAL_RCC_OscConfig+0x124>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d157      	bne.n	80028e8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e25a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002844:	d106      	bne.n	8002854 <HAL_RCC_OscConfig+0x90>
 8002846:	4b7c      	ldr	r3, [pc, #496]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a7b      	ldr	r2, [pc, #492]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800284c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002850:	6013      	str	r3, [r2, #0]
 8002852:	e01d      	b.n	8002890 <HAL_RCC_OscConfig+0xcc>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0xb4>
 800285e:	4b76      	ldr	r3, [pc, #472]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a75      	ldr	r2, [pc, #468]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002864:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	4b73      	ldr	r3, [pc, #460]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a72      	ldr	r2, [pc, #456]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e00b      	b.n	8002890 <HAL_RCC_OscConfig+0xcc>
 8002878:	4b6f      	ldr	r3, [pc, #444]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800287e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b6c      	ldr	r3, [pc, #432]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a6b      	ldr	r2, [pc, #428]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800288a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800288e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d013      	beq.n	80028c0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7ff f928 	bl	8001aec <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff f924 	bl	8001aec <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e21f      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028b2:	4b61      	ldr	r3, [pc, #388]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0xdc>
 80028be:	e014      	b.n	80028ea <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7ff f914 	bl	8001aec <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028c8:	f7ff f910 	bl	8001aec <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	@ 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e20b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028da:	4b57      	ldr	r3, [pc, #348]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d1f0      	bne.n	80028c8 <HAL_RCC_OscConfig+0x104>
 80028e6:	e000      	b.n	80028ea <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d06f      	beq.n	80029d6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028f6:	4b50      	ldr	r3, [pc, #320]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f003 030c 	and.w	r3, r3, #12
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d017      	beq.n	8002932 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002902:	4b4d      	ldr	r3, [pc, #308]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 030c 	and.w	r3, r3, #12
        || \
 800290a:	2b08      	cmp	r3, #8
 800290c:	d105      	bne.n	800291a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800290e:	4b4a      	ldr	r3, [pc, #296]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d00b      	beq.n	8002932 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800291a:	4b47      	ldr	r3, [pc, #284]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002922:	2b0c      	cmp	r3, #12
 8002924:	d11c      	bne.n	8002960 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002926:	4b44      	ldr	r3, [pc, #272]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d116      	bne.n	8002960 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002932:	4b41      	ldr	r3, [pc, #260]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0302 	and.w	r3, r3, #2
 800293a:	2b00      	cmp	r3, #0
 800293c:	d005      	beq.n	800294a <HAL_RCC_OscConfig+0x186>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d001      	beq.n	800294a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e1d3      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800294a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4937      	ldr	r1, [pc, #220]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800295a:	4313      	orrs	r3, r2
 800295c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295e:	e03a      	b.n	80029d6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d020      	beq.n	80029aa <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002968:	4b34      	ldr	r3, [pc, #208]	@ (8002a3c <HAL_RCC_OscConfig+0x278>)
 800296a:	2201      	movs	r2, #1
 800296c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296e:	f7ff f8bd 	bl	8001aec <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002974:	e008      	b.n	8002988 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002976:	f7ff f8b9 	bl	8001aec <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	2b02      	cmp	r3, #2
 8002982:	d901      	bls.n	8002988 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002984:	2303      	movs	r3, #3
 8002986:	e1b4      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002988:	4b2b      	ldr	r3, [pc, #172]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0f0      	beq.n	8002976 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002994:	4b28      	ldr	r3, [pc, #160]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	00db      	lsls	r3, r3, #3
 80029a2:	4925      	ldr	r1, [pc, #148]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]
 80029a8:	e015      	b.n	80029d6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029aa:	4b24      	ldr	r3, [pc, #144]	@ (8002a3c <HAL_RCC_OscConfig+0x278>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029b0:	f7ff f89c 	bl	8001aec <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029b8:	f7ff f898 	bl	8001aec <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e193      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d1f0      	bne.n	80029b8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0308 	and.w	r3, r3, #8
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d036      	beq.n	8002a50 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	695b      	ldr	r3, [r3, #20]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d016      	beq.n	8002a18 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ea:	4b15      	ldr	r3, [pc, #84]	@ (8002a40 <HAL_RCC_OscConfig+0x27c>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f0:	f7ff f87c 	bl	8001aec <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029f8:	f7ff f878 	bl	8001aec <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e173      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002a38 <HAL_RCC_OscConfig+0x274>)
 8002a0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0x234>
 8002a16:	e01b      	b.n	8002a50 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a18:	4b09      	ldr	r3, [pc, #36]	@ (8002a40 <HAL_RCC_OscConfig+0x27c>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7ff f865 	bl	8001aec <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	e00e      	b.n	8002a44 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a26:	f7ff f861 	bl	8001aec <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d907      	bls.n	8002a44 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e15c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	42470000 	.word	0x42470000
 8002a40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a44:	4b8a      	ldr	r3, [pc, #552]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002a46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1ea      	bne.n	8002a26 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8097 	beq.w	8002b8c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a62:	4b83      	ldr	r3, [pc, #524]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d10f      	bne.n	8002a8e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	60bb      	str	r3, [r7, #8]
 8002a72:	4b7f      	ldr	r3, [pc, #508]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	4a7e      	ldr	r2, [pc, #504]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a7e:	4b7c      	ldr	r3, [pc, #496]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	60bb      	str	r3, [r7, #8]
 8002a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b79      	ldr	r3, [pc, #484]	@ (8002c74 <HAL_RCC_OscConfig+0x4b0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d118      	bne.n	8002acc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a9a:	4b76      	ldr	r3, [pc, #472]	@ (8002c74 <HAL_RCC_OscConfig+0x4b0>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a75      	ldr	r2, [pc, #468]	@ (8002c74 <HAL_RCC_OscConfig+0x4b0>)
 8002aa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa6:	f7ff f821 	bl	8001aec <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aae:	f7ff f81d 	bl	8001aec <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e118      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8002c74 <HAL_RCC_OscConfig+0x4b0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0f0      	beq.n	8002aae <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d106      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x31e>
 8002ad4:	4b66      	ldr	r3, [pc, #408]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002ad6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad8:	4a65      	ldr	r2, [pc, #404]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002ada:	f043 0301 	orr.w	r3, r3, #1
 8002ade:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae0:	e01c      	b.n	8002b1c <HAL_RCC_OscConfig+0x358>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	2b05      	cmp	r3, #5
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCC_OscConfig+0x340>
 8002aea:	4b61      	ldr	r3, [pc, #388]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aee:	4a60      	ldr	r2, [pc, #384]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002af0:	f043 0304 	orr.w	r3, r3, #4
 8002af4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002af6:	4b5e      	ldr	r3, [pc, #376]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afa:	4a5d      	ldr	r2, [pc, #372]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b02:	e00b      	b.n	8002b1c <HAL_RCC_OscConfig+0x358>
 8002b04:	4b5a      	ldr	r3, [pc, #360]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b08:	4a59      	ldr	r2, [pc, #356]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b0a:	f023 0301 	bic.w	r3, r3, #1
 8002b0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b10:	4b57      	ldr	r3, [pc, #348]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b14:	4a56      	ldr	r2, [pc, #344]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b16:	f023 0304 	bic.w	r3, r3, #4
 8002b1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d015      	beq.n	8002b50 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe ffe2 	bl	8001aec <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2c:	f7fe ffde 	bl	8001aec <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e0d7      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b42:	4b4b      	ldr	r3, [pc, #300]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d0ee      	beq.n	8002b2c <HAL_RCC_OscConfig+0x368>
 8002b4e:	e014      	b.n	8002b7a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe ffcc 	bl	8001aec <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b56:	e00a      	b.n	8002b6e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b58:	f7fe ffc8 	bl	8001aec <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0c1      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b6e:	4b40      	ldr	r3, [pc, #256]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1ee      	bne.n	8002b58 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d105      	bne.n	8002b8c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b80:	4b3b      	ldr	r3, [pc, #236]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	4a3a      	ldr	r2, [pc, #232]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	f000 80ad 	beq.w	8002cf0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b96:	4b36      	ldr	r3, [pc, #216]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 030c 	and.w	r3, r3, #12
 8002b9e:	2b08      	cmp	r3, #8
 8002ba0:	d060      	beq.n	8002c64 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d145      	bne.n	8002c36 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002baa:	4b33      	ldr	r3, [pc, #204]	@ (8002c78 <HAL_RCC_OscConfig+0x4b4>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb0:	f7fe ff9c 	bl	8001aec <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb8:	f7fe ff98 	bl	8001aec <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e093      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bca:	4b29      	ldr	r3, [pc, #164]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d1f0      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69da      	ldr	r2, [r3, #28]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be4:	019b      	lsls	r3, r3, #6
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bec:	085b      	lsrs	r3, r3, #1
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	041b      	lsls	r3, r3, #16
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf8:	061b      	lsls	r3, r3, #24
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	071b      	lsls	r3, r3, #28
 8002c02:	491b      	ldr	r1, [pc, #108]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c08:	4b1b      	ldr	r3, [pc, #108]	@ (8002c78 <HAL_RCC_OscConfig+0x4b4>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe ff6d 	bl	8001aec <HAL_GetTick>
 8002c12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c14:	e008      	b.n	8002c28 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c16:	f7fe ff69 	bl	8001aec <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d901      	bls.n	8002c28 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c24:	2303      	movs	r3, #3
 8002c26:	e064      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c28:	4b11      	ldr	r3, [pc, #68]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d0f0      	beq.n	8002c16 <HAL_RCC_OscConfig+0x452>
 8002c34:	e05c      	b.n	8002cf0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b10      	ldr	r3, [pc, #64]	@ (8002c78 <HAL_RCC_OscConfig+0x4b4>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c3c:	f7fe ff56 	bl	8001aec <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe ff52 	bl	8001aec <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e04d      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c56:	4b06      	ldr	r3, [pc, #24]	@ (8002c70 <HAL_RCC_OscConfig+0x4ac>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x480>
 8002c62:	e045      	b.n	8002cf0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e040      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40007000 	.word	0x40007000
 8002c78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8002cfc <HAL_RCC_OscConfig+0x538>)
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d030      	beq.n	8002cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d129      	bne.n	8002cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d122      	bne.n	8002cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cac:	4013      	ands	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d119      	bne.n	8002cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	085b      	lsrs	r3, r3, #1
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d10f      	bne.n	8002cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d107      	bne.n	8002cec <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d001      	beq.n	8002cf0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3718      	adds	r7, #24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40023800 	.word	0x40023800

08002d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e041      	b.n	8002d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d106      	bne.n	8002d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f7fe fcd6 	bl	80016d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3304      	adds	r3, #4
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4610      	mov	r0, r2
 8002d40:	f000 fae6 	bl	8003310 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2201      	movs	r2, #1
 8002d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
	...

08002da0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d001      	beq.n	8002db8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e046      	b.n	8002e46 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	@ (8002e54 <HAL_TIM_Base_Start+0xb4>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d022      	beq.n	8002e10 <HAL_TIM_Base_Start+0x70>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd2:	d01d      	beq.n	8002e10 <HAL_TIM_Base_Start+0x70>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a1f      	ldr	r2, [pc, #124]	@ (8002e58 <HAL_TIM_Base_Start+0xb8>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d018      	beq.n	8002e10 <HAL_TIM_Base_Start+0x70>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a1e      	ldr	r2, [pc, #120]	@ (8002e5c <HAL_TIM_Base_Start+0xbc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d013      	beq.n	8002e10 <HAL_TIM_Base_Start+0x70>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a1c      	ldr	r2, [pc, #112]	@ (8002e60 <HAL_TIM_Base_Start+0xc0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d00e      	beq.n	8002e10 <HAL_TIM_Base_Start+0x70>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e64 <HAL_TIM_Base_Start+0xc4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d009      	beq.n	8002e10 <HAL_TIM_Base_Start+0x70>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a19      	ldr	r2, [pc, #100]	@ (8002e68 <HAL_TIM_Base_Start+0xc8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d004      	beq.n	8002e10 <HAL_TIM_Base_Start+0x70>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a18      	ldr	r2, [pc, #96]	@ (8002e6c <HAL_TIM_Base_Start+0xcc>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d111      	bne.n	8002e34 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0307 	and.w	r3, r3, #7
 8002e1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d010      	beq.n	8002e44 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f042 0201 	orr.w	r2, r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e32:	e007      	b.n	8002e44 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0201 	orr.w	r2, r2, #1
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40010000 	.word	0x40010000
 8002e58:	40000400 	.word	0x40000400
 8002e5c:	40000800 	.word	0x40000800
 8002e60:	40000c00 	.word	0x40000c00
 8002e64:	40010400 	.word	0x40010400
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40001800 	.word	0x40001800

08002e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b085      	sub	sp, #20
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d001      	beq.n	8002e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e04e      	b.n	8002f26 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a23      	ldr	r2, [pc, #140]	@ (8002f34 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f3c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f40 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f44 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <HAL_TIM_Base_Start_IT+0xd8>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_TIM_Base_Start_IT+0x80>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <HAL_TIM_Base_Start_IT+0xdc>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d111      	bne.n	8002f14 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b06      	cmp	r3, #6
 8002f00:	d010      	beq.n	8002f24 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f042 0201 	orr.w	r2, r2, #1
 8002f10:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f12:	e007      	b.n	8002f24 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f042 0201 	orr.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3714      	adds	r7, #20
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40010000 	.word	0x40010000
 8002f38:	40000400 	.word	0x40000400
 8002f3c:	40000800 	.word	0x40000800
 8002f40:	40000c00 	.word	0x40000c00
 8002f44:	40010400 	.word	0x40010400
 8002f48:	40014000 	.word	0x40014000
 8002f4c:	40001800 	.word	0x40001800

08002f50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	691b      	ldr	r3, [r3, #16]
 8002f66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	f003 0302 	and.w	r3, r3, #2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d020      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01b      	beq.n	8002fb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f06f 0202 	mvn.w	r2, #2
 8002f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2201      	movs	r2, #1
 8002f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	f003 0303 	and.w	r3, r3, #3
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f999 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002fa0:	e005      	b.n	8002fae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f000 f98b 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 f99c 	bl	80032e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d020      	beq.n	8003000 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f003 0304 	and.w	r3, r3, #4
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d01b      	beq.n	8003000 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0204 	mvn.w	r2, #4
 8002fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2202      	movs	r2, #2
 8002fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699b      	ldr	r3, [r3, #24]
 8002fde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 f973 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8002fec:	e005      	b.n	8002ffa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f965 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f976 	bl	80032e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d020      	beq.n	800304c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	f003 0308 	and.w	r3, r3, #8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0208 	mvn.w	r2, #8
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2204      	movs	r2, #4
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	69db      	ldr	r3, [r3, #28]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f94d 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f93f 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f950 	bl	80032e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f003 0310 	and.w	r3, r3, #16
 8003052:	2b00      	cmp	r3, #0
 8003054:	d020      	beq.n	8003098 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f003 0310 	and.w	r3, r3, #16
 800305c:	2b00      	cmp	r3, #0
 800305e:	d01b      	beq.n	8003098 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0210 	mvn.w	r2, #16
 8003068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2208      	movs	r2, #8
 800306e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f927 	bl	80032d2 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f919 	bl	80032be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 f92a 	bl	80032e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00c      	beq.n	80030bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f003 0301 	and.w	r3, r3, #1
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0201 	mvn.w	r2, #1
 80030b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f7fd ffd2 	bl	8001060 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00c      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80030d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fade 	bl	800369c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00c      	beq.n	8003104 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80030fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f8fb 	bl	80032fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0320 	and.w	r3, r3, #32
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00c      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d007      	beq.n	8003128 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f06f 0220 	mvn.w	r2, #32
 8003120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fab0 	bl	8003688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800313a:	2300      	movs	r3, #0
 800313c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003144:	2b01      	cmp	r3, #1
 8003146:	d101      	bne.n	800314c <HAL_TIM_ConfigClockSource+0x1c>
 8003148:	2302      	movs	r3, #2
 800314a:	e0b4      	b.n	80032b6 <HAL_TIM_ConfigClockSource+0x186>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2202      	movs	r2, #2
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800316a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003184:	d03e      	beq.n	8003204 <HAL_TIM_ConfigClockSource+0xd4>
 8003186:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800318a:	f200 8087 	bhi.w	800329c <HAL_TIM_ConfigClockSource+0x16c>
 800318e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003192:	f000 8086 	beq.w	80032a2 <HAL_TIM_ConfigClockSource+0x172>
 8003196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800319a:	d87f      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 800319c:	2b70      	cmp	r3, #112	@ 0x70
 800319e:	d01a      	beq.n	80031d6 <HAL_TIM_ConfigClockSource+0xa6>
 80031a0:	2b70      	cmp	r3, #112	@ 0x70
 80031a2:	d87b      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031a4:	2b60      	cmp	r3, #96	@ 0x60
 80031a6:	d050      	beq.n	800324a <HAL_TIM_ConfigClockSource+0x11a>
 80031a8:	2b60      	cmp	r3, #96	@ 0x60
 80031aa:	d877      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031ac:	2b50      	cmp	r3, #80	@ 0x50
 80031ae:	d03c      	beq.n	800322a <HAL_TIM_ConfigClockSource+0xfa>
 80031b0:	2b50      	cmp	r3, #80	@ 0x50
 80031b2:	d873      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031b4:	2b40      	cmp	r3, #64	@ 0x40
 80031b6:	d058      	beq.n	800326a <HAL_TIM_ConfigClockSource+0x13a>
 80031b8:	2b40      	cmp	r3, #64	@ 0x40
 80031ba:	d86f      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031bc:	2b30      	cmp	r3, #48	@ 0x30
 80031be:	d064      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031c0:	2b30      	cmp	r3, #48	@ 0x30
 80031c2:	d86b      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d060      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031c8:	2b20      	cmp	r3, #32
 80031ca:	d867      	bhi.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d05c      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d05a      	beq.n	800328a <HAL_TIM_ConfigClockSource+0x15a>
 80031d4:	e062      	b.n	800329c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80031e6:	f000 f9b3 	bl	8003550 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80031f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	609a      	str	r2, [r3, #8]
      break;
 8003202:	e04f      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003214:	f000 f99c 	bl	8003550 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	689a      	ldr	r2, [r3, #8]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003226:	609a      	str	r2, [r3, #8]
      break;
 8003228:	e03c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003236:	461a      	mov	r2, r3
 8003238:	f000 f910 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2150      	movs	r1, #80	@ 0x50
 8003242:	4618      	mov	r0, r3
 8003244:	f000 f969 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8003248:	e02c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003256:	461a      	mov	r2, r3
 8003258:	f000 f92f 	bl	80034ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2160      	movs	r1, #96	@ 0x60
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f959 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8003268:	e01c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003276:	461a      	mov	r2, r3
 8003278:	f000 f8f0 	bl	800345c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2140      	movs	r1, #64	@ 0x40
 8003282:	4618      	mov	r0, r3
 8003284:	f000 f949 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 8003288:	e00c      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4619      	mov	r1, r3
 8003294:	4610      	mov	r0, r2
 8003296:	f000 f940 	bl	800351a <TIM_ITRx_SetConfig>
      break;
 800329a:	e003      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	73fb      	strb	r3, [r7, #15]
      break;
 80032a0:	e000      	b.n	80032a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2201      	movs	r2, #1
 80032a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3710      	adds	r7, #16
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032be:	b480      	push	{r7}
 80032c0:	b083      	sub	sp, #12
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032c6:	bf00      	nop
 80032c8:	370c      	adds	r7, #12
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032da:	bf00      	nop
 80032dc:	370c      	adds	r7, #12
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr

080032e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr

080032fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032fa:	b480      	push	{r7}
 80032fc:	b083      	sub	sp, #12
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003302:	bf00      	nop
 8003304:	370c      	adds	r7, #12
 8003306:	46bd      	mov	sp, r7
 8003308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330c:	4770      	bx	lr
	...

08003310 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a43      	ldr	r2, [pc, #268]	@ (8003430 <TIM_Base_SetConfig+0x120>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d013      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800332e:	d00f      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	4a40      	ldr	r2, [pc, #256]	@ (8003434 <TIM_Base_SetConfig+0x124>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d00b      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	4a3f      	ldr	r2, [pc, #252]	@ (8003438 <TIM_Base_SetConfig+0x128>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d007      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a3e      	ldr	r2, [pc, #248]	@ (800343c <TIM_Base_SetConfig+0x12c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d003      	beq.n	8003350 <TIM_Base_SetConfig+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a3d      	ldr	r2, [pc, #244]	@ (8003440 <TIM_Base_SetConfig+0x130>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d108      	bne.n	8003362 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003356:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	4313      	orrs	r3, r2
 8003360:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a32      	ldr	r2, [pc, #200]	@ (8003430 <TIM_Base_SetConfig+0x120>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d02b      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003370:	d027      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a2f      	ldr	r2, [pc, #188]	@ (8003434 <TIM_Base_SetConfig+0x124>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d023      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a2e      	ldr	r2, [pc, #184]	@ (8003438 <TIM_Base_SetConfig+0x128>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01f      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2d      	ldr	r2, [pc, #180]	@ (800343c <TIM_Base_SetConfig+0x12c>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d01b      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a2c      	ldr	r2, [pc, #176]	@ (8003440 <TIM_Base_SetConfig+0x130>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d017      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a2b      	ldr	r2, [pc, #172]	@ (8003444 <TIM_Base_SetConfig+0x134>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d013      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2a      	ldr	r2, [pc, #168]	@ (8003448 <TIM_Base_SetConfig+0x138>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d00f      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a29      	ldr	r2, [pc, #164]	@ (800344c <TIM_Base_SetConfig+0x13c>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d00b      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a28      	ldr	r2, [pc, #160]	@ (8003450 <TIM_Base_SetConfig+0x140>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d007      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a27      	ldr	r2, [pc, #156]	@ (8003454 <TIM_Base_SetConfig+0x144>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d003      	beq.n	80033c2 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a26      	ldr	r2, [pc, #152]	@ (8003458 <TIM_Base_SetConfig+0x148>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d108      	bne.n	80033d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68db      	ldr	r3, [r3, #12]
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	4313      	orrs	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a0e      	ldr	r2, [pc, #56]	@ (8003430 <TIM_Base_SetConfig+0x120>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_Base_SetConfig+0xf2>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a10      	ldr	r2, [pc, #64]	@ (8003440 <TIM_Base_SetConfig+0x130>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d103      	bne.n	800340a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	691a      	ldr	r2, [r3, #16]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f043 0204 	orr.w	r2, r3, #4
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	601a      	str	r2, [r3, #0]
}
 8003422:	bf00      	nop
 8003424:	3714      	adds	r7, #20
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	40010000 	.word	0x40010000
 8003434:	40000400 	.word	0x40000400
 8003438:	40000800 	.word	0x40000800
 800343c:	40000c00 	.word	0x40000c00
 8003440:	40010400 	.word	0x40010400
 8003444:	40014000 	.word	0x40014000
 8003448:	40014400 	.word	0x40014400
 800344c:	40014800 	.word	0x40014800
 8003450:	40001800 	.word	0x40001800
 8003454:	40001c00 	.word	0x40001c00
 8003458:	40002000 	.word	0x40002000

0800345c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a1b      	ldr	r3, [r3, #32]
 800346c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	f023 0201 	bic.w	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	011b      	lsls	r3, r3, #4
 800348c:	693a      	ldr	r2, [r7, #16]
 800348e:	4313      	orrs	r3, r2
 8003490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f023 030a 	bic.w	r3, r3, #10
 8003498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	4313      	orrs	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	697a      	ldr	r2, [r7, #20]
 80034ac:	621a      	str	r2, [r3, #32]
}
 80034ae:	bf00      	nop
 80034b0:	371c      	adds	r7, #28
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr

080034ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80034ba:	b480      	push	{r7}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f023 0210 	bic.w	r2, r3, #16
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80034e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	031b      	lsls	r3, r3, #12
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80034f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	697a      	ldr	r2, [r7, #20]
 80034fe:	4313      	orrs	r3, r2
 8003500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	621a      	str	r2, [r3, #32]
}
 800350e:	bf00      	nop
 8003510:	371c      	adds	r7, #28
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800351a:	b480      	push	{r7}
 800351c:	b085      	sub	sp, #20
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
 8003522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	689b      	ldr	r3, [r3, #8]
 8003528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4313      	orrs	r3, r2
 8003538:	f043 0307 	orr.w	r3, r3, #7
 800353c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	609a      	str	r2, [r3, #8]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800356a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	021a      	lsls	r2, r3, #8
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	431a      	orrs	r2, r3
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	4313      	orrs	r3, r2
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	4313      	orrs	r3, r2
 800357c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	609a      	str	r2, [r3, #8]
}
 8003584:	bf00      	nop
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d101      	bne.n	80035a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035a4:	2302      	movs	r3, #2
 80035a6:	e05a      	b.n	800365e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a21      	ldr	r2, [pc, #132]	@ (800366c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d022      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035f4:	d01d      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a1d      	ldr	r2, [pc, #116]	@ (8003670 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d018      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a1b      	ldr	r2, [pc, #108]	@ (8003674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a1a      	ldr	r2, [pc, #104]	@ (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00e      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a18      	ldr	r2, [pc, #96]	@ (800367c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d009      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a17      	ldr	r2, [pc, #92]	@ (8003680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d004      	beq.n	8003632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a15      	ldr	r2, [pc, #84]	@ (8003684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d10c      	bne.n	800364c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	4313      	orrs	r3, r2
 8003642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68ba      	ldr	r2, [r7, #8]
 800364a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40010000 	.word	0x40010000
 8003670:	40000400 	.word	0x40000400
 8003674:	40000800 	.word	0x40000800
 8003678:	40000c00 	.word	0x40000c00
 800367c:	40010400 	.word	0x40010400
 8003680:	40014000 	.word	0x40014000
 8003684:	40001800 	.word	0x40001800

08003688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036a4:	bf00      	nop
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b082      	sub	sp, #8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e042      	b.n	8003748 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f7fe f83a 	bl	8001750 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2224      	movs	r2, #36	@ 0x24
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f973 	bl	80039e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	691a      	ldr	r2, [r3, #16]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695a      	ldr	r2, [r3, #20]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2220      	movs	r2, #32
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b08a      	sub	sp, #40	@ 0x28
 8003754:	af02      	add	r7, sp, #8
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b20      	cmp	r3, #32
 800376e:	d175      	bne.n	800385c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d002      	beq.n	800377c <HAL_UART_Transmit+0x2c>
 8003776:	88fb      	ldrh	r3, [r7, #6]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d101      	bne.n	8003780 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e06e      	b.n	800385e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2221      	movs	r2, #33	@ 0x21
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800378e:	f7fe f9ad 	bl	8001aec <HAL_GetTick>
 8003792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a8:	d108      	bne.n	80037bc <HAL_UART_Transmit+0x6c>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d104      	bne.n	80037bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	61bb      	str	r3, [r7, #24]
 80037ba:	e003      	b.n	80037c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037c0:	2300      	movs	r3, #0
 80037c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037c4:	e02e      	b.n	8003824 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	9300      	str	r3, [sp, #0]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2200      	movs	r2, #0
 80037ce:	2180      	movs	r1, #128	@ 0x80
 80037d0:	68f8      	ldr	r0, [r7, #12]
 80037d2:	f000 f848 	bl	8003866 <UART_WaitOnFlagUntilTimeout>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e03a      	b.n	800385e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	461a      	mov	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	3302      	adds	r3, #2
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	e007      	b.n	8003816 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	3301      	adds	r3, #1
 8003814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b29a      	uxth	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1cb      	bne.n	80037c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	2200      	movs	r2, #0
 8003836:	2140      	movs	r1, #64	@ 0x40
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 f814 	bl	8003866 <UART_WaitOnFlagUntilTimeout>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e006      	b.n	800385e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003858:	2300      	movs	r3, #0
 800385a:	e000      	b.n	800385e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800385c:	2302      	movs	r3, #2
  }
}
 800385e:	4618      	mov	r0, r3
 8003860:	3720      	adds	r7, #32
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	60f8      	str	r0, [r7, #12]
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	603b      	str	r3, [r7, #0]
 8003872:	4613      	mov	r3, r2
 8003874:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003876:	e03b      	b.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003878:	6a3b      	ldr	r3, [r7, #32]
 800387a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800387e:	d037      	beq.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003880:	f7fe f934 	bl	8001aec <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	6a3a      	ldr	r2, [r7, #32]
 800388c:	429a      	cmp	r2, r3
 800388e:	d302      	bcc.n	8003896 <UART_WaitOnFlagUntilTimeout+0x30>
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d101      	bne.n	800389a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e03a      	b.n	8003910 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d023      	beq.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	2b80      	cmp	r3, #128	@ 0x80
 80038ac:	d020      	beq.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b40      	cmp	r3, #64	@ 0x40
 80038b2:	d01d      	beq.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d116      	bne.n	80038f0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	617b      	str	r3, [r7, #20]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f81d 	bl	8003918 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2208      	movs	r2, #8
 80038e2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e00f      	b.n	8003910 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	4013      	ands	r3, r2
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	bf0c      	ite	eq
 8003900:	2301      	moveq	r3, #1
 8003902:	2300      	movne	r3, #0
 8003904:	b2db      	uxtb	r3, r3
 8003906:	461a      	mov	r2, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	429a      	cmp	r2, r3
 800390c:	d0b4      	beq.n	8003878 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b095      	sub	sp, #84	@ 0x54
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	330c      	adds	r3, #12
 8003926:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	330c      	adds	r3, #12
 800393e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003940:	643a      	str	r2, [r7, #64]	@ 0x40
 8003942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e5      	bne.n	8003920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3314      	adds	r3, #20
 800395a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	61fb      	str	r3, [r7, #28]
   return(result);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003974:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003976:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800397a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e5      	bne.n	8003954 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398c:	2b01      	cmp	r3, #1
 800398e:	d119      	bne.n	80039c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	330c      	adds	r3, #12
 8003996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	e853 3f00 	ldrex	r3, [r3]
 800399e:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	f023 0310 	bic.w	r3, r3, #16
 80039a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039b0:	61ba      	str	r2, [r7, #24]
 80039b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b4:	6979      	ldr	r1, [r7, #20]
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	e841 2300 	strex	r3, r2, [r1]
 80039bc:	613b      	str	r3, [r7, #16]
   return(result);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1e5      	bne.n	8003990 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2220      	movs	r2, #32
 80039c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039d2:	bf00      	nop
 80039d4:	3754      	adds	r7, #84	@ 0x54
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr
	...

080039e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039e4:	b0c0      	sub	sp, #256	@ 0x100
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039fc:	68d9      	ldr	r1, [r3, #12]
 80039fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	ea40 0301 	orr.w	r3, r0, r1
 8003a08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a14:	691b      	ldr	r3, [r3, #16]
 8003a16:	431a      	orrs	r2, r3
 8003a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	431a      	orrs	r2, r3
 8003a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a24:	69db      	ldr	r3, [r3, #28]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a38:	f021 010c 	bic.w	r1, r1, #12
 8003a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003a46:	430b      	orrs	r3, r1
 8003a48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5a:	6999      	ldr	r1, [r3, #24]
 8003a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	ea40 0301 	orr.w	r3, r0, r1
 8003a66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	4b8f      	ldr	r3, [pc, #572]	@ (8003cac <UART_SetConfig+0x2cc>)
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d005      	beq.n	8003a80 <UART_SetConfig+0xa0>
 8003a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4b8d      	ldr	r3, [pc, #564]	@ (8003cb0 <UART_SetConfig+0x2d0>)
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d104      	bne.n	8003a8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a80:	f7fe fc5c 	bl	800233c <HAL_RCC_GetPCLK2Freq>
 8003a84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003a88:	e003      	b.n	8003a92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a8a:	f7fe fc43 	bl	8002314 <HAL_RCC_GetPCLK1Freq>
 8003a8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a9c:	f040 810c 	bne.w	8003cb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003aa0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003aaa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003aae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	462b      	mov	r3, r5
 8003ab6:	1891      	adds	r1, r2, r2
 8003ab8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003aba:	415b      	adcs	r3, r3
 8003abc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003abe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003ac2:	4621      	mov	r1, r4
 8003ac4:	eb12 0801 	adds.w	r8, r2, r1
 8003ac8:	4629      	mov	r1, r5
 8003aca:	eb43 0901 	adc.w	r9, r3, r1
 8003ace:	f04f 0200 	mov.w	r2, #0
 8003ad2:	f04f 0300 	mov.w	r3, #0
 8003ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ae2:	4690      	mov	r8, r2
 8003ae4:	4699      	mov	r9, r3
 8003ae6:	4623      	mov	r3, r4
 8003ae8:	eb18 0303 	adds.w	r3, r8, r3
 8003aec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003af0:	462b      	mov	r3, r5
 8003af2:	eb49 0303 	adc.w	r3, r9, r3
 8003af6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2200      	movs	r2, #0
 8003b02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b0e:	460b      	mov	r3, r1
 8003b10:	18db      	adds	r3, r3, r3
 8003b12:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b14:	4613      	mov	r3, r2
 8003b16:	eb42 0303 	adc.w	r3, r2, r3
 8003b1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b24:	f7fd f8d0 	bl	8000cc8 <__aeabi_uldivmod>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	460b      	mov	r3, r1
 8003b2c:	4b61      	ldr	r3, [pc, #388]	@ (8003cb4 <UART_SetConfig+0x2d4>)
 8003b2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	011c      	lsls	r4, r3, #4
 8003b36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003b44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003b48:	4642      	mov	r2, r8
 8003b4a:	464b      	mov	r3, r9
 8003b4c:	1891      	adds	r1, r2, r2
 8003b4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003b50:	415b      	adcs	r3, r3
 8003b52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003b58:	4641      	mov	r1, r8
 8003b5a:	eb12 0a01 	adds.w	sl, r2, r1
 8003b5e:	4649      	mov	r1, r9
 8003b60:	eb43 0b01 	adc.w	fp, r3, r1
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b78:	4692      	mov	sl, r2
 8003b7a:	469b      	mov	fp, r3
 8003b7c:	4643      	mov	r3, r8
 8003b7e:	eb1a 0303 	adds.w	r3, sl, r3
 8003b82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b86:	464b      	mov	r3, r9
 8003b88:	eb4b 0303 	adc.w	r3, fp, r3
 8003b8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ba0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ba4:	460b      	mov	r3, r1
 8003ba6:	18db      	adds	r3, r3, r3
 8003ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003baa:	4613      	mov	r3, r2
 8003bac:	eb42 0303 	adc.w	r3, r2, r3
 8003bb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003bb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003bb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003bba:	f7fd f885 	bl	8000cc8 <__aeabi_uldivmod>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <UART_SetConfig+0x2d4>)
 8003bc6:	fba3 2301 	umull	r2, r3, r3, r1
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2264      	movs	r2, #100	@ 0x64
 8003bce:	fb02 f303 	mul.w	r3, r2, r3
 8003bd2:	1acb      	subs	r3, r1, r3
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003bda:	4b36      	ldr	r3, [pc, #216]	@ (8003cb4 <UART_SetConfig+0x2d4>)
 8003bdc:	fba3 2302 	umull	r2, r3, r3, r2
 8003be0:	095b      	lsrs	r3, r3, #5
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003be8:	441c      	add	r4, r3
 8003bea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003bf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003bf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003bfc:	4642      	mov	r2, r8
 8003bfe:	464b      	mov	r3, r9
 8003c00:	1891      	adds	r1, r2, r2
 8003c02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c04:	415b      	adcs	r3, r3
 8003c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	1851      	adds	r1, r2, r1
 8003c10:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c12:	4649      	mov	r1, r9
 8003c14:	414b      	adcs	r3, r1
 8003c16:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c24:	4659      	mov	r1, fp
 8003c26:	00cb      	lsls	r3, r1, #3
 8003c28:	4651      	mov	r1, sl
 8003c2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c2e:	4651      	mov	r1, sl
 8003c30:	00ca      	lsls	r2, r1, #3
 8003c32:	4610      	mov	r0, r2
 8003c34:	4619      	mov	r1, r3
 8003c36:	4603      	mov	r3, r0
 8003c38:	4642      	mov	r2, r8
 8003c3a:	189b      	adds	r3, r3, r2
 8003c3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c40:	464b      	mov	r3, r9
 8003c42:	460a      	mov	r2, r1
 8003c44:	eb42 0303 	adc.w	r3, r2, r3
 8003c48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003c5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c60:	460b      	mov	r3, r1
 8003c62:	18db      	adds	r3, r3, r3
 8003c64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c66:	4613      	mov	r3, r2
 8003c68:	eb42 0303 	adc.w	r3, r2, r3
 8003c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003c76:	f7fd f827 	bl	8000cc8 <__aeabi_uldivmod>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cb4 <UART_SetConfig+0x2d4>)
 8003c80:	fba3 1302 	umull	r1, r3, r3, r2
 8003c84:	095b      	lsrs	r3, r3, #5
 8003c86:	2164      	movs	r1, #100	@ 0x64
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	3332      	adds	r3, #50	@ 0x32
 8003c92:	4a08      	ldr	r2, [pc, #32]	@ (8003cb4 <UART_SetConfig+0x2d4>)
 8003c94:	fba2 2303 	umull	r2, r3, r2, r3
 8003c98:	095b      	lsrs	r3, r3, #5
 8003c9a:	f003 0207 	and.w	r2, r3, #7
 8003c9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4422      	add	r2, r4
 8003ca6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ca8:	e106      	b.n	8003eb8 <UART_SetConfig+0x4d8>
 8003caa:	bf00      	nop
 8003cac:	40011000 	.word	0x40011000
 8003cb0:	40011400 	.word	0x40011400
 8003cb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003cc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003cca:	4642      	mov	r2, r8
 8003ccc:	464b      	mov	r3, r9
 8003cce:	1891      	adds	r1, r2, r2
 8003cd0:	6239      	str	r1, [r7, #32]
 8003cd2:	415b      	adcs	r3, r3
 8003cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003cda:	4641      	mov	r1, r8
 8003cdc:	1854      	adds	r4, r2, r1
 8003cde:	4649      	mov	r1, r9
 8003ce0:	eb43 0501 	adc.w	r5, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	00eb      	lsls	r3, r5, #3
 8003cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf2:	00e2      	lsls	r2, r4, #3
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	461d      	mov	r5, r3
 8003cf8:	4643      	mov	r3, r8
 8003cfa:	18e3      	adds	r3, r4, r3
 8003cfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d00:	464b      	mov	r3, r9
 8003d02:	eb45 0303 	adc.w	r3, r5, r3
 8003d06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d26:	4629      	mov	r1, r5
 8003d28:	008b      	lsls	r3, r1, #2
 8003d2a:	4621      	mov	r1, r4
 8003d2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d30:	4621      	mov	r1, r4
 8003d32:	008a      	lsls	r2, r1, #2
 8003d34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d38:	f7fc ffc6 	bl	8000cc8 <__aeabi_uldivmod>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	460b      	mov	r3, r1
 8003d40:	4b60      	ldr	r3, [pc, #384]	@ (8003ec4 <UART_SetConfig+0x4e4>)
 8003d42:	fba3 2302 	umull	r2, r3, r3, r2
 8003d46:	095b      	lsrs	r3, r3, #5
 8003d48:	011c      	lsls	r4, r3, #4
 8003d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003d54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003d58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	1891      	adds	r1, r2, r2
 8003d62:	61b9      	str	r1, [r7, #24]
 8003d64:	415b      	adcs	r3, r3
 8003d66:	61fb      	str	r3, [r7, #28]
 8003d68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d6c:	4641      	mov	r1, r8
 8003d6e:	1851      	adds	r1, r2, r1
 8003d70:	6139      	str	r1, [r7, #16]
 8003d72:	4649      	mov	r1, r9
 8003d74:	414b      	adcs	r3, r1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	f04f 0200 	mov.w	r2, #0
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d84:	4659      	mov	r1, fp
 8003d86:	00cb      	lsls	r3, r1, #3
 8003d88:	4651      	mov	r1, sl
 8003d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d8e:	4651      	mov	r1, sl
 8003d90:	00ca      	lsls	r2, r1, #3
 8003d92:	4610      	mov	r0, r2
 8003d94:	4619      	mov	r1, r3
 8003d96:	4603      	mov	r3, r0
 8003d98:	4642      	mov	r2, r8
 8003d9a:	189b      	adds	r3, r3, r2
 8003d9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003da0:	464b      	mov	r3, r9
 8003da2:	460a      	mov	r2, r1
 8003da4:	eb42 0303 	adc.w	r3, r2, r3
 8003da8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2200      	movs	r2, #0
 8003db4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003db6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003dc4:	4649      	mov	r1, r9
 8003dc6:	008b      	lsls	r3, r1, #2
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dce:	4641      	mov	r1, r8
 8003dd0:	008a      	lsls	r2, r1, #2
 8003dd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003dd6:	f7fc ff77 	bl	8000cc8 <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4611      	mov	r1, r2
 8003de0:	4b38      	ldr	r3, [pc, #224]	@ (8003ec4 <UART_SetConfig+0x4e4>)
 8003de2:	fba3 2301 	umull	r2, r3, r3, r1
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2264      	movs	r2, #100	@ 0x64
 8003dea:	fb02 f303 	mul.w	r3, r2, r3
 8003dee:	1acb      	subs	r3, r1, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	@ 0x32
 8003df4:	4a33      	ldr	r2, [pc, #204]	@ (8003ec4 <UART_SetConfig+0x4e4>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e00:	441c      	add	r4, r3
 8003e02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e06:	2200      	movs	r2, #0
 8003e08:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e10:	4642      	mov	r2, r8
 8003e12:	464b      	mov	r3, r9
 8003e14:	1891      	adds	r1, r2, r2
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	415b      	adcs	r3, r3
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e20:	4641      	mov	r1, r8
 8003e22:	1851      	adds	r1, r2, r1
 8003e24:	6039      	str	r1, [r7, #0]
 8003e26:	4649      	mov	r1, r9
 8003e28:	414b      	adcs	r3, r1
 8003e2a:	607b      	str	r3, [r7, #4]
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e38:	4659      	mov	r1, fp
 8003e3a:	00cb      	lsls	r3, r1, #3
 8003e3c:	4651      	mov	r1, sl
 8003e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e42:	4651      	mov	r1, sl
 8003e44:	00ca      	lsls	r2, r1, #3
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	4642      	mov	r2, r8
 8003e4e:	189b      	adds	r3, r3, r2
 8003e50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003e52:	464b      	mov	r3, r9
 8003e54:	460a      	mov	r2, r1
 8003e56:	eb42 0303 	adc.w	r3, r2, r3
 8003e5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	663b      	str	r3, [r7, #96]	@ 0x60
 8003e66:	667a      	str	r2, [r7, #100]	@ 0x64
 8003e68:	f04f 0200 	mov.w	r2, #0
 8003e6c:	f04f 0300 	mov.w	r3, #0
 8003e70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003e74:	4649      	mov	r1, r9
 8003e76:	008b      	lsls	r3, r1, #2
 8003e78:	4641      	mov	r1, r8
 8003e7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e7e:	4641      	mov	r1, r8
 8003e80:	008a      	lsls	r2, r1, #2
 8003e82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003e86:	f7fc ff1f 	bl	8000cc8 <__aeabi_uldivmod>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ec4 <UART_SetConfig+0x4e4>)
 8003e90:	fba3 1302 	umull	r1, r3, r3, r2
 8003e94:	095b      	lsrs	r3, r3, #5
 8003e96:	2164      	movs	r1, #100	@ 0x64
 8003e98:	fb01 f303 	mul.w	r3, r1, r3
 8003e9c:	1ad3      	subs	r3, r2, r3
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	3332      	adds	r3, #50	@ 0x32
 8003ea2:	4a08      	ldr	r2, [pc, #32]	@ (8003ec4 <UART_SetConfig+0x4e4>)
 8003ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea8:	095b      	lsrs	r3, r3, #5
 8003eaa:	f003 020f 	and.w	r2, r3, #15
 8003eae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4422      	add	r2, r4
 8003eb6:	609a      	str	r2, [r3, #8]
}
 8003eb8:	bf00      	nop
 8003eba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ec4:	51eb851f 	.word	0x51eb851f

08003ec8 <__cvt>:
 8003ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ecc:	ec57 6b10 	vmov	r6, r7, d0
 8003ed0:	2f00      	cmp	r7, #0
 8003ed2:	460c      	mov	r4, r1
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	463b      	mov	r3, r7
 8003ed8:	bfbb      	ittet	lt
 8003eda:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8003ede:	461f      	movlt	r7, r3
 8003ee0:	2300      	movge	r3, #0
 8003ee2:	232d      	movlt	r3, #45	@ 0x2d
 8003ee4:	700b      	strb	r3, [r1, #0]
 8003ee6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003ee8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003eec:	4691      	mov	r9, r2
 8003eee:	f023 0820 	bic.w	r8, r3, #32
 8003ef2:	bfbc      	itt	lt
 8003ef4:	4632      	movlt	r2, r6
 8003ef6:	4616      	movlt	r6, r2
 8003ef8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003efc:	d005      	beq.n	8003f0a <__cvt+0x42>
 8003efe:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8003f02:	d100      	bne.n	8003f06 <__cvt+0x3e>
 8003f04:	3401      	adds	r4, #1
 8003f06:	2102      	movs	r1, #2
 8003f08:	e000      	b.n	8003f0c <__cvt+0x44>
 8003f0a:	2103      	movs	r1, #3
 8003f0c:	ab03      	add	r3, sp, #12
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	ab02      	add	r3, sp, #8
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	ec47 6b10 	vmov	d0, r6, r7
 8003f18:	4653      	mov	r3, sl
 8003f1a:	4622      	mov	r2, r4
 8003f1c:	f001 f880 	bl	8005020 <_dtoa_r>
 8003f20:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8003f24:	4605      	mov	r5, r0
 8003f26:	d119      	bne.n	8003f5c <__cvt+0x94>
 8003f28:	f019 0f01 	tst.w	r9, #1
 8003f2c:	d00e      	beq.n	8003f4c <__cvt+0x84>
 8003f2e:	eb00 0904 	add.w	r9, r0, r4
 8003f32:	2200      	movs	r2, #0
 8003f34:	2300      	movs	r3, #0
 8003f36:	4630      	mov	r0, r6
 8003f38:	4639      	mov	r1, r7
 8003f3a:	f7fc fde5 	bl	8000b08 <__aeabi_dcmpeq>
 8003f3e:	b108      	cbz	r0, 8003f44 <__cvt+0x7c>
 8003f40:	f8cd 900c 	str.w	r9, [sp, #12]
 8003f44:	2230      	movs	r2, #48	@ 0x30
 8003f46:	9b03      	ldr	r3, [sp, #12]
 8003f48:	454b      	cmp	r3, r9
 8003f4a:	d31e      	bcc.n	8003f8a <__cvt+0xc2>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8003f50:	1b5b      	subs	r3, r3, r5
 8003f52:	4628      	mov	r0, r5
 8003f54:	6013      	str	r3, [r2, #0]
 8003f56:	b004      	add	sp, #16
 8003f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003f60:	eb00 0904 	add.w	r9, r0, r4
 8003f64:	d1e5      	bne.n	8003f32 <__cvt+0x6a>
 8003f66:	7803      	ldrb	r3, [r0, #0]
 8003f68:	2b30      	cmp	r3, #48	@ 0x30
 8003f6a:	d10a      	bne.n	8003f82 <__cvt+0xba>
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	2300      	movs	r3, #0
 8003f70:	4630      	mov	r0, r6
 8003f72:	4639      	mov	r1, r7
 8003f74:	f7fc fdc8 	bl	8000b08 <__aeabi_dcmpeq>
 8003f78:	b918      	cbnz	r0, 8003f82 <__cvt+0xba>
 8003f7a:	f1c4 0401 	rsb	r4, r4, #1
 8003f7e:	f8ca 4000 	str.w	r4, [sl]
 8003f82:	f8da 3000 	ldr.w	r3, [sl]
 8003f86:	4499      	add	r9, r3
 8003f88:	e7d3      	b.n	8003f32 <__cvt+0x6a>
 8003f8a:	1c59      	adds	r1, r3, #1
 8003f8c:	9103      	str	r1, [sp, #12]
 8003f8e:	701a      	strb	r2, [r3, #0]
 8003f90:	e7d9      	b.n	8003f46 <__cvt+0x7e>

08003f92 <__exponent>:
 8003f92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f94:	2900      	cmp	r1, #0
 8003f96:	bfba      	itte	lt
 8003f98:	4249      	neglt	r1, r1
 8003f9a:	232d      	movlt	r3, #45	@ 0x2d
 8003f9c:	232b      	movge	r3, #43	@ 0x2b
 8003f9e:	2909      	cmp	r1, #9
 8003fa0:	7002      	strb	r2, [r0, #0]
 8003fa2:	7043      	strb	r3, [r0, #1]
 8003fa4:	dd29      	ble.n	8003ffa <__exponent+0x68>
 8003fa6:	f10d 0307 	add.w	r3, sp, #7
 8003faa:	461d      	mov	r5, r3
 8003fac:	270a      	movs	r7, #10
 8003fae:	461a      	mov	r2, r3
 8003fb0:	fbb1 f6f7 	udiv	r6, r1, r7
 8003fb4:	fb07 1416 	mls	r4, r7, r6, r1
 8003fb8:	3430      	adds	r4, #48	@ 0x30
 8003fba:	f802 4c01 	strb.w	r4, [r2, #-1]
 8003fbe:	460c      	mov	r4, r1
 8003fc0:	2c63      	cmp	r4, #99	@ 0x63
 8003fc2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fc6:	4631      	mov	r1, r6
 8003fc8:	dcf1      	bgt.n	8003fae <__exponent+0x1c>
 8003fca:	3130      	adds	r1, #48	@ 0x30
 8003fcc:	1e94      	subs	r4, r2, #2
 8003fce:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003fd2:	1c41      	adds	r1, r0, #1
 8003fd4:	4623      	mov	r3, r4
 8003fd6:	42ab      	cmp	r3, r5
 8003fd8:	d30a      	bcc.n	8003ff0 <__exponent+0x5e>
 8003fda:	f10d 0309 	add.w	r3, sp, #9
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	42ac      	cmp	r4, r5
 8003fe2:	bf88      	it	hi
 8003fe4:	2300      	movhi	r3, #0
 8003fe6:	3302      	adds	r3, #2
 8003fe8:	4403      	add	r3, r0
 8003fea:	1a18      	subs	r0, r3, r0
 8003fec:	b003      	add	sp, #12
 8003fee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ff0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003ff4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003ff8:	e7ed      	b.n	8003fd6 <__exponent+0x44>
 8003ffa:	2330      	movs	r3, #48	@ 0x30
 8003ffc:	3130      	adds	r1, #48	@ 0x30
 8003ffe:	7083      	strb	r3, [r0, #2]
 8004000:	70c1      	strb	r1, [r0, #3]
 8004002:	1d03      	adds	r3, r0, #4
 8004004:	e7f1      	b.n	8003fea <__exponent+0x58>
	...

08004008 <_printf_float>:
 8004008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	b08d      	sub	sp, #52	@ 0x34
 800400e:	460c      	mov	r4, r1
 8004010:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004014:	4616      	mov	r6, r2
 8004016:	461f      	mov	r7, r3
 8004018:	4605      	mov	r5, r0
 800401a:	f000 fefb 	bl	8004e14 <_localeconv_r>
 800401e:	6803      	ldr	r3, [r0, #0]
 8004020:	9304      	str	r3, [sp, #16]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc f944 	bl	80002b0 <strlen>
 8004028:	2300      	movs	r3, #0
 800402a:	930a      	str	r3, [sp, #40]	@ 0x28
 800402c:	f8d8 3000 	ldr.w	r3, [r8]
 8004030:	9005      	str	r0, [sp, #20]
 8004032:	3307      	adds	r3, #7
 8004034:	f023 0307 	bic.w	r3, r3, #7
 8004038:	f103 0208 	add.w	r2, r3, #8
 800403c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004040:	f8d4 b000 	ldr.w	fp, [r4]
 8004044:	f8c8 2000 	str.w	r2, [r8]
 8004048:	e9d3 8900 	ldrd	r8, r9, [r3]
 800404c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004050:	9307      	str	r3, [sp, #28]
 8004052:	f8cd 8018 	str.w	r8, [sp, #24]
 8004056:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800405a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800405e:	4b9c      	ldr	r3, [pc, #624]	@ (80042d0 <_printf_float+0x2c8>)
 8004060:	f04f 32ff 	mov.w	r2, #4294967295
 8004064:	f7fc fd82 	bl	8000b6c <__aeabi_dcmpun>
 8004068:	bb70      	cbnz	r0, 80040c8 <_printf_float+0xc0>
 800406a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800406e:	4b98      	ldr	r3, [pc, #608]	@ (80042d0 <_printf_float+0x2c8>)
 8004070:	f04f 32ff 	mov.w	r2, #4294967295
 8004074:	f7fc fd5c 	bl	8000b30 <__aeabi_dcmple>
 8004078:	bb30      	cbnz	r0, 80040c8 <_printf_float+0xc0>
 800407a:	2200      	movs	r2, #0
 800407c:	2300      	movs	r3, #0
 800407e:	4640      	mov	r0, r8
 8004080:	4649      	mov	r1, r9
 8004082:	f7fc fd4b 	bl	8000b1c <__aeabi_dcmplt>
 8004086:	b110      	cbz	r0, 800408e <_printf_float+0x86>
 8004088:	232d      	movs	r3, #45	@ 0x2d
 800408a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800408e:	4a91      	ldr	r2, [pc, #580]	@ (80042d4 <_printf_float+0x2cc>)
 8004090:	4b91      	ldr	r3, [pc, #580]	@ (80042d8 <_printf_float+0x2d0>)
 8004092:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004096:	bf8c      	ite	hi
 8004098:	4690      	movhi	r8, r2
 800409a:	4698      	movls	r8, r3
 800409c:	2303      	movs	r3, #3
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	f02b 0304 	bic.w	r3, fp, #4
 80040a4:	6023      	str	r3, [r4, #0]
 80040a6:	f04f 0900 	mov.w	r9, #0
 80040aa:	9700      	str	r7, [sp, #0]
 80040ac:	4633      	mov	r3, r6
 80040ae:	aa0b      	add	r2, sp, #44	@ 0x2c
 80040b0:	4621      	mov	r1, r4
 80040b2:	4628      	mov	r0, r5
 80040b4:	f000 f9d2 	bl	800445c <_printf_common>
 80040b8:	3001      	adds	r0, #1
 80040ba:	f040 808d 	bne.w	80041d8 <_printf_float+0x1d0>
 80040be:	f04f 30ff 	mov.w	r0, #4294967295
 80040c2:	b00d      	add	sp, #52	@ 0x34
 80040c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040c8:	4642      	mov	r2, r8
 80040ca:	464b      	mov	r3, r9
 80040cc:	4640      	mov	r0, r8
 80040ce:	4649      	mov	r1, r9
 80040d0:	f7fc fd4c 	bl	8000b6c <__aeabi_dcmpun>
 80040d4:	b140      	cbz	r0, 80040e8 <_printf_float+0xe0>
 80040d6:	464b      	mov	r3, r9
 80040d8:	2b00      	cmp	r3, #0
 80040da:	bfbc      	itt	lt
 80040dc:	232d      	movlt	r3, #45	@ 0x2d
 80040de:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80040e2:	4a7e      	ldr	r2, [pc, #504]	@ (80042dc <_printf_float+0x2d4>)
 80040e4:	4b7e      	ldr	r3, [pc, #504]	@ (80042e0 <_printf_float+0x2d8>)
 80040e6:	e7d4      	b.n	8004092 <_printf_float+0x8a>
 80040e8:	6863      	ldr	r3, [r4, #4]
 80040ea:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80040ee:	9206      	str	r2, [sp, #24]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	d13b      	bne.n	800416c <_printf_float+0x164>
 80040f4:	2306      	movs	r3, #6
 80040f6:	6063      	str	r3, [r4, #4]
 80040f8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80040fc:	2300      	movs	r3, #0
 80040fe:	6022      	str	r2, [r4, #0]
 8004100:	9303      	str	r3, [sp, #12]
 8004102:	ab0a      	add	r3, sp, #40	@ 0x28
 8004104:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004108:	ab09      	add	r3, sp, #36	@ 0x24
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	6861      	ldr	r1, [r4, #4]
 800410e:	ec49 8b10 	vmov	d0, r8, r9
 8004112:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004116:	4628      	mov	r0, r5
 8004118:	f7ff fed6 	bl	8003ec8 <__cvt>
 800411c:	9b06      	ldr	r3, [sp, #24]
 800411e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004120:	2b47      	cmp	r3, #71	@ 0x47
 8004122:	4680      	mov	r8, r0
 8004124:	d129      	bne.n	800417a <_printf_float+0x172>
 8004126:	1cc8      	adds	r0, r1, #3
 8004128:	db02      	blt.n	8004130 <_printf_float+0x128>
 800412a:	6863      	ldr	r3, [r4, #4]
 800412c:	4299      	cmp	r1, r3
 800412e:	dd41      	ble.n	80041b4 <_printf_float+0x1ac>
 8004130:	f1aa 0a02 	sub.w	sl, sl, #2
 8004134:	fa5f fa8a 	uxtb.w	sl, sl
 8004138:	3901      	subs	r1, #1
 800413a:	4652      	mov	r2, sl
 800413c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004140:	9109      	str	r1, [sp, #36]	@ 0x24
 8004142:	f7ff ff26 	bl	8003f92 <__exponent>
 8004146:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004148:	1813      	adds	r3, r2, r0
 800414a:	2a01      	cmp	r2, #1
 800414c:	4681      	mov	r9, r0
 800414e:	6123      	str	r3, [r4, #16]
 8004150:	dc02      	bgt.n	8004158 <_printf_float+0x150>
 8004152:	6822      	ldr	r2, [r4, #0]
 8004154:	07d2      	lsls	r2, r2, #31
 8004156:	d501      	bpl.n	800415c <_printf_float+0x154>
 8004158:	3301      	adds	r3, #1
 800415a:	6123      	str	r3, [r4, #16]
 800415c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0a2      	beq.n	80040aa <_printf_float+0xa2>
 8004164:	232d      	movs	r3, #45	@ 0x2d
 8004166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800416a:	e79e      	b.n	80040aa <_printf_float+0xa2>
 800416c:	9a06      	ldr	r2, [sp, #24]
 800416e:	2a47      	cmp	r2, #71	@ 0x47
 8004170:	d1c2      	bne.n	80040f8 <_printf_float+0xf0>
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1c0      	bne.n	80040f8 <_printf_float+0xf0>
 8004176:	2301      	movs	r3, #1
 8004178:	e7bd      	b.n	80040f6 <_printf_float+0xee>
 800417a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800417e:	d9db      	bls.n	8004138 <_printf_float+0x130>
 8004180:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004184:	d118      	bne.n	80041b8 <_printf_float+0x1b0>
 8004186:	2900      	cmp	r1, #0
 8004188:	6863      	ldr	r3, [r4, #4]
 800418a:	dd0b      	ble.n	80041a4 <_printf_float+0x19c>
 800418c:	6121      	str	r1, [r4, #16]
 800418e:	b913      	cbnz	r3, 8004196 <_printf_float+0x18e>
 8004190:	6822      	ldr	r2, [r4, #0]
 8004192:	07d0      	lsls	r0, r2, #31
 8004194:	d502      	bpl.n	800419c <_printf_float+0x194>
 8004196:	3301      	adds	r3, #1
 8004198:	440b      	add	r3, r1
 800419a:	6123      	str	r3, [r4, #16]
 800419c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800419e:	f04f 0900 	mov.w	r9, #0
 80041a2:	e7db      	b.n	800415c <_printf_float+0x154>
 80041a4:	b913      	cbnz	r3, 80041ac <_printf_float+0x1a4>
 80041a6:	6822      	ldr	r2, [r4, #0]
 80041a8:	07d2      	lsls	r2, r2, #31
 80041aa:	d501      	bpl.n	80041b0 <_printf_float+0x1a8>
 80041ac:	3302      	adds	r3, #2
 80041ae:	e7f4      	b.n	800419a <_printf_float+0x192>
 80041b0:	2301      	movs	r3, #1
 80041b2:	e7f2      	b.n	800419a <_printf_float+0x192>
 80041b4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80041b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041ba:	4299      	cmp	r1, r3
 80041bc:	db05      	blt.n	80041ca <_printf_float+0x1c2>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	6121      	str	r1, [r4, #16]
 80041c2:	07d8      	lsls	r0, r3, #31
 80041c4:	d5ea      	bpl.n	800419c <_printf_float+0x194>
 80041c6:	1c4b      	adds	r3, r1, #1
 80041c8:	e7e7      	b.n	800419a <_printf_float+0x192>
 80041ca:	2900      	cmp	r1, #0
 80041cc:	bfd4      	ite	le
 80041ce:	f1c1 0202 	rsble	r2, r1, #2
 80041d2:	2201      	movgt	r2, #1
 80041d4:	4413      	add	r3, r2
 80041d6:	e7e0      	b.n	800419a <_printf_float+0x192>
 80041d8:	6823      	ldr	r3, [r4, #0]
 80041da:	055a      	lsls	r2, r3, #21
 80041dc:	d407      	bmi.n	80041ee <_printf_float+0x1e6>
 80041de:	6923      	ldr	r3, [r4, #16]
 80041e0:	4642      	mov	r2, r8
 80041e2:	4631      	mov	r1, r6
 80041e4:	4628      	mov	r0, r5
 80041e6:	47b8      	blx	r7
 80041e8:	3001      	adds	r0, #1
 80041ea:	d12b      	bne.n	8004244 <_printf_float+0x23c>
 80041ec:	e767      	b.n	80040be <_printf_float+0xb6>
 80041ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80041f2:	f240 80dd 	bls.w	80043b0 <_printf_float+0x3a8>
 80041f6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80041fa:	2200      	movs	r2, #0
 80041fc:	2300      	movs	r3, #0
 80041fe:	f7fc fc83 	bl	8000b08 <__aeabi_dcmpeq>
 8004202:	2800      	cmp	r0, #0
 8004204:	d033      	beq.n	800426e <_printf_float+0x266>
 8004206:	4a37      	ldr	r2, [pc, #220]	@ (80042e4 <_printf_float+0x2dc>)
 8004208:	2301      	movs	r3, #1
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	47b8      	blx	r7
 8004210:	3001      	adds	r0, #1
 8004212:	f43f af54 	beq.w	80040be <_printf_float+0xb6>
 8004216:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800421a:	4543      	cmp	r3, r8
 800421c:	db02      	blt.n	8004224 <_printf_float+0x21c>
 800421e:	6823      	ldr	r3, [r4, #0]
 8004220:	07d8      	lsls	r0, r3, #31
 8004222:	d50f      	bpl.n	8004244 <_printf_float+0x23c>
 8004224:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004228:	4631      	mov	r1, r6
 800422a:	4628      	mov	r0, r5
 800422c:	47b8      	blx	r7
 800422e:	3001      	adds	r0, #1
 8004230:	f43f af45 	beq.w	80040be <_printf_float+0xb6>
 8004234:	f04f 0900 	mov.w	r9, #0
 8004238:	f108 38ff 	add.w	r8, r8, #4294967295
 800423c:	f104 0a1a 	add.w	sl, r4, #26
 8004240:	45c8      	cmp	r8, r9
 8004242:	dc09      	bgt.n	8004258 <_printf_float+0x250>
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	079b      	lsls	r3, r3, #30
 8004248:	f100 8103 	bmi.w	8004452 <_printf_float+0x44a>
 800424c:	68e0      	ldr	r0, [r4, #12]
 800424e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004250:	4298      	cmp	r0, r3
 8004252:	bfb8      	it	lt
 8004254:	4618      	movlt	r0, r3
 8004256:	e734      	b.n	80040c2 <_printf_float+0xba>
 8004258:	2301      	movs	r3, #1
 800425a:	4652      	mov	r2, sl
 800425c:	4631      	mov	r1, r6
 800425e:	4628      	mov	r0, r5
 8004260:	47b8      	blx	r7
 8004262:	3001      	adds	r0, #1
 8004264:	f43f af2b 	beq.w	80040be <_printf_float+0xb6>
 8004268:	f109 0901 	add.w	r9, r9, #1
 800426c:	e7e8      	b.n	8004240 <_printf_float+0x238>
 800426e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004270:	2b00      	cmp	r3, #0
 8004272:	dc39      	bgt.n	80042e8 <_printf_float+0x2e0>
 8004274:	4a1b      	ldr	r2, [pc, #108]	@ (80042e4 <_printf_float+0x2dc>)
 8004276:	2301      	movs	r3, #1
 8004278:	4631      	mov	r1, r6
 800427a:	4628      	mov	r0, r5
 800427c:	47b8      	blx	r7
 800427e:	3001      	adds	r0, #1
 8004280:	f43f af1d 	beq.w	80040be <_printf_float+0xb6>
 8004284:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004288:	ea59 0303 	orrs.w	r3, r9, r3
 800428c:	d102      	bne.n	8004294 <_printf_float+0x28c>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	07d9      	lsls	r1, r3, #31
 8004292:	d5d7      	bpl.n	8004244 <_printf_float+0x23c>
 8004294:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004298:	4631      	mov	r1, r6
 800429a:	4628      	mov	r0, r5
 800429c:	47b8      	blx	r7
 800429e:	3001      	adds	r0, #1
 80042a0:	f43f af0d 	beq.w	80040be <_printf_float+0xb6>
 80042a4:	f04f 0a00 	mov.w	sl, #0
 80042a8:	f104 0b1a 	add.w	fp, r4, #26
 80042ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80042ae:	425b      	negs	r3, r3
 80042b0:	4553      	cmp	r3, sl
 80042b2:	dc01      	bgt.n	80042b8 <_printf_float+0x2b0>
 80042b4:	464b      	mov	r3, r9
 80042b6:	e793      	b.n	80041e0 <_printf_float+0x1d8>
 80042b8:	2301      	movs	r3, #1
 80042ba:	465a      	mov	r2, fp
 80042bc:	4631      	mov	r1, r6
 80042be:	4628      	mov	r0, r5
 80042c0:	47b8      	blx	r7
 80042c2:	3001      	adds	r0, #1
 80042c4:	f43f aefb 	beq.w	80040be <_printf_float+0xb6>
 80042c8:	f10a 0a01 	add.w	sl, sl, #1
 80042cc:	e7ee      	b.n	80042ac <_printf_float+0x2a4>
 80042ce:	bf00      	nop
 80042d0:	7fefffff 	.word	0x7fefffff
 80042d4:	08008630 	.word	0x08008630
 80042d8:	0800862c 	.word	0x0800862c
 80042dc:	08008638 	.word	0x08008638
 80042e0:	08008634 	.word	0x08008634
 80042e4:	0800863c 	.word	0x0800863c
 80042e8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80042ea:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80042ee:	4553      	cmp	r3, sl
 80042f0:	bfa8      	it	ge
 80042f2:	4653      	movge	r3, sl
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	4699      	mov	r9, r3
 80042f8:	dc36      	bgt.n	8004368 <_printf_float+0x360>
 80042fa:	f04f 0b00 	mov.w	fp, #0
 80042fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004302:	f104 021a 	add.w	r2, r4, #26
 8004306:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004308:	9306      	str	r3, [sp, #24]
 800430a:	eba3 0309 	sub.w	r3, r3, r9
 800430e:	455b      	cmp	r3, fp
 8004310:	dc31      	bgt.n	8004376 <_printf_float+0x36e>
 8004312:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004314:	459a      	cmp	sl, r3
 8004316:	dc3a      	bgt.n	800438e <_printf_float+0x386>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	07da      	lsls	r2, r3, #31
 800431c:	d437      	bmi.n	800438e <_printf_float+0x386>
 800431e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004320:	ebaa 0903 	sub.w	r9, sl, r3
 8004324:	9b06      	ldr	r3, [sp, #24]
 8004326:	ebaa 0303 	sub.w	r3, sl, r3
 800432a:	4599      	cmp	r9, r3
 800432c:	bfa8      	it	ge
 800432e:	4699      	movge	r9, r3
 8004330:	f1b9 0f00 	cmp.w	r9, #0
 8004334:	dc33      	bgt.n	800439e <_printf_float+0x396>
 8004336:	f04f 0800 	mov.w	r8, #0
 800433a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800433e:	f104 0b1a 	add.w	fp, r4, #26
 8004342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004344:	ebaa 0303 	sub.w	r3, sl, r3
 8004348:	eba3 0309 	sub.w	r3, r3, r9
 800434c:	4543      	cmp	r3, r8
 800434e:	f77f af79 	ble.w	8004244 <_printf_float+0x23c>
 8004352:	2301      	movs	r3, #1
 8004354:	465a      	mov	r2, fp
 8004356:	4631      	mov	r1, r6
 8004358:	4628      	mov	r0, r5
 800435a:	47b8      	blx	r7
 800435c:	3001      	adds	r0, #1
 800435e:	f43f aeae 	beq.w	80040be <_printf_float+0xb6>
 8004362:	f108 0801 	add.w	r8, r8, #1
 8004366:	e7ec      	b.n	8004342 <_printf_float+0x33a>
 8004368:	4642      	mov	r2, r8
 800436a:	4631      	mov	r1, r6
 800436c:	4628      	mov	r0, r5
 800436e:	47b8      	blx	r7
 8004370:	3001      	adds	r0, #1
 8004372:	d1c2      	bne.n	80042fa <_printf_float+0x2f2>
 8004374:	e6a3      	b.n	80040be <_printf_float+0xb6>
 8004376:	2301      	movs	r3, #1
 8004378:	4631      	mov	r1, r6
 800437a:	4628      	mov	r0, r5
 800437c:	9206      	str	r2, [sp, #24]
 800437e:	47b8      	blx	r7
 8004380:	3001      	adds	r0, #1
 8004382:	f43f ae9c 	beq.w	80040be <_printf_float+0xb6>
 8004386:	9a06      	ldr	r2, [sp, #24]
 8004388:	f10b 0b01 	add.w	fp, fp, #1
 800438c:	e7bb      	b.n	8004306 <_printf_float+0x2fe>
 800438e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004392:	4631      	mov	r1, r6
 8004394:	4628      	mov	r0, r5
 8004396:	47b8      	blx	r7
 8004398:	3001      	adds	r0, #1
 800439a:	d1c0      	bne.n	800431e <_printf_float+0x316>
 800439c:	e68f      	b.n	80040be <_printf_float+0xb6>
 800439e:	9a06      	ldr	r2, [sp, #24]
 80043a0:	464b      	mov	r3, r9
 80043a2:	4442      	add	r2, r8
 80043a4:	4631      	mov	r1, r6
 80043a6:	4628      	mov	r0, r5
 80043a8:	47b8      	blx	r7
 80043aa:	3001      	adds	r0, #1
 80043ac:	d1c3      	bne.n	8004336 <_printf_float+0x32e>
 80043ae:	e686      	b.n	80040be <_printf_float+0xb6>
 80043b0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80043b4:	f1ba 0f01 	cmp.w	sl, #1
 80043b8:	dc01      	bgt.n	80043be <_printf_float+0x3b6>
 80043ba:	07db      	lsls	r3, r3, #31
 80043bc:	d536      	bpl.n	800442c <_printf_float+0x424>
 80043be:	2301      	movs	r3, #1
 80043c0:	4642      	mov	r2, r8
 80043c2:	4631      	mov	r1, r6
 80043c4:	4628      	mov	r0, r5
 80043c6:	47b8      	blx	r7
 80043c8:	3001      	adds	r0, #1
 80043ca:	f43f ae78 	beq.w	80040be <_printf_float+0xb6>
 80043ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80043d2:	4631      	mov	r1, r6
 80043d4:	4628      	mov	r0, r5
 80043d6:	47b8      	blx	r7
 80043d8:	3001      	adds	r0, #1
 80043da:	f43f ae70 	beq.w	80040be <_printf_float+0xb6>
 80043de:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80043e2:	2200      	movs	r2, #0
 80043e4:	2300      	movs	r3, #0
 80043e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043ea:	f7fc fb8d 	bl	8000b08 <__aeabi_dcmpeq>
 80043ee:	b9c0      	cbnz	r0, 8004422 <_printf_float+0x41a>
 80043f0:	4653      	mov	r3, sl
 80043f2:	f108 0201 	add.w	r2, r8, #1
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	d10c      	bne.n	800441a <_printf_float+0x412>
 8004400:	e65d      	b.n	80040be <_printf_float+0xb6>
 8004402:	2301      	movs	r3, #1
 8004404:	465a      	mov	r2, fp
 8004406:	4631      	mov	r1, r6
 8004408:	4628      	mov	r0, r5
 800440a:	47b8      	blx	r7
 800440c:	3001      	adds	r0, #1
 800440e:	f43f ae56 	beq.w	80040be <_printf_float+0xb6>
 8004412:	f108 0801 	add.w	r8, r8, #1
 8004416:	45d0      	cmp	r8, sl
 8004418:	dbf3      	blt.n	8004402 <_printf_float+0x3fa>
 800441a:	464b      	mov	r3, r9
 800441c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004420:	e6df      	b.n	80041e2 <_printf_float+0x1da>
 8004422:	f04f 0800 	mov.w	r8, #0
 8004426:	f104 0b1a 	add.w	fp, r4, #26
 800442a:	e7f4      	b.n	8004416 <_printf_float+0x40e>
 800442c:	2301      	movs	r3, #1
 800442e:	4642      	mov	r2, r8
 8004430:	e7e1      	b.n	80043f6 <_printf_float+0x3ee>
 8004432:	2301      	movs	r3, #1
 8004434:	464a      	mov	r2, r9
 8004436:	4631      	mov	r1, r6
 8004438:	4628      	mov	r0, r5
 800443a:	47b8      	blx	r7
 800443c:	3001      	adds	r0, #1
 800443e:	f43f ae3e 	beq.w	80040be <_printf_float+0xb6>
 8004442:	f108 0801 	add.w	r8, r8, #1
 8004446:	68e3      	ldr	r3, [r4, #12]
 8004448:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800444a:	1a5b      	subs	r3, r3, r1
 800444c:	4543      	cmp	r3, r8
 800444e:	dcf0      	bgt.n	8004432 <_printf_float+0x42a>
 8004450:	e6fc      	b.n	800424c <_printf_float+0x244>
 8004452:	f04f 0800 	mov.w	r8, #0
 8004456:	f104 0919 	add.w	r9, r4, #25
 800445a:	e7f4      	b.n	8004446 <_printf_float+0x43e>

0800445c <_printf_common>:
 800445c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004460:	4616      	mov	r6, r2
 8004462:	4698      	mov	r8, r3
 8004464:	688a      	ldr	r2, [r1, #8]
 8004466:	690b      	ldr	r3, [r1, #16]
 8004468:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800446c:	4293      	cmp	r3, r2
 800446e:	bfb8      	it	lt
 8004470:	4613      	movlt	r3, r2
 8004472:	6033      	str	r3, [r6, #0]
 8004474:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004478:	4607      	mov	r7, r0
 800447a:	460c      	mov	r4, r1
 800447c:	b10a      	cbz	r2, 8004482 <_printf_common+0x26>
 800447e:	3301      	adds	r3, #1
 8004480:	6033      	str	r3, [r6, #0]
 8004482:	6823      	ldr	r3, [r4, #0]
 8004484:	0699      	lsls	r1, r3, #26
 8004486:	bf42      	ittt	mi
 8004488:	6833      	ldrmi	r3, [r6, #0]
 800448a:	3302      	addmi	r3, #2
 800448c:	6033      	strmi	r3, [r6, #0]
 800448e:	6825      	ldr	r5, [r4, #0]
 8004490:	f015 0506 	ands.w	r5, r5, #6
 8004494:	d106      	bne.n	80044a4 <_printf_common+0x48>
 8004496:	f104 0a19 	add.w	sl, r4, #25
 800449a:	68e3      	ldr	r3, [r4, #12]
 800449c:	6832      	ldr	r2, [r6, #0]
 800449e:	1a9b      	subs	r3, r3, r2
 80044a0:	42ab      	cmp	r3, r5
 80044a2:	dc26      	bgt.n	80044f2 <_printf_common+0x96>
 80044a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044a8:	6822      	ldr	r2, [r4, #0]
 80044aa:	3b00      	subs	r3, #0
 80044ac:	bf18      	it	ne
 80044ae:	2301      	movne	r3, #1
 80044b0:	0692      	lsls	r2, r2, #26
 80044b2:	d42b      	bmi.n	800450c <_printf_common+0xb0>
 80044b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044b8:	4641      	mov	r1, r8
 80044ba:	4638      	mov	r0, r7
 80044bc:	47c8      	blx	r9
 80044be:	3001      	adds	r0, #1
 80044c0:	d01e      	beq.n	8004500 <_printf_common+0xa4>
 80044c2:	6823      	ldr	r3, [r4, #0]
 80044c4:	6922      	ldr	r2, [r4, #16]
 80044c6:	f003 0306 	and.w	r3, r3, #6
 80044ca:	2b04      	cmp	r3, #4
 80044cc:	bf02      	ittt	eq
 80044ce:	68e5      	ldreq	r5, [r4, #12]
 80044d0:	6833      	ldreq	r3, [r6, #0]
 80044d2:	1aed      	subeq	r5, r5, r3
 80044d4:	68a3      	ldr	r3, [r4, #8]
 80044d6:	bf0c      	ite	eq
 80044d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80044dc:	2500      	movne	r5, #0
 80044de:	4293      	cmp	r3, r2
 80044e0:	bfc4      	itt	gt
 80044e2:	1a9b      	subgt	r3, r3, r2
 80044e4:	18ed      	addgt	r5, r5, r3
 80044e6:	2600      	movs	r6, #0
 80044e8:	341a      	adds	r4, #26
 80044ea:	42b5      	cmp	r5, r6
 80044ec:	d11a      	bne.n	8004524 <_printf_common+0xc8>
 80044ee:	2000      	movs	r0, #0
 80044f0:	e008      	b.n	8004504 <_printf_common+0xa8>
 80044f2:	2301      	movs	r3, #1
 80044f4:	4652      	mov	r2, sl
 80044f6:	4641      	mov	r1, r8
 80044f8:	4638      	mov	r0, r7
 80044fa:	47c8      	blx	r9
 80044fc:	3001      	adds	r0, #1
 80044fe:	d103      	bne.n	8004508 <_printf_common+0xac>
 8004500:	f04f 30ff 	mov.w	r0, #4294967295
 8004504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004508:	3501      	adds	r5, #1
 800450a:	e7c6      	b.n	800449a <_printf_common+0x3e>
 800450c:	18e1      	adds	r1, r4, r3
 800450e:	1c5a      	adds	r2, r3, #1
 8004510:	2030      	movs	r0, #48	@ 0x30
 8004512:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004516:	4422      	add	r2, r4
 8004518:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800451c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004520:	3302      	adds	r3, #2
 8004522:	e7c7      	b.n	80044b4 <_printf_common+0x58>
 8004524:	2301      	movs	r3, #1
 8004526:	4622      	mov	r2, r4
 8004528:	4641      	mov	r1, r8
 800452a:	4638      	mov	r0, r7
 800452c:	47c8      	blx	r9
 800452e:	3001      	adds	r0, #1
 8004530:	d0e6      	beq.n	8004500 <_printf_common+0xa4>
 8004532:	3601      	adds	r6, #1
 8004534:	e7d9      	b.n	80044ea <_printf_common+0x8e>
	...

08004538 <_printf_i>:
 8004538:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800453c:	7e0f      	ldrb	r7, [r1, #24]
 800453e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004540:	2f78      	cmp	r7, #120	@ 0x78
 8004542:	4691      	mov	r9, r2
 8004544:	4680      	mov	r8, r0
 8004546:	460c      	mov	r4, r1
 8004548:	469a      	mov	sl, r3
 800454a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800454e:	d807      	bhi.n	8004560 <_printf_i+0x28>
 8004550:	2f62      	cmp	r7, #98	@ 0x62
 8004552:	d80a      	bhi.n	800456a <_printf_i+0x32>
 8004554:	2f00      	cmp	r7, #0
 8004556:	f000 80d1 	beq.w	80046fc <_printf_i+0x1c4>
 800455a:	2f58      	cmp	r7, #88	@ 0x58
 800455c:	f000 80b8 	beq.w	80046d0 <_printf_i+0x198>
 8004560:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004564:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004568:	e03a      	b.n	80045e0 <_printf_i+0xa8>
 800456a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800456e:	2b15      	cmp	r3, #21
 8004570:	d8f6      	bhi.n	8004560 <_printf_i+0x28>
 8004572:	a101      	add	r1, pc, #4	@ (adr r1, 8004578 <_printf_i+0x40>)
 8004574:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004578:	080045d1 	.word	0x080045d1
 800457c:	080045e5 	.word	0x080045e5
 8004580:	08004561 	.word	0x08004561
 8004584:	08004561 	.word	0x08004561
 8004588:	08004561 	.word	0x08004561
 800458c:	08004561 	.word	0x08004561
 8004590:	080045e5 	.word	0x080045e5
 8004594:	08004561 	.word	0x08004561
 8004598:	08004561 	.word	0x08004561
 800459c:	08004561 	.word	0x08004561
 80045a0:	08004561 	.word	0x08004561
 80045a4:	080046e3 	.word	0x080046e3
 80045a8:	0800460f 	.word	0x0800460f
 80045ac:	0800469d 	.word	0x0800469d
 80045b0:	08004561 	.word	0x08004561
 80045b4:	08004561 	.word	0x08004561
 80045b8:	08004705 	.word	0x08004705
 80045bc:	08004561 	.word	0x08004561
 80045c0:	0800460f 	.word	0x0800460f
 80045c4:	08004561 	.word	0x08004561
 80045c8:	08004561 	.word	0x08004561
 80045cc:	080046a5 	.word	0x080046a5
 80045d0:	6833      	ldr	r3, [r6, #0]
 80045d2:	1d1a      	adds	r2, r3, #4
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	6032      	str	r2, [r6, #0]
 80045d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80045e0:	2301      	movs	r3, #1
 80045e2:	e09c      	b.n	800471e <_printf_i+0x1e6>
 80045e4:	6833      	ldr	r3, [r6, #0]
 80045e6:	6820      	ldr	r0, [r4, #0]
 80045e8:	1d19      	adds	r1, r3, #4
 80045ea:	6031      	str	r1, [r6, #0]
 80045ec:	0606      	lsls	r6, r0, #24
 80045ee:	d501      	bpl.n	80045f4 <_printf_i+0xbc>
 80045f0:	681d      	ldr	r5, [r3, #0]
 80045f2:	e003      	b.n	80045fc <_printf_i+0xc4>
 80045f4:	0645      	lsls	r5, r0, #25
 80045f6:	d5fb      	bpl.n	80045f0 <_printf_i+0xb8>
 80045f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045fc:	2d00      	cmp	r5, #0
 80045fe:	da03      	bge.n	8004608 <_printf_i+0xd0>
 8004600:	232d      	movs	r3, #45	@ 0x2d
 8004602:	426d      	negs	r5, r5
 8004604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004608:	4858      	ldr	r0, [pc, #352]	@ (800476c <_printf_i+0x234>)
 800460a:	230a      	movs	r3, #10
 800460c:	e011      	b.n	8004632 <_printf_i+0xfa>
 800460e:	6821      	ldr	r1, [r4, #0]
 8004610:	6833      	ldr	r3, [r6, #0]
 8004612:	0608      	lsls	r0, r1, #24
 8004614:	f853 5b04 	ldr.w	r5, [r3], #4
 8004618:	d402      	bmi.n	8004620 <_printf_i+0xe8>
 800461a:	0649      	lsls	r1, r1, #25
 800461c:	bf48      	it	mi
 800461e:	b2ad      	uxthmi	r5, r5
 8004620:	2f6f      	cmp	r7, #111	@ 0x6f
 8004622:	4852      	ldr	r0, [pc, #328]	@ (800476c <_printf_i+0x234>)
 8004624:	6033      	str	r3, [r6, #0]
 8004626:	bf14      	ite	ne
 8004628:	230a      	movne	r3, #10
 800462a:	2308      	moveq	r3, #8
 800462c:	2100      	movs	r1, #0
 800462e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004632:	6866      	ldr	r6, [r4, #4]
 8004634:	60a6      	str	r6, [r4, #8]
 8004636:	2e00      	cmp	r6, #0
 8004638:	db05      	blt.n	8004646 <_printf_i+0x10e>
 800463a:	6821      	ldr	r1, [r4, #0]
 800463c:	432e      	orrs	r6, r5
 800463e:	f021 0104 	bic.w	r1, r1, #4
 8004642:	6021      	str	r1, [r4, #0]
 8004644:	d04b      	beq.n	80046de <_printf_i+0x1a6>
 8004646:	4616      	mov	r6, r2
 8004648:	fbb5 f1f3 	udiv	r1, r5, r3
 800464c:	fb03 5711 	mls	r7, r3, r1, r5
 8004650:	5dc7      	ldrb	r7, [r0, r7]
 8004652:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004656:	462f      	mov	r7, r5
 8004658:	42bb      	cmp	r3, r7
 800465a:	460d      	mov	r5, r1
 800465c:	d9f4      	bls.n	8004648 <_printf_i+0x110>
 800465e:	2b08      	cmp	r3, #8
 8004660:	d10b      	bne.n	800467a <_printf_i+0x142>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	07df      	lsls	r7, r3, #31
 8004666:	d508      	bpl.n	800467a <_printf_i+0x142>
 8004668:	6923      	ldr	r3, [r4, #16]
 800466a:	6861      	ldr	r1, [r4, #4]
 800466c:	4299      	cmp	r1, r3
 800466e:	bfde      	ittt	le
 8004670:	2330      	movle	r3, #48	@ 0x30
 8004672:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004676:	f106 36ff 	addle.w	r6, r6, #4294967295
 800467a:	1b92      	subs	r2, r2, r6
 800467c:	6122      	str	r2, [r4, #16]
 800467e:	f8cd a000 	str.w	sl, [sp]
 8004682:	464b      	mov	r3, r9
 8004684:	aa03      	add	r2, sp, #12
 8004686:	4621      	mov	r1, r4
 8004688:	4640      	mov	r0, r8
 800468a:	f7ff fee7 	bl	800445c <_printf_common>
 800468e:	3001      	adds	r0, #1
 8004690:	d14a      	bne.n	8004728 <_printf_i+0x1f0>
 8004692:	f04f 30ff 	mov.w	r0, #4294967295
 8004696:	b004      	add	sp, #16
 8004698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800469c:	6823      	ldr	r3, [r4, #0]
 800469e:	f043 0320 	orr.w	r3, r3, #32
 80046a2:	6023      	str	r3, [r4, #0]
 80046a4:	4832      	ldr	r0, [pc, #200]	@ (8004770 <_printf_i+0x238>)
 80046a6:	2778      	movs	r7, #120	@ 0x78
 80046a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046ac:	6823      	ldr	r3, [r4, #0]
 80046ae:	6831      	ldr	r1, [r6, #0]
 80046b0:	061f      	lsls	r7, r3, #24
 80046b2:	f851 5b04 	ldr.w	r5, [r1], #4
 80046b6:	d402      	bmi.n	80046be <_printf_i+0x186>
 80046b8:	065f      	lsls	r7, r3, #25
 80046ba:	bf48      	it	mi
 80046bc:	b2ad      	uxthmi	r5, r5
 80046be:	6031      	str	r1, [r6, #0]
 80046c0:	07d9      	lsls	r1, r3, #31
 80046c2:	bf44      	itt	mi
 80046c4:	f043 0320 	orrmi.w	r3, r3, #32
 80046c8:	6023      	strmi	r3, [r4, #0]
 80046ca:	b11d      	cbz	r5, 80046d4 <_printf_i+0x19c>
 80046cc:	2310      	movs	r3, #16
 80046ce:	e7ad      	b.n	800462c <_printf_i+0xf4>
 80046d0:	4826      	ldr	r0, [pc, #152]	@ (800476c <_printf_i+0x234>)
 80046d2:	e7e9      	b.n	80046a8 <_printf_i+0x170>
 80046d4:	6823      	ldr	r3, [r4, #0]
 80046d6:	f023 0320 	bic.w	r3, r3, #32
 80046da:	6023      	str	r3, [r4, #0]
 80046dc:	e7f6      	b.n	80046cc <_printf_i+0x194>
 80046de:	4616      	mov	r6, r2
 80046e0:	e7bd      	b.n	800465e <_printf_i+0x126>
 80046e2:	6833      	ldr	r3, [r6, #0]
 80046e4:	6825      	ldr	r5, [r4, #0]
 80046e6:	6961      	ldr	r1, [r4, #20]
 80046e8:	1d18      	adds	r0, r3, #4
 80046ea:	6030      	str	r0, [r6, #0]
 80046ec:	062e      	lsls	r6, r5, #24
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	d501      	bpl.n	80046f6 <_printf_i+0x1be>
 80046f2:	6019      	str	r1, [r3, #0]
 80046f4:	e002      	b.n	80046fc <_printf_i+0x1c4>
 80046f6:	0668      	lsls	r0, r5, #25
 80046f8:	d5fb      	bpl.n	80046f2 <_printf_i+0x1ba>
 80046fa:	8019      	strh	r1, [r3, #0]
 80046fc:	2300      	movs	r3, #0
 80046fe:	6123      	str	r3, [r4, #16]
 8004700:	4616      	mov	r6, r2
 8004702:	e7bc      	b.n	800467e <_printf_i+0x146>
 8004704:	6833      	ldr	r3, [r6, #0]
 8004706:	1d1a      	adds	r2, r3, #4
 8004708:	6032      	str	r2, [r6, #0]
 800470a:	681e      	ldr	r6, [r3, #0]
 800470c:	6862      	ldr	r2, [r4, #4]
 800470e:	2100      	movs	r1, #0
 8004710:	4630      	mov	r0, r6
 8004712:	f7fb fd7d 	bl	8000210 <memchr>
 8004716:	b108      	cbz	r0, 800471c <_printf_i+0x1e4>
 8004718:	1b80      	subs	r0, r0, r6
 800471a:	6060      	str	r0, [r4, #4]
 800471c:	6863      	ldr	r3, [r4, #4]
 800471e:	6123      	str	r3, [r4, #16]
 8004720:	2300      	movs	r3, #0
 8004722:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004726:	e7aa      	b.n	800467e <_printf_i+0x146>
 8004728:	6923      	ldr	r3, [r4, #16]
 800472a:	4632      	mov	r2, r6
 800472c:	4649      	mov	r1, r9
 800472e:	4640      	mov	r0, r8
 8004730:	47d0      	blx	sl
 8004732:	3001      	adds	r0, #1
 8004734:	d0ad      	beq.n	8004692 <_printf_i+0x15a>
 8004736:	6823      	ldr	r3, [r4, #0]
 8004738:	079b      	lsls	r3, r3, #30
 800473a:	d413      	bmi.n	8004764 <_printf_i+0x22c>
 800473c:	68e0      	ldr	r0, [r4, #12]
 800473e:	9b03      	ldr	r3, [sp, #12]
 8004740:	4298      	cmp	r0, r3
 8004742:	bfb8      	it	lt
 8004744:	4618      	movlt	r0, r3
 8004746:	e7a6      	b.n	8004696 <_printf_i+0x15e>
 8004748:	2301      	movs	r3, #1
 800474a:	4632      	mov	r2, r6
 800474c:	4649      	mov	r1, r9
 800474e:	4640      	mov	r0, r8
 8004750:	47d0      	blx	sl
 8004752:	3001      	adds	r0, #1
 8004754:	d09d      	beq.n	8004692 <_printf_i+0x15a>
 8004756:	3501      	adds	r5, #1
 8004758:	68e3      	ldr	r3, [r4, #12]
 800475a:	9903      	ldr	r1, [sp, #12]
 800475c:	1a5b      	subs	r3, r3, r1
 800475e:	42ab      	cmp	r3, r5
 8004760:	dcf2      	bgt.n	8004748 <_printf_i+0x210>
 8004762:	e7eb      	b.n	800473c <_printf_i+0x204>
 8004764:	2500      	movs	r5, #0
 8004766:	f104 0619 	add.w	r6, r4, #25
 800476a:	e7f5      	b.n	8004758 <_printf_i+0x220>
 800476c:	0800863e 	.word	0x0800863e
 8004770:	0800864f 	.word	0x0800864f

08004774 <_scanf_float>:
 8004774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004778:	b087      	sub	sp, #28
 800477a:	4691      	mov	r9, r2
 800477c:	9303      	str	r3, [sp, #12]
 800477e:	688b      	ldr	r3, [r1, #8]
 8004780:	1e5a      	subs	r2, r3, #1
 8004782:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004786:	bf81      	itttt	hi
 8004788:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800478c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004790:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004794:	608b      	strhi	r3, [r1, #8]
 8004796:	680b      	ldr	r3, [r1, #0]
 8004798:	460a      	mov	r2, r1
 800479a:	f04f 0500 	mov.w	r5, #0
 800479e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80047a2:	f842 3b1c 	str.w	r3, [r2], #28
 80047a6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80047aa:	4680      	mov	r8, r0
 80047ac:	460c      	mov	r4, r1
 80047ae:	bf98      	it	ls
 80047b0:	f04f 0b00 	movls.w	fp, #0
 80047b4:	9201      	str	r2, [sp, #4]
 80047b6:	4616      	mov	r6, r2
 80047b8:	46aa      	mov	sl, r5
 80047ba:	462f      	mov	r7, r5
 80047bc:	9502      	str	r5, [sp, #8]
 80047be:	68a2      	ldr	r2, [r4, #8]
 80047c0:	b15a      	cbz	r2, 80047da <_scanf_float+0x66>
 80047c2:	f8d9 3000 	ldr.w	r3, [r9]
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b4e      	cmp	r3, #78	@ 0x4e
 80047ca:	d863      	bhi.n	8004894 <_scanf_float+0x120>
 80047cc:	2b40      	cmp	r3, #64	@ 0x40
 80047ce:	d83b      	bhi.n	8004848 <_scanf_float+0xd4>
 80047d0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80047d4:	b2c8      	uxtb	r0, r1
 80047d6:	280e      	cmp	r0, #14
 80047d8:	d939      	bls.n	800484e <_scanf_float+0xda>
 80047da:	b11f      	cbz	r7, 80047e4 <_scanf_float+0x70>
 80047dc:	6823      	ldr	r3, [r4, #0]
 80047de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80047e2:	6023      	str	r3, [r4, #0]
 80047e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80047e8:	f1ba 0f01 	cmp.w	sl, #1
 80047ec:	f200 8114 	bhi.w	8004a18 <_scanf_float+0x2a4>
 80047f0:	9b01      	ldr	r3, [sp, #4]
 80047f2:	429e      	cmp	r6, r3
 80047f4:	f200 8105 	bhi.w	8004a02 <_scanf_float+0x28e>
 80047f8:	2001      	movs	r0, #1
 80047fa:	b007      	add	sp, #28
 80047fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004800:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004804:	2a0d      	cmp	r2, #13
 8004806:	d8e8      	bhi.n	80047da <_scanf_float+0x66>
 8004808:	a101      	add	r1, pc, #4	@ (adr r1, 8004810 <_scanf_float+0x9c>)
 800480a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800480e:	bf00      	nop
 8004810:	08004959 	.word	0x08004959
 8004814:	080047db 	.word	0x080047db
 8004818:	080047db 	.word	0x080047db
 800481c:	080047db 	.word	0x080047db
 8004820:	080049b5 	.word	0x080049b5
 8004824:	0800498f 	.word	0x0800498f
 8004828:	080047db 	.word	0x080047db
 800482c:	080047db 	.word	0x080047db
 8004830:	08004967 	.word	0x08004967
 8004834:	080047db 	.word	0x080047db
 8004838:	080047db 	.word	0x080047db
 800483c:	080047db 	.word	0x080047db
 8004840:	080047db 	.word	0x080047db
 8004844:	08004923 	.word	0x08004923
 8004848:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800484c:	e7da      	b.n	8004804 <_scanf_float+0x90>
 800484e:	290e      	cmp	r1, #14
 8004850:	d8c3      	bhi.n	80047da <_scanf_float+0x66>
 8004852:	a001      	add	r0, pc, #4	@ (adr r0, 8004858 <_scanf_float+0xe4>)
 8004854:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004858:	08004913 	.word	0x08004913
 800485c:	080047db 	.word	0x080047db
 8004860:	08004913 	.word	0x08004913
 8004864:	080049a3 	.word	0x080049a3
 8004868:	080047db 	.word	0x080047db
 800486c:	080048b5 	.word	0x080048b5
 8004870:	080048f9 	.word	0x080048f9
 8004874:	080048f9 	.word	0x080048f9
 8004878:	080048f9 	.word	0x080048f9
 800487c:	080048f9 	.word	0x080048f9
 8004880:	080048f9 	.word	0x080048f9
 8004884:	080048f9 	.word	0x080048f9
 8004888:	080048f9 	.word	0x080048f9
 800488c:	080048f9 	.word	0x080048f9
 8004890:	080048f9 	.word	0x080048f9
 8004894:	2b6e      	cmp	r3, #110	@ 0x6e
 8004896:	d809      	bhi.n	80048ac <_scanf_float+0x138>
 8004898:	2b60      	cmp	r3, #96	@ 0x60
 800489a:	d8b1      	bhi.n	8004800 <_scanf_float+0x8c>
 800489c:	2b54      	cmp	r3, #84	@ 0x54
 800489e:	d07b      	beq.n	8004998 <_scanf_float+0x224>
 80048a0:	2b59      	cmp	r3, #89	@ 0x59
 80048a2:	d19a      	bne.n	80047da <_scanf_float+0x66>
 80048a4:	2d07      	cmp	r5, #7
 80048a6:	d198      	bne.n	80047da <_scanf_float+0x66>
 80048a8:	2508      	movs	r5, #8
 80048aa:	e02f      	b.n	800490c <_scanf_float+0x198>
 80048ac:	2b74      	cmp	r3, #116	@ 0x74
 80048ae:	d073      	beq.n	8004998 <_scanf_float+0x224>
 80048b0:	2b79      	cmp	r3, #121	@ 0x79
 80048b2:	e7f6      	b.n	80048a2 <_scanf_float+0x12e>
 80048b4:	6821      	ldr	r1, [r4, #0]
 80048b6:	05c8      	lsls	r0, r1, #23
 80048b8:	d51e      	bpl.n	80048f8 <_scanf_float+0x184>
 80048ba:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80048be:	6021      	str	r1, [r4, #0]
 80048c0:	3701      	adds	r7, #1
 80048c2:	f1bb 0f00 	cmp.w	fp, #0
 80048c6:	d003      	beq.n	80048d0 <_scanf_float+0x15c>
 80048c8:	3201      	adds	r2, #1
 80048ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 80048ce:	60a2      	str	r2, [r4, #8]
 80048d0:	68a3      	ldr	r3, [r4, #8]
 80048d2:	3b01      	subs	r3, #1
 80048d4:	60a3      	str	r3, [r4, #8]
 80048d6:	6923      	ldr	r3, [r4, #16]
 80048d8:	3301      	adds	r3, #1
 80048da:	6123      	str	r3, [r4, #16]
 80048dc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80048e0:	3b01      	subs	r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	f8c9 3004 	str.w	r3, [r9, #4]
 80048e8:	f340 8082 	ble.w	80049f0 <_scanf_float+0x27c>
 80048ec:	f8d9 3000 	ldr.w	r3, [r9]
 80048f0:	3301      	adds	r3, #1
 80048f2:	f8c9 3000 	str.w	r3, [r9]
 80048f6:	e762      	b.n	80047be <_scanf_float+0x4a>
 80048f8:	eb1a 0105 	adds.w	r1, sl, r5
 80048fc:	f47f af6d 	bne.w	80047da <_scanf_float+0x66>
 8004900:	6822      	ldr	r2, [r4, #0]
 8004902:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004906:	6022      	str	r2, [r4, #0]
 8004908:	460d      	mov	r5, r1
 800490a:	468a      	mov	sl, r1
 800490c:	f806 3b01 	strb.w	r3, [r6], #1
 8004910:	e7de      	b.n	80048d0 <_scanf_float+0x15c>
 8004912:	6822      	ldr	r2, [r4, #0]
 8004914:	0610      	lsls	r0, r2, #24
 8004916:	f57f af60 	bpl.w	80047da <_scanf_float+0x66>
 800491a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800491e:	6022      	str	r2, [r4, #0]
 8004920:	e7f4      	b.n	800490c <_scanf_float+0x198>
 8004922:	f1ba 0f00 	cmp.w	sl, #0
 8004926:	d10c      	bne.n	8004942 <_scanf_float+0x1ce>
 8004928:	b977      	cbnz	r7, 8004948 <_scanf_float+0x1d4>
 800492a:	6822      	ldr	r2, [r4, #0]
 800492c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004930:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004934:	d108      	bne.n	8004948 <_scanf_float+0x1d4>
 8004936:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800493a:	6022      	str	r2, [r4, #0]
 800493c:	f04f 0a01 	mov.w	sl, #1
 8004940:	e7e4      	b.n	800490c <_scanf_float+0x198>
 8004942:	f1ba 0f02 	cmp.w	sl, #2
 8004946:	d050      	beq.n	80049ea <_scanf_float+0x276>
 8004948:	2d01      	cmp	r5, #1
 800494a:	d002      	beq.n	8004952 <_scanf_float+0x1de>
 800494c:	2d04      	cmp	r5, #4
 800494e:	f47f af44 	bne.w	80047da <_scanf_float+0x66>
 8004952:	3501      	adds	r5, #1
 8004954:	b2ed      	uxtb	r5, r5
 8004956:	e7d9      	b.n	800490c <_scanf_float+0x198>
 8004958:	f1ba 0f01 	cmp.w	sl, #1
 800495c:	f47f af3d 	bne.w	80047da <_scanf_float+0x66>
 8004960:	f04f 0a02 	mov.w	sl, #2
 8004964:	e7d2      	b.n	800490c <_scanf_float+0x198>
 8004966:	b975      	cbnz	r5, 8004986 <_scanf_float+0x212>
 8004968:	2f00      	cmp	r7, #0
 800496a:	f47f af37 	bne.w	80047dc <_scanf_float+0x68>
 800496e:	6822      	ldr	r2, [r4, #0]
 8004970:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004974:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004978:	f040 8103 	bne.w	8004b82 <_scanf_float+0x40e>
 800497c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004980:	6022      	str	r2, [r4, #0]
 8004982:	2501      	movs	r5, #1
 8004984:	e7c2      	b.n	800490c <_scanf_float+0x198>
 8004986:	2d03      	cmp	r5, #3
 8004988:	d0e3      	beq.n	8004952 <_scanf_float+0x1de>
 800498a:	2d05      	cmp	r5, #5
 800498c:	e7df      	b.n	800494e <_scanf_float+0x1da>
 800498e:	2d02      	cmp	r5, #2
 8004990:	f47f af23 	bne.w	80047da <_scanf_float+0x66>
 8004994:	2503      	movs	r5, #3
 8004996:	e7b9      	b.n	800490c <_scanf_float+0x198>
 8004998:	2d06      	cmp	r5, #6
 800499a:	f47f af1e 	bne.w	80047da <_scanf_float+0x66>
 800499e:	2507      	movs	r5, #7
 80049a0:	e7b4      	b.n	800490c <_scanf_float+0x198>
 80049a2:	6822      	ldr	r2, [r4, #0]
 80049a4:	0591      	lsls	r1, r2, #22
 80049a6:	f57f af18 	bpl.w	80047da <_scanf_float+0x66>
 80049aa:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80049ae:	6022      	str	r2, [r4, #0]
 80049b0:	9702      	str	r7, [sp, #8]
 80049b2:	e7ab      	b.n	800490c <_scanf_float+0x198>
 80049b4:	6822      	ldr	r2, [r4, #0]
 80049b6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80049ba:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80049be:	d005      	beq.n	80049cc <_scanf_float+0x258>
 80049c0:	0550      	lsls	r0, r2, #21
 80049c2:	f57f af0a 	bpl.w	80047da <_scanf_float+0x66>
 80049c6:	2f00      	cmp	r7, #0
 80049c8:	f000 80db 	beq.w	8004b82 <_scanf_float+0x40e>
 80049cc:	0591      	lsls	r1, r2, #22
 80049ce:	bf58      	it	pl
 80049d0:	9902      	ldrpl	r1, [sp, #8]
 80049d2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80049d6:	bf58      	it	pl
 80049d8:	1a79      	subpl	r1, r7, r1
 80049da:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80049de:	bf58      	it	pl
 80049e0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80049e4:	6022      	str	r2, [r4, #0]
 80049e6:	2700      	movs	r7, #0
 80049e8:	e790      	b.n	800490c <_scanf_float+0x198>
 80049ea:	f04f 0a03 	mov.w	sl, #3
 80049ee:	e78d      	b.n	800490c <_scanf_float+0x198>
 80049f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80049f4:	4649      	mov	r1, r9
 80049f6:	4640      	mov	r0, r8
 80049f8:	4798      	blx	r3
 80049fa:	2800      	cmp	r0, #0
 80049fc:	f43f aedf 	beq.w	80047be <_scanf_float+0x4a>
 8004a00:	e6eb      	b.n	80047da <_scanf_float+0x66>
 8004a02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a0a:	464a      	mov	r2, r9
 8004a0c:	4640      	mov	r0, r8
 8004a0e:	4798      	blx	r3
 8004a10:	6923      	ldr	r3, [r4, #16]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	6123      	str	r3, [r4, #16]
 8004a16:	e6eb      	b.n	80047f0 <_scanf_float+0x7c>
 8004a18:	1e6b      	subs	r3, r5, #1
 8004a1a:	2b06      	cmp	r3, #6
 8004a1c:	d824      	bhi.n	8004a68 <_scanf_float+0x2f4>
 8004a1e:	2d02      	cmp	r5, #2
 8004a20:	d836      	bhi.n	8004a90 <_scanf_float+0x31c>
 8004a22:	9b01      	ldr	r3, [sp, #4]
 8004a24:	429e      	cmp	r6, r3
 8004a26:	f67f aee7 	bls.w	80047f8 <_scanf_float+0x84>
 8004a2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a32:	464a      	mov	r2, r9
 8004a34:	4640      	mov	r0, r8
 8004a36:	4798      	blx	r3
 8004a38:	6923      	ldr	r3, [r4, #16]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	6123      	str	r3, [r4, #16]
 8004a3e:	e7f0      	b.n	8004a22 <_scanf_float+0x2ae>
 8004a40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a44:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004a48:	464a      	mov	r2, r9
 8004a4a:	4640      	mov	r0, r8
 8004a4c:	4798      	blx	r3
 8004a4e:	6923      	ldr	r3, [r4, #16]
 8004a50:	3b01      	subs	r3, #1
 8004a52:	6123      	str	r3, [r4, #16]
 8004a54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a58:	fa5f fa8a 	uxtb.w	sl, sl
 8004a5c:	f1ba 0f02 	cmp.w	sl, #2
 8004a60:	d1ee      	bne.n	8004a40 <_scanf_float+0x2cc>
 8004a62:	3d03      	subs	r5, #3
 8004a64:	b2ed      	uxtb	r5, r5
 8004a66:	1b76      	subs	r6, r6, r5
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	05da      	lsls	r2, r3, #23
 8004a6c:	d530      	bpl.n	8004ad0 <_scanf_float+0x35c>
 8004a6e:	055b      	lsls	r3, r3, #21
 8004a70:	d511      	bpl.n	8004a96 <_scanf_float+0x322>
 8004a72:	9b01      	ldr	r3, [sp, #4]
 8004a74:	429e      	cmp	r6, r3
 8004a76:	f67f aebf 	bls.w	80047f8 <_scanf_float+0x84>
 8004a7a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004a7e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004a82:	464a      	mov	r2, r9
 8004a84:	4640      	mov	r0, r8
 8004a86:	4798      	blx	r3
 8004a88:	6923      	ldr	r3, [r4, #16]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	6123      	str	r3, [r4, #16]
 8004a8e:	e7f0      	b.n	8004a72 <_scanf_float+0x2fe>
 8004a90:	46aa      	mov	sl, r5
 8004a92:	46b3      	mov	fp, r6
 8004a94:	e7de      	b.n	8004a54 <_scanf_float+0x2e0>
 8004a96:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004a9a:	6923      	ldr	r3, [r4, #16]
 8004a9c:	2965      	cmp	r1, #101	@ 0x65
 8004a9e:	f103 33ff 	add.w	r3, r3, #4294967295
 8004aa2:	f106 35ff 	add.w	r5, r6, #4294967295
 8004aa6:	6123      	str	r3, [r4, #16]
 8004aa8:	d00c      	beq.n	8004ac4 <_scanf_float+0x350>
 8004aaa:	2945      	cmp	r1, #69	@ 0x45
 8004aac:	d00a      	beq.n	8004ac4 <_scanf_float+0x350>
 8004aae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ab2:	464a      	mov	r2, r9
 8004ab4:	4640      	mov	r0, r8
 8004ab6:	4798      	blx	r3
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	1eb5      	subs	r5, r6, #2
 8004ac2:	6123      	str	r3, [r4, #16]
 8004ac4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004ac8:	464a      	mov	r2, r9
 8004aca:	4640      	mov	r0, r8
 8004acc:	4798      	blx	r3
 8004ace:	462e      	mov	r6, r5
 8004ad0:	6822      	ldr	r2, [r4, #0]
 8004ad2:	f012 0210 	ands.w	r2, r2, #16
 8004ad6:	d001      	beq.n	8004adc <_scanf_float+0x368>
 8004ad8:	2000      	movs	r0, #0
 8004ada:	e68e      	b.n	80047fa <_scanf_float+0x86>
 8004adc:	7032      	strb	r2, [r6, #0]
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004ae4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ae8:	d125      	bne.n	8004b36 <_scanf_float+0x3c2>
 8004aea:	9b02      	ldr	r3, [sp, #8]
 8004aec:	429f      	cmp	r7, r3
 8004aee:	d00a      	beq.n	8004b06 <_scanf_float+0x392>
 8004af0:	1bda      	subs	r2, r3, r7
 8004af2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8004af6:	429e      	cmp	r6, r3
 8004af8:	bf28      	it	cs
 8004afa:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8004afe:	4922      	ldr	r1, [pc, #136]	@ (8004b88 <_scanf_float+0x414>)
 8004b00:	4630      	mov	r0, r6
 8004b02:	f000 f919 	bl	8004d38 <siprintf>
 8004b06:	9901      	ldr	r1, [sp, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f002 fc04 	bl	8007318 <_strtod_r>
 8004b10:	9b03      	ldr	r3, [sp, #12]
 8004b12:	6821      	ldr	r1, [r4, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f011 0f02 	tst.w	r1, #2
 8004b1a:	ec57 6b10 	vmov	r6, r7, d0
 8004b1e:	f103 0204 	add.w	r2, r3, #4
 8004b22:	d015      	beq.n	8004b50 <_scanf_float+0x3dc>
 8004b24:	9903      	ldr	r1, [sp, #12]
 8004b26:	600a      	str	r2, [r1, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	e9c3 6700 	strd	r6, r7, [r3]
 8004b2e:	68e3      	ldr	r3, [r4, #12]
 8004b30:	3301      	adds	r3, #1
 8004b32:	60e3      	str	r3, [r4, #12]
 8004b34:	e7d0      	b.n	8004ad8 <_scanf_float+0x364>
 8004b36:	9b04      	ldr	r3, [sp, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0e4      	beq.n	8004b06 <_scanf_float+0x392>
 8004b3c:	9905      	ldr	r1, [sp, #20]
 8004b3e:	230a      	movs	r3, #10
 8004b40:	3101      	adds	r1, #1
 8004b42:	4640      	mov	r0, r8
 8004b44:	f002 fc68 	bl	8007418 <_strtol_r>
 8004b48:	9b04      	ldr	r3, [sp, #16]
 8004b4a:	9e05      	ldr	r6, [sp, #20]
 8004b4c:	1ac2      	subs	r2, r0, r3
 8004b4e:	e7d0      	b.n	8004af2 <_scanf_float+0x37e>
 8004b50:	f011 0f04 	tst.w	r1, #4
 8004b54:	9903      	ldr	r1, [sp, #12]
 8004b56:	600a      	str	r2, [r1, #0]
 8004b58:	d1e6      	bne.n	8004b28 <_scanf_float+0x3b4>
 8004b5a:	681d      	ldr	r5, [r3, #0]
 8004b5c:	4632      	mov	r2, r6
 8004b5e:	463b      	mov	r3, r7
 8004b60:	4630      	mov	r0, r6
 8004b62:	4639      	mov	r1, r7
 8004b64:	f7fc f802 	bl	8000b6c <__aeabi_dcmpun>
 8004b68:	b128      	cbz	r0, 8004b76 <_scanf_float+0x402>
 8004b6a:	4808      	ldr	r0, [pc, #32]	@ (8004b8c <_scanf_float+0x418>)
 8004b6c:	f000 f9ca 	bl	8004f04 <nanf>
 8004b70:	ed85 0a00 	vstr	s0, [r5]
 8004b74:	e7db      	b.n	8004b2e <_scanf_float+0x3ba>
 8004b76:	4630      	mov	r0, r6
 8004b78:	4639      	mov	r1, r7
 8004b7a:	f7fc f855 	bl	8000c28 <__aeabi_d2f>
 8004b7e:	6028      	str	r0, [r5, #0]
 8004b80:	e7d5      	b.n	8004b2e <_scanf_float+0x3ba>
 8004b82:	2700      	movs	r7, #0
 8004b84:	e62e      	b.n	80047e4 <_scanf_float+0x70>
 8004b86:	bf00      	nop
 8004b88:	08008660 	.word	0x08008660
 8004b8c:	080087a1 	.word	0x080087a1

08004b90 <std>:
 8004b90:	2300      	movs	r3, #0
 8004b92:	b510      	push	{r4, lr}
 8004b94:	4604      	mov	r4, r0
 8004b96:	e9c0 3300 	strd	r3, r3, [r0]
 8004b9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004b9e:	6083      	str	r3, [r0, #8]
 8004ba0:	8181      	strh	r1, [r0, #12]
 8004ba2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ba4:	81c2      	strh	r2, [r0, #14]
 8004ba6:	6183      	str	r3, [r0, #24]
 8004ba8:	4619      	mov	r1, r3
 8004baa:	2208      	movs	r2, #8
 8004bac:	305c      	adds	r0, #92	@ 0x5c
 8004bae:	f000 f928 	bl	8004e02 <memset>
 8004bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004be8 <std+0x58>)
 8004bb4:	6263      	str	r3, [r4, #36]	@ 0x24
 8004bb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bec <std+0x5c>)
 8004bb8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <std+0x60>)
 8004bbc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <std+0x64>)
 8004bc0:	6323      	str	r3, [r4, #48]	@ 0x30
 8004bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf8 <std+0x68>)
 8004bc4:	6224      	str	r4, [r4, #32]
 8004bc6:	429c      	cmp	r4, r3
 8004bc8:	d006      	beq.n	8004bd8 <std+0x48>
 8004bca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004bce:	4294      	cmp	r4, r2
 8004bd0:	d002      	beq.n	8004bd8 <std+0x48>
 8004bd2:	33d0      	adds	r3, #208	@ 0xd0
 8004bd4:	429c      	cmp	r4, r3
 8004bd6:	d105      	bne.n	8004be4 <std+0x54>
 8004bd8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004bdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be0:	f000 b98c 	b.w	8004efc <__retarget_lock_init_recursive>
 8004be4:	bd10      	pop	{r4, pc}
 8004be6:	bf00      	nop
 8004be8:	08004d7d 	.word	0x08004d7d
 8004bec:	08004d9f 	.word	0x08004d9f
 8004bf0:	08004dd7 	.word	0x08004dd7
 8004bf4:	08004dfb 	.word	0x08004dfb
 8004bf8:	2000039c 	.word	0x2000039c

08004bfc <stdio_exit_handler>:
 8004bfc:	4a02      	ldr	r2, [pc, #8]	@ (8004c08 <stdio_exit_handler+0xc>)
 8004bfe:	4903      	ldr	r1, [pc, #12]	@ (8004c0c <stdio_exit_handler+0x10>)
 8004c00:	4803      	ldr	r0, [pc, #12]	@ (8004c10 <stdio_exit_handler+0x14>)
 8004c02:	f000 b869 	b.w	8004cd8 <_fwalk_sglue>
 8004c06:	bf00      	nop
 8004c08:	2000000c 	.word	0x2000000c
 8004c0c:	08007a59 	.word	0x08007a59
 8004c10:	2000001c 	.word	0x2000001c

08004c14 <cleanup_stdio>:
 8004c14:	6841      	ldr	r1, [r0, #4]
 8004c16:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <cleanup_stdio+0x34>)
 8004c18:	4299      	cmp	r1, r3
 8004c1a:	b510      	push	{r4, lr}
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	d001      	beq.n	8004c24 <cleanup_stdio+0x10>
 8004c20:	f002 ff1a 	bl	8007a58 <_fflush_r>
 8004c24:	68a1      	ldr	r1, [r4, #8]
 8004c26:	4b09      	ldr	r3, [pc, #36]	@ (8004c4c <cleanup_stdio+0x38>)
 8004c28:	4299      	cmp	r1, r3
 8004c2a:	d002      	beq.n	8004c32 <cleanup_stdio+0x1e>
 8004c2c:	4620      	mov	r0, r4
 8004c2e:	f002 ff13 	bl	8007a58 <_fflush_r>
 8004c32:	68e1      	ldr	r1, [r4, #12]
 8004c34:	4b06      	ldr	r3, [pc, #24]	@ (8004c50 <cleanup_stdio+0x3c>)
 8004c36:	4299      	cmp	r1, r3
 8004c38:	d004      	beq.n	8004c44 <cleanup_stdio+0x30>
 8004c3a:	4620      	mov	r0, r4
 8004c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c40:	f002 bf0a 	b.w	8007a58 <_fflush_r>
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	bf00      	nop
 8004c48:	2000039c 	.word	0x2000039c
 8004c4c:	20000404 	.word	0x20000404
 8004c50:	2000046c 	.word	0x2000046c

08004c54 <global_stdio_init.part.0>:
 8004c54:	b510      	push	{r4, lr}
 8004c56:	4b0b      	ldr	r3, [pc, #44]	@ (8004c84 <global_stdio_init.part.0+0x30>)
 8004c58:	4c0b      	ldr	r4, [pc, #44]	@ (8004c88 <global_stdio_init.part.0+0x34>)
 8004c5a:	4a0c      	ldr	r2, [pc, #48]	@ (8004c8c <global_stdio_init.part.0+0x38>)
 8004c5c:	601a      	str	r2, [r3, #0]
 8004c5e:	4620      	mov	r0, r4
 8004c60:	2200      	movs	r2, #0
 8004c62:	2104      	movs	r1, #4
 8004c64:	f7ff ff94 	bl	8004b90 <std>
 8004c68:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	2109      	movs	r1, #9
 8004c70:	f7ff ff8e 	bl	8004b90 <std>
 8004c74:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004c78:	2202      	movs	r2, #2
 8004c7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c7e:	2112      	movs	r1, #18
 8004c80:	f7ff bf86 	b.w	8004b90 <std>
 8004c84:	200004d4 	.word	0x200004d4
 8004c88:	2000039c 	.word	0x2000039c
 8004c8c:	08004bfd 	.word	0x08004bfd

08004c90 <__sfp_lock_acquire>:
 8004c90:	4801      	ldr	r0, [pc, #4]	@ (8004c98 <__sfp_lock_acquire+0x8>)
 8004c92:	f000 b934 	b.w	8004efe <__retarget_lock_acquire_recursive>
 8004c96:	bf00      	nop
 8004c98:	200004dd 	.word	0x200004dd

08004c9c <__sfp_lock_release>:
 8004c9c:	4801      	ldr	r0, [pc, #4]	@ (8004ca4 <__sfp_lock_release+0x8>)
 8004c9e:	f000 b92f 	b.w	8004f00 <__retarget_lock_release_recursive>
 8004ca2:	bf00      	nop
 8004ca4:	200004dd 	.word	0x200004dd

08004ca8 <__sinit>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4604      	mov	r4, r0
 8004cac:	f7ff fff0 	bl	8004c90 <__sfp_lock_acquire>
 8004cb0:	6a23      	ldr	r3, [r4, #32]
 8004cb2:	b11b      	cbz	r3, 8004cbc <__sinit+0x14>
 8004cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cb8:	f7ff bff0 	b.w	8004c9c <__sfp_lock_release>
 8004cbc:	4b04      	ldr	r3, [pc, #16]	@ (8004cd0 <__sinit+0x28>)
 8004cbe:	6223      	str	r3, [r4, #32]
 8004cc0:	4b04      	ldr	r3, [pc, #16]	@ (8004cd4 <__sinit+0x2c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f5      	bne.n	8004cb4 <__sinit+0xc>
 8004cc8:	f7ff ffc4 	bl	8004c54 <global_stdio_init.part.0>
 8004ccc:	e7f2      	b.n	8004cb4 <__sinit+0xc>
 8004cce:	bf00      	nop
 8004cd0:	08004c15 	.word	0x08004c15
 8004cd4:	200004d4 	.word	0x200004d4

08004cd8 <_fwalk_sglue>:
 8004cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004cdc:	4607      	mov	r7, r0
 8004cde:	4688      	mov	r8, r1
 8004ce0:	4614      	mov	r4, r2
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ce8:	f1b9 0901 	subs.w	r9, r9, #1
 8004cec:	d505      	bpl.n	8004cfa <_fwalk_sglue+0x22>
 8004cee:	6824      	ldr	r4, [r4, #0]
 8004cf0:	2c00      	cmp	r4, #0
 8004cf2:	d1f7      	bne.n	8004ce4 <_fwalk_sglue+0xc>
 8004cf4:	4630      	mov	r0, r6
 8004cf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004cfa:	89ab      	ldrh	r3, [r5, #12]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d907      	bls.n	8004d10 <_fwalk_sglue+0x38>
 8004d00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d04:	3301      	adds	r3, #1
 8004d06:	d003      	beq.n	8004d10 <_fwalk_sglue+0x38>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4638      	mov	r0, r7
 8004d0c:	47c0      	blx	r8
 8004d0e:	4306      	orrs	r6, r0
 8004d10:	3568      	adds	r5, #104	@ 0x68
 8004d12:	e7e9      	b.n	8004ce8 <_fwalk_sglue+0x10>

08004d14 <iprintf>:
 8004d14:	b40f      	push	{r0, r1, r2, r3}
 8004d16:	b507      	push	{r0, r1, r2, lr}
 8004d18:	4906      	ldr	r1, [pc, #24]	@ (8004d34 <iprintf+0x20>)
 8004d1a:	ab04      	add	r3, sp, #16
 8004d1c:	6808      	ldr	r0, [r1, #0]
 8004d1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d22:	6881      	ldr	r1, [r0, #8]
 8004d24:	9301      	str	r3, [sp, #4]
 8004d26:	f002 fcfb 	bl	8007720 <_vfiprintf_r>
 8004d2a:	b003      	add	sp, #12
 8004d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d30:	b004      	add	sp, #16
 8004d32:	4770      	bx	lr
 8004d34:	20000018 	.word	0x20000018

08004d38 <siprintf>:
 8004d38:	b40e      	push	{r1, r2, r3}
 8004d3a:	b510      	push	{r4, lr}
 8004d3c:	b09d      	sub	sp, #116	@ 0x74
 8004d3e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004d40:	9002      	str	r0, [sp, #8]
 8004d42:	9006      	str	r0, [sp, #24]
 8004d44:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d48:	480a      	ldr	r0, [pc, #40]	@ (8004d74 <siprintf+0x3c>)
 8004d4a:	9107      	str	r1, [sp, #28]
 8004d4c:	9104      	str	r1, [sp, #16]
 8004d4e:	490a      	ldr	r1, [pc, #40]	@ (8004d78 <siprintf+0x40>)
 8004d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d54:	9105      	str	r1, [sp, #20]
 8004d56:	2400      	movs	r4, #0
 8004d58:	a902      	add	r1, sp, #8
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004d60:	f002 fbb8 	bl	80074d4 <_svfiprintf_r>
 8004d64:	9b02      	ldr	r3, [sp, #8]
 8004d66:	701c      	strb	r4, [r3, #0]
 8004d68:	b01d      	add	sp, #116	@ 0x74
 8004d6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d6e:	b003      	add	sp, #12
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	20000018 	.word	0x20000018
 8004d78:	ffff0208 	.word	0xffff0208

08004d7c <__sread>:
 8004d7c:	b510      	push	{r4, lr}
 8004d7e:	460c      	mov	r4, r1
 8004d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d84:	f000 f86c 	bl	8004e60 <_read_r>
 8004d88:	2800      	cmp	r0, #0
 8004d8a:	bfab      	itete	ge
 8004d8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004d8e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d90:	181b      	addge	r3, r3, r0
 8004d92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004d96:	bfac      	ite	ge
 8004d98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004d9a:	81a3      	strhlt	r3, [r4, #12]
 8004d9c:	bd10      	pop	{r4, pc}

08004d9e <__swrite>:
 8004d9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004da2:	461f      	mov	r7, r3
 8004da4:	898b      	ldrh	r3, [r1, #12]
 8004da6:	05db      	lsls	r3, r3, #23
 8004da8:	4605      	mov	r5, r0
 8004daa:	460c      	mov	r4, r1
 8004dac:	4616      	mov	r6, r2
 8004dae:	d505      	bpl.n	8004dbc <__swrite+0x1e>
 8004db0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004db4:	2302      	movs	r3, #2
 8004db6:	2200      	movs	r2, #0
 8004db8:	f000 f840 	bl	8004e3c <_lseek_r>
 8004dbc:	89a3      	ldrh	r3, [r4, #12]
 8004dbe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dc2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004dc6:	81a3      	strh	r3, [r4, #12]
 8004dc8:	4632      	mov	r2, r6
 8004dca:	463b      	mov	r3, r7
 8004dcc:	4628      	mov	r0, r5
 8004dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd2:	f000 b857 	b.w	8004e84 <_write_r>

08004dd6 <__sseek>:
 8004dd6:	b510      	push	{r4, lr}
 8004dd8:	460c      	mov	r4, r1
 8004dda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dde:	f000 f82d 	bl	8004e3c <_lseek_r>
 8004de2:	1c43      	adds	r3, r0, #1
 8004de4:	89a3      	ldrh	r3, [r4, #12]
 8004de6:	bf15      	itete	ne
 8004de8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004dea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004dee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004df2:	81a3      	strheq	r3, [r4, #12]
 8004df4:	bf18      	it	ne
 8004df6:	81a3      	strhne	r3, [r4, #12]
 8004df8:	bd10      	pop	{r4, pc}

08004dfa <__sclose>:
 8004dfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfe:	f000 b80d 	b.w	8004e1c <_close_r>

08004e02 <memset>:
 8004e02:	4402      	add	r2, r0
 8004e04:	4603      	mov	r3, r0
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d100      	bne.n	8004e0c <memset+0xa>
 8004e0a:	4770      	bx	lr
 8004e0c:	f803 1b01 	strb.w	r1, [r3], #1
 8004e10:	e7f9      	b.n	8004e06 <memset+0x4>
	...

08004e14 <_localeconv_r>:
 8004e14:	4800      	ldr	r0, [pc, #0]	@ (8004e18 <_localeconv_r+0x4>)
 8004e16:	4770      	bx	lr
 8004e18:	20000158 	.word	0x20000158

08004e1c <_close_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4d06      	ldr	r5, [pc, #24]	@ (8004e38 <_close_r+0x1c>)
 8004e20:	2300      	movs	r3, #0
 8004e22:	4604      	mov	r4, r0
 8004e24:	4608      	mov	r0, r1
 8004e26:	602b      	str	r3, [r5, #0]
 8004e28:	f7fc fd54 	bl	80018d4 <_close>
 8004e2c:	1c43      	adds	r3, r0, #1
 8004e2e:	d102      	bne.n	8004e36 <_close_r+0x1a>
 8004e30:	682b      	ldr	r3, [r5, #0]
 8004e32:	b103      	cbz	r3, 8004e36 <_close_r+0x1a>
 8004e34:	6023      	str	r3, [r4, #0]
 8004e36:	bd38      	pop	{r3, r4, r5, pc}
 8004e38:	200004d8 	.word	0x200004d8

08004e3c <_lseek_r>:
 8004e3c:	b538      	push	{r3, r4, r5, lr}
 8004e3e:	4d07      	ldr	r5, [pc, #28]	@ (8004e5c <_lseek_r+0x20>)
 8004e40:	4604      	mov	r4, r0
 8004e42:	4608      	mov	r0, r1
 8004e44:	4611      	mov	r1, r2
 8004e46:	2200      	movs	r2, #0
 8004e48:	602a      	str	r2, [r5, #0]
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	f7fc fd69 	bl	8001922 <_lseek>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_lseek_r+0x1e>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_lseek_r+0x1e>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	200004d8 	.word	0x200004d8

08004e60 <_read_r>:
 8004e60:	b538      	push	{r3, r4, r5, lr}
 8004e62:	4d07      	ldr	r5, [pc, #28]	@ (8004e80 <_read_r+0x20>)
 8004e64:	4604      	mov	r4, r0
 8004e66:	4608      	mov	r0, r1
 8004e68:	4611      	mov	r1, r2
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	602a      	str	r2, [r5, #0]
 8004e6e:	461a      	mov	r2, r3
 8004e70:	f7fc fd13 	bl	800189a <_read>
 8004e74:	1c43      	adds	r3, r0, #1
 8004e76:	d102      	bne.n	8004e7e <_read_r+0x1e>
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	b103      	cbz	r3, 8004e7e <_read_r+0x1e>
 8004e7c:	6023      	str	r3, [r4, #0]
 8004e7e:	bd38      	pop	{r3, r4, r5, pc}
 8004e80:	200004d8 	.word	0x200004d8

08004e84 <_write_r>:
 8004e84:	b538      	push	{r3, r4, r5, lr}
 8004e86:	4d07      	ldr	r5, [pc, #28]	@ (8004ea4 <_write_r+0x20>)
 8004e88:	4604      	mov	r4, r0
 8004e8a:	4608      	mov	r0, r1
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	2200      	movs	r2, #0
 8004e90:	602a      	str	r2, [r5, #0]
 8004e92:	461a      	mov	r2, r3
 8004e94:	f7fc f9c4 	bl	8001220 <_write>
 8004e98:	1c43      	adds	r3, r0, #1
 8004e9a:	d102      	bne.n	8004ea2 <_write_r+0x1e>
 8004e9c:	682b      	ldr	r3, [r5, #0]
 8004e9e:	b103      	cbz	r3, 8004ea2 <_write_r+0x1e>
 8004ea0:	6023      	str	r3, [r4, #0]
 8004ea2:	bd38      	pop	{r3, r4, r5, pc}
 8004ea4:	200004d8 	.word	0x200004d8

08004ea8 <__errno>:
 8004ea8:	4b01      	ldr	r3, [pc, #4]	@ (8004eb0 <__errno+0x8>)
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	4770      	bx	lr
 8004eae:	bf00      	nop
 8004eb0:	20000018 	.word	0x20000018

08004eb4 <__libc_init_array>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4d0d      	ldr	r5, [pc, #52]	@ (8004eec <__libc_init_array+0x38>)
 8004eb8:	4c0d      	ldr	r4, [pc, #52]	@ (8004ef0 <__libc_init_array+0x3c>)
 8004eba:	1b64      	subs	r4, r4, r5
 8004ebc:	10a4      	asrs	r4, r4, #2
 8004ebe:	2600      	movs	r6, #0
 8004ec0:	42a6      	cmp	r6, r4
 8004ec2:	d109      	bne.n	8004ed8 <__libc_init_array+0x24>
 8004ec4:	4d0b      	ldr	r5, [pc, #44]	@ (8004ef4 <__libc_init_array+0x40>)
 8004ec6:	4c0c      	ldr	r4, [pc, #48]	@ (8004ef8 <__libc_init_array+0x44>)
 8004ec8:	f003 fb78 	bl	80085bc <_init>
 8004ecc:	1b64      	subs	r4, r4, r5
 8004ece:	10a4      	asrs	r4, r4, #2
 8004ed0:	2600      	movs	r6, #0
 8004ed2:	42a6      	cmp	r6, r4
 8004ed4:	d105      	bne.n	8004ee2 <__libc_init_array+0x2e>
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}
 8004ed8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004edc:	4798      	blx	r3
 8004ede:	3601      	adds	r6, #1
 8004ee0:	e7ee      	b.n	8004ec0 <__libc_init_array+0xc>
 8004ee2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ee6:	4798      	blx	r3
 8004ee8:	3601      	adds	r6, #1
 8004eea:	e7f2      	b.n	8004ed2 <__libc_init_array+0x1e>
 8004eec:	08008a5c 	.word	0x08008a5c
 8004ef0:	08008a5c 	.word	0x08008a5c
 8004ef4:	08008a5c 	.word	0x08008a5c
 8004ef8:	08008a60 	.word	0x08008a60

08004efc <__retarget_lock_init_recursive>:
 8004efc:	4770      	bx	lr

08004efe <__retarget_lock_acquire_recursive>:
 8004efe:	4770      	bx	lr

08004f00 <__retarget_lock_release_recursive>:
 8004f00:	4770      	bx	lr
	...

08004f04 <nanf>:
 8004f04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8004f0c <nanf+0x8>
 8004f08:	4770      	bx	lr
 8004f0a:	bf00      	nop
 8004f0c:	7fc00000 	.word	0x7fc00000

08004f10 <quorem>:
 8004f10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f14:	6903      	ldr	r3, [r0, #16]
 8004f16:	690c      	ldr	r4, [r1, #16]
 8004f18:	42a3      	cmp	r3, r4
 8004f1a:	4607      	mov	r7, r0
 8004f1c:	db7e      	blt.n	800501c <quorem+0x10c>
 8004f1e:	3c01      	subs	r4, #1
 8004f20:	f101 0814 	add.w	r8, r1, #20
 8004f24:	00a3      	lsls	r3, r4, #2
 8004f26:	f100 0514 	add.w	r5, r0, #20
 8004f2a:	9300      	str	r3, [sp, #0]
 8004f2c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f30:	9301      	str	r3, [sp, #4]
 8004f32:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f36:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f42:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f46:	d32e      	bcc.n	8004fa6 <quorem+0x96>
 8004f48:	f04f 0a00 	mov.w	sl, #0
 8004f4c:	46c4      	mov	ip, r8
 8004f4e:	46ae      	mov	lr, r5
 8004f50:	46d3      	mov	fp, sl
 8004f52:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004f56:	b298      	uxth	r0, r3
 8004f58:	fb06 a000 	mla	r0, r6, r0, sl
 8004f5c:	0c02      	lsrs	r2, r0, #16
 8004f5e:	0c1b      	lsrs	r3, r3, #16
 8004f60:	fb06 2303 	mla	r3, r6, r3, r2
 8004f64:	f8de 2000 	ldr.w	r2, [lr]
 8004f68:	b280      	uxth	r0, r0
 8004f6a:	b292      	uxth	r2, r2
 8004f6c:	1a12      	subs	r2, r2, r0
 8004f6e:	445a      	add	r2, fp
 8004f70:	f8de 0000 	ldr.w	r0, [lr]
 8004f74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004f7e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004f82:	b292      	uxth	r2, r2
 8004f84:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8004f88:	45e1      	cmp	r9, ip
 8004f8a:	f84e 2b04 	str.w	r2, [lr], #4
 8004f8e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8004f92:	d2de      	bcs.n	8004f52 <quorem+0x42>
 8004f94:	9b00      	ldr	r3, [sp, #0]
 8004f96:	58eb      	ldr	r3, [r5, r3]
 8004f98:	b92b      	cbnz	r3, 8004fa6 <quorem+0x96>
 8004f9a:	9b01      	ldr	r3, [sp, #4]
 8004f9c:	3b04      	subs	r3, #4
 8004f9e:	429d      	cmp	r5, r3
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	d32f      	bcc.n	8005004 <quorem+0xf4>
 8004fa4:	613c      	str	r4, [r7, #16]
 8004fa6:	4638      	mov	r0, r7
 8004fa8:	f001 f9c6 	bl	8006338 <__mcmp>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	db25      	blt.n	8004ffc <quorem+0xec>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	2000      	movs	r0, #0
 8004fb4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004fb8:	f8d1 c000 	ldr.w	ip, [r1]
 8004fbc:	fa1f fe82 	uxth.w	lr, r2
 8004fc0:	fa1f f38c 	uxth.w	r3, ip
 8004fc4:	eba3 030e 	sub.w	r3, r3, lr
 8004fc8:	4403      	add	r3, r0
 8004fca:	0c12      	lsrs	r2, r2, #16
 8004fcc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8004fd0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fda:	45c1      	cmp	r9, r8
 8004fdc:	f841 3b04 	str.w	r3, [r1], #4
 8004fe0:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004fe4:	d2e6      	bcs.n	8004fb4 <quorem+0xa4>
 8004fe6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fee:	b922      	cbnz	r2, 8004ffa <quorem+0xea>
 8004ff0:	3b04      	subs	r3, #4
 8004ff2:	429d      	cmp	r5, r3
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	d30b      	bcc.n	8005010 <quorem+0x100>
 8004ff8:	613c      	str	r4, [r7, #16]
 8004ffa:	3601      	adds	r6, #1
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	b003      	add	sp, #12
 8005000:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005004:	6812      	ldr	r2, [r2, #0]
 8005006:	3b04      	subs	r3, #4
 8005008:	2a00      	cmp	r2, #0
 800500a:	d1cb      	bne.n	8004fa4 <quorem+0x94>
 800500c:	3c01      	subs	r4, #1
 800500e:	e7c6      	b.n	8004f9e <quorem+0x8e>
 8005010:	6812      	ldr	r2, [r2, #0]
 8005012:	3b04      	subs	r3, #4
 8005014:	2a00      	cmp	r2, #0
 8005016:	d1ef      	bne.n	8004ff8 <quorem+0xe8>
 8005018:	3c01      	subs	r4, #1
 800501a:	e7ea      	b.n	8004ff2 <quorem+0xe2>
 800501c:	2000      	movs	r0, #0
 800501e:	e7ee      	b.n	8004ffe <quorem+0xee>

08005020 <_dtoa_r>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	69c7      	ldr	r7, [r0, #28]
 8005026:	b097      	sub	sp, #92	@ 0x5c
 8005028:	ed8d 0b04 	vstr	d0, [sp, #16]
 800502c:	ec55 4b10 	vmov	r4, r5, d0
 8005030:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005032:	9107      	str	r1, [sp, #28]
 8005034:	4681      	mov	r9, r0
 8005036:	920c      	str	r2, [sp, #48]	@ 0x30
 8005038:	9311      	str	r3, [sp, #68]	@ 0x44
 800503a:	b97f      	cbnz	r7, 800505c <_dtoa_r+0x3c>
 800503c:	2010      	movs	r0, #16
 800503e:	f000 fe09 	bl	8005c54 <malloc>
 8005042:	4602      	mov	r2, r0
 8005044:	f8c9 001c 	str.w	r0, [r9, #28]
 8005048:	b920      	cbnz	r0, 8005054 <_dtoa_r+0x34>
 800504a:	4ba9      	ldr	r3, [pc, #676]	@ (80052f0 <_dtoa_r+0x2d0>)
 800504c:	21ef      	movs	r1, #239	@ 0xef
 800504e:	48a9      	ldr	r0, [pc, #676]	@ (80052f4 <_dtoa_r+0x2d4>)
 8005050:	f002 fe12 	bl	8007c78 <__assert_func>
 8005054:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005058:	6007      	str	r7, [r0, #0]
 800505a:	60c7      	str	r7, [r0, #12]
 800505c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	b159      	cbz	r1, 800507c <_dtoa_r+0x5c>
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	604a      	str	r2, [r1, #4]
 8005068:	2301      	movs	r3, #1
 800506a:	4093      	lsls	r3, r2
 800506c:	608b      	str	r3, [r1, #8]
 800506e:	4648      	mov	r0, r9
 8005070:	f000 fee6 	bl	8005e40 <_Bfree>
 8005074:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
 800507c:	1e2b      	subs	r3, r5, #0
 800507e:	bfb9      	ittee	lt
 8005080:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005084:	9305      	strlt	r3, [sp, #20]
 8005086:	2300      	movge	r3, #0
 8005088:	6033      	strge	r3, [r6, #0]
 800508a:	9f05      	ldr	r7, [sp, #20]
 800508c:	4b9a      	ldr	r3, [pc, #616]	@ (80052f8 <_dtoa_r+0x2d8>)
 800508e:	bfbc      	itt	lt
 8005090:	2201      	movlt	r2, #1
 8005092:	6032      	strlt	r2, [r6, #0]
 8005094:	43bb      	bics	r3, r7
 8005096:	d112      	bne.n	80050be <_dtoa_r+0x9e>
 8005098:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800509a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80050a4:	4323      	orrs	r3, r4
 80050a6:	f000 855a 	beq.w	8005b5e <_dtoa_r+0xb3e>
 80050aa:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050ac:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800530c <_dtoa_r+0x2ec>
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 855c 	beq.w	8005b6e <_dtoa_r+0xb4e>
 80050b6:	f10a 0303 	add.w	r3, sl, #3
 80050ba:	f000 bd56 	b.w	8005b6a <_dtoa_r+0xb4a>
 80050be:	ed9d 7b04 	vldr	d7, [sp, #16]
 80050c2:	2200      	movs	r2, #0
 80050c4:	ec51 0b17 	vmov	r0, r1, d7
 80050c8:	2300      	movs	r3, #0
 80050ca:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80050ce:	f7fb fd1b 	bl	8000b08 <__aeabi_dcmpeq>
 80050d2:	4680      	mov	r8, r0
 80050d4:	b158      	cbz	r0, 80050ee <_dtoa_r+0xce>
 80050d6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80050d8:	2301      	movs	r3, #1
 80050da:	6013      	str	r3, [r2, #0]
 80050dc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80050de:	b113      	cbz	r3, 80050e6 <_dtoa_r+0xc6>
 80050e0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80050e2:	4b86      	ldr	r3, [pc, #536]	@ (80052fc <_dtoa_r+0x2dc>)
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005310 <_dtoa_r+0x2f0>
 80050ea:	f000 bd40 	b.w	8005b6e <_dtoa_r+0xb4e>
 80050ee:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80050f2:	aa14      	add	r2, sp, #80	@ 0x50
 80050f4:	a915      	add	r1, sp, #84	@ 0x54
 80050f6:	4648      	mov	r0, r9
 80050f8:	f001 fa3e 	bl	8006578 <__d2b>
 80050fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005100:	9002      	str	r0, [sp, #8]
 8005102:	2e00      	cmp	r6, #0
 8005104:	d078      	beq.n	80051f8 <_dtoa_r+0x1d8>
 8005106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005108:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800510c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005110:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005114:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005118:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800511c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005120:	4619      	mov	r1, r3
 8005122:	2200      	movs	r2, #0
 8005124:	4b76      	ldr	r3, [pc, #472]	@ (8005300 <_dtoa_r+0x2e0>)
 8005126:	f7fb f8cf 	bl	80002c8 <__aeabi_dsub>
 800512a:	a36b      	add	r3, pc, #428	@ (adr r3, 80052d8 <_dtoa_r+0x2b8>)
 800512c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005130:	f7fb fa82 	bl	8000638 <__aeabi_dmul>
 8005134:	a36a      	add	r3, pc, #424	@ (adr r3, 80052e0 <_dtoa_r+0x2c0>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb f8c7 	bl	80002cc <__adddf3>
 800513e:	4604      	mov	r4, r0
 8005140:	4630      	mov	r0, r6
 8005142:	460d      	mov	r5, r1
 8005144:	f7fb fa0e 	bl	8000564 <__aeabi_i2d>
 8005148:	a367      	add	r3, pc, #412	@ (adr r3, 80052e8 <_dtoa_r+0x2c8>)
 800514a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514e:	f7fb fa73 	bl	8000638 <__aeabi_dmul>
 8005152:	4602      	mov	r2, r0
 8005154:	460b      	mov	r3, r1
 8005156:	4620      	mov	r0, r4
 8005158:	4629      	mov	r1, r5
 800515a:	f7fb f8b7 	bl	80002cc <__adddf3>
 800515e:	4604      	mov	r4, r0
 8005160:	460d      	mov	r5, r1
 8005162:	f7fb fd19 	bl	8000b98 <__aeabi_d2iz>
 8005166:	2200      	movs	r2, #0
 8005168:	4607      	mov	r7, r0
 800516a:	2300      	movs	r3, #0
 800516c:	4620      	mov	r0, r4
 800516e:	4629      	mov	r1, r5
 8005170:	f7fb fcd4 	bl	8000b1c <__aeabi_dcmplt>
 8005174:	b140      	cbz	r0, 8005188 <_dtoa_r+0x168>
 8005176:	4638      	mov	r0, r7
 8005178:	f7fb f9f4 	bl	8000564 <__aeabi_i2d>
 800517c:	4622      	mov	r2, r4
 800517e:	462b      	mov	r3, r5
 8005180:	f7fb fcc2 	bl	8000b08 <__aeabi_dcmpeq>
 8005184:	b900      	cbnz	r0, 8005188 <_dtoa_r+0x168>
 8005186:	3f01      	subs	r7, #1
 8005188:	2f16      	cmp	r7, #22
 800518a:	d852      	bhi.n	8005232 <_dtoa_r+0x212>
 800518c:	4b5d      	ldr	r3, [pc, #372]	@ (8005304 <_dtoa_r+0x2e4>)
 800518e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800519a:	f7fb fcbf 	bl	8000b1c <__aeabi_dcmplt>
 800519e:	2800      	cmp	r0, #0
 80051a0:	d049      	beq.n	8005236 <_dtoa_r+0x216>
 80051a2:	3f01      	subs	r7, #1
 80051a4:	2300      	movs	r3, #0
 80051a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80051a8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80051aa:	1b9b      	subs	r3, r3, r6
 80051ac:	1e5a      	subs	r2, r3, #1
 80051ae:	bf45      	ittet	mi
 80051b0:	f1c3 0301 	rsbmi	r3, r3, #1
 80051b4:	9300      	strmi	r3, [sp, #0]
 80051b6:	2300      	movpl	r3, #0
 80051b8:	2300      	movmi	r3, #0
 80051ba:	9206      	str	r2, [sp, #24]
 80051bc:	bf54      	ite	pl
 80051be:	9300      	strpl	r3, [sp, #0]
 80051c0:	9306      	strmi	r3, [sp, #24]
 80051c2:	2f00      	cmp	r7, #0
 80051c4:	db39      	blt.n	800523a <_dtoa_r+0x21a>
 80051c6:	9b06      	ldr	r3, [sp, #24]
 80051c8:	970d      	str	r7, [sp, #52]	@ 0x34
 80051ca:	443b      	add	r3, r7
 80051cc:	9306      	str	r3, [sp, #24]
 80051ce:	2300      	movs	r3, #0
 80051d0:	9308      	str	r3, [sp, #32]
 80051d2:	9b07      	ldr	r3, [sp, #28]
 80051d4:	2b09      	cmp	r3, #9
 80051d6:	d863      	bhi.n	80052a0 <_dtoa_r+0x280>
 80051d8:	2b05      	cmp	r3, #5
 80051da:	bfc4      	itt	gt
 80051dc:	3b04      	subgt	r3, #4
 80051de:	9307      	strgt	r3, [sp, #28]
 80051e0:	9b07      	ldr	r3, [sp, #28]
 80051e2:	f1a3 0302 	sub.w	r3, r3, #2
 80051e6:	bfcc      	ite	gt
 80051e8:	2400      	movgt	r4, #0
 80051ea:	2401      	movle	r4, #1
 80051ec:	2b03      	cmp	r3, #3
 80051ee:	d863      	bhi.n	80052b8 <_dtoa_r+0x298>
 80051f0:	e8df f003 	tbb	[pc, r3]
 80051f4:	2b375452 	.word	0x2b375452
 80051f8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80051fc:	441e      	add	r6, r3
 80051fe:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005202:	2b20      	cmp	r3, #32
 8005204:	bfc1      	itttt	gt
 8005206:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800520a:	409f      	lslgt	r7, r3
 800520c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005210:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005214:	bfd6      	itet	le
 8005216:	f1c3 0320 	rsble	r3, r3, #32
 800521a:	ea47 0003 	orrgt.w	r0, r7, r3
 800521e:	fa04 f003 	lslle.w	r0, r4, r3
 8005222:	f7fb f98f 	bl	8000544 <__aeabi_ui2d>
 8005226:	2201      	movs	r2, #1
 8005228:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800522c:	3e01      	subs	r6, #1
 800522e:	9212      	str	r2, [sp, #72]	@ 0x48
 8005230:	e776      	b.n	8005120 <_dtoa_r+0x100>
 8005232:	2301      	movs	r3, #1
 8005234:	e7b7      	b.n	80051a6 <_dtoa_r+0x186>
 8005236:	9010      	str	r0, [sp, #64]	@ 0x40
 8005238:	e7b6      	b.n	80051a8 <_dtoa_r+0x188>
 800523a:	9b00      	ldr	r3, [sp, #0]
 800523c:	1bdb      	subs	r3, r3, r7
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	427b      	negs	r3, r7
 8005242:	9308      	str	r3, [sp, #32]
 8005244:	2300      	movs	r3, #0
 8005246:	930d      	str	r3, [sp, #52]	@ 0x34
 8005248:	e7c3      	b.n	80051d2 <_dtoa_r+0x1b2>
 800524a:	2301      	movs	r3, #1
 800524c:	9309      	str	r3, [sp, #36]	@ 0x24
 800524e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005250:	eb07 0b03 	add.w	fp, r7, r3
 8005254:	f10b 0301 	add.w	r3, fp, #1
 8005258:	2b01      	cmp	r3, #1
 800525a:	9303      	str	r3, [sp, #12]
 800525c:	bfb8      	it	lt
 800525e:	2301      	movlt	r3, #1
 8005260:	e006      	b.n	8005270 <_dtoa_r+0x250>
 8005262:	2301      	movs	r3, #1
 8005264:	9309      	str	r3, [sp, #36]	@ 0x24
 8005266:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	dd28      	ble.n	80052be <_dtoa_r+0x29e>
 800526c:	469b      	mov	fp, r3
 800526e:	9303      	str	r3, [sp, #12]
 8005270:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005274:	2100      	movs	r1, #0
 8005276:	2204      	movs	r2, #4
 8005278:	f102 0514 	add.w	r5, r2, #20
 800527c:	429d      	cmp	r5, r3
 800527e:	d926      	bls.n	80052ce <_dtoa_r+0x2ae>
 8005280:	6041      	str	r1, [r0, #4]
 8005282:	4648      	mov	r0, r9
 8005284:	f000 fd9c 	bl	8005dc0 <_Balloc>
 8005288:	4682      	mov	sl, r0
 800528a:	2800      	cmp	r0, #0
 800528c:	d142      	bne.n	8005314 <_dtoa_r+0x2f4>
 800528e:	4b1e      	ldr	r3, [pc, #120]	@ (8005308 <_dtoa_r+0x2e8>)
 8005290:	4602      	mov	r2, r0
 8005292:	f240 11af 	movw	r1, #431	@ 0x1af
 8005296:	e6da      	b.n	800504e <_dtoa_r+0x2e>
 8005298:	2300      	movs	r3, #0
 800529a:	e7e3      	b.n	8005264 <_dtoa_r+0x244>
 800529c:	2300      	movs	r3, #0
 800529e:	e7d5      	b.n	800524c <_dtoa_r+0x22c>
 80052a0:	2401      	movs	r4, #1
 80052a2:	2300      	movs	r3, #0
 80052a4:	9307      	str	r3, [sp, #28]
 80052a6:	9409      	str	r4, [sp, #36]	@ 0x24
 80052a8:	f04f 3bff 	mov.w	fp, #4294967295
 80052ac:	2200      	movs	r2, #0
 80052ae:	f8cd b00c 	str.w	fp, [sp, #12]
 80052b2:	2312      	movs	r3, #18
 80052b4:	920c      	str	r2, [sp, #48]	@ 0x30
 80052b6:	e7db      	b.n	8005270 <_dtoa_r+0x250>
 80052b8:	2301      	movs	r3, #1
 80052ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80052bc:	e7f4      	b.n	80052a8 <_dtoa_r+0x288>
 80052be:	f04f 0b01 	mov.w	fp, #1
 80052c2:	f8cd b00c 	str.w	fp, [sp, #12]
 80052c6:	465b      	mov	r3, fp
 80052c8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80052cc:	e7d0      	b.n	8005270 <_dtoa_r+0x250>
 80052ce:	3101      	adds	r1, #1
 80052d0:	0052      	lsls	r2, r2, #1
 80052d2:	e7d1      	b.n	8005278 <_dtoa_r+0x258>
 80052d4:	f3af 8000 	nop.w
 80052d8:	636f4361 	.word	0x636f4361
 80052dc:	3fd287a7 	.word	0x3fd287a7
 80052e0:	8b60c8b3 	.word	0x8b60c8b3
 80052e4:	3fc68a28 	.word	0x3fc68a28
 80052e8:	509f79fb 	.word	0x509f79fb
 80052ec:	3fd34413 	.word	0x3fd34413
 80052f0:	08008672 	.word	0x08008672
 80052f4:	08008689 	.word	0x08008689
 80052f8:	7ff00000 	.word	0x7ff00000
 80052fc:	0800863d 	.word	0x0800863d
 8005300:	3ff80000 	.word	0x3ff80000
 8005304:	08008838 	.word	0x08008838
 8005308:	080086e1 	.word	0x080086e1
 800530c:	0800866e 	.word	0x0800866e
 8005310:	0800863c 	.word	0x0800863c
 8005314:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005318:	6018      	str	r0, [r3, #0]
 800531a:	9b03      	ldr	r3, [sp, #12]
 800531c:	2b0e      	cmp	r3, #14
 800531e:	f200 80a1 	bhi.w	8005464 <_dtoa_r+0x444>
 8005322:	2c00      	cmp	r4, #0
 8005324:	f000 809e 	beq.w	8005464 <_dtoa_r+0x444>
 8005328:	2f00      	cmp	r7, #0
 800532a:	dd33      	ble.n	8005394 <_dtoa_r+0x374>
 800532c:	4b9c      	ldr	r3, [pc, #624]	@ (80055a0 <_dtoa_r+0x580>)
 800532e:	f007 020f 	and.w	r2, r7, #15
 8005332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005336:	ed93 7b00 	vldr	d7, [r3]
 800533a:	05f8      	lsls	r0, r7, #23
 800533c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005340:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005344:	d516      	bpl.n	8005374 <_dtoa_r+0x354>
 8005346:	4b97      	ldr	r3, [pc, #604]	@ (80055a4 <_dtoa_r+0x584>)
 8005348:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800534c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005350:	f7fb fa9c 	bl	800088c <__aeabi_ddiv>
 8005354:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005358:	f004 040f 	and.w	r4, r4, #15
 800535c:	2603      	movs	r6, #3
 800535e:	4d91      	ldr	r5, [pc, #580]	@ (80055a4 <_dtoa_r+0x584>)
 8005360:	b954      	cbnz	r4, 8005378 <_dtoa_r+0x358>
 8005362:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005366:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800536a:	f7fb fa8f 	bl	800088c <__aeabi_ddiv>
 800536e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005372:	e028      	b.n	80053c6 <_dtoa_r+0x3a6>
 8005374:	2602      	movs	r6, #2
 8005376:	e7f2      	b.n	800535e <_dtoa_r+0x33e>
 8005378:	07e1      	lsls	r1, r4, #31
 800537a:	d508      	bpl.n	800538e <_dtoa_r+0x36e>
 800537c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005380:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005384:	f7fb f958 	bl	8000638 <__aeabi_dmul>
 8005388:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800538c:	3601      	adds	r6, #1
 800538e:	1064      	asrs	r4, r4, #1
 8005390:	3508      	adds	r5, #8
 8005392:	e7e5      	b.n	8005360 <_dtoa_r+0x340>
 8005394:	f000 80af 	beq.w	80054f6 <_dtoa_r+0x4d6>
 8005398:	427c      	negs	r4, r7
 800539a:	4b81      	ldr	r3, [pc, #516]	@ (80055a0 <_dtoa_r+0x580>)
 800539c:	4d81      	ldr	r5, [pc, #516]	@ (80055a4 <_dtoa_r+0x584>)
 800539e:	f004 020f 	and.w	r2, r4, #15
 80053a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80053ae:	f7fb f943 	bl	8000638 <__aeabi_dmul>
 80053b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053b6:	1124      	asrs	r4, r4, #4
 80053b8:	2300      	movs	r3, #0
 80053ba:	2602      	movs	r6, #2
 80053bc:	2c00      	cmp	r4, #0
 80053be:	f040 808f 	bne.w	80054e0 <_dtoa_r+0x4c0>
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1d3      	bne.n	800536e <_dtoa_r+0x34e>
 80053c6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80053c8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8094 	beq.w	80054fa <_dtoa_r+0x4da>
 80053d2:	4b75      	ldr	r3, [pc, #468]	@ (80055a8 <_dtoa_r+0x588>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	4620      	mov	r0, r4
 80053d8:	4629      	mov	r1, r5
 80053da:	f7fb fb9f 	bl	8000b1c <__aeabi_dcmplt>
 80053de:	2800      	cmp	r0, #0
 80053e0:	f000 808b 	beq.w	80054fa <_dtoa_r+0x4da>
 80053e4:	9b03      	ldr	r3, [sp, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 8087 	beq.w	80054fa <_dtoa_r+0x4da>
 80053ec:	f1bb 0f00 	cmp.w	fp, #0
 80053f0:	dd34      	ble.n	800545c <_dtoa_r+0x43c>
 80053f2:	4620      	mov	r0, r4
 80053f4:	4b6d      	ldr	r3, [pc, #436]	@ (80055ac <_dtoa_r+0x58c>)
 80053f6:	2200      	movs	r2, #0
 80053f8:	4629      	mov	r1, r5
 80053fa:	f7fb f91d 	bl	8000638 <__aeabi_dmul>
 80053fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005402:	f107 38ff 	add.w	r8, r7, #4294967295
 8005406:	3601      	adds	r6, #1
 8005408:	465c      	mov	r4, fp
 800540a:	4630      	mov	r0, r6
 800540c:	f7fb f8aa 	bl	8000564 <__aeabi_i2d>
 8005410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005414:	f7fb f910 	bl	8000638 <__aeabi_dmul>
 8005418:	4b65      	ldr	r3, [pc, #404]	@ (80055b0 <_dtoa_r+0x590>)
 800541a:	2200      	movs	r2, #0
 800541c:	f7fa ff56 	bl	80002cc <__adddf3>
 8005420:	4605      	mov	r5, r0
 8005422:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005426:	2c00      	cmp	r4, #0
 8005428:	d16a      	bne.n	8005500 <_dtoa_r+0x4e0>
 800542a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800542e:	4b61      	ldr	r3, [pc, #388]	@ (80055b4 <_dtoa_r+0x594>)
 8005430:	2200      	movs	r2, #0
 8005432:	f7fa ff49 	bl	80002c8 <__aeabi_dsub>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800543e:	462a      	mov	r2, r5
 8005440:	4633      	mov	r3, r6
 8005442:	f7fb fb89 	bl	8000b58 <__aeabi_dcmpgt>
 8005446:	2800      	cmp	r0, #0
 8005448:	f040 8298 	bne.w	800597c <_dtoa_r+0x95c>
 800544c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005450:	462a      	mov	r2, r5
 8005452:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005456:	f7fb fb61 	bl	8000b1c <__aeabi_dcmplt>
 800545a:	bb38      	cbnz	r0, 80054ac <_dtoa_r+0x48c>
 800545c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005460:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005464:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005466:	2b00      	cmp	r3, #0
 8005468:	f2c0 8157 	blt.w	800571a <_dtoa_r+0x6fa>
 800546c:	2f0e      	cmp	r7, #14
 800546e:	f300 8154 	bgt.w	800571a <_dtoa_r+0x6fa>
 8005472:	4b4b      	ldr	r3, [pc, #300]	@ (80055a0 <_dtoa_r+0x580>)
 8005474:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005478:	ed93 7b00 	vldr	d7, [r3]
 800547c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800547e:	2b00      	cmp	r3, #0
 8005480:	ed8d 7b00 	vstr	d7, [sp]
 8005484:	f280 80e5 	bge.w	8005652 <_dtoa_r+0x632>
 8005488:	9b03      	ldr	r3, [sp, #12]
 800548a:	2b00      	cmp	r3, #0
 800548c:	f300 80e1 	bgt.w	8005652 <_dtoa_r+0x632>
 8005490:	d10c      	bne.n	80054ac <_dtoa_r+0x48c>
 8005492:	4b48      	ldr	r3, [pc, #288]	@ (80055b4 <_dtoa_r+0x594>)
 8005494:	2200      	movs	r2, #0
 8005496:	ec51 0b17 	vmov	r0, r1, d7
 800549a:	f7fb f8cd 	bl	8000638 <__aeabi_dmul>
 800549e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054a2:	f7fb fb4f 	bl	8000b44 <__aeabi_dcmpge>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	f000 8266 	beq.w	8005978 <_dtoa_r+0x958>
 80054ac:	2400      	movs	r4, #0
 80054ae:	4625      	mov	r5, r4
 80054b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80054b2:	4656      	mov	r6, sl
 80054b4:	ea6f 0803 	mvn.w	r8, r3
 80054b8:	2700      	movs	r7, #0
 80054ba:	4621      	mov	r1, r4
 80054bc:	4648      	mov	r0, r9
 80054be:	f000 fcbf 	bl	8005e40 <_Bfree>
 80054c2:	2d00      	cmp	r5, #0
 80054c4:	f000 80bd 	beq.w	8005642 <_dtoa_r+0x622>
 80054c8:	b12f      	cbz	r7, 80054d6 <_dtoa_r+0x4b6>
 80054ca:	42af      	cmp	r7, r5
 80054cc:	d003      	beq.n	80054d6 <_dtoa_r+0x4b6>
 80054ce:	4639      	mov	r1, r7
 80054d0:	4648      	mov	r0, r9
 80054d2:	f000 fcb5 	bl	8005e40 <_Bfree>
 80054d6:	4629      	mov	r1, r5
 80054d8:	4648      	mov	r0, r9
 80054da:	f000 fcb1 	bl	8005e40 <_Bfree>
 80054de:	e0b0      	b.n	8005642 <_dtoa_r+0x622>
 80054e0:	07e2      	lsls	r2, r4, #31
 80054e2:	d505      	bpl.n	80054f0 <_dtoa_r+0x4d0>
 80054e4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80054e8:	f7fb f8a6 	bl	8000638 <__aeabi_dmul>
 80054ec:	3601      	adds	r6, #1
 80054ee:	2301      	movs	r3, #1
 80054f0:	1064      	asrs	r4, r4, #1
 80054f2:	3508      	adds	r5, #8
 80054f4:	e762      	b.n	80053bc <_dtoa_r+0x39c>
 80054f6:	2602      	movs	r6, #2
 80054f8:	e765      	b.n	80053c6 <_dtoa_r+0x3a6>
 80054fa:	9c03      	ldr	r4, [sp, #12]
 80054fc:	46b8      	mov	r8, r7
 80054fe:	e784      	b.n	800540a <_dtoa_r+0x3ea>
 8005500:	4b27      	ldr	r3, [pc, #156]	@ (80055a0 <_dtoa_r+0x580>)
 8005502:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005504:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005508:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800550c:	4454      	add	r4, sl
 800550e:	2900      	cmp	r1, #0
 8005510:	d054      	beq.n	80055bc <_dtoa_r+0x59c>
 8005512:	4929      	ldr	r1, [pc, #164]	@ (80055b8 <_dtoa_r+0x598>)
 8005514:	2000      	movs	r0, #0
 8005516:	f7fb f9b9 	bl	800088c <__aeabi_ddiv>
 800551a:	4633      	mov	r3, r6
 800551c:	462a      	mov	r2, r5
 800551e:	f7fa fed3 	bl	80002c8 <__aeabi_dsub>
 8005522:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005526:	4656      	mov	r6, sl
 8005528:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800552c:	f7fb fb34 	bl	8000b98 <__aeabi_d2iz>
 8005530:	4605      	mov	r5, r0
 8005532:	f7fb f817 	bl	8000564 <__aeabi_i2d>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800553e:	f7fa fec3 	bl	80002c8 <__aeabi_dsub>
 8005542:	3530      	adds	r5, #48	@ 0x30
 8005544:	4602      	mov	r2, r0
 8005546:	460b      	mov	r3, r1
 8005548:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800554c:	f806 5b01 	strb.w	r5, [r6], #1
 8005550:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005554:	f7fb fae2 	bl	8000b1c <__aeabi_dcmplt>
 8005558:	2800      	cmp	r0, #0
 800555a:	d172      	bne.n	8005642 <_dtoa_r+0x622>
 800555c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005560:	4911      	ldr	r1, [pc, #68]	@ (80055a8 <_dtoa_r+0x588>)
 8005562:	2000      	movs	r0, #0
 8005564:	f7fa feb0 	bl	80002c8 <__aeabi_dsub>
 8005568:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800556c:	f7fb fad6 	bl	8000b1c <__aeabi_dcmplt>
 8005570:	2800      	cmp	r0, #0
 8005572:	f040 80b4 	bne.w	80056de <_dtoa_r+0x6be>
 8005576:	42a6      	cmp	r6, r4
 8005578:	f43f af70 	beq.w	800545c <_dtoa_r+0x43c>
 800557c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005580:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <_dtoa_r+0x58c>)
 8005582:	2200      	movs	r2, #0
 8005584:	f7fb f858 	bl	8000638 <__aeabi_dmul>
 8005588:	4b08      	ldr	r3, [pc, #32]	@ (80055ac <_dtoa_r+0x58c>)
 800558a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800558e:	2200      	movs	r2, #0
 8005590:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005594:	f7fb f850 	bl	8000638 <__aeabi_dmul>
 8005598:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800559c:	e7c4      	b.n	8005528 <_dtoa_r+0x508>
 800559e:	bf00      	nop
 80055a0:	08008838 	.word	0x08008838
 80055a4:	08008810 	.word	0x08008810
 80055a8:	3ff00000 	.word	0x3ff00000
 80055ac:	40240000 	.word	0x40240000
 80055b0:	401c0000 	.word	0x401c0000
 80055b4:	40140000 	.word	0x40140000
 80055b8:	3fe00000 	.word	0x3fe00000
 80055bc:	4631      	mov	r1, r6
 80055be:	4628      	mov	r0, r5
 80055c0:	f7fb f83a 	bl	8000638 <__aeabi_dmul>
 80055c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80055c8:	9413      	str	r4, [sp, #76]	@ 0x4c
 80055ca:	4656      	mov	r6, sl
 80055cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055d0:	f7fb fae2 	bl	8000b98 <__aeabi_d2iz>
 80055d4:	4605      	mov	r5, r0
 80055d6:	f7fa ffc5 	bl	8000564 <__aeabi_i2d>
 80055da:	4602      	mov	r2, r0
 80055dc:	460b      	mov	r3, r1
 80055de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055e2:	f7fa fe71 	bl	80002c8 <__aeabi_dsub>
 80055e6:	3530      	adds	r5, #48	@ 0x30
 80055e8:	f806 5b01 	strb.w	r5, [r6], #1
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	42a6      	cmp	r6, r4
 80055f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80055f6:	f04f 0200 	mov.w	r2, #0
 80055fa:	d124      	bne.n	8005646 <_dtoa_r+0x626>
 80055fc:	4baf      	ldr	r3, [pc, #700]	@ (80058bc <_dtoa_r+0x89c>)
 80055fe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005602:	f7fa fe63 	bl	80002cc <__adddf3>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800560e:	f7fb faa3 	bl	8000b58 <__aeabi_dcmpgt>
 8005612:	2800      	cmp	r0, #0
 8005614:	d163      	bne.n	80056de <_dtoa_r+0x6be>
 8005616:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800561a:	49a8      	ldr	r1, [pc, #672]	@ (80058bc <_dtoa_r+0x89c>)
 800561c:	2000      	movs	r0, #0
 800561e:	f7fa fe53 	bl	80002c8 <__aeabi_dsub>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800562a:	f7fb fa77 	bl	8000b1c <__aeabi_dcmplt>
 800562e:	2800      	cmp	r0, #0
 8005630:	f43f af14 	beq.w	800545c <_dtoa_r+0x43c>
 8005634:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005636:	1e73      	subs	r3, r6, #1
 8005638:	9313      	str	r3, [sp, #76]	@ 0x4c
 800563a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800563e:	2b30      	cmp	r3, #48	@ 0x30
 8005640:	d0f8      	beq.n	8005634 <_dtoa_r+0x614>
 8005642:	4647      	mov	r7, r8
 8005644:	e03b      	b.n	80056be <_dtoa_r+0x69e>
 8005646:	4b9e      	ldr	r3, [pc, #632]	@ (80058c0 <_dtoa_r+0x8a0>)
 8005648:	f7fa fff6 	bl	8000638 <__aeabi_dmul>
 800564c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005650:	e7bc      	b.n	80055cc <_dtoa_r+0x5ac>
 8005652:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005656:	4656      	mov	r6, sl
 8005658:	e9dd 2300 	ldrd	r2, r3, [sp]
 800565c:	4620      	mov	r0, r4
 800565e:	4629      	mov	r1, r5
 8005660:	f7fb f914 	bl	800088c <__aeabi_ddiv>
 8005664:	f7fb fa98 	bl	8000b98 <__aeabi_d2iz>
 8005668:	4680      	mov	r8, r0
 800566a:	f7fa ff7b 	bl	8000564 <__aeabi_i2d>
 800566e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005672:	f7fa ffe1 	bl	8000638 <__aeabi_dmul>
 8005676:	4602      	mov	r2, r0
 8005678:	460b      	mov	r3, r1
 800567a:	4620      	mov	r0, r4
 800567c:	4629      	mov	r1, r5
 800567e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005682:	f7fa fe21 	bl	80002c8 <__aeabi_dsub>
 8005686:	f806 4b01 	strb.w	r4, [r6], #1
 800568a:	9d03      	ldr	r5, [sp, #12]
 800568c:	eba6 040a 	sub.w	r4, r6, sl
 8005690:	42a5      	cmp	r5, r4
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	d133      	bne.n	8005700 <_dtoa_r+0x6e0>
 8005698:	f7fa fe18 	bl	80002cc <__adddf3>
 800569c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056a0:	4604      	mov	r4, r0
 80056a2:	460d      	mov	r5, r1
 80056a4:	f7fb fa58 	bl	8000b58 <__aeabi_dcmpgt>
 80056a8:	b9c0      	cbnz	r0, 80056dc <_dtoa_r+0x6bc>
 80056aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056ae:	4620      	mov	r0, r4
 80056b0:	4629      	mov	r1, r5
 80056b2:	f7fb fa29 	bl	8000b08 <__aeabi_dcmpeq>
 80056b6:	b110      	cbz	r0, 80056be <_dtoa_r+0x69e>
 80056b8:	f018 0f01 	tst.w	r8, #1
 80056bc:	d10e      	bne.n	80056dc <_dtoa_r+0x6bc>
 80056be:	9902      	ldr	r1, [sp, #8]
 80056c0:	4648      	mov	r0, r9
 80056c2:	f000 fbbd 	bl	8005e40 <_Bfree>
 80056c6:	2300      	movs	r3, #0
 80056c8:	7033      	strb	r3, [r6, #0]
 80056ca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80056cc:	3701      	adds	r7, #1
 80056ce:	601f      	str	r7, [r3, #0]
 80056d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 824b 	beq.w	8005b6e <_dtoa_r+0xb4e>
 80056d8:	601e      	str	r6, [r3, #0]
 80056da:	e248      	b.n	8005b6e <_dtoa_r+0xb4e>
 80056dc:	46b8      	mov	r8, r7
 80056de:	4633      	mov	r3, r6
 80056e0:	461e      	mov	r6, r3
 80056e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056e6:	2a39      	cmp	r2, #57	@ 0x39
 80056e8:	d106      	bne.n	80056f8 <_dtoa_r+0x6d8>
 80056ea:	459a      	cmp	sl, r3
 80056ec:	d1f8      	bne.n	80056e0 <_dtoa_r+0x6c0>
 80056ee:	2230      	movs	r2, #48	@ 0x30
 80056f0:	f108 0801 	add.w	r8, r8, #1
 80056f4:	f88a 2000 	strb.w	r2, [sl]
 80056f8:	781a      	ldrb	r2, [r3, #0]
 80056fa:	3201      	adds	r2, #1
 80056fc:	701a      	strb	r2, [r3, #0]
 80056fe:	e7a0      	b.n	8005642 <_dtoa_r+0x622>
 8005700:	4b6f      	ldr	r3, [pc, #444]	@ (80058c0 <_dtoa_r+0x8a0>)
 8005702:	2200      	movs	r2, #0
 8005704:	f7fa ff98 	bl	8000638 <__aeabi_dmul>
 8005708:	2200      	movs	r2, #0
 800570a:	2300      	movs	r3, #0
 800570c:	4604      	mov	r4, r0
 800570e:	460d      	mov	r5, r1
 8005710:	f7fb f9fa 	bl	8000b08 <__aeabi_dcmpeq>
 8005714:	2800      	cmp	r0, #0
 8005716:	d09f      	beq.n	8005658 <_dtoa_r+0x638>
 8005718:	e7d1      	b.n	80056be <_dtoa_r+0x69e>
 800571a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800571c:	2a00      	cmp	r2, #0
 800571e:	f000 80ea 	beq.w	80058f6 <_dtoa_r+0x8d6>
 8005722:	9a07      	ldr	r2, [sp, #28]
 8005724:	2a01      	cmp	r2, #1
 8005726:	f300 80cd 	bgt.w	80058c4 <_dtoa_r+0x8a4>
 800572a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800572c:	2a00      	cmp	r2, #0
 800572e:	f000 80c1 	beq.w	80058b4 <_dtoa_r+0x894>
 8005732:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005736:	9c08      	ldr	r4, [sp, #32]
 8005738:	9e00      	ldr	r6, [sp, #0]
 800573a:	9a00      	ldr	r2, [sp, #0]
 800573c:	441a      	add	r2, r3
 800573e:	9200      	str	r2, [sp, #0]
 8005740:	9a06      	ldr	r2, [sp, #24]
 8005742:	2101      	movs	r1, #1
 8005744:	441a      	add	r2, r3
 8005746:	4648      	mov	r0, r9
 8005748:	9206      	str	r2, [sp, #24]
 800574a:	f000 fc77 	bl	800603c <__i2b>
 800574e:	4605      	mov	r5, r0
 8005750:	b166      	cbz	r6, 800576c <_dtoa_r+0x74c>
 8005752:	9b06      	ldr	r3, [sp, #24]
 8005754:	2b00      	cmp	r3, #0
 8005756:	dd09      	ble.n	800576c <_dtoa_r+0x74c>
 8005758:	42b3      	cmp	r3, r6
 800575a:	9a00      	ldr	r2, [sp, #0]
 800575c:	bfa8      	it	ge
 800575e:	4633      	movge	r3, r6
 8005760:	1ad2      	subs	r2, r2, r3
 8005762:	9200      	str	r2, [sp, #0]
 8005764:	9a06      	ldr	r2, [sp, #24]
 8005766:	1af6      	subs	r6, r6, r3
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	9306      	str	r3, [sp, #24]
 800576c:	9b08      	ldr	r3, [sp, #32]
 800576e:	b30b      	cbz	r3, 80057b4 <_dtoa_r+0x794>
 8005770:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005772:	2b00      	cmp	r3, #0
 8005774:	f000 80c6 	beq.w	8005904 <_dtoa_r+0x8e4>
 8005778:	2c00      	cmp	r4, #0
 800577a:	f000 80c0 	beq.w	80058fe <_dtoa_r+0x8de>
 800577e:	4629      	mov	r1, r5
 8005780:	4622      	mov	r2, r4
 8005782:	4648      	mov	r0, r9
 8005784:	f000 fd12 	bl	80061ac <__pow5mult>
 8005788:	9a02      	ldr	r2, [sp, #8]
 800578a:	4601      	mov	r1, r0
 800578c:	4605      	mov	r5, r0
 800578e:	4648      	mov	r0, r9
 8005790:	f000 fc6a 	bl	8006068 <__multiply>
 8005794:	9902      	ldr	r1, [sp, #8]
 8005796:	4680      	mov	r8, r0
 8005798:	4648      	mov	r0, r9
 800579a:	f000 fb51 	bl	8005e40 <_Bfree>
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	1b1b      	subs	r3, r3, r4
 80057a2:	9308      	str	r3, [sp, #32]
 80057a4:	f000 80b1 	beq.w	800590a <_dtoa_r+0x8ea>
 80057a8:	9a08      	ldr	r2, [sp, #32]
 80057aa:	4641      	mov	r1, r8
 80057ac:	4648      	mov	r0, r9
 80057ae:	f000 fcfd 	bl	80061ac <__pow5mult>
 80057b2:	9002      	str	r0, [sp, #8]
 80057b4:	2101      	movs	r1, #1
 80057b6:	4648      	mov	r0, r9
 80057b8:	f000 fc40 	bl	800603c <__i2b>
 80057bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057be:	4604      	mov	r4, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 81d8 	beq.w	8005b76 <_dtoa_r+0xb56>
 80057c6:	461a      	mov	r2, r3
 80057c8:	4601      	mov	r1, r0
 80057ca:	4648      	mov	r0, r9
 80057cc:	f000 fcee 	bl	80061ac <__pow5mult>
 80057d0:	9b07      	ldr	r3, [sp, #28]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	4604      	mov	r4, r0
 80057d6:	f300 809f 	bgt.w	8005918 <_dtoa_r+0x8f8>
 80057da:	9b04      	ldr	r3, [sp, #16]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 8097 	bne.w	8005910 <_dtoa_r+0x8f0>
 80057e2:	9b05      	ldr	r3, [sp, #20]
 80057e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f040 8093 	bne.w	8005914 <_dtoa_r+0x8f4>
 80057ee:	9b05      	ldr	r3, [sp, #20]
 80057f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80057f4:	0d1b      	lsrs	r3, r3, #20
 80057f6:	051b      	lsls	r3, r3, #20
 80057f8:	b133      	cbz	r3, 8005808 <_dtoa_r+0x7e8>
 80057fa:	9b00      	ldr	r3, [sp, #0]
 80057fc:	3301      	adds	r3, #1
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	9b06      	ldr	r3, [sp, #24]
 8005802:	3301      	adds	r3, #1
 8005804:	9306      	str	r3, [sp, #24]
 8005806:	2301      	movs	r3, #1
 8005808:	9308      	str	r3, [sp, #32]
 800580a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 81b8 	beq.w	8005b82 <_dtoa_r+0xb62>
 8005812:	6923      	ldr	r3, [r4, #16]
 8005814:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005818:	6918      	ldr	r0, [r3, #16]
 800581a:	f000 fbc3 	bl	8005fa4 <__hi0bits>
 800581e:	f1c0 0020 	rsb	r0, r0, #32
 8005822:	9b06      	ldr	r3, [sp, #24]
 8005824:	4418      	add	r0, r3
 8005826:	f010 001f 	ands.w	r0, r0, #31
 800582a:	f000 8082 	beq.w	8005932 <_dtoa_r+0x912>
 800582e:	f1c0 0320 	rsb	r3, r0, #32
 8005832:	2b04      	cmp	r3, #4
 8005834:	dd73      	ble.n	800591e <_dtoa_r+0x8fe>
 8005836:	9b00      	ldr	r3, [sp, #0]
 8005838:	f1c0 001c 	rsb	r0, r0, #28
 800583c:	4403      	add	r3, r0
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	9b06      	ldr	r3, [sp, #24]
 8005842:	4403      	add	r3, r0
 8005844:	4406      	add	r6, r0
 8005846:	9306      	str	r3, [sp, #24]
 8005848:	9b00      	ldr	r3, [sp, #0]
 800584a:	2b00      	cmp	r3, #0
 800584c:	dd05      	ble.n	800585a <_dtoa_r+0x83a>
 800584e:	9902      	ldr	r1, [sp, #8]
 8005850:	461a      	mov	r2, r3
 8005852:	4648      	mov	r0, r9
 8005854:	f000 fd04 	bl	8006260 <__lshift>
 8005858:	9002      	str	r0, [sp, #8]
 800585a:	9b06      	ldr	r3, [sp, #24]
 800585c:	2b00      	cmp	r3, #0
 800585e:	dd05      	ble.n	800586c <_dtoa_r+0x84c>
 8005860:	4621      	mov	r1, r4
 8005862:	461a      	mov	r2, r3
 8005864:	4648      	mov	r0, r9
 8005866:	f000 fcfb 	bl	8006260 <__lshift>
 800586a:	4604      	mov	r4, r0
 800586c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d061      	beq.n	8005936 <_dtoa_r+0x916>
 8005872:	9802      	ldr	r0, [sp, #8]
 8005874:	4621      	mov	r1, r4
 8005876:	f000 fd5f 	bl	8006338 <__mcmp>
 800587a:	2800      	cmp	r0, #0
 800587c:	da5b      	bge.n	8005936 <_dtoa_r+0x916>
 800587e:	2300      	movs	r3, #0
 8005880:	9902      	ldr	r1, [sp, #8]
 8005882:	220a      	movs	r2, #10
 8005884:	4648      	mov	r0, r9
 8005886:	f000 fafd 	bl	8005e84 <__multadd>
 800588a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800588c:	9002      	str	r0, [sp, #8]
 800588e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005892:	2b00      	cmp	r3, #0
 8005894:	f000 8177 	beq.w	8005b86 <_dtoa_r+0xb66>
 8005898:	4629      	mov	r1, r5
 800589a:	2300      	movs	r3, #0
 800589c:	220a      	movs	r2, #10
 800589e:	4648      	mov	r0, r9
 80058a0:	f000 faf0 	bl	8005e84 <__multadd>
 80058a4:	f1bb 0f00 	cmp.w	fp, #0
 80058a8:	4605      	mov	r5, r0
 80058aa:	dc6f      	bgt.n	800598c <_dtoa_r+0x96c>
 80058ac:	9b07      	ldr	r3, [sp, #28]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	dc49      	bgt.n	8005946 <_dtoa_r+0x926>
 80058b2:	e06b      	b.n	800598c <_dtoa_r+0x96c>
 80058b4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80058b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80058ba:	e73c      	b.n	8005736 <_dtoa_r+0x716>
 80058bc:	3fe00000 	.word	0x3fe00000
 80058c0:	40240000 	.word	0x40240000
 80058c4:	9b03      	ldr	r3, [sp, #12]
 80058c6:	1e5c      	subs	r4, r3, #1
 80058c8:	9b08      	ldr	r3, [sp, #32]
 80058ca:	42a3      	cmp	r3, r4
 80058cc:	db09      	blt.n	80058e2 <_dtoa_r+0x8c2>
 80058ce:	1b1c      	subs	r4, r3, r4
 80058d0:	9b03      	ldr	r3, [sp, #12]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f6bf af30 	bge.w	8005738 <_dtoa_r+0x718>
 80058d8:	9b00      	ldr	r3, [sp, #0]
 80058da:	9a03      	ldr	r2, [sp, #12]
 80058dc:	1a9e      	subs	r6, r3, r2
 80058de:	2300      	movs	r3, #0
 80058e0:	e72b      	b.n	800573a <_dtoa_r+0x71a>
 80058e2:	9b08      	ldr	r3, [sp, #32]
 80058e4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80058e6:	9408      	str	r4, [sp, #32]
 80058e8:	1ae3      	subs	r3, r4, r3
 80058ea:	441a      	add	r2, r3
 80058ec:	9e00      	ldr	r6, [sp, #0]
 80058ee:	9b03      	ldr	r3, [sp, #12]
 80058f0:	920d      	str	r2, [sp, #52]	@ 0x34
 80058f2:	2400      	movs	r4, #0
 80058f4:	e721      	b.n	800573a <_dtoa_r+0x71a>
 80058f6:	9c08      	ldr	r4, [sp, #32]
 80058f8:	9e00      	ldr	r6, [sp, #0]
 80058fa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80058fc:	e728      	b.n	8005750 <_dtoa_r+0x730>
 80058fe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005902:	e751      	b.n	80057a8 <_dtoa_r+0x788>
 8005904:	9a08      	ldr	r2, [sp, #32]
 8005906:	9902      	ldr	r1, [sp, #8]
 8005908:	e750      	b.n	80057ac <_dtoa_r+0x78c>
 800590a:	f8cd 8008 	str.w	r8, [sp, #8]
 800590e:	e751      	b.n	80057b4 <_dtoa_r+0x794>
 8005910:	2300      	movs	r3, #0
 8005912:	e779      	b.n	8005808 <_dtoa_r+0x7e8>
 8005914:	9b04      	ldr	r3, [sp, #16]
 8005916:	e777      	b.n	8005808 <_dtoa_r+0x7e8>
 8005918:	2300      	movs	r3, #0
 800591a:	9308      	str	r3, [sp, #32]
 800591c:	e779      	b.n	8005812 <_dtoa_r+0x7f2>
 800591e:	d093      	beq.n	8005848 <_dtoa_r+0x828>
 8005920:	9a00      	ldr	r2, [sp, #0]
 8005922:	331c      	adds	r3, #28
 8005924:	441a      	add	r2, r3
 8005926:	9200      	str	r2, [sp, #0]
 8005928:	9a06      	ldr	r2, [sp, #24]
 800592a:	441a      	add	r2, r3
 800592c:	441e      	add	r6, r3
 800592e:	9206      	str	r2, [sp, #24]
 8005930:	e78a      	b.n	8005848 <_dtoa_r+0x828>
 8005932:	4603      	mov	r3, r0
 8005934:	e7f4      	b.n	8005920 <_dtoa_r+0x900>
 8005936:	9b03      	ldr	r3, [sp, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	46b8      	mov	r8, r7
 800593c:	dc20      	bgt.n	8005980 <_dtoa_r+0x960>
 800593e:	469b      	mov	fp, r3
 8005940:	9b07      	ldr	r3, [sp, #28]
 8005942:	2b02      	cmp	r3, #2
 8005944:	dd1e      	ble.n	8005984 <_dtoa_r+0x964>
 8005946:	f1bb 0f00 	cmp.w	fp, #0
 800594a:	f47f adb1 	bne.w	80054b0 <_dtoa_r+0x490>
 800594e:	4621      	mov	r1, r4
 8005950:	465b      	mov	r3, fp
 8005952:	2205      	movs	r2, #5
 8005954:	4648      	mov	r0, r9
 8005956:	f000 fa95 	bl	8005e84 <__multadd>
 800595a:	4601      	mov	r1, r0
 800595c:	4604      	mov	r4, r0
 800595e:	9802      	ldr	r0, [sp, #8]
 8005960:	f000 fcea 	bl	8006338 <__mcmp>
 8005964:	2800      	cmp	r0, #0
 8005966:	f77f ada3 	ble.w	80054b0 <_dtoa_r+0x490>
 800596a:	4656      	mov	r6, sl
 800596c:	2331      	movs	r3, #49	@ 0x31
 800596e:	f806 3b01 	strb.w	r3, [r6], #1
 8005972:	f108 0801 	add.w	r8, r8, #1
 8005976:	e59f      	b.n	80054b8 <_dtoa_r+0x498>
 8005978:	9c03      	ldr	r4, [sp, #12]
 800597a:	46b8      	mov	r8, r7
 800597c:	4625      	mov	r5, r4
 800597e:	e7f4      	b.n	800596a <_dtoa_r+0x94a>
 8005980:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005984:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 8101 	beq.w	8005b8e <_dtoa_r+0xb6e>
 800598c:	2e00      	cmp	r6, #0
 800598e:	dd05      	ble.n	800599c <_dtoa_r+0x97c>
 8005990:	4629      	mov	r1, r5
 8005992:	4632      	mov	r2, r6
 8005994:	4648      	mov	r0, r9
 8005996:	f000 fc63 	bl	8006260 <__lshift>
 800599a:	4605      	mov	r5, r0
 800599c:	9b08      	ldr	r3, [sp, #32]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d05c      	beq.n	8005a5c <_dtoa_r+0xa3c>
 80059a2:	6869      	ldr	r1, [r5, #4]
 80059a4:	4648      	mov	r0, r9
 80059a6:	f000 fa0b 	bl	8005dc0 <_Balloc>
 80059aa:	4606      	mov	r6, r0
 80059ac:	b928      	cbnz	r0, 80059ba <_dtoa_r+0x99a>
 80059ae:	4b82      	ldr	r3, [pc, #520]	@ (8005bb8 <_dtoa_r+0xb98>)
 80059b0:	4602      	mov	r2, r0
 80059b2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80059b6:	f7ff bb4a 	b.w	800504e <_dtoa_r+0x2e>
 80059ba:	692a      	ldr	r2, [r5, #16]
 80059bc:	3202      	adds	r2, #2
 80059be:	0092      	lsls	r2, r2, #2
 80059c0:	f105 010c 	add.w	r1, r5, #12
 80059c4:	300c      	adds	r0, #12
 80059c6:	f002 f93f 	bl	8007c48 <memcpy>
 80059ca:	2201      	movs	r2, #1
 80059cc:	4631      	mov	r1, r6
 80059ce:	4648      	mov	r0, r9
 80059d0:	f000 fc46 	bl	8006260 <__lshift>
 80059d4:	f10a 0301 	add.w	r3, sl, #1
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	eb0a 030b 	add.w	r3, sl, fp
 80059de:	9308      	str	r3, [sp, #32]
 80059e0:	9b04      	ldr	r3, [sp, #16]
 80059e2:	f003 0301 	and.w	r3, r3, #1
 80059e6:	462f      	mov	r7, r5
 80059e8:	9306      	str	r3, [sp, #24]
 80059ea:	4605      	mov	r5, r0
 80059ec:	9b00      	ldr	r3, [sp, #0]
 80059ee:	9802      	ldr	r0, [sp, #8]
 80059f0:	4621      	mov	r1, r4
 80059f2:	f103 3bff 	add.w	fp, r3, #4294967295
 80059f6:	f7ff fa8b 	bl	8004f10 <quorem>
 80059fa:	4603      	mov	r3, r0
 80059fc:	3330      	adds	r3, #48	@ 0x30
 80059fe:	9003      	str	r0, [sp, #12]
 8005a00:	4639      	mov	r1, r7
 8005a02:	9802      	ldr	r0, [sp, #8]
 8005a04:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a06:	f000 fc97 	bl	8006338 <__mcmp>
 8005a0a:	462a      	mov	r2, r5
 8005a0c:	9004      	str	r0, [sp, #16]
 8005a0e:	4621      	mov	r1, r4
 8005a10:	4648      	mov	r0, r9
 8005a12:	f000 fcad 	bl	8006370 <__mdiff>
 8005a16:	68c2      	ldr	r2, [r0, #12]
 8005a18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a1a:	4606      	mov	r6, r0
 8005a1c:	bb02      	cbnz	r2, 8005a60 <_dtoa_r+0xa40>
 8005a1e:	4601      	mov	r1, r0
 8005a20:	9802      	ldr	r0, [sp, #8]
 8005a22:	f000 fc89 	bl	8006338 <__mcmp>
 8005a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a28:	4602      	mov	r2, r0
 8005a2a:	4631      	mov	r1, r6
 8005a2c:	4648      	mov	r0, r9
 8005a2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8005a30:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a32:	f000 fa05 	bl	8005e40 <_Bfree>
 8005a36:	9b07      	ldr	r3, [sp, #28]
 8005a38:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005a3a:	9e00      	ldr	r6, [sp, #0]
 8005a3c:	ea42 0103 	orr.w	r1, r2, r3
 8005a40:	9b06      	ldr	r3, [sp, #24]
 8005a42:	4319      	orrs	r1, r3
 8005a44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a46:	d10d      	bne.n	8005a64 <_dtoa_r+0xa44>
 8005a48:	2b39      	cmp	r3, #57	@ 0x39
 8005a4a:	d027      	beq.n	8005a9c <_dtoa_r+0xa7c>
 8005a4c:	9a04      	ldr	r2, [sp, #16]
 8005a4e:	2a00      	cmp	r2, #0
 8005a50:	dd01      	ble.n	8005a56 <_dtoa_r+0xa36>
 8005a52:	9b03      	ldr	r3, [sp, #12]
 8005a54:	3331      	adds	r3, #49	@ 0x31
 8005a56:	f88b 3000 	strb.w	r3, [fp]
 8005a5a:	e52e      	b.n	80054ba <_dtoa_r+0x49a>
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	e7b9      	b.n	80059d4 <_dtoa_r+0x9b4>
 8005a60:	2201      	movs	r2, #1
 8005a62:	e7e2      	b.n	8005a2a <_dtoa_r+0xa0a>
 8005a64:	9904      	ldr	r1, [sp, #16]
 8005a66:	2900      	cmp	r1, #0
 8005a68:	db04      	blt.n	8005a74 <_dtoa_r+0xa54>
 8005a6a:	9807      	ldr	r0, [sp, #28]
 8005a6c:	4301      	orrs	r1, r0
 8005a6e:	9806      	ldr	r0, [sp, #24]
 8005a70:	4301      	orrs	r1, r0
 8005a72:	d120      	bne.n	8005ab6 <_dtoa_r+0xa96>
 8005a74:	2a00      	cmp	r2, #0
 8005a76:	ddee      	ble.n	8005a56 <_dtoa_r+0xa36>
 8005a78:	9902      	ldr	r1, [sp, #8]
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	4648      	mov	r0, r9
 8005a80:	f000 fbee 	bl	8006260 <__lshift>
 8005a84:	4621      	mov	r1, r4
 8005a86:	9002      	str	r0, [sp, #8]
 8005a88:	f000 fc56 	bl	8006338 <__mcmp>
 8005a8c:	2800      	cmp	r0, #0
 8005a8e:	9b00      	ldr	r3, [sp, #0]
 8005a90:	dc02      	bgt.n	8005a98 <_dtoa_r+0xa78>
 8005a92:	d1e0      	bne.n	8005a56 <_dtoa_r+0xa36>
 8005a94:	07da      	lsls	r2, r3, #31
 8005a96:	d5de      	bpl.n	8005a56 <_dtoa_r+0xa36>
 8005a98:	2b39      	cmp	r3, #57	@ 0x39
 8005a9a:	d1da      	bne.n	8005a52 <_dtoa_r+0xa32>
 8005a9c:	2339      	movs	r3, #57	@ 0x39
 8005a9e:	f88b 3000 	strb.w	r3, [fp]
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	461e      	mov	r6, r3
 8005aa6:	3b01      	subs	r3, #1
 8005aa8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8005aac:	2a39      	cmp	r2, #57	@ 0x39
 8005aae:	d04e      	beq.n	8005b4e <_dtoa_r+0xb2e>
 8005ab0:	3201      	adds	r2, #1
 8005ab2:	701a      	strb	r2, [r3, #0]
 8005ab4:	e501      	b.n	80054ba <_dtoa_r+0x49a>
 8005ab6:	2a00      	cmp	r2, #0
 8005ab8:	dd03      	ble.n	8005ac2 <_dtoa_r+0xaa2>
 8005aba:	2b39      	cmp	r3, #57	@ 0x39
 8005abc:	d0ee      	beq.n	8005a9c <_dtoa_r+0xa7c>
 8005abe:	3301      	adds	r3, #1
 8005ac0:	e7c9      	b.n	8005a56 <_dtoa_r+0xa36>
 8005ac2:	9a00      	ldr	r2, [sp, #0]
 8005ac4:	9908      	ldr	r1, [sp, #32]
 8005ac6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005aca:	428a      	cmp	r2, r1
 8005acc:	d028      	beq.n	8005b20 <_dtoa_r+0xb00>
 8005ace:	9902      	ldr	r1, [sp, #8]
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	220a      	movs	r2, #10
 8005ad4:	4648      	mov	r0, r9
 8005ad6:	f000 f9d5 	bl	8005e84 <__multadd>
 8005ada:	42af      	cmp	r7, r5
 8005adc:	9002      	str	r0, [sp, #8]
 8005ade:	f04f 0300 	mov.w	r3, #0
 8005ae2:	f04f 020a 	mov.w	r2, #10
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4648      	mov	r0, r9
 8005aea:	d107      	bne.n	8005afc <_dtoa_r+0xadc>
 8005aec:	f000 f9ca 	bl	8005e84 <__multadd>
 8005af0:	4607      	mov	r7, r0
 8005af2:	4605      	mov	r5, r0
 8005af4:	9b00      	ldr	r3, [sp, #0]
 8005af6:	3301      	adds	r3, #1
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	e777      	b.n	80059ec <_dtoa_r+0x9cc>
 8005afc:	f000 f9c2 	bl	8005e84 <__multadd>
 8005b00:	4629      	mov	r1, r5
 8005b02:	4607      	mov	r7, r0
 8005b04:	2300      	movs	r3, #0
 8005b06:	220a      	movs	r2, #10
 8005b08:	4648      	mov	r0, r9
 8005b0a:	f000 f9bb 	bl	8005e84 <__multadd>
 8005b0e:	4605      	mov	r5, r0
 8005b10:	e7f0      	b.n	8005af4 <_dtoa_r+0xad4>
 8005b12:	f1bb 0f00 	cmp.w	fp, #0
 8005b16:	bfcc      	ite	gt
 8005b18:	465e      	movgt	r6, fp
 8005b1a:	2601      	movle	r6, #1
 8005b1c:	4456      	add	r6, sl
 8005b1e:	2700      	movs	r7, #0
 8005b20:	9902      	ldr	r1, [sp, #8]
 8005b22:	9300      	str	r3, [sp, #0]
 8005b24:	2201      	movs	r2, #1
 8005b26:	4648      	mov	r0, r9
 8005b28:	f000 fb9a 	bl	8006260 <__lshift>
 8005b2c:	4621      	mov	r1, r4
 8005b2e:	9002      	str	r0, [sp, #8]
 8005b30:	f000 fc02 	bl	8006338 <__mcmp>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	dcb4      	bgt.n	8005aa2 <_dtoa_r+0xa82>
 8005b38:	d102      	bne.n	8005b40 <_dtoa_r+0xb20>
 8005b3a:	9b00      	ldr	r3, [sp, #0]
 8005b3c:	07db      	lsls	r3, r3, #31
 8005b3e:	d4b0      	bmi.n	8005aa2 <_dtoa_r+0xa82>
 8005b40:	4633      	mov	r3, r6
 8005b42:	461e      	mov	r6, r3
 8005b44:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b48:	2a30      	cmp	r2, #48	@ 0x30
 8005b4a:	d0fa      	beq.n	8005b42 <_dtoa_r+0xb22>
 8005b4c:	e4b5      	b.n	80054ba <_dtoa_r+0x49a>
 8005b4e:	459a      	cmp	sl, r3
 8005b50:	d1a8      	bne.n	8005aa4 <_dtoa_r+0xa84>
 8005b52:	2331      	movs	r3, #49	@ 0x31
 8005b54:	f108 0801 	add.w	r8, r8, #1
 8005b58:	f88a 3000 	strb.w	r3, [sl]
 8005b5c:	e4ad      	b.n	80054ba <_dtoa_r+0x49a>
 8005b5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005b60:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8005bbc <_dtoa_r+0xb9c>
 8005b64:	b11b      	cbz	r3, 8005b6e <_dtoa_r+0xb4e>
 8005b66:	f10a 0308 	add.w	r3, sl, #8
 8005b6a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005b6c:	6013      	str	r3, [r2, #0]
 8005b6e:	4650      	mov	r0, sl
 8005b70:	b017      	add	sp, #92	@ 0x5c
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	9b07      	ldr	r3, [sp, #28]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	f77f ae2e 	ble.w	80057da <_dtoa_r+0x7ba>
 8005b7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b80:	9308      	str	r3, [sp, #32]
 8005b82:	2001      	movs	r0, #1
 8005b84:	e64d      	b.n	8005822 <_dtoa_r+0x802>
 8005b86:	f1bb 0f00 	cmp.w	fp, #0
 8005b8a:	f77f aed9 	ble.w	8005940 <_dtoa_r+0x920>
 8005b8e:	4656      	mov	r6, sl
 8005b90:	9802      	ldr	r0, [sp, #8]
 8005b92:	4621      	mov	r1, r4
 8005b94:	f7ff f9bc 	bl	8004f10 <quorem>
 8005b98:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8005b9c:	f806 3b01 	strb.w	r3, [r6], #1
 8005ba0:	eba6 020a 	sub.w	r2, r6, sl
 8005ba4:	4593      	cmp	fp, r2
 8005ba6:	ddb4      	ble.n	8005b12 <_dtoa_r+0xaf2>
 8005ba8:	9902      	ldr	r1, [sp, #8]
 8005baa:	2300      	movs	r3, #0
 8005bac:	220a      	movs	r2, #10
 8005bae:	4648      	mov	r0, r9
 8005bb0:	f000 f968 	bl	8005e84 <__multadd>
 8005bb4:	9002      	str	r0, [sp, #8]
 8005bb6:	e7eb      	b.n	8005b90 <_dtoa_r+0xb70>
 8005bb8:	080086e1 	.word	0x080086e1
 8005bbc:	08008665 	.word	0x08008665

08005bc0 <_free_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4605      	mov	r5, r0
 8005bc4:	2900      	cmp	r1, #0
 8005bc6:	d041      	beq.n	8005c4c <_free_r+0x8c>
 8005bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005bcc:	1f0c      	subs	r4, r1, #4
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	bfb8      	it	lt
 8005bd2:	18e4      	addlt	r4, r4, r3
 8005bd4:	f000 f8e8 	bl	8005da8 <__malloc_lock>
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8005c50 <_free_r+0x90>)
 8005bda:	6813      	ldr	r3, [r2, #0]
 8005bdc:	b933      	cbnz	r3, 8005bec <_free_r+0x2c>
 8005bde:	6063      	str	r3, [r4, #4]
 8005be0:	6014      	str	r4, [r2, #0]
 8005be2:	4628      	mov	r0, r5
 8005be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005be8:	f000 b8e4 	b.w	8005db4 <__malloc_unlock>
 8005bec:	42a3      	cmp	r3, r4
 8005bee:	d908      	bls.n	8005c02 <_free_r+0x42>
 8005bf0:	6820      	ldr	r0, [r4, #0]
 8005bf2:	1821      	adds	r1, r4, r0
 8005bf4:	428b      	cmp	r3, r1
 8005bf6:	bf01      	itttt	eq
 8005bf8:	6819      	ldreq	r1, [r3, #0]
 8005bfa:	685b      	ldreq	r3, [r3, #4]
 8005bfc:	1809      	addeq	r1, r1, r0
 8005bfe:	6021      	streq	r1, [r4, #0]
 8005c00:	e7ed      	b.n	8005bde <_free_r+0x1e>
 8005c02:	461a      	mov	r2, r3
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	b10b      	cbz	r3, 8005c0c <_free_r+0x4c>
 8005c08:	42a3      	cmp	r3, r4
 8005c0a:	d9fa      	bls.n	8005c02 <_free_r+0x42>
 8005c0c:	6811      	ldr	r1, [r2, #0]
 8005c0e:	1850      	adds	r0, r2, r1
 8005c10:	42a0      	cmp	r0, r4
 8005c12:	d10b      	bne.n	8005c2c <_free_r+0x6c>
 8005c14:	6820      	ldr	r0, [r4, #0]
 8005c16:	4401      	add	r1, r0
 8005c18:	1850      	adds	r0, r2, r1
 8005c1a:	4283      	cmp	r3, r0
 8005c1c:	6011      	str	r1, [r2, #0]
 8005c1e:	d1e0      	bne.n	8005be2 <_free_r+0x22>
 8005c20:	6818      	ldr	r0, [r3, #0]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	6053      	str	r3, [r2, #4]
 8005c26:	4408      	add	r0, r1
 8005c28:	6010      	str	r0, [r2, #0]
 8005c2a:	e7da      	b.n	8005be2 <_free_r+0x22>
 8005c2c:	d902      	bls.n	8005c34 <_free_r+0x74>
 8005c2e:	230c      	movs	r3, #12
 8005c30:	602b      	str	r3, [r5, #0]
 8005c32:	e7d6      	b.n	8005be2 <_free_r+0x22>
 8005c34:	6820      	ldr	r0, [r4, #0]
 8005c36:	1821      	adds	r1, r4, r0
 8005c38:	428b      	cmp	r3, r1
 8005c3a:	bf04      	itt	eq
 8005c3c:	6819      	ldreq	r1, [r3, #0]
 8005c3e:	685b      	ldreq	r3, [r3, #4]
 8005c40:	6063      	str	r3, [r4, #4]
 8005c42:	bf04      	itt	eq
 8005c44:	1809      	addeq	r1, r1, r0
 8005c46:	6021      	streq	r1, [r4, #0]
 8005c48:	6054      	str	r4, [r2, #4]
 8005c4a:	e7ca      	b.n	8005be2 <_free_r+0x22>
 8005c4c:	bd38      	pop	{r3, r4, r5, pc}
 8005c4e:	bf00      	nop
 8005c50:	200004e4 	.word	0x200004e4

08005c54 <malloc>:
 8005c54:	4b02      	ldr	r3, [pc, #8]	@ (8005c60 <malloc+0xc>)
 8005c56:	4601      	mov	r1, r0
 8005c58:	6818      	ldr	r0, [r3, #0]
 8005c5a:	f000 b825 	b.w	8005ca8 <_malloc_r>
 8005c5e:	bf00      	nop
 8005c60:	20000018 	.word	0x20000018

08005c64 <sbrk_aligned>:
 8005c64:	b570      	push	{r4, r5, r6, lr}
 8005c66:	4e0f      	ldr	r6, [pc, #60]	@ (8005ca4 <sbrk_aligned+0x40>)
 8005c68:	460c      	mov	r4, r1
 8005c6a:	6831      	ldr	r1, [r6, #0]
 8005c6c:	4605      	mov	r5, r0
 8005c6e:	b911      	cbnz	r1, 8005c76 <sbrk_aligned+0x12>
 8005c70:	f001 ffda 	bl	8007c28 <_sbrk_r>
 8005c74:	6030      	str	r0, [r6, #0]
 8005c76:	4621      	mov	r1, r4
 8005c78:	4628      	mov	r0, r5
 8005c7a:	f001 ffd5 	bl	8007c28 <_sbrk_r>
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d103      	bne.n	8005c8a <sbrk_aligned+0x26>
 8005c82:	f04f 34ff 	mov.w	r4, #4294967295
 8005c86:	4620      	mov	r0, r4
 8005c88:	bd70      	pop	{r4, r5, r6, pc}
 8005c8a:	1cc4      	adds	r4, r0, #3
 8005c8c:	f024 0403 	bic.w	r4, r4, #3
 8005c90:	42a0      	cmp	r0, r4
 8005c92:	d0f8      	beq.n	8005c86 <sbrk_aligned+0x22>
 8005c94:	1a21      	subs	r1, r4, r0
 8005c96:	4628      	mov	r0, r5
 8005c98:	f001 ffc6 	bl	8007c28 <_sbrk_r>
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	d1f2      	bne.n	8005c86 <sbrk_aligned+0x22>
 8005ca0:	e7ef      	b.n	8005c82 <sbrk_aligned+0x1e>
 8005ca2:	bf00      	nop
 8005ca4:	200004e0 	.word	0x200004e0

08005ca8 <_malloc_r>:
 8005ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cac:	1ccd      	adds	r5, r1, #3
 8005cae:	f025 0503 	bic.w	r5, r5, #3
 8005cb2:	3508      	adds	r5, #8
 8005cb4:	2d0c      	cmp	r5, #12
 8005cb6:	bf38      	it	cc
 8005cb8:	250c      	movcc	r5, #12
 8005cba:	2d00      	cmp	r5, #0
 8005cbc:	4606      	mov	r6, r0
 8005cbe:	db01      	blt.n	8005cc4 <_malloc_r+0x1c>
 8005cc0:	42a9      	cmp	r1, r5
 8005cc2:	d904      	bls.n	8005cce <_malloc_r+0x26>
 8005cc4:	230c      	movs	r3, #12
 8005cc6:	6033      	str	r3, [r6, #0]
 8005cc8:	2000      	movs	r0, #0
 8005cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005da4 <_malloc_r+0xfc>
 8005cd2:	f000 f869 	bl	8005da8 <__malloc_lock>
 8005cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8005cda:	461c      	mov	r4, r3
 8005cdc:	bb44      	cbnz	r4, 8005d30 <_malloc_r+0x88>
 8005cde:	4629      	mov	r1, r5
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	f7ff ffbf 	bl	8005c64 <sbrk_aligned>
 8005ce6:	1c43      	adds	r3, r0, #1
 8005ce8:	4604      	mov	r4, r0
 8005cea:	d158      	bne.n	8005d9e <_malloc_r+0xf6>
 8005cec:	f8d8 4000 	ldr.w	r4, [r8]
 8005cf0:	4627      	mov	r7, r4
 8005cf2:	2f00      	cmp	r7, #0
 8005cf4:	d143      	bne.n	8005d7e <_malloc_r+0xd6>
 8005cf6:	2c00      	cmp	r4, #0
 8005cf8:	d04b      	beq.n	8005d92 <_malloc_r+0xea>
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	4639      	mov	r1, r7
 8005cfe:	4630      	mov	r0, r6
 8005d00:	eb04 0903 	add.w	r9, r4, r3
 8005d04:	f001 ff90 	bl	8007c28 <_sbrk_r>
 8005d08:	4581      	cmp	r9, r0
 8005d0a:	d142      	bne.n	8005d92 <_malloc_r+0xea>
 8005d0c:	6821      	ldr	r1, [r4, #0]
 8005d0e:	1a6d      	subs	r5, r5, r1
 8005d10:	4629      	mov	r1, r5
 8005d12:	4630      	mov	r0, r6
 8005d14:	f7ff ffa6 	bl	8005c64 <sbrk_aligned>
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d03a      	beq.n	8005d92 <_malloc_r+0xea>
 8005d1c:	6823      	ldr	r3, [r4, #0]
 8005d1e:	442b      	add	r3, r5
 8005d20:	6023      	str	r3, [r4, #0]
 8005d22:	f8d8 3000 	ldr.w	r3, [r8]
 8005d26:	685a      	ldr	r2, [r3, #4]
 8005d28:	bb62      	cbnz	r2, 8005d84 <_malloc_r+0xdc>
 8005d2a:	f8c8 7000 	str.w	r7, [r8]
 8005d2e:	e00f      	b.n	8005d50 <_malloc_r+0xa8>
 8005d30:	6822      	ldr	r2, [r4, #0]
 8005d32:	1b52      	subs	r2, r2, r5
 8005d34:	d420      	bmi.n	8005d78 <_malloc_r+0xd0>
 8005d36:	2a0b      	cmp	r2, #11
 8005d38:	d917      	bls.n	8005d6a <_malloc_r+0xc2>
 8005d3a:	1961      	adds	r1, r4, r5
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	6025      	str	r5, [r4, #0]
 8005d40:	bf18      	it	ne
 8005d42:	6059      	strne	r1, [r3, #4]
 8005d44:	6863      	ldr	r3, [r4, #4]
 8005d46:	bf08      	it	eq
 8005d48:	f8c8 1000 	streq.w	r1, [r8]
 8005d4c:	5162      	str	r2, [r4, r5]
 8005d4e:	604b      	str	r3, [r1, #4]
 8005d50:	4630      	mov	r0, r6
 8005d52:	f000 f82f 	bl	8005db4 <__malloc_unlock>
 8005d56:	f104 000b 	add.w	r0, r4, #11
 8005d5a:	1d23      	adds	r3, r4, #4
 8005d5c:	f020 0007 	bic.w	r0, r0, #7
 8005d60:	1ac2      	subs	r2, r0, r3
 8005d62:	bf1c      	itt	ne
 8005d64:	1a1b      	subne	r3, r3, r0
 8005d66:	50a3      	strne	r3, [r4, r2]
 8005d68:	e7af      	b.n	8005cca <_malloc_r+0x22>
 8005d6a:	6862      	ldr	r2, [r4, #4]
 8005d6c:	42a3      	cmp	r3, r4
 8005d6e:	bf0c      	ite	eq
 8005d70:	f8c8 2000 	streq.w	r2, [r8]
 8005d74:	605a      	strne	r2, [r3, #4]
 8005d76:	e7eb      	b.n	8005d50 <_malloc_r+0xa8>
 8005d78:	4623      	mov	r3, r4
 8005d7a:	6864      	ldr	r4, [r4, #4]
 8005d7c:	e7ae      	b.n	8005cdc <_malloc_r+0x34>
 8005d7e:	463c      	mov	r4, r7
 8005d80:	687f      	ldr	r7, [r7, #4]
 8005d82:	e7b6      	b.n	8005cf2 <_malloc_r+0x4a>
 8005d84:	461a      	mov	r2, r3
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	42a3      	cmp	r3, r4
 8005d8a:	d1fb      	bne.n	8005d84 <_malloc_r+0xdc>
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	6053      	str	r3, [r2, #4]
 8005d90:	e7de      	b.n	8005d50 <_malloc_r+0xa8>
 8005d92:	230c      	movs	r3, #12
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	4630      	mov	r0, r6
 8005d98:	f000 f80c 	bl	8005db4 <__malloc_unlock>
 8005d9c:	e794      	b.n	8005cc8 <_malloc_r+0x20>
 8005d9e:	6005      	str	r5, [r0, #0]
 8005da0:	e7d6      	b.n	8005d50 <_malloc_r+0xa8>
 8005da2:	bf00      	nop
 8005da4:	200004e4 	.word	0x200004e4

08005da8 <__malloc_lock>:
 8005da8:	4801      	ldr	r0, [pc, #4]	@ (8005db0 <__malloc_lock+0x8>)
 8005daa:	f7ff b8a8 	b.w	8004efe <__retarget_lock_acquire_recursive>
 8005dae:	bf00      	nop
 8005db0:	200004dc 	.word	0x200004dc

08005db4 <__malloc_unlock>:
 8005db4:	4801      	ldr	r0, [pc, #4]	@ (8005dbc <__malloc_unlock+0x8>)
 8005db6:	f7ff b8a3 	b.w	8004f00 <__retarget_lock_release_recursive>
 8005dba:	bf00      	nop
 8005dbc:	200004dc 	.word	0x200004dc

08005dc0 <_Balloc>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	69c6      	ldr	r6, [r0, #28]
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	b976      	cbnz	r6, 8005de8 <_Balloc+0x28>
 8005dca:	2010      	movs	r0, #16
 8005dcc:	f7ff ff42 	bl	8005c54 <malloc>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	61e0      	str	r0, [r4, #28]
 8005dd4:	b920      	cbnz	r0, 8005de0 <_Balloc+0x20>
 8005dd6:	4b18      	ldr	r3, [pc, #96]	@ (8005e38 <_Balloc+0x78>)
 8005dd8:	4818      	ldr	r0, [pc, #96]	@ (8005e3c <_Balloc+0x7c>)
 8005dda:	216b      	movs	r1, #107	@ 0x6b
 8005ddc:	f001 ff4c 	bl	8007c78 <__assert_func>
 8005de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005de4:	6006      	str	r6, [r0, #0]
 8005de6:	60c6      	str	r6, [r0, #12]
 8005de8:	69e6      	ldr	r6, [r4, #28]
 8005dea:	68f3      	ldr	r3, [r6, #12]
 8005dec:	b183      	cbz	r3, 8005e10 <_Balloc+0x50>
 8005dee:	69e3      	ldr	r3, [r4, #28]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005df6:	b9b8      	cbnz	r0, 8005e28 <_Balloc+0x68>
 8005df8:	2101      	movs	r1, #1
 8005dfa:	fa01 f605 	lsl.w	r6, r1, r5
 8005dfe:	1d72      	adds	r2, r6, #5
 8005e00:	0092      	lsls	r2, r2, #2
 8005e02:	4620      	mov	r0, r4
 8005e04:	f001 ff56 	bl	8007cb4 <_calloc_r>
 8005e08:	b160      	cbz	r0, 8005e24 <_Balloc+0x64>
 8005e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e0e:	e00e      	b.n	8005e2e <_Balloc+0x6e>
 8005e10:	2221      	movs	r2, #33	@ 0x21
 8005e12:	2104      	movs	r1, #4
 8005e14:	4620      	mov	r0, r4
 8005e16:	f001 ff4d 	bl	8007cb4 <_calloc_r>
 8005e1a:	69e3      	ldr	r3, [r4, #28]
 8005e1c:	60f0      	str	r0, [r6, #12]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e4      	bne.n	8005dee <_Balloc+0x2e>
 8005e24:	2000      	movs	r0, #0
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	6802      	ldr	r2, [r0, #0]
 8005e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e34:	e7f7      	b.n	8005e26 <_Balloc+0x66>
 8005e36:	bf00      	nop
 8005e38:	08008672 	.word	0x08008672
 8005e3c:	080086f2 	.word	0x080086f2

08005e40 <_Bfree>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	69c6      	ldr	r6, [r0, #28]
 8005e44:	4605      	mov	r5, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	b976      	cbnz	r6, 8005e68 <_Bfree+0x28>
 8005e4a:	2010      	movs	r0, #16
 8005e4c:	f7ff ff02 	bl	8005c54 <malloc>
 8005e50:	4602      	mov	r2, r0
 8005e52:	61e8      	str	r0, [r5, #28]
 8005e54:	b920      	cbnz	r0, 8005e60 <_Bfree+0x20>
 8005e56:	4b09      	ldr	r3, [pc, #36]	@ (8005e7c <_Bfree+0x3c>)
 8005e58:	4809      	ldr	r0, [pc, #36]	@ (8005e80 <_Bfree+0x40>)
 8005e5a:	218f      	movs	r1, #143	@ 0x8f
 8005e5c:	f001 ff0c 	bl	8007c78 <__assert_func>
 8005e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e64:	6006      	str	r6, [r0, #0]
 8005e66:	60c6      	str	r6, [r0, #12]
 8005e68:	b13c      	cbz	r4, 8005e7a <_Bfree+0x3a>
 8005e6a:	69eb      	ldr	r3, [r5, #28]
 8005e6c:	6862      	ldr	r2, [r4, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e74:	6021      	str	r1, [r4, #0]
 8005e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	08008672 	.word	0x08008672
 8005e80:	080086f2 	.word	0x080086f2

08005e84 <__multadd>:
 8005e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e88:	690d      	ldr	r5, [r1, #16]
 8005e8a:	4607      	mov	r7, r0
 8005e8c:	460c      	mov	r4, r1
 8005e8e:	461e      	mov	r6, r3
 8005e90:	f101 0c14 	add.w	ip, r1, #20
 8005e94:	2000      	movs	r0, #0
 8005e96:	f8dc 3000 	ldr.w	r3, [ip]
 8005e9a:	b299      	uxth	r1, r3
 8005e9c:	fb02 6101 	mla	r1, r2, r1, r6
 8005ea0:	0c1e      	lsrs	r6, r3, #16
 8005ea2:	0c0b      	lsrs	r3, r1, #16
 8005ea4:	fb02 3306 	mla	r3, r2, r6, r3
 8005ea8:	b289      	uxth	r1, r1
 8005eaa:	3001      	adds	r0, #1
 8005eac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005eb0:	4285      	cmp	r5, r0
 8005eb2:	f84c 1b04 	str.w	r1, [ip], #4
 8005eb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005eba:	dcec      	bgt.n	8005e96 <__multadd+0x12>
 8005ebc:	b30e      	cbz	r6, 8005f02 <__multadd+0x7e>
 8005ebe:	68a3      	ldr	r3, [r4, #8]
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	dc19      	bgt.n	8005ef8 <__multadd+0x74>
 8005ec4:	6861      	ldr	r1, [r4, #4]
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	3101      	adds	r1, #1
 8005eca:	f7ff ff79 	bl	8005dc0 <_Balloc>
 8005ece:	4680      	mov	r8, r0
 8005ed0:	b928      	cbnz	r0, 8005ede <__multadd+0x5a>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8005f08 <__multadd+0x84>)
 8005ed6:	480d      	ldr	r0, [pc, #52]	@ (8005f0c <__multadd+0x88>)
 8005ed8:	21ba      	movs	r1, #186	@ 0xba
 8005eda:	f001 fecd 	bl	8007c78 <__assert_func>
 8005ede:	6922      	ldr	r2, [r4, #16]
 8005ee0:	3202      	adds	r2, #2
 8005ee2:	f104 010c 	add.w	r1, r4, #12
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	300c      	adds	r0, #12
 8005eea:	f001 fead 	bl	8007c48 <memcpy>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	f7ff ffa5 	bl	8005e40 <_Bfree>
 8005ef6:	4644      	mov	r4, r8
 8005ef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005efc:	3501      	adds	r5, #1
 8005efe:	615e      	str	r6, [r3, #20]
 8005f00:	6125      	str	r5, [r4, #16]
 8005f02:	4620      	mov	r0, r4
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	080086e1 	.word	0x080086e1
 8005f0c:	080086f2 	.word	0x080086f2

08005f10 <__s2b>:
 8005f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f14:	460c      	mov	r4, r1
 8005f16:	4615      	mov	r5, r2
 8005f18:	461f      	mov	r7, r3
 8005f1a:	2209      	movs	r2, #9
 8005f1c:	3308      	adds	r3, #8
 8005f1e:	4606      	mov	r6, r0
 8005f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f24:	2100      	movs	r1, #0
 8005f26:	2201      	movs	r2, #1
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	db09      	blt.n	8005f40 <__s2b+0x30>
 8005f2c:	4630      	mov	r0, r6
 8005f2e:	f7ff ff47 	bl	8005dc0 <_Balloc>
 8005f32:	b940      	cbnz	r0, 8005f46 <__s2b+0x36>
 8005f34:	4602      	mov	r2, r0
 8005f36:	4b19      	ldr	r3, [pc, #100]	@ (8005f9c <__s2b+0x8c>)
 8005f38:	4819      	ldr	r0, [pc, #100]	@ (8005fa0 <__s2b+0x90>)
 8005f3a:	21d3      	movs	r1, #211	@ 0xd3
 8005f3c:	f001 fe9c 	bl	8007c78 <__assert_func>
 8005f40:	0052      	lsls	r2, r2, #1
 8005f42:	3101      	adds	r1, #1
 8005f44:	e7f0      	b.n	8005f28 <__s2b+0x18>
 8005f46:	9b08      	ldr	r3, [sp, #32]
 8005f48:	6143      	str	r3, [r0, #20]
 8005f4a:	2d09      	cmp	r5, #9
 8005f4c:	f04f 0301 	mov.w	r3, #1
 8005f50:	6103      	str	r3, [r0, #16]
 8005f52:	dd16      	ble.n	8005f82 <__s2b+0x72>
 8005f54:	f104 0909 	add.w	r9, r4, #9
 8005f58:	46c8      	mov	r8, r9
 8005f5a:	442c      	add	r4, r5
 8005f5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f60:	4601      	mov	r1, r0
 8005f62:	3b30      	subs	r3, #48	@ 0x30
 8005f64:	220a      	movs	r2, #10
 8005f66:	4630      	mov	r0, r6
 8005f68:	f7ff ff8c 	bl	8005e84 <__multadd>
 8005f6c:	45a0      	cmp	r8, r4
 8005f6e:	d1f5      	bne.n	8005f5c <__s2b+0x4c>
 8005f70:	f1a5 0408 	sub.w	r4, r5, #8
 8005f74:	444c      	add	r4, r9
 8005f76:	1b2d      	subs	r5, r5, r4
 8005f78:	1963      	adds	r3, r4, r5
 8005f7a:	42bb      	cmp	r3, r7
 8005f7c:	db04      	blt.n	8005f88 <__s2b+0x78>
 8005f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f82:	340a      	adds	r4, #10
 8005f84:	2509      	movs	r5, #9
 8005f86:	e7f6      	b.n	8005f76 <__s2b+0x66>
 8005f88:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f8c:	4601      	mov	r1, r0
 8005f8e:	3b30      	subs	r3, #48	@ 0x30
 8005f90:	220a      	movs	r2, #10
 8005f92:	4630      	mov	r0, r6
 8005f94:	f7ff ff76 	bl	8005e84 <__multadd>
 8005f98:	e7ee      	b.n	8005f78 <__s2b+0x68>
 8005f9a:	bf00      	nop
 8005f9c:	080086e1 	.word	0x080086e1
 8005fa0:	080086f2 	.word	0x080086f2

08005fa4 <__hi0bits>:
 8005fa4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005fa8:	4603      	mov	r3, r0
 8005faa:	bf36      	itet	cc
 8005fac:	0403      	lslcc	r3, r0, #16
 8005fae:	2000      	movcs	r0, #0
 8005fb0:	2010      	movcc	r0, #16
 8005fb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005fb6:	bf3c      	itt	cc
 8005fb8:	021b      	lslcc	r3, r3, #8
 8005fba:	3008      	addcc	r0, #8
 8005fbc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fc0:	bf3c      	itt	cc
 8005fc2:	011b      	lslcc	r3, r3, #4
 8005fc4:	3004      	addcc	r0, #4
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fca:	bf3c      	itt	cc
 8005fcc:	009b      	lslcc	r3, r3, #2
 8005fce:	3002      	addcc	r0, #2
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	db05      	blt.n	8005fe0 <__hi0bits+0x3c>
 8005fd4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005fd8:	f100 0001 	add.w	r0, r0, #1
 8005fdc:	bf08      	it	eq
 8005fde:	2020      	moveq	r0, #32
 8005fe0:	4770      	bx	lr

08005fe2 <__lo0bits>:
 8005fe2:	6803      	ldr	r3, [r0, #0]
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	f013 0007 	ands.w	r0, r3, #7
 8005fea:	d00b      	beq.n	8006004 <__lo0bits+0x22>
 8005fec:	07d9      	lsls	r1, r3, #31
 8005fee:	d421      	bmi.n	8006034 <__lo0bits+0x52>
 8005ff0:	0798      	lsls	r0, r3, #30
 8005ff2:	bf49      	itett	mi
 8005ff4:	085b      	lsrmi	r3, r3, #1
 8005ff6:	089b      	lsrpl	r3, r3, #2
 8005ff8:	2001      	movmi	r0, #1
 8005ffa:	6013      	strmi	r3, [r2, #0]
 8005ffc:	bf5c      	itt	pl
 8005ffe:	6013      	strpl	r3, [r2, #0]
 8006000:	2002      	movpl	r0, #2
 8006002:	4770      	bx	lr
 8006004:	b299      	uxth	r1, r3
 8006006:	b909      	cbnz	r1, 800600c <__lo0bits+0x2a>
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	2010      	movs	r0, #16
 800600c:	b2d9      	uxtb	r1, r3
 800600e:	b909      	cbnz	r1, 8006014 <__lo0bits+0x32>
 8006010:	3008      	adds	r0, #8
 8006012:	0a1b      	lsrs	r3, r3, #8
 8006014:	0719      	lsls	r1, r3, #28
 8006016:	bf04      	itt	eq
 8006018:	091b      	lsreq	r3, r3, #4
 800601a:	3004      	addeq	r0, #4
 800601c:	0799      	lsls	r1, r3, #30
 800601e:	bf04      	itt	eq
 8006020:	089b      	lsreq	r3, r3, #2
 8006022:	3002      	addeq	r0, #2
 8006024:	07d9      	lsls	r1, r3, #31
 8006026:	d403      	bmi.n	8006030 <__lo0bits+0x4e>
 8006028:	085b      	lsrs	r3, r3, #1
 800602a:	f100 0001 	add.w	r0, r0, #1
 800602e:	d003      	beq.n	8006038 <__lo0bits+0x56>
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	4770      	bx	lr
 8006034:	2000      	movs	r0, #0
 8006036:	4770      	bx	lr
 8006038:	2020      	movs	r0, #32
 800603a:	4770      	bx	lr

0800603c <__i2b>:
 800603c:	b510      	push	{r4, lr}
 800603e:	460c      	mov	r4, r1
 8006040:	2101      	movs	r1, #1
 8006042:	f7ff febd 	bl	8005dc0 <_Balloc>
 8006046:	4602      	mov	r2, r0
 8006048:	b928      	cbnz	r0, 8006056 <__i2b+0x1a>
 800604a:	4b05      	ldr	r3, [pc, #20]	@ (8006060 <__i2b+0x24>)
 800604c:	4805      	ldr	r0, [pc, #20]	@ (8006064 <__i2b+0x28>)
 800604e:	f240 1145 	movw	r1, #325	@ 0x145
 8006052:	f001 fe11 	bl	8007c78 <__assert_func>
 8006056:	2301      	movs	r3, #1
 8006058:	6144      	str	r4, [r0, #20]
 800605a:	6103      	str	r3, [r0, #16]
 800605c:	bd10      	pop	{r4, pc}
 800605e:	bf00      	nop
 8006060:	080086e1 	.word	0x080086e1
 8006064:	080086f2 	.word	0x080086f2

08006068 <__multiply>:
 8006068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606c:	4617      	mov	r7, r2
 800606e:	690a      	ldr	r2, [r1, #16]
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	429a      	cmp	r2, r3
 8006074:	bfa8      	it	ge
 8006076:	463b      	movge	r3, r7
 8006078:	4689      	mov	r9, r1
 800607a:	bfa4      	itt	ge
 800607c:	460f      	movge	r7, r1
 800607e:	4699      	movge	r9, r3
 8006080:	693d      	ldr	r5, [r7, #16]
 8006082:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	6879      	ldr	r1, [r7, #4]
 800608a:	eb05 060a 	add.w	r6, r5, sl
 800608e:	42b3      	cmp	r3, r6
 8006090:	b085      	sub	sp, #20
 8006092:	bfb8      	it	lt
 8006094:	3101      	addlt	r1, #1
 8006096:	f7ff fe93 	bl	8005dc0 <_Balloc>
 800609a:	b930      	cbnz	r0, 80060aa <__multiply+0x42>
 800609c:	4602      	mov	r2, r0
 800609e:	4b41      	ldr	r3, [pc, #260]	@ (80061a4 <__multiply+0x13c>)
 80060a0:	4841      	ldr	r0, [pc, #260]	@ (80061a8 <__multiply+0x140>)
 80060a2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80060a6:	f001 fde7 	bl	8007c78 <__assert_func>
 80060aa:	f100 0414 	add.w	r4, r0, #20
 80060ae:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80060b2:	4623      	mov	r3, r4
 80060b4:	2200      	movs	r2, #0
 80060b6:	4573      	cmp	r3, lr
 80060b8:	d320      	bcc.n	80060fc <__multiply+0x94>
 80060ba:	f107 0814 	add.w	r8, r7, #20
 80060be:	f109 0114 	add.w	r1, r9, #20
 80060c2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80060c6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80060ca:	9302      	str	r3, [sp, #8]
 80060cc:	1beb      	subs	r3, r5, r7
 80060ce:	3b15      	subs	r3, #21
 80060d0:	f023 0303 	bic.w	r3, r3, #3
 80060d4:	3304      	adds	r3, #4
 80060d6:	3715      	adds	r7, #21
 80060d8:	42bd      	cmp	r5, r7
 80060da:	bf38      	it	cc
 80060dc:	2304      	movcc	r3, #4
 80060de:	9301      	str	r3, [sp, #4]
 80060e0:	9b02      	ldr	r3, [sp, #8]
 80060e2:	9103      	str	r1, [sp, #12]
 80060e4:	428b      	cmp	r3, r1
 80060e6:	d80c      	bhi.n	8006102 <__multiply+0x9a>
 80060e8:	2e00      	cmp	r6, #0
 80060ea:	dd03      	ble.n	80060f4 <__multiply+0x8c>
 80060ec:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d055      	beq.n	80061a0 <__multiply+0x138>
 80060f4:	6106      	str	r6, [r0, #16]
 80060f6:	b005      	add	sp, #20
 80060f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fc:	f843 2b04 	str.w	r2, [r3], #4
 8006100:	e7d9      	b.n	80060b6 <__multiply+0x4e>
 8006102:	f8b1 a000 	ldrh.w	sl, [r1]
 8006106:	f1ba 0f00 	cmp.w	sl, #0
 800610a:	d01f      	beq.n	800614c <__multiply+0xe4>
 800610c:	46c4      	mov	ip, r8
 800610e:	46a1      	mov	r9, r4
 8006110:	2700      	movs	r7, #0
 8006112:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006116:	f8d9 3000 	ldr.w	r3, [r9]
 800611a:	fa1f fb82 	uxth.w	fp, r2
 800611e:	b29b      	uxth	r3, r3
 8006120:	fb0a 330b 	mla	r3, sl, fp, r3
 8006124:	443b      	add	r3, r7
 8006126:	f8d9 7000 	ldr.w	r7, [r9]
 800612a:	0c12      	lsrs	r2, r2, #16
 800612c:	0c3f      	lsrs	r7, r7, #16
 800612e:	fb0a 7202 	mla	r2, sl, r2, r7
 8006132:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006136:	b29b      	uxth	r3, r3
 8006138:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800613c:	4565      	cmp	r5, ip
 800613e:	f849 3b04 	str.w	r3, [r9], #4
 8006142:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006146:	d8e4      	bhi.n	8006112 <__multiply+0xaa>
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	50e7      	str	r7, [r4, r3]
 800614c:	9b03      	ldr	r3, [sp, #12]
 800614e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006152:	3104      	adds	r1, #4
 8006154:	f1b9 0f00 	cmp.w	r9, #0
 8006158:	d020      	beq.n	800619c <__multiply+0x134>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	4647      	mov	r7, r8
 800615e:	46a4      	mov	ip, r4
 8006160:	f04f 0a00 	mov.w	sl, #0
 8006164:	f8b7 b000 	ldrh.w	fp, [r7]
 8006168:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800616c:	fb09 220b 	mla	r2, r9, fp, r2
 8006170:	4452      	add	r2, sl
 8006172:	b29b      	uxth	r3, r3
 8006174:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006178:	f84c 3b04 	str.w	r3, [ip], #4
 800617c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006180:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006184:	f8bc 3000 	ldrh.w	r3, [ip]
 8006188:	fb09 330a 	mla	r3, r9, sl, r3
 800618c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006190:	42bd      	cmp	r5, r7
 8006192:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006196:	d8e5      	bhi.n	8006164 <__multiply+0xfc>
 8006198:	9a01      	ldr	r2, [sp, #4]
 800619a:	50a3      	str	r3, [r4, r2]
 800619c:	3404      	adds	r4, #4
 800619e:	e79f      	b.n	80060e0 <__multiply+0x78>
 80061a0:	3e01      	subs	r6, #1
 80061a2:	e7a1      	b.n	80060e8 <__multiply+0x80>
 80061a4:	080086e1 	.word	0x080086e1
 80061a8:	080086f2 	.word	0x080086f2

080061ac <__pow5mult>:
 80061ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061b0:	4615      	mov	r5, r2
 80061b2:	f012 0203 	ands.w	r2, r2, #3
 80061b6:	4607      	mov	r7, r0
 80061b8:	460e      	mov	r6, r1
 80061ba:	d007      	beq.n	80061cc <__pow5mult+0x20>
 80061bc:	4c25      	ldr	r4, [pc, #148]	@ (8006254 <__pow5mult+0xa8>)
 80061be:	3a01      	subs	r2, #1
 80061c0:	2300      	movs	r3, #0
 80061c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061c6:	f7ff fe5d 	bl	8005e84 <__multadd>
 80061ca:	4606      	mov	r6, r0
 80061cc:	10ad      	asrs	r5, r5, #2
 80061ce:	d03d      	beq.n	800624c <__pow5mult+0xa0>
 80061d0:	69fc      	ldr	r4, [r7, #28]
 80061d2:	b97c      	cbnz	r4, 80061f4 <__pow5mult+0x48>
 80061d4:	2010      	movs	r0, #16
 80061d6:	f7ff fd3d 	bl	8005c54 <malloc>
 80061da:	4602      	mov	r2, r0
 80061dc:	61f8      	str	r0, [r7, #28]
 80061de:	b928      	cbnz	r0, 80061ec <__pow5mult+0x40>
 80061e0:	4b1d      	ldr	r3, [pc, #116]	@ (8006258 <__pow5mult+0xac>)
 80061e2:	481e      	ldr	r0, [pc, #120]	@ (800625c <__pow5mult+0xb0>)
 80061e4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80061e8:	f001 fd46 	bl	8007c78 <__assert_func>
 80061ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061f0:	6004      	str	r4, [r0, #0]
 80061f2:	60c4      	str	r4, [r0, #12]
 80061f4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80061f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061fc:	b94c      	cbnz	r4, 8006212 <__pow5mult+0x66>
 80061fe:	f240 2171 	movw	r1, #625	@ 0x271
 8006202:	4638      	mov	r0, r7
 8006204:	f7ff ff1a 	bl	800603c <__i2b>
 8006208:	2300      	movs	r3, #0
 800620a:	f8c8 0008 	str.w	r0, [r8, #8]
 800620e:	4604      	mov	r4, r0
 8006210:	6003      	str	r3, [r0, #0]
 8006212:	f04f 0900 	mov.w	r9, #0
 8006216:	07eb      	lsls	r3, r5, #31
 8006218:	d50a      	bpl.n	8006230 <__pow5mult+0x84>
 800621a:	4631      	mov	r1, r6
 800621c:	4622      	mov	r2, r4
 800621e:	4638      	mov	r0, r7
 8006220:	f7ff ff22 	bl	8006068 <__multiply>
 8006224:	4631      	mov	r1, r6
 8006226:	4680      	mov	r8, r0
 8006228:	4638      	mov	r0, r7
 800622a:	f7ff fe09 	bl	8005e40 <_Bfree>
 800622e:	4646      	mov	r6, r8
 8006230:	106d      	asrs	r5, r5, #1
 8006232:	d00b      	beq.n	800624c <__pow5mult+0xa0>
 8006234:	6820      	ldr	r0, [r4, #0]
 8006236:	b938      	cbnz	r0, 8006248 <__pow5mult+0x9c>
 8006238:	4622      	mov	r2, r4
 800623a:	4621      	mov	r1, r4
 800623c:	4638      	mov	r0, r7
 800623e:	f7ff ff13 	bl	8006068 <__multiply>
 8006242:	6020      	str	r0, [r4, #0]
 8006244:	f8c0 9000 	str.w	r9, [r0]
 8006248:	4604      	mov	r4, r0
 800624a:	e7e4      	b.n	8006216 <__pow5mult+0x6a>
 800624c:	4630      	mov	r0, r6
 800624e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006252:	bf00      	nop
 8006254:	08008804 	.word	0x08008804
 8006258:	08008672 	.word	0x08008672
 800625c:	080086f2 	.word	0x080086f2

08006260 <__lshift>:
 8006260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006264:	460c      	mov	r4, r1
 8006266:	6849      	ldr	r1, [r1, #4]
 8006268:	6923      	ldr	r3, [r4, #16]
 800626a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800626e:	68a3      	ldr	r3, [r4, #8]
 8006270:	4607      	mov	r7, r0
 8006272:	4691      	mov	r9, r2
 8006274:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006278:	f108 0601 	add.w	r6, r8, #1
 800627c:	42b3      	cmp	r3, r6
 800627e:	db0b      	blt.n	8006298 <__lshift+0x38>
 8006280:	4638      	mov	r0, r7
 8006282:	f7ff fd9d 	bl	8005dc0 <_Balloc>
 8006286:	4605      	mov	r5, r0
 8006288:	b948      	cbnz	r0, 800629e <__lshift+0x3e>
 800628a:	4602      	mov	r2, r0
 800628c:	4b28      	ldr	r3, [pc, #160]	@ (8006330 <__lshift+0xd0>)
 800628e:	4829      	ldr	r0, [pc, #164]	@ (8006334 <__lshift+0xd4>)
 8006290:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006294:	f001 fcf0 	bl	8007c78 <__assert_func>
 8006298:	3101      	adds	r1, #1
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	e7ee      	b.n	800627c <__lshift+0x1c>
 800629e:	2300      	movs	r3, #0
 80062a0:	f100 0114 	add.w	r1, r0, #20
 80062a4:	f100 0210 	add.w	r2, r0, #16
 80062a8:	4618      	mov	r0, r3
 80062aa:	4553      	cmp	r3, sl
 80062ac:	db33      	blt.n	8006316 <__lshift+0xb6>
 80062ae:	6920      	ldr	r0, [r4, #16]
 80062b0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062b4:	f104 0314 	add.w	r3, r4, #20
 80062b8:	f019 091f 	ands.w	r9, r9, #31
 80062bc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062c0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062c4:	d02b      	beq.n	800631e <__lshift+0xbe>
 80062c6:	f1c9 0e20 	rsb	lr, r9, #32
 80062ca:	468a      	mov	sl, r1
 80062cc:	2200      	movs	r2, #0
 80062ce:	6818      	ldr	r0, [r3, #0]
 80062d0:	fa00 f009 	lsl.w	r0, r0, r9
 80062d4:	4310      	orrs	r0, r2
 80062d6:	f84a 0b04 	str.w	r0, [sl], #4
 80062da:	f853 2b04 	ldr.w	r2, [r3], #4
 80062de:	459c      	cmp	ip, r3
 80062e0:	fa22 f20e 	lsr.w	r2, r2, lr
 80062e4:	d8f3      	bhi.n	80062ce <__lshift+0x6e>
 80062e6:	ebac 0304 	sub.w	r3, ip, r4
 80062ea:	3b15      	subs	r3, #21
 80062ec:	f023 0303 	bic.w	r3, r3, #3
 80062f0:	3304      	adds	r3, #4
 80062f2:	f104 0015 	add.w	r0, r4, #21
 80062f6:	4560      	cmp	r0, ip
 80062f8:	bf88      	it	hi
 80062fa:	2304      	movhi	r3, #4
 80062fc:	50ca      	str	r2, [r1, r3]
 80062fe:	b10a      	cbz	r2, 8006304 <__lshift+0xa4>
 8006300:	f108 0602 	add.w	r6, r8, #2
 8006304:	3e01      	subs	r6, #1
 8006306:	4638      	mov	r0, r7
 8006308:	612e      	str	r6, [r5, #16]
 800630a:	4621      	mov	r1, r4
 800630c:	f7ff fd98 	bl	8005e40 <_Bfree>
 8006310:	4628      	mov	r0, r5
 8006312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006316:	f842 0f04 	str.w	r0, [r2, #4]!
 800631a:	3301      	adds	r3, #1
 800631c:	e7c5      	b.n	80062aa <__lshift+0x4a>
 800631e:	3904      	subs	r1, #4
 8006320:	f853 2b04 	ldr.w	r2, [r3], #4
 8006324:	f841 2f04 	str.w	r2, [r1, #4]!
 8006328:	459c      	cmp	ip, r3
 800632a:	d8f9      	bhi.n	8006320 <__lshift+0xc0>
 800632c:	e7ea      	b.n	8006304 <__lshift+0xa4>
 800632e:	bf00      	nop
 8006330:	080086e1 	.word	0x080086e1
 8006334:	080086f2 	.word	0x080086f2

08006338 <__mcmp>:
 8006338:	690a      	ldr	r2, [r1, #16]
 800633a:	4603      	mov	r3, r0
 800633c:	6900      	ldr	r0, [r0, #16]
 800633e:	1a80      	subs	r0, r0, r2
 8006340:	b530      	push	{r4, r5, lr}
 8006342:	d10e      	bne.n	8006362 <__mcmp+0x2a>
 8006344:	3314      	adds	r3, #20
 8006346:	3114      	adds	r1, #20
 8006348:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800634c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006350:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006354:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006358:	4295      	cmp	r5, r2
 800635a:	d003      	beq.n	8006364 <__mcmp+0x2c>
 800635c:	d205      	bcs.n	800636a <__mcmp+0x32>
 800635e:	f04f 30ff 	mov.w	r0, #4294967295
 8006362:	bd30      	pop	{r4, r5, pc}
 8006364:	42a3      	cmp	r3, r4
 8006366:	d3f3      	bcc.n	8006350 <__mcmp+0x18>
 8006368:	e7fb      	b.n	8006362 <__mcmp+0x2a>
 800636a:	2001      	movs	r0, #1
 800636c:	e7f9      	b.n	8006362 <__mcmp+0x2a>
	...

08006370 <__mdiff>:
 8006370:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006374:	4689      	mov	r9, r1
 8006376:	4606      	mov	r6, r0
 8006378:	4611      	mov	r1, r2
 800637a:	4648      	mov	r0, r9
 800637c:	4614      	mov	r4, r2
 800637e:	f7ff ffdb 	bl	8006338 <__mcmp>
 8006382:	1e05      	subs	r5, r0, #0
 8006384:	d112      	bne.n	80063ac <__mdiff+0x3c>
 8006386:	4629      	mov	r1, r5
 8006388:	4630      	mov	r0, r6
 800638a:	f7ff fd19 	bl	8005dc0 <_Balloc>
 800638e:	4602      	mov	r2, r0
 8006390:	b928      	cbnz	r0, 800639e <__mdiff+0x2e>
 8006392:	4b3f      	ldr	r3, [pc, #252]	@ (8006490 <__mdiff+0x120>)
 8006394:	f240 2137 	movw	r1, #567	@ 0x237
 8006398:	483e      	ldr	r0, [pc, #248]	@ (8006494 <__mdiff+0x124>)
 800639a:	f001 fc6d 	bl	8007c78 <__assert_func>
 800639e:	2301      	movs	r3, #1
 80063a0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80063a4:	4610      	mov	r0, r2
 80063a6:	b003      	add	sp, #12
 80063a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ac:	bfbc      	itt	lt
 80063ae:	464b      	movlt	r3, r9
 80063b0:	46a1      	movlt	r9, r4
 80063b2:	4630      	mov	r0, r6
 80063b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80063b8:	bfba      	itte	lt
 80063ba:	461c      	movlt	r4, r3
 80063bc:	2501      	movlt	r5, #1
 80063be:	2500      	movge	r5, #0
 80063c0:	f7ff fcfe 	bl	8005dc0 <_Balloc>
 80063c4:	4602      	mov	r2, r0
 80063c6:	b918      	cbnz	r0, 80063d0 <__mdiff+0x60>
 80063c8:	4b31      	ldr	r3, [pc, #196]	@ (8006490 <__mdiff+0x120>)
 80063ca:	f240 2145 	movw	r1, #581	@ 0x245
 80063ce:	e7e3      	b.n	8006398 <__mdiff+0x28>
 80063d0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063d4:	6926      	ldr	r6, [r4, #16]
 80063d6:	60c5      	str	r5, [r0, #12]
 80063d8:	f109 0310 	add.w	r3, r9, #16
 80063dc:	f109 0514 	add.w	r5, r9, #20
 80063e0:	f104 0e14 	add.w	lr, r4, #20
 80063e4:	f100 0b14 	add.w	fp, r0, #20
 80063e8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80063ec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80063f0:	9301      	str	r3, [sp, #4]
 80063f2:	46d9      	mov	r9, fp
 80063f4:	f04f 0c00 	mov.w	ip, #0
 80063f8:	9b01      	ldr	r3, [sp, #4]
 80063fa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063fe:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	fa1f f38a 	uxth.w	r3, sl
 8006408:	4619      	mov	r1, r3
 800640a:	b283      	uxth	r3, r0
 800640c:	1acb      	subs	r3, r1, r3
 800640e:	0c00      	lsrs	r0, r0, #16
 8006410:	4463      	add	r3, ip
 8006412:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006416:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800641a:	b29b      	uxth	r3, r3
 800641c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006420:	4576      	cmp	r6, lr
 8006422:	f849 3b04 	str.w	r3, [r9], #4
 8006426:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800642a:	d8e5      	bhi.n	80063f8 <__mdiff+0x88>
 800642c:	1b33      	subs	r3, r6, r4
 800642e:	3b15      	subs	r3, #21
 8006430:	f023 0303 	bic.w	r3, r3, #3
 8006434:	3415      	adds	r4, #21
 8006436:	3304      	adds	r3, #4
 8006438:	42a6      	cmp	r6, r4
 800643a:	bf38      	it	cc
 800643c:	2304      	movcc	r3, #4
 800643e:	441d      	add	r5, r3
 8006440:	445b      	add	r3, fp
 8006442:	461e      	mov	r6, r3
 8006444:	462c      	mov	r4, r5
 8006446:	4544      	cmp	r4, r8
 8006448:	d30e      	bcc.n	8006468 <__mdiff+0xf8>
 800644a:	f108 0103 	add.w	r1, r8, #3
 800644e:	1b49      	subs	r1, r1, r5
 8006450:	f021 0103 	bic.w	r1, r1, #3
 8006454:	3d03      	subs	r5, #3
 8006456:	45a8      	cmp	r8, r5
 8006458:	bf38      	it	cc
 800645a:	2100      	movcc	r1, #0
 800645c:	440b      	add	r3, r1
 800645e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006462:	b191      	cbz	r1, 800648a <__mdiff+0x11a>
 8006464:	6117      	str	r7, [r2, #16]
 8006466:	e79d      	b.n	80063a4 <__mdiff+0x34>
 8006468:	f854 1b04 	ldr.w	r1, [r4], #4
 800646c:	46e6      	mov	lr, ip
 800646e:	0c08      	lsrs	r0, r1, #16
 8006470:	fa1c fc81 	uxtah	ip, ip, r1
 8006474:	4471      	add	r1, lr
 8006476:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800647a:	b289      	uxth	r1, r1
 800647c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006480:	f846 1b04 	str.w	r1, [r6], #4
 8006484:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006488:	e7dd      	b.n	8006446 <__mdiff+0xd6>
 800648a:	3f01      	subs	r7, #1
 800648c:	e7e7      	b.n	800645e <__mdiff+0xee>
 800648e:	bf00      	nop
 8006490:	080086e1 	.word	0x080086e1
 8006494:	080086f2 	.word	0x080086f2

08006498 <__ulp>:
 8006498:	b082      	sub	sp, #8
 800649a:	ed8d 0b00 	vstr	d0, [sp]
 800649e:	9a01      	ldr	r2, [sp, #4]
 80064a0:	4b0f      	ldr	r3, [pc, #60]	@ (80064e0 <__ulp+0x48>)
 80064a2:	4013      	ands	r3, r2
 80064a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	dc08      	bgt.n	80064be <__ulp+0x26>
 80064ac:	425b      	negs	r3, r3
 80064ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80064b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 80064b6:	da04      	bge.n	80064c2 <__ulp+0x2a>
 80064b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80064bc:	4113      	asrs	r3, r2
 80064be:	2200      	movs	r2, #0
 80064c0:	e008      	b.n	80064d4 <__ulp+0x3c>
 80064c2:	f1a2 0314 	sub.w	r3, r2, #20
 80064c6:	2b1e      	cmp	r3, #30
 80064c8:	bfda      	itte	le
 80064ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80064ce:	40da      	lsrle	r2, r3
 80064d0:	2201      	movgt	r2, #1
 80064d2:	2300      	movs	r3, #0
 80064d4:	4619      	mov	r1, r3
 80064d6:	4610      	mov	r0, r2
 80064d8:	ec41 0b10 	vmov	d0, r0, r1
 80064dc:	b002      	add	sp, #8
 80064de:	4770      	bx	lr
 80064e0:	7ff00000 	.word	0x7ff00000

080064e4 <__b2d>:
 80064e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064e8:	6906      	ldr	r6, [r0, #16]
 80064ea:	f100 0814 	add.w	r8, r0, #20
 80064ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80064f2:	1f37      	subs	r7, r6, #4
 80064f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80064f8:	4610      	mov	r0, r2
 80064fa:	f7ff fd53 	bl	8005fa4 <__hi0bits>
 80064fe:	f1c0 0320 	rsb	r3, r0, #32
 8006502:	280a      	cmp	r0, #10
 8006504:	600b      	str	r3, [r1, #0]
 8006506:	491b      	ldr	r1, [pc, #108]	@ (8006574 <__b2d+0x90>)
 8006508:	dc15      	bgt.n	8006536 <__b2d+0x52>
 800650a:	f1c0 0c0b 	rsb	ip, r0, #11
 800650e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006512:	45b8      	cmp	r8, r7
 8006514:	ea43 0501 	orr.w	r5, r3, r1
 8006518:	bf34      	ite	cc
 800651a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800651e:	2300      	movcs	r3, #0
 8006520:	3015      	adds	r0, #21
 8006522:	fa02 f000 	lsl.w	r0, r2, r0
 8006526:	fa23 f30c 	lsr.w	r3, r3, ip
 800652a:	4303      	orrs	r3, r0
 800652c:	461c      	mov	r4, r3
 800652e:	ec45 4b10 	vmov	d0, r4, r5
 8006532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006536:	45b8      	cmp	r8, r7
 8006538:	bf3a      	itte	cc
 800653a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800653e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006542:	2300      	movcs	r3, #0
 8006544:	380b      	subs	r0, #11
 8006546:	d012      	beq.n	800656e <__b2d+0x8a>
 8006548:	f1c0 0120 	rsb	r1, r0, #32
 800654c:	fa23 f401 	lsr.w	r4, r3, r1
 8006550:	4082      	lsls	r2, r0
 8006552:	4322      	orrs	r2, r4
 8006554:	4547      	cmp	r7, r8
 8006556:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800655a:	bf8c      	ite	hi
 800655c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006560:	2200      	movls	r2, #0
 8006562:	4083      	lsls	r3, r0
 8006564:	40ca      	lsrs	r2, r1
 8006566:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800656a:	4313      	orrs	r3, r2
 800656c:	e7de      	b.n	800652c <__b2d+0x48>
 800656e:	ea42 0501 	orr.w	r5, r2, r1
 8006572:	e7db      	b.n	800652c <__b2d+0x48>
 8006574:	3ff00000 	.word	0x3ff00000

08006578 <__d2b>:
 8006578:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800657c:	460f      	mov	r7, r1
 800657e:	2101      	movs	r1, #1
 8006580:	ec59 8b10 	vmov	r8, r9, d0
 8006584:	4616      	mov	r6, r2
 8006586:	f7ff fc1b 	bl	8005dc0 <_Balloc>
 800658a:	4604      	mov	r4, r0
 800658c:	b930      	cbnz	r0, 800659c <__d2b+0x24>
 800658e:	4602      	mov	r2, r0
 8006590:	4b23      	ldr	r3, [pc, #140]	@ (8006620 <__d2b+0xa8>)
 8006592:	4824      	ldr	r0, [pc, #144]	@ (8006624 <__d2b+0xac>)
 8006594:	f240 310f 	movw	r1, #783	@ 0x30f
 8006598:	f001 fb6e 	bl	8007c78 <__assert_func>
 800659c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80065a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80065a4:	b10d      	cbz	r5, 80065aa <__d2b+0x32>
 80065a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	f1b8 0300 	subs.w	r3, r8, #0
 80065b0:	d023      	beq.n	80065fa <__d2b+0x82>
 80065b2:	4668      	mov	r0, sp
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	f7ff fd14 	bl	8005fe2 <__lo0bits>
 80065ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065be:	b1d0      	cbz	r0, 80065f6 <__d2b+0x7e>
 80065c0:	f1c0 0320 	rsb	r3, r0, #32
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	430b      	orrs	r3, r1
 80065ca:	40c2      	lsrs	r2, r0
 80065cc:	6163      	str	r3, [r4, #20]
 80065ce:	9201      	str	r2, [sp, #4]
 80065d0:	9b01      	ldr	r3, [sp, #4]
 80065d2:	61a3      	str	r3, [r4, #24]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bf0c      	ite	eq
 80065d8:	2201      	moveq	r2, #1
 80065da:	2202      	movne	r2, #2
 80065dc:	6122      	str	r2, [r4, #16]
 80065de:	b1a5      	cbz	r5, 800660a <__d2b+0x92>
 80065e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80065e4:	4405      	add	r5, r0
 80065e6:	603d      	str	r5, [r7, #0]
 80065e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80065ec:	6030      	str	r0, [r6, #0]
 80065ee:	4620      	mov	r0, r4
 80065f0:	b003      	add	sp, #12
 80065f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065f6:	6161      	str	r1, [r4, #20]
 80065f8:	e7ea      	b.n	80065d0 <__d2b+0x58>
 80065fa:	a801      	add	r0, sp, #4
 80065fc:	f7ff fcf1 	bl	8005fe2 <__lo0bits>
 8006600:	9b01      	ldr	r3, [sp, #4]
 8006602:	6163      	str	r3, [r4, #20]
 8006604:	3020      	adds	r0, #32
 8006606:	2201      	movs	r2, #1
 8006608:	e7e8      	b.n	80065dc <__d2b+0x64>
 800660a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800660e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006612:	6038      	str	r0, [r7, #0]
 8006614:	6918      	ldr	r0, [r3, #16]
 8006616:	f7ff fcc5 	bl	8005fa4 <__hi0bits>
 800661a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800661e:	e7e5      	b.n	80065ec <__d2b+0x74>
 8006620:	080086e1 	.word	0x080086e1
 8006624:	080086f2 	.word	0x080086f2

08006628 <__ratio>:
 8006628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800662c:	b085      	sub	sp, #20
 800662e:	e9cd 1000 	strd	r1, r0, [sp]
 8006632:	a902      	add	r1, sp, #8
 8006634:	f7ff ff56 	bl	80064e4 <__b2d>
 8006638:	9800      	ldr	r0, [sp, #0]
 800663a:	a903      	add	r1, sp, #12
 800663c:	ec55 4b10 	vmov	r4, r5, d0
 8006640:	f7ff ff50 	bl	80064e4 <__b2d>
 8006644:	9b01      	ldr	r3, [sp, #4]
 8006646:	6919      	ldr	r1, [r3, #16]
 8006648:	9b00      	ldr	r3, [sp, #0]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	1ac9      	subs	r1, r1, r3
 800664e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006652:	1a9b      	subs	r3, r3, r2
 8006654:	ec5b ab10 	vmov	sl, fp, d0
 8006658:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800665c:	2b00      	cmp	r3, #0
 800665e:	bfce      	itee	gt
 8006660:	462a      	movgt	r2, r5
 8006662:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006666:	465a      	movle	r2, fp
 8006668:	462f      	mov	r7, r5
 800666a:	46d9      	mov	r9, fp
 800666c:	bfcc      	ite	gt
 800666e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006672:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006676:	464b      	mov	r3, r9
 8006678:	4652      	mov	r2, sl
 800667a:	4620      	mov	r0, r4
 800667c:	4639      	mov	r1, r7
 800667e:	f7fa f905 	bl	800088c <__aeabi_ddiv>
 8006682:	ec41 0b10 	vmov	d0, r0, r1
 8006686:	b005      	add	sp, #20
 8006688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800668c <__copybits>:
 800668c:	3901      	subs	r1, #1
 800668e:	b570      	push	{r4, r5, r6, lr}
 8006690:	1149      	asrs	r1, r1, #5
 8006692:	6914      	ldr	r4, [r2, #16]
 8006694:	3101      	adds	r1, #1
 8006696:	f102 0314 	add.w	r3, r2, #20
 800669a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800669e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80066a2:	1f05      	subs	r5, r0, #4
 80066a4:	42a3      	cmp	r3, r4
 80066a6:	d30c      	bcc.n	80066c2 <__copybits+0x36>
 80066a8:	1aa3      	subs	r3, r4, r2
 80066aa:	3b11      	subs	r3, #17
 80066ac:	f023 0303 	bic.w	r3, r3, #3
 80066b0:	3211      	adds	r2, #17
 80066b2:	42a2      	cmp	r2, r4
 80066b4:	bf88      	it	hi
 80066b6:	2300      	movhi	r3, #0
 80066b8:	4418      	add	r0, r3
 80066ba:	2300      	movs	r3, #0
 80066bc:	4288      	cmp	r0, r1
 80066be:	d305      	bcc.n	80066cc <__copybits+0x40>
 80066c0:	bd70      	pop	{r4, r5, r6, pc}
 80066c2:	f853 6b04 	ldr.w	r6, [r3], #4
 80066c6:	f845 6f04 	str.w	r6, [r5, #4]!
 80066ca:	e7eb      	b.n	80066a4 <__copybits+0x18>
 80066cc:	f840 3b04 	str.w	r3, [r0], #4
 80066d0:	e7f4      	b.n	80066bc <__copybits+0x30>

080066d2 <__any_on>:
 80066d2:	f100 0214 	add.w	r2, r0, #20
 80066d6:	6900      	ldr	r0, [r0, #16]
 80066d8:	114b      	asrs	r3, r1, #5
 80066da:	4298      	cmp	r0, r3
 80066dc:	b510      	push	{r4, lr}
 80066de:	db11      	blt.n	8006704 <__any_on+0x32>
 80066e0:	dd0a      	ble.n	80066f8 <__any_on+0x26>
 80066e2:	f011 011f 	ands.w	r1, r1, #31
 80066e6:	d007      	beq.n	80066f8 <__any_on+0x26>
 80066e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80066ec:	fa24 f001 	lsr.w	r0, r4, r1
 80066f0:	fa00 f101 	lsl.w	r1, r0, r1
 80066f4:	428c      	cmp	r4, r1
 80066f6:	d10b      	bne.n	8006710 <__any_on+0x3e>
 80066f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d803      	bhi.n	8006708 <__any_on+0x36>
 8006700:	2000      	movs	r0, #0
 8006702:	bd10      	pop	{r4, pc}
 8006704:	4603      	mov	r3, r0
 8006706:	e7f7      	b.n	80066f8 <__any_on+0x26>
 8006708:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800670c:	2900      	cmp	r1, #0
 800670e:	d0f5      	beq.n	80066fc <__any_on+0x2a>
 8006710:	2001      	movs	r0, #1
 8006712:	e7f6      	b.n	8006702 <__any_on+0x30>

08006714 <sulp>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4604      	mov	r4, r0
 8006718:	460d      	mov	r5, r1
 800671a:	ec45 4b10 	vmov	d0, r4, r5
 800671e:	4616      	mov	r6, r2
 8006720:	f7ff feba 	bl	8006498 <__ulp>
 8006724:	ec51 0b10 	vmov	r0, r1, d0
 8006728:	b17e      	cbz	r6, 800674a <sulp+0x36>
 800672a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800672e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006732:	2b00      	cmp	r3, #0
 8006734:	dd09      	ble.n	800674a <sulp+0x36>
 8006736:	051b      	lsls	r3, r3, #20
 8006738:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800673c:	2400      	movs	r4, #0
 800673e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006742:	4622      	mov	r2, r4
 8006744:	462b      	mov	r3, r5
 8006746:	f7f9 ff77 	bl	8000638 <__aeabi_dmul>
 800674a:	ec41 0b10 	vmov	d0, r0, r1
 800674e:	bd70      	pop	{r4, r5, r6, pc}

08006750 <_strtod_l>:
 8006750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006754:	b09f      	sub	sp, #124	@ 0x7c
 8006756:	460c      	mov	r4, r1
 8006758:	9217      	str	r2, [sp, #92]	@ 0x5c
 800675a:	2200      	movs	r2, #0
 800675c:	921a      	str	r2, [sp, #104]	@ 0x68
 800675e:	9005      	str	r0, [sp, #20]
 8006760:	f04f 0a00 	mov.w	sl, #0
 8006764:	f04f 0b00 	mov.w	fp, #0
 8006768:	460a      	mov	r2, r1
 800676a:	9219      	str	r2, [sp, #100]	@ 0x64
 800676c:	7811      	ldrb	r1, [r2, #0]
 800676e:	292b      	cmp	r1, #43	@ 0x2b
 8006770:	d04a      	beq.n	8006808 <_strtod_l+0xb8>
 8006772:	d838      	bhi.n	80067e6 <_strtod_l+0x96>
 8006774:	290d      	cmp	r1, #13
 8006776:	d832      	bhi.n	80067de <_strtod_l+0x8e>
 8006778:	2908      	cmp	r1, #8
 800677a:	d832      	bhi.n	80067e2 <_strtod_l+0x92>
 800677c:	2900      	cmp	r1, #0
 800677e:	d03b      	beq.n	80067f8 <_strtod_l+0xa8>
 8006780:	2200      	movs	r2, #0
 8006782:	920e      	str	r2, [sp, #56]	@ 0x38
 8006784:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006786:	782a      	ldrb	r2, [r5, #0]
 8006788:	2a30      	cmp	r2, #48	@ 0x30
 800678a:	f040 80b2 	bne.w	80068f2 <_strtod_l+0x1a2>
 800678e:	786a      	ldrb	r2, [r5, #1]
 8006790:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006794:	2a58      	cmp	r2, #88	@ 0x58
 8006796:	d16e      	bne.n	8006876 <_strtod_l+0x126>
 8006798:	9302      	str	r3, [sp, #8]
 800679a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800679c:	9301      	str	r3, [sp, #4]
 800679e:	ab1a      	add	r3, sp, #104	@ 0x68
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	4a8f      	ldr	r2, [pc, #572]	@ (80069e0 <_strtod_l+0x290>)
 80067a4:	9805      	ldr	r0, [sp, #20]
 80067a6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80067a8:	a919      	add	r1, sp, #100	@ 0x64
 80067aa:	f001 faff 	bl	8007dac <__gethex>
 80067ae:	f010 060f 	ands.w	r6, r0, #15
 80067b2:	4604      	mov	r4, r0
 80067b4:	d005      	beq.n	80067c2 <_strtod_l+0x72>
 80067b6:	2e06      	cmp	r6, #6
 80067b8:	d128      	bne.n	800680c <_strtod_l+0xbc>
 80067ba:	3501      	adds	r5, #1
 80067bc:	2300      	movs	r3, #0
 80067be:	9519      	str	r5, [sp, #100]	@ 0x64
 80067c0:	930e      	str	r3, [sp, #56]	@ 0x38
 80067c2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f040 858e 	bne.w	80072e6 <_strtod_l+0xb96>
 80067ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067cc:	b1cb      	cbz	r3, 8006802 <_strtod_l+0xb2>
 80067ce:	4652      	mov	r2, sl
 80067d0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80067d4:	ec43 2b10 	vmov	d0, r2, r3
 80067d8:	b01f      	add	sp, #124	@ 0x7c
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	2920      	cmp	r1, #32
 80067e0:	d1ce      	bne.n	8006780 <_strtod_l+0x30>
 80067e2:	3201      	adds	r2, #1
 80067e4:	e7c1      	b.n	800676a <_strtod_l+0x1a>
 80067e6:	292d      	cmp	r1, #45	@ 0x2d
 80067e8:	d1ca      	bne.n	8006780 <_strtod_l+0x30>
 80067ea:	2101      	movs	r1, #1
 80067ec:	910e      	str	r1, [sp, #56]	@ 0x38
 80067ee:	1c51      	adds	r1, r2, #1
 80067f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80067f2:	7852      	ldrb	r2, [r2, #1]
 80067f4:	2a00      	cmp	r2, #0
 80067f6:	d1c5      	bne.n	8006784 <_strtod_l+0x34>
 80067f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80067fa:	9419      	str	r4, [sp, #100]	@ 0x64
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	f040 8570 	bne.w	80072e2 <_strtod_l+0xb92>
 8006802:	4652      	mov	r2, sl
 8006804:	465b      	mov	r3, fp
 8006806:	e7e5      	b.n	80067d4 <_strtod_l+0x84>
 8006808:	2100      	movs	r1, #0
 800680a:	e7ef      	b.n	80067ec <_strtod_l+0x9c>
 800680c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800680e:	b13a      	cbz	r2, 8006820 <_strtod_l+0xd0>
 8006810:	2135      	movs	r1, #53	@ 0x35
 8006812:	a81c      	add	r0, sp, #112	@ 0x70
 8006814:	f7ff ff3a 	bl	800668c <__copybits>
 8006818:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800681a:	9805      	ldr	r0, [sp, #20]
 800681c:	f7ff fb10 	bl	8005e40 <_Bfree>
 8006820:	3e01      	subs	r6, #1
 8006822:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006824:	2e04      	cmp	r6, #4
 8006826:	d806      	bhi.n	8006836 <_strtod_l+0xe6>
 8006828:	e8df f006 	tbb	[pc, r6]
 800682c:	201d0314 	.word	0x201d0314
 8006830:	14          	.byte	0x14
 8006831:	00          	.byte	0x00
 8006832:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006836:	05e1      	lsls	r1, r4, #23
 8006838:	bf48      	it	mi
 800683a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800683e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006842:	0d1b      	lsrs	r3, r3, #20
 8006844:	051b      	lsls	r3, r3, #20
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1bb      	bne.n	80067c2 <_strtod_l+0x72>
 800684a:	f7fe fb2d 	bl	8004ea8 <__errno>
 800684e:	2322      	movs	r3, #34	@ 0x22
 8006850:	6003      	str	r3, [r0, #0]
 8006852:	e7b6      	b.n	80067c2 <_strtod_l+0x72>
 8006854:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006858:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800685c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006860:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006864:	e7e7      	b.n	8006836 <_strtod_l+0xe6>
 8006866:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80069e8 <_strtod_l+0x298>
 800686a:	e7e4      	b.n	8006836 <_strtod_l+0xe6>
 800686c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006870:	f04f 3aff 	mov.w	sl, #4294967295
 8006874:	e7df      	b.n	8006836 <_strtod_l+0xe6>
 8006876:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	9219      	str	r2, [sp, #100]	@ 0x64
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b30      	cmp	r3, #48	@ 0x30
 8006880:	d0f9      	beq.n	8006876 <_strtod_l+0x126>
 8006882:	2b00      	cmp	r3, #0
 8006884:	d09d      	beq.n	80067c2 <_strtod_l+0x72>
 8006886:	2301      	movs	r3, #1
 8006888:	2700      	movs	r7, #0
 800688a:	9308      	str	r3, [sp, #32]
 800688c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800688e:	930c      	str	r3, [sp, #48]	@ 0x30
 8006890:	970b      	str	r7, [sp, #44]	@ 0x2c
 8006892:	46b9      	mov	r9, r7
 8006894:	220a      	movs	r2, #10
 8006896:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006898:	7805      	ldrb	r5, [r0, #0]
 800689a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800689e:	b2d9      	uxtb	r1, r3
 80068a0:	2909      	cmp	r1, #9
 80068a2:	d928      	bls.n	80068f6 <_strtod_l+0x1a6>
 80068a4:	494f      	ldr	r1, [pc, #316]	@ (80069e4 <_strtod_l+0x294>)
 80068a6:	2201      	movs	r2, #1
 80068a8:	f001 f9ac 	bl	8007c04 <strncmp>
 80068ac:	2800      	cmp	r0, #0
 80068ae:	d032      	beq.n	8006916 <_strtod_l+0x1c6>
 80068b0:	2000      	movs	r0, #0
 80068b2:	462a      	mov	r2, r5
 80068b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80068b6:	464d      	mov	r5, r9
 80068b8:	4603      	mov	r3, r0
 80068ba:	2a65      	cmp	r2, #101	@ 0x65
 80068bc:	d001      	beq.n	80068c2 <_strtod_l+0x172>
 80068be:	2a45      	cmp	r2, #69	@ 0x45
 80068c0:	d114      	bne.n	80068ec <_strtod_l+0x19c>
 80068c2:	b91d      	cbnz	r5, 80068cc <_strtod_l+0x17c>
 80068c4:	9a08      	ldr	r2, [sp, #32]
 80068c6:	4302      	orrs	r2, r0
 80068c8:	d096      	beq.n	80067f8 <_strtod_l+0xa8>
 80068ca:	2500      	movs	r5, #0
 80068cc:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80068ce:	1c62      	adds	r2, r4, #1
 80068d0:	9219      	str	r2, [sp, #100]	@ 0x64
 80068d2:	7862      	ldrb	r2, [r4, #1]
 80068d4:	2a2b      	cmp	r2, #43	@ 0x2b
 80068d6:	d07a      	beq.n	80069ce <_strtod_l+0x27e>
 80068d8:	2a2d      	cmp	r2, #45	@ 0x2d
 80068da:	d07e      	beq.n	80069da <_strtod_l+0x28a>
 80068dc:	f04f 0c00 	mov.w	ip, #0
 80068e0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80068e4:	2909      	cmp	r1, #9
 80068e6:	f240 8085 	bls.w	80069f4 <_strtod_l+0x2a4>
 80068ea:	9419      	str	r4, [sp, #100]	@ 0x64
 80068ec:	f04f 0800 	mov.w	r8, #0
 80068f0:	e0a5      	b.n	8006a3e <_strtod_l+0x2ee>
 80068f2:	2300      	movs	r3, #0
 80068f4:	e7c8      	b.n	8006888 <_strtod_l+0x138>
 80068f6:	f1b9 0f08 	cmp.w	r9, #8
 80068fa:	bfd8      	it	le
 80068fc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80068fe:	f100 0001 	add.w	r0, r0, #1
 8006902:	bfda      	itte	le
 8006904:	fb02 3301 	mlale	r3, r2, r1, r3
 8006908:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800690a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800690e:	f109 0901 	add.w	r9, r9, #1
 8006912:	9019      	str	r0, [sp, #100]	@ 0x64
 8006914:	e7bf      	b.n	8006896 <_strtod_l+0x146>
 8006916:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	9219      	str	r2, [sp, #100]	@ 0x64
 800691c:	785a      	ldrb	r2, [r3, #1]
 800691e:	f1b9 0f00 	cmp.w	r9, #0
 8006922:	d03b      	beq.n	800699c <_strtod_l+0x24c>
 8006924:	900a      	str	r0, [sp, #40]	@ 0x28
 8006926:	464d      	mov	r5, r9
 8006928:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800692c:	2b09      	cmp	r3, #9
 800692e:	d912      	bls.n	8006956 <_strtod_l+0x206>
 8006930:	2301      	movs	r3, #1
 8006932:	e7c2      	b.n	80068ba <_strtod_l+0x16a>
 8006934:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	9219      	str	r2, [sp, #100]	@ 0x64
 800693a:	785a      	ldrb	r2, [r3, #1]
 800693c:	3001      	adds	r0, #1
 800693e:	2a30      	cmp	r2, #48	@ 0x30
 8006940:	d0f8      	beq.n	8006934 <_strtod_l+0x1e4>
 8006942:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006946:	2b08      	cmp	r3, #8
 8006948:	f200 84d2 	bhi.w	80072f0 <_strtod_l+0xba0>
 800694c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800694e:	900a      	str	r0, [sp, #40]	@ 0x28
 8006950:	2000      	movs	r0, #0
 8006952:	930c      	str	r3, [sp, #48]	@ 0x30
 8006954:	4605      	mov	r5, r0
 8006956:	3a30      	subs	r2, #48	@ 0x30
 8006958:	f100 0301 	add.w	r3, r0, #1
 800695c:	d018      	beq.n	8006990 <_strtod_l+0x240>
 800695e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006960:	4419      	add	r1, r3
 8006962:	910a      	str	r1, [sp, #40]	@ 0x28
 8006964:	462e      	mov	r6, r5
 8006966:	f04f 0e0a 	mov.w	lr, #10
 800696a:	1c71      	adds	r1, r6, #1
 800696c:	eba1 0c05 	sub.w	ip, r1, r5
 8006970:	4563      	cmp	r3, ip
 8006972:	dc15      	bgt.n	80069a0 <_strtod_l+0x250>
 8006974:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8006978:	182b      	adds	r3, r5, r0
 800697a:	2b08      	cmp	r3, #8
 800697c:	f105 0501 	add.w	r5, r5, #1
 8006980:	4405      	add	r5, r0
 8006982:	dc1a      	bgt.n	80069ba <_strtod_l+0x26a>
 8006984:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006986:	230a      	movs	r3, #10
 8006988:	fb03 2301 	mla	r3, r3, r1, r2
 800698c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800698e:	2300      	movs	r3, #0
 8006990:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006992:	1c51      	adds	r1, r2, #1
 8006994:	9119      	str	r1, [sp, #100]	@ 0x64
 8006996:	7852      	ldrb	r2, [r2, #1]
 8006998:	4618      	mov	r0, r3
 800699a:	e7c5      	b.n	8006928 <_strtod_l+0x1d8>
 800699c:	4648      	mov	r0, r9
 800699e:	e7ce      	b.n	800693e <_strtod_l+0x1ee>
 80069a0:	2e08      	cmp	r6, #8
 80069a2:	dc05      	bgt.n	80069b0 <_strtod_l+0x260>
 80069a4:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80069a6:	fb0e f606 	mul.w	r6, lr, r6
 80069aa:	960b      	str	r6, [sp, #44]	@ 0x2c
 80069ac:	460e      	mov	r6, r1
 80069ae:	e7dc      	b.n	800696a <_strtod_l+0x21a>
 80069b0:	2910      	cmp	r1, #16
 80069b2:	bfd8      	it	le
 80069b4:	fb0e f707 	mulle.w	r7, lr, r7
 80069b8:	e7f8      	b.n	80069ac <_strtod_l+0x25c>
 80069ba:	2b0f      	cmp	r3, #15
 80069bc:	bfdc      	itt	le
 80069be:	230a      	movle	r3, #10
 80069c0:	fb03 2707 	mlale	r7, r3, r7, r2
 80069c4:	e7e3      	b.n	800698e <_strtod_l+0x23e>
 80069c6:	2300      	movs	r3, #0
 80069c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ca:	2301      	movs	r3, #1
 80069cc:	e77a      	b.n	80068c4 <_strtod_l+0x174>
 80069ce:	f04f 0c00 	mov.w	ip, #0
 80069d2:	1ca2      	adds	r2, r4, #2
 80069d4:	9219      	str	r2, [sp, #100]	@ 0x64
 80069d6:	78a2      	ldrb	r2, [r4, #2]
 80069d8:	e782      	b.n	80068e0 <_strtod_l+0x190>
 80069da:	f04f 0c01 	mov.w	ip, #1
 80069de:	e7f8      	b.n	80069d2 <_strtod_l+0x282>
 80069e0:	08008914 	.word	0x08008914
 80069e4:	0800874b 	.word	0x0800874b
 80069e8:	7ff00000 	.word	0x7ff00000
 80069ec:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80069ee:	1c51      	adds	r1, r2, #1
 80069f0:	9119      	str	r1, [sp, #100]	@ 0x64
 80069f2:	7852      	ldrb	r2, [r2, #1]
 80069f4:	2a30      	cmp	r2, #48	@ 0x30
 80069f6:	d0f9      	beq.n	80069ec <_strtod_l+0x29c>
 80069f8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80069fc:	2908      	cmp	r1, #8
 80069fe:	f63f af75 	bhi.w	80068ec <_strtod_l+0x19c>
 8006a02:	3a30      	subs	r2, #48	@ 0x30
 8006a04:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a06:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a08:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006a0a:	f04f 080a 	mov.w	r8, #10
 8006a0e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a10:	1c56      	adds	r6, r2, #1
 8006a12:	9619      	str	r6, [sp, #100]	@ 0x64
 8006a14:	7852      	ldrb	r2, [r2, #1]
 8006a16:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006a1a:	f1be 0f09 	cmp.w	lr, #9
 8006a1e:	d939      	bls.n	8006a94 <_strtod_l+0x344>
 8006a20:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a22:	1a76      	subs	r6, r6, r1
 8006a24:	2e08      	cmp	r6, #8
 8006a26:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006a2a:	dc03      	bgt.n	8006a34 <_strtod_l+0x2e4>
 8006a2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a2e:	4588      	cmp	r8, r1
 8006a30:	bfa8      	it	ge
 8006a32:	4688      	movge	r8, r1
 8006a34:	f1bc 0f00 	cmp.w	ip, #0
 8006a38:	d001      	beq.n	8006a3e <_strtod_l+0x2ee>
 8006a3a:	f1c8 0800 	rsb	r8, r8, #0
 8006a3e:	2d00      	cmp	r5, #0
 8006a40:	d14e      	bne.n	8006ae0 <_strtod_l+0x390>
 8006a42:	9908      	ldr	r1, [sp, #32]
 8006a44:	4308      	orrs	r0, r1
 8006a46:	f47f aebc 	bne.w	80067c2 <_strtod_l+0x72>
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	f47f aed4 	bne.w	80067f8 <_strtod_l+0xa8>
 8006a50:	2a69      	cmp	r2, #105	@ 0x69
 8006a52:	d028      	beq.n	8006aa6 <_strtod_l+0x356>
 8006a54:	dc25      	bgt.n	8006aa2 <_strtod_l+0x352>
 8006a56:	2a49      	cmp	r2, #73	@ 0x49
 8006a58:	d025      	beq.n	8006aa6 <_strtod_l+0x356>
 8006a5a:	2a4e      	cmp	r2, #78	@ 0x4e
 8006a5c:	f47f aecc 	bne.w	80067f8 <_strtod_l+0xa8>
 8006a60:	499a      	ldr	r1, [pc, #616]	@ (8006ccc <_strtod_l+0x57c>)
 8006a62:	a819      	add	r0, sp, #100	@ 0x64
 8006a64:	f001 fbc4 	bl	80081f0 <__match>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f43f aec5 	beq.w	80067f8 <_strtod_l+0xa8>
 8006a6e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a70:	781b      	ldrb	r3, [r3, #0]
 8006a72:	2b28      	cmp	r3, #40	@ 0x28
 8006a74:	d12e      	bne.n	8006ad4 <_strtod_l+0x384>
 8006a76:	4996      	ldr	r1, [pc, #600]	@ (8006cd0 <_strtod_l+0x580>)
 8006a78:	aa1c      	add	r2, sp, #112	@ 0x70
 8006a7a:	a819      	add	r0, sp, #100	@ 0x64
 8006a7c:	f001 fbcc 	bl	8008218 <__hexnan>
 8006a80:	2805      	cmp	r0, #5
 8006a82:	d127      	bne.n	8006ad4 <_strtod_l+0x384>
 8006a84:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006a86:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006a8a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006a8e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006a92:	e696      	b.n	80067c2 <_strtod_l+0x72>
 8006a94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006a96:	fb08 2101 	mla	r1, r8, r1, r2
 8006a9a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006aa0:	e7b5      	b.n	8006a0e <_strtod_l+0x2be>
 8006aa2:	2a6e      	cmp	r2, #110	@ 0x6e
 8006aa4:	e7da      	b.n	8006a5c <_strtod_l+0x30c>
 8006aa6:	498b      	ldr	r1, [pc, #556]	@ (8006cd4 <_strtod_l+0x584>)
 8006aa8:	a819      	add	r0, sp, #100	@ 0x64
 8006aaa:	f001 fba1 	bl	80081f0 <__match>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	f43f aea2 	beq.w	80067f8 <_strtod_l+0xa8>
 8006ab4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ab6:	4988      	ldr	r1, [pc, #544]	@ (8006cd8 <_strtod_l+0x588>)
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	a819      	add	r0, sp, #100	@ 0x64
 8006abc:	9319      	str	r3, [sp, #100]	@ 0x64
 8006abe:	f001 fb97 	bl	80081f0 <__match>
 8006ac2:	b910      	cbnz	r0, 8006aca <_strtod_l+0x37a>
 8006ac4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006aca:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8006ce8 <_strtod_l+0x598>
 8006ace:	f04f 0a00 	mov.w	sl, #0
 8006ad2:	e676      	b.n	80067c2 <_strtod_l+0x72>
 8006ad4:	4881      	ldr	r0, [pc, #516]	@ (8006cdc <_strtod_l+0x58c>)
 8006ad6:	f001 f8c7 	bl	8007c68 <nan>
 8006ada:	ec5b ab10 	vmov	sl, fp, d0
 8006ade:	e670      	b.n	80067c2 <_strtod_l+0x72>
 8006ae0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ae2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8006ae4:	eba8 0303 	sub.w	r3, r8, r3
 8006ae8:	f1b9 0f00 	cmp.w	r9, #0
 8006aec:	bf08      	it	eq
 8006aee:	46a9      	moveq	r9, r5
 8006af0:	2d10      	cmp	r5, #16
 8006af2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006af4:	462c      	mov	r4, r5
 8006af6:	bfa8      	it	ge
 8006af8:	2410      	movge	r4, #16
 8006afa:	f7f9 fd23 	bl	8000544 <__aeabi_ui2d>
 8006afe:	2d09      	cmp	r5, #9
 8006b00:	4682      	mov	sl, r0
 8006b02:	468b      	mov	fp, r1
 8006b04:	dc13      	bgt.n	8006b2e <_strtod_l+0x3de>
 8006b06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	f43f ae5a 	beq.w	80067c2 <_strtod_l+0x72>
 8006b0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b10:	dd78      	ble.n	8006c04 <_strtod_l+0x4b4>
 8006b12:	2b16      	cmp	r3, #22
 8006b14:	dc5f      	bgt.n	8006bd6 <_strtod_l+0x486>
 8006b16:	4972      	ldr	r1, [pc, #456]	@ (8006ce0 <_strtod_l+0x590>)
 8006b18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b20:	4652      	mov	r2, sl
 8006b22:	465b      	mov	r3, fp
 8006b24:	f7f9 fd88 	bl	8000638 <__aeabi_dmul>
 8006b28:	4682      	mov	sl, r0
 8006b2a:	468b      	mov	fp, r1
 8006b2c:	e649      	b.n	80067c2 <_strtod_l+0x72>
 8006b2e:	4b6c      	ldr	r3, [pc, #432]	@ (8006ce0 <_strtod_l+0x590>)
 8006b30:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b34:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006b38:	f7f9 fd7e 	bl	8000638 <__aeabi_dmul>
 8006b3c:	4682      	mov	sl, r0
 8006b3e:	4638      	mov	r0, r7
 8006b40:	468b      	mov	fp, r1
 8006b42:	f7f9 fcff 	bl	8000544 <__aeabi_ui2d>
 8006b46:	4602      	mov	r2, r0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	4650      	mov	r0, sl
 8006b4c:	4659      	mov	r1, fp
 8006b4e:	f7f9 fbbd 	bl	80002cc <__adddf3>
 8006b52:	2d0f      	cmp	r5, #15
 8006b54:	4682      	mov	sl, r0
 8006b56:	468b      	mov	fp, r1
 8006b58:	ddd5      	ble.n	8006b06 <_strtod_l+0x3b6>
 8006b5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b5c:	1b2c      	subs	r4, r5, r4
 8006b5e:	441c      	add	r4, r3
 8006b60:	2c00      	cmp	r4, #0
 8006b62:	f340 8093 	ble.w	8006c8c <_strtod_l+0x53c>
 8006b66:	f014 030f 	ands.w	r3, r4, #15
 8006b6a:	d00a      	beq.n	8006b82 <_strtod_l+0x432>
 8006b6c:	495c      	ldr	r1, [pc, #368]	@ (8006ce0 <_strtod_l+0x590>)
 8006b6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b72:	4652      	mov	r2, sl
 8006b74:	465b      	mov	r3, fp
 8006b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b7a:	f7f9 fd5d 	bl	8000638 <__aeabi_dmul>
 8006b7e:	4682      	mov	sl, r0
 8006b80:	468b      	mov	fp, r1
 8006b82:	f034 040f 	bics.w	r4, r4, #15
 8006b86:	d073      	beq.n	8006c70 <_strtod_l+0x520>
 8006b88:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006b8c:	dd49      	ble.n	8006c22 <_strtod_l+0x4d2>
 8006b8e:	2400      	movs	r4, #0
 8006b90:	46a0      	mov	r8, r4
 8006b92:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b94:	46a1      	mov	r9, r4
 8006b96:	9a05      	ldr	r2, [sp, #20]
 8006b98:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8006ce8 <_strtod_l+0x598>
 8006b9c:	2322      	movs	r3, #34	@ 0x22
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	f04f 0a00 	mov.w	sl, #0
 8006ba4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f43f ae0b 	beq.w	80067c2 <_strtod_l+0x72>
 8006bac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006bae:	9805      	ldr	r0, [sp, #20]
 8006bb0:	f7ff f946 	bl	8005e40 <_Bfree>
 8006bb4:	9805      	ldr	r0, [sp, #20]
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	f7ff f942 	bl	8005e40 <_Bfree>
 8006bbc:	9805      	ldr	r0, [sp, #20]
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	f7ff f93e 	bl	8005e40 <_Bfree>
 8006bc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006bc6:	9805      	ldr	r0, [sp, #20]
 8006bc8:	f7ff f93a 	bl	8005e40 <_Bfree>
 8006bcc:	9805      	ldr	r0, [sp, #20]
 8006bce:	4621      	mov	r1, r4
 8006bd0:	f7ff f936 	bl	8005e40 <_Bfree>
 8006bd4:	e5f5      	b.n	80067c2 <_strtod_l+0x72>
 8006bd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bd8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	dbbc      	blt.n	8006b5a <_strtod_l+0x40a>
 8006be0:	4c3f      	ldr	r4, [pc, #252]	@ (8006ce0 <_strtod_l+0x590>)
 8006be2:	f1c5 050f 	rsb	r5, r5, #15
 8006be6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006bea:	4652      	mov	r2, sl
 8006bec:	465b      	mov	r3, fp
 8006bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bf2:	f7f9 fd21 	bl	8000638 <__aeabi_dmul>
 8006bf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bf8:	1b5d      	subs	r5, r3, r5
 8006bfa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006bfe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c02:	e78f      	b.n	8006b24 <_strtod_l+0x3d4>
 8006c04:	3316      	adds	r3, #22
 8006c06:	dba8      	blt.n	8006b5a <_strtod_l+0x40a>
 8006c08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c0a:	eba3 0808 	sub.w	r8, r3, r8
 8006c0e:	4b34      	ldr	r3, [pc, #208]	@ (8006ce0 <_strtod_l+0x590>)
 8006c10:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006c14:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006c18:	4650      	mov	r0, sl
 8006c1a:	4659      	mov	r1, fp
 8006c1c:	f7f9 fe36 	bl	800088c <__aeabi_ddiv>
 8006c20:	e782      	b.n	8006b28 <_strtod_l+0x3d8>
 8006c22:	2300      	movs	r3, #0
 8006c24:	4f2f      	ldr	r7, [pc, #188]	@ (8006ce4 <_strtod_l+0x594>)
 8006c26:	1124      	asrs	r4, r4, #4
 8006c28:	4650      	mov	r0, sl
 8006c2a:	4659      	mov	r1, fp
 8006c2c:	461e      	mov	r6, r3
 8006c2e:	2c01      	cmp	r4, #1
 8006c30:	dc21      	bgt.n	8006c76 <_strtod_l+0x526>
 8006c32:	b10b      	cbz	r3, 8006c38 <_strtod_l+0x4e8>
 8006c34:	4682      	mov	sl, r0
 8006c36:	468b      	mov	fp, r1
 8006c38:	492a      	ldr	r1, [pc, #168]	@ (8006ce4 <_strtod_l+0x594>)
 8006c3a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006c3e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006c42:	4652      	mov	r2, sl
 8006c44:	465b      	mov	r3, fp
 8006c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c4a:	f7f9 fcf5 	bl	8000638 <__aeabi_dmul>
 8006c4e:	4b26      	ldr	r3, [pc, #152]	@ (8006ce8 <_strtod_l+0x598>)
 8006c50:	460a      	mov	r2, r1
 8006c52:	400b      	ands	r3, r1
 8006c54:	4925      	ldr	r1, [pc, #148]	@ (8006cec <_strtod_l+0x59c>)
 8006c56:	428b      	cmp	r3, r1
 8006c58:	4682      	mov	sl, r0
 8006c5a:	d898      	bhi.n	8006b8e <_strtod_l+0x43e>
 8006c5c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006c60:	428b      	cmp	r3, r1
 8006c62:	bf86      	itte	hi
 8006c64:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8006cf0 <_strtod_l+0x5a0>
 8006c68:	f04f 3aff 	movhi.w	sl, #4294967295
 8006c6c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006c70:	2300      	movs	r3, #0
 8006c72:	9308      	str	r3, [sp, #32]
 8006c74:	e076      	b.n	8006d64 <_strtod_l+0x614>
 8006c76:	07e2      	lsls	r2, r4, #31
 8006c78:	d504      	bpl.n	8006c84 <_strtod_l+0x534>
 8006c7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c7e:	f7f9 fcdb 	bl	8000638 <__aeabi_dmul>
 8006c82:	2301      	movs	r3, #1
 8006c84:	3601      	adds	r6, #1
 8006c86:	1064      	asrs	r4, r4, #1
 8006c88:	3708      	adds	r7, #8
 8006c8a:	e7d0      	b.n	8006c2e <_strtod_l+0x4de>
 8006c8c:	d0f0      	beq.n	8006c70 <_strtod_l+0x520>
 8006c8e:	4264      	negs	r4, r4
 8006c90:	f014 020f 	ands.w	r2, r4, #15
 8006c94:	d00a      	beq.n	8006cac <_strtod_l+0x55c>
 8006c96:	4b12      	ldr	r3, [pc, #72]	@ (8006ce0 <_strtod_l+0x590>)
 8006c98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c9c:	4650      	mov	r0, sl
 8006c9e:	4659      	mov	r1, fp
 8006ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca4:	f7f9 fdf2 	bl	800088c <__aeabi_ddiv>
 8006ca8:	4682      	mov	sl, r0
 8006caa:	468b      	mov	fp, r1
 8006cac:	1124      	asrs	r4, r4, #4
 8006cae:	d0df      	beq.n	8006c70 <_strtod_l+0x520>
 8006cb0:	2c1f      	cmp	r4, #31
 8006cb2:	dd1f      	ble.n	8006cf4 <_strtod_l+0x5a4>
 8006cb4:	2400      	movs	r4, #0
 8006cb6:	46a0      	mov	r8, r4
 8006cb8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006cba:	46a1      	mov	r9, r4
 8006cbc:	9a05      	ldr	r2, [sp, #20]
 8006cbe:	2322      	movs	r3, #34	@ 0x22
 8006cc0:	f04f 0a00 	mov.w	sl, #0
 8006cc4:	f04f 0b00 	mov.w	fp, #0
 8006cc8:	6013      	str	r3, [r2, #0]
 8006cca:	e76b      	b.n	8006ba4 <_strtod_l+0x454>
 8006ccc:	08008639 	.word	0x08008639
 8006cd0:	08008900 	.word	0x08008900
 8006cd4:	08008631 	.word	0x08008631
 8006cd8:	08008668 	.word	0x08008668
 8006cdc:	080087a1 	.word	0x080087a1
 8006ce0:	08008838 	.word	0x08008838
 8006ce4:	08008810 	.word	0x08008810
 8006ce8:	7ff00000 	.word	0x7ff00000
 8006cec:	7ca00000 	.word	0x7ca00000
 8006cf0:	7fefffff 	.word	0x7fefffff
 8006cf4:	f014 0310 	ands.w	r3, r4, #16
 8006cf8:	bf18      	it	ne
 8006cfa:	236a      	movne	r3, #106	@ 0x6a
 8006cfc:	4ea9      	ldr	r6, [pc, #676]	@ (8006fa4 <_strtod_l+0x854>)
 8006cfe:	9308      	str	r3, [sp, #32]
 8006d00:	4650      	mov	r0, sl
 8006d02:	4659      	mov	r1, fp
 8006d04:	2300      	movs	r3, #0
 8006d06:	07e7      	lsls	r7, r4, #31
 8006d08:	d504      	bpl.n	8006d14 <_strtod_l+0x5c4>
 8006d0a:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d0e:	f7f9 fc93 	bl	8000638 <__aeabi_dmul>
 8006d12:	2301      	movs	r3, #1
 8006d14:	1064      	asrs	r4, r4, #1
 8006d16:	f106 0608 	add.w	r6, r6, #8
 8006d1a:	d1f4      	bne.n	8006d06 <_strtod_l+0x5b6>
 8006d1c:	b10b      	cbz	r3, 8006d22 <_strtod_l+0x5d2>
 8006d1e:	4682      	mov	sl, r0
 8006d20:	468b      	mov	fp, r1
 8006d22:	9b08      	ldr	r3, [sp, #32]
 8006d24:	b1b3      	cbz	r3, 8006d54 <_strtod_l+0x604>
 8006d26:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006d2a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	4659      	mov	r1, fp
 8006d32:	dd0f      	ble.n	8006d54 <_strtod_l+0x604>
 8006d34:	2b1f      	cmp	r3, #31
 8006d36:	dd56      	ble.n	8006de6 <_strtod_l+0x696>
 8006d38:	2b34      	cmp	r3, #52	@ 0x34
 8006d3a:	bfde      	ittt	le
 8006d3c:	f04f 33ff 	movle.w	r3, #4294967295
 8006d40:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006d44:	4093      	lslle	r3, r2
 8006d46:	f04f 0a00 	mov.w	sl, #0
 8006d4a:	bfcc      	ite	gt
 8006d4c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006d50:	ea03 0b01 	andle.w	fp, r3, r1
 8006d54:	2200      	movs	r2, #0
 8006d56:	2300      	movs	r3, #0
 8006d58:	4650      	mov	r0, sl
 8006d5a:	4659      	mov	r1, fp
 8006d5c:	f7f9 fed4 	bl	8000b08 <__aeabi_dcmpeq>
 8006d60:	2800      	cmp	r0, #0
 8006d62:	d1a7      	bne.n	8006cb4 <_strtod_l+0x564>
 8006d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d66:	9300      	str	r3, [sp, #0]
 8006d68:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006d6a:	9805      	ldr	r0, [sp, #20]
 8006d6c:	462b      	mov	r3, r5
 8006d6e:	464a      	mov	r2, r9
 8006d70:	f7ff f8ce 	bl	8005f10 <__s2b>
 8006d74:	900b      	str	r0, [sp, #44]	@ 0x2c
 8006d76:	2800      	cmp	r0, #0
 8006d78:	f43f af09 	beq.w	8006b8e <_strtod_l+0x43e>
 8006d7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d7e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d80:	2a00      	cmp	r2, #0
 8006d82:	eba3 0308 	sub.w	r3, r3, r8
 8006d86:	bfa8      	it	ge
 8006d88:	2300      	movge	r3, #0
 8006d8a:	9312      	str	r3, [sp, #72]	@ 0x48
 8006d8c:	2400      	movs	r4, #0
 8006d8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006d92:	9316      	str	r3, [sp, #88]	@ 0x58
 8006d94:	46a0      	mov	r8, r4
 8006d96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d98:	9805      	ldr	r0, [sp, #20]
 8006d9a:	6859      	ldr	r1, [r3, #4]
 8006d9c:	f7ff f810 	bl	8005dc0 <_Balloc>
 8006da0:	4681      	mov	r9, r0
 8006da2:	2800      	cmp	r0, #0
 8006da4:	f43f aef7 	beq.w	8006b96 <_strtod_l+0x446>
 8006da8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006daa:	691a      	ldr	r2, [r3, #16]
 8006dac:	3202      	adds	r2, #2
 8006dae:	f103 010c 	add.w	r1, r3, #12
 8006db2:	0092      	lsls	r2, r2, #2
 8006db4:	300c      	adds	r0, #12
 8006db6:	f000 ff47 	bl	8007c48 <memcpy>
 8006dba:	ec4b ab10 	vmov	d0, sl, fp
 8006dbe:	9805      	ldr	r0, [sp, #20]
 8006dc0:	aa1c      	add	r2, sp, #112	@ 0x70
 8006dc2:	a91b      	add	r1, sp, #108	@ 0x6c
 8006dc4:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006dc8:	f7ff fbd6 	bl	8006578 <__d2b>
 8006dcc:	901a      	str	r0, [sp, #104]	@ 0x68
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	f43f aee1 	beq.w	8006b96 <_strtod_l+0x446>
 8006dd4:	9805      	ldr	r0, [sp, #20]
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	f7ff f930 	bl	800603c <__i2b>
 8006ddc:	4680      	mov	r8, r0
 8006dde:	b948      	cbnz	r0, 8006df4 <_strtod_l+0x6a4>
 8006de0:	f04f 0800 	mov.w	r8, #0
 8006de4:	e6d7      	b.n	8006b96 <_strtod_l+0x446>
 8006de6:	f04f 32ff 	mov.w	r2, #4294967295
 8006dea:	fa02 f303 	lsl.w	r3, r2, r3
 8006dee:	ea03 0a0a 	and.w	sl, r3, sl
 8006df2:	e7af      	b.n	8006d54 <_strtod_l+0x604>
 8006df4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006df6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006df8:	2d00      	cmp	r5, #0
 8006dfa:	bfab      	itete	ge
 8006dfc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006dfe:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006e00:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006e02:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006e04:	bfac      	ite	ge
 8006e06:	18ef      	addge	r7, r5, r3
 8006e08:	1b5e      	sublt	r6, r3, r5
 8006e0a:	9b08      	ldr	r3, [sp, #32]
 8006e0c:	1aed      	subs	r5, r5, r3
 8006e0e:	4415      	add	r5, r2
 8006e10:	4b65      	ldr	r3, [pc, #404]	@ (8006fa8 <_strtod_l+0x858>)
 8006e12:	3d01      	subs	r5, #1
 8006e14:	429d      	cmp	r5, r3
 8006e16:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006e1a:	da50      	bge.n	8006ebe <_strtod_l+0x76e>
 8006e1c:	1b5b      	subs	r3, r3, r5
 8006e1e:	2b1f      	cmp	r3, #31
 8006e20:	eba2 0203 	sub.w	r2, r2, r3
 8006e24:	f04f 0101 	mov.w	r1, #1
 8006e28:	dc3d      	bgt.n	8006ea6 <_strtod_l+0x756>
 8006e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e2e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e30:	2300      	movs	r3, #0
 8006e32:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e34:	18bd      	adds	r5, r7, r2
 8006e36:	9b08      	ldr	r3, [sp, #32]
 8006e38:	42af      	cmp	r7, r5
 8006e3a:	4416      	add	r6, r2
 8006e3c:	441e      	add	r6, r3
 8006e3e:	463b      	mov	r3, r7
 8006e40:	bfa8      	it	ge
 8006e42:	462b      	movge	r3, r5
 8006e44:	42b3      	cmp	r3, r6
 8006e46:	bfa8      	it	ge
 8006e48:	4633      	movge	r3, r6
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	bfc2      	ittt	gt
 8006e4e:	1aed      	subgt	r5, r5, r3
 8006e50:	1af6      	subgt	r6, r6, r3
 8006e52:	1aff      	subgt	r7, r7, r3
 8006e54:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	dd16      	ble.n	8006e88 <_strtod_l+0x738>
 8006e5a:	4641      	mov	r1, r8
 8006e5c:	9805      	ldr	r0, [sp, #20]
 8006e5e:	461a      	mov	r2, r3
 8006e60:	f7ff f9a4 	bl	80061ac <__pow5mult>
 8006e64:	4680      	mov	r8, r0
 8006e66:	2800      	cmp	r0, #0
 8006e68:	d0ba      	beq.n	8006de0 <_strtod_l+0x690>
 8006e6a:	4601      	mov	r1, r0
 8006e6c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006e6e:	9805      	ldr	r0, [sp, #20]
 8006e70:	f7ff f8fa 	bl	8006068 <__multiply>
 8006e74:	900a      	str	r0, [sp, #40]	@ 0x28
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f43f ae8d 	beq.w	8006b96 <_strtod_l+0x446>
 8006e7c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e7e:	9805      	ldr	r0, [sp, #20]
 8006e80:	f7fe ffde 	bl	8005e40 <_Bfree>
 8006e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e86:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	dc1d      	bgt.n	8006ec8 <_strtod_l+0x778>
 8006e8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	dd23      	ble.n	8006eda <_strtod_l+0x78a>
 8006e92:	4649      	mov	r1, r9
 8006e94:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e96:	9805      	ldr	r0, [sp, #20]
 8006e98:	f7ff f988 	bl	80061ac <__pow5mult>
 8006e9c:	4681      	mov	r9, r0
 8006e9e:	b9e0      	cbnz	r0, 8006eda <_strtod_l+0x78a>
 8006ea0:	f04f 0900 	mov.w	r9, #0
 8006ea4:	e677      	b.n	8006b96 <_strtod_l+0x446>
 8006ea6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006eaa:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006eae:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006eb2:	35e2      	adds	r5, #226	@ 0xe2
 8006eb4:	fa01 f305 	lsl.w	r3, r1, r5
 8006eb8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006eba:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006ebc:	e7ba      	b.n	8006e34 <_strtod_l+0x6e4>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ec6:	e7b5      	b.n	8006e34 <_strtod_l+0x6e4>
 8006ec8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006eca:	9805      	ldr	r0, [sp, #20]
 8006ecc:	462a      	mov	r2, r5
 8006ece:	f7ff f9c7 	bl	8006260 <__lshift>
 8006ed2:	901a      	str	r0, [sp, #104]	@ 0x68
 8006ed4:	2800      	cmp	r0, #0
 8006ed6:	d1d9      	bne.n	8006e8c <_strtod_l+0x73c>
 8006ed8:	e65d      	b.n	8006b96 <_strtod_l+0x446>
 8006eda:	2e00      	cmp	r6, #0
 8006edc:	dd07      	ble.n	8006eee <_strtod_l+0x79e>
 8006ede:	4649      	mov	r1, r9
 8006ee0:	9805      	ldr	r0, [sp, #20]
 8006ee2:	4632      	mov	r2, r6
 8006ee4:	f7ff f9bc 	bl	8006260 <__lshift>
 8006ee8:	4681      	mov	r9, r0
 8006eea:	2800      	cmp	r0, #0
 8006eec:	d0d8      	beq.n	8006ea0 <_strtod_l+0x750>
 8006eee:	2f00      	cmp	r7, #0
 8006ef0:	dd08      	ble.n	8006f04 <_strtod_l+0x7b4>
 8006ef2:	4641      	mov	r1, r8
 8006ef4:	9805      	ldr	r0, [sp, #20]
 8006ef6:	463a      	mov	r2, r7
 8006ef8:	f7ff f9b2 	bl	8006260 <__lshift>
 8006efc:	4680      	mov	r8, r0
 8006efe:	2800      	cmp	r0, #0
 8006f00:	f43f ae49 	beq.w	8006b96 <_strtod_l+0x446>
 8006f04:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f06:	9805      	ldr	r0, [sp, #20]
 8006f08:	464a      	mov	r2, r9
 8006f0a:	f7ff fa31 	bl	8006370 <__mdiff>
 8006f0e:	4604      	mov	r4, r0
 8006f10:	2800      	cmp	r0, #0
 8006f12:	f43f ae40 	beq.w	8006b96 <_strtod_l+0x446>
 8006f16:	68c3      	ldr	r3, [r0, #12]
 8006f18:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60c3      	str	r3, [r0, #12]
 8006f1e:	4641      	mov	r1, r8
 8006f20:	f7ff fa0a 	bl	8006338 <__mcmp>
 8006f24:	2800      	cmp	r0, #0
 8006f26:	da45      	bge.n	8006fb4 <_strtod_l+0x864>
 8006f28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f2a:	ea53 030a 	orrs.w	r3, r3, sl
 8006f2e:	d16b      	bne.n	8007008 <_strtod_l+0x8b8>
 8006f30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d167      	bne.n	8007008 <_strtod_l+0x8b8>
 8006f38:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f3c:	0d1b      	lsrs	r3, r3, #20
 8006f3e:	051b      	lsls	r3, r3, #20
 8006f40:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f44:	d960      	bls.n	8007008 <_strtod_l+0x8b8>
 8006f46:	6963      	ldr	r3, [r4, #20]
 8006f48:	b913      	cbnz	r3, 8006f50 <_strtod_l+0x800>
 8006f4a:	6923      	ldr	r3, [r4, #16]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	dd5b      	ble.n	8007008 <_strtod_l+0x8b8>
 8006f50:	4621      	mov	r1, r4
 8006f52:	2201      	movs	r2, #1
 8006f54:	9805      	ldr	r0, [sp, #20]
 8006f56:	f7ff f983 	bl	8006260 <__lshift>
 8006f5a:	4641      	mov	r1, r8
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	f7ff f9eb 	bl	8006338 <__mcmp>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	dd50      	ble.n	8007008 <_strtod_l+0x8b8>
 8006f66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006f6a:	9a08      	ldr	r2, [sp, #32]
 8006f6c:	0d1b      	lsrs	r3, r3, #20
 8006f6e:	051b      	lsls	r3, r3, #20
 8006f70:	2a00      	cmp	r2, #0
 8006f72:	d06a      	beq.n	800704a <_strtod_l+0x8fa>
 8006f74:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006f78:	d867      	bhi.n	800704a <_strtod_l+0x8fa>
 8006f7a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006f7e:	f67f ae9d 	bls.w	8006cbc <_strtod_l+0x56c>
 8006f82:	4b0a      	ldr	r3, [pc, #40]	@ (8006fac <_strtod_l+0x85c>)
 8006f84:	4650      	mov	r0, sl
 8006f86:	4659      	mov	r1, fp
 8006f88:	2200      	movs	r2, #0
 8006f8a:	f7f9 fb55 	bl	8000638 <__aeabi_dmul>
 8006f8e:	4b08      	ldr	r3, [pc, #32]	@ (8006fb0 <_strtod_l+0x860>)
 8006f90:	400b      	ands	r3, r1
 8006f92:	4682      	mov	sl, r0
 8006f94:	468b      	mov	fp, r1
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f47f ae08 	bne.w	8006bac <_strtod_l+0x45c>
 8006f9c:	9a05      	ldr	r2, [sp, #20]
 8006f9e:	2322      	movs	r3, #34	@ 0x22
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	e603      	b.n	8006bac <_strtod_l+0x45c>
 8006fa4:	08008928 	.word	0x08008928
 8006fa8:	fffffc02 	.word	0xfffffc02
 8006fac:	39500000 	.word	0x39500000
 8006fb0:	7ff00000 	.word	0x7ff00000
 8006fb4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8006fb8:	d165      	bne.n	8007086 <_strtod_l+0x936>
 8006fba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006fbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006fc0:	b35a      	cbz	r2, 800701a <_strtod_l+0x8ca>
 8006fc2:	4a9f      	ldr	r2, [pc, #636]	@ (8007240 <_strtod_l+0xaf0>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d12b      	bne.n	8007020 <_strtod_l+0x8d0>
 8006fc8:	9b08      	ldr	r3, [sp, #32]
 8006fca:	4651      	mov	r1, sl
 8006fcc:	b303      	cbz	r3, 8007010 <_strtod_l+0x8c0>
 8006fce:	4b9d      	ldr	r3, [pc, #628]	@ (8007244 <_strtod_l+0xaf4>)
 8006fd0:	465a      	mov	r2, fp
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006fdc:	d81b      	bhi.n	8007016 <_strtod_l+0x8c6>
 8006fde:	0d1b      	lsrs	r3, r3, #20
 8006fe0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe8:	4299      	cmp	r1, r3
 8006fea:	d119      	bne.n	8007020 <_strtod_l+0x8d0>
 8006fec:	4b96      	ldr	r3, [pc, #600]	@ (8007248 <_strtod_l+0xaf8>)
 8006fee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d102      	bne.n	8006ffa <_strtod_l+0x8aa>
 8006ff4:	3101      	adds	r1, #1
 8006ff6:	f43f adce 	beq.w	8006b96 <_strtod_l+0x446>
 8006ffa:	4b92      	ldr	r3, [pc, #584]	@ (8007244 <_strtod_l+0xaf4>)
 8006ffc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006ffe:	401a      	ands	r2, r3
 8007000:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007004:	f04f 0a00 	mov.w	sl, #0
 8007008:	9b08      	ldr	r3, [sp, #32]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d1b9      	bne.n	8006f82 <_strtod_l+0x832>
 800700e:	e5cd      	b.n	8006bac <_strtod_l+0x45c>
 8007010:	f04f 33ff 	mov.w	r3, #4294967295
 8007014:	e7e8      	b.n	8006fe8 <_strtod_l+0x898>
 8007016:	4613      	mov	r3, r2
 8007018:	e7e6      	b.n	8006fe8 <_strtod_l+0x898>
 800701a:	ea53 030a 	orrs.w	r3, r3, sl
 800701e:	d0a2      	beq.n	8006f66 <_strtod_l+0x816>
 8007020:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007022:	b1db      	cbz	r3, 800705c <_strtod_l+0x90c>
 8007024:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007026:	4213      	tst	r3, r2
 8007028:	d0ee      	beq.n	8007008 <_strtod_l+0x8b8>
 800702a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800702c:	9a08      	ldr	r2, [sp, #32]
 800702e:	4650      	mov	r0, sl
 8007030:	4659      	mov	r1, fp
 8007032:	b1bb      	cbz	r3, 8007064 <_strtod_l+0x914>
 8007034:	f7ff fb6e 	bl	8006714 <sulp>
 8007038:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800703c:	ec53 2b10 	vmov	r2, r3, d0
 8007040:	f7f9 f944 	bl	80002cc <__adddf3>
 8007044:	4682      	mov	sl, r0
 8007046:	468b      	mov	fp, r1
 8007048:	e7de      	b.n	8007008 <_strtod_l+0x8b8>
 800704a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800704e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007052:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007056:	f04f 3aff 	mov.w	sl, #4294967295
 800705a:	e7d5      	b.n	8007008 <_strtod_l+0x8b8>
 800705c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800705e:	ea13 0f0a 	tst.w	r3, sl
 8007062:	e7e1      	b.n	8007028 <_strtod_l+0x8d8>
 8007064:	f7ff fb56 	bl	8006714 <sulp>
 8007068:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800706c:	ec53 2b10 	vmov	r2, r3, d0
 8007070:	f7f9 f92a 	bl	80002c8 <__aeabi_dsub>
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	4682      	mov	sl, r0
 800707a:	468b      	mov	fp, r1
 800707c:	f7f9 fd44 	bl	8000b08 <__aeabi_dcmpeq>
 8007080:	2800      	cmp	r0, #0
 8007082:	d0c1      	beq.n	8007008 <_strtod_l+0x8b8>
 8007084:	e61a      	b.n	8006cbc <_strtod_l+0x56c>
 8007086:	4641      	mov	r1, r8
 8007088:	4620      	mov	r0, r4
 800708a:	f7ff facd 	bl	8006628 <__ratio>
 800708e:	ec57 6b10 	vmov	r6, r7, d0
 8007092:	2200      	movs	r2, #0
 8007094:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007098:	4630      	mov	r0, r6
 800709a:	4639      	mov	r1, r7
 800709c:	f7f9 fd48 	bl	8000b30 <__aeabi_dcmple>
 80070a0:	2800      	cmp	r0, #0
 80070a2:	d06f      	beq.n	8007184 <_strtod_l+0xa34>
 80070a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d17a      	bne.n	80071a0 <_strtod_l+0xa50>
 80070aa:	f1ba 0f00 	cmp.w	sl, #0
 80070ae:	d158      	bne.n	8007162 <_strtod_l+0xa12>
 80070b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d15a      	bne.n	8007170 <_strtod_l+0xa20>
 80070ba:	4b64      	ldr	r3, [pc, #400]	@ (800724c <_strtod_l+0xafc>)
 80070bc:	2200      	movs	r2, #0
 80070be:	4630      	mov	r0, r6
 80070c0:	4639      	mov	r1, r7
 80070c2:	f7f9 fd2b 	bl	8000b1c <__aeabi_dcmplt>
 80070c6:	2800      	cmp	r0, #0
 80070c8:	d159      	bne.n	800717e <_strtod_l+0xa2e>
 80070ca:	4630      	mov	r0, r6
 80070cc:	4639      	mov	r1, r7
 80070ce:	4b60      	ldr	r3, [pc, #384]	@ (8007250 <_strtod_l+0xb00>)
 80070d0:	2200      	movs	r2, #0
 80070d2:	f7f9 fab1 	bl	8000638 <__aeabi_dmul>
 80070d6:	4606      	mov	r6, r0
 80070d8:	460f      	mov	r7, r1
 80070da:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80070de:	9606      	str	r6, [sp, #24]
 80070e0:	9307      	str	r3, [sp, #28]
 80070e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070e6:	4d57      	ldr	r5, [pc, #348]	@ (8007244 <_strtod_l+0xaf4>)
 80070e8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80070ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070ee:	401d      	ands	r5, r3
 80070f0:	4b58      	ldr	r3, [pc, #352]	@ (8007254 <_strtod_l+0xb04>)
 80070f2:	429d      	cmp	r5, r3
 80070f4:	f040 80b2 	bne.w	800725c <_strtod_l+0xb0c>
 80070f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80070fa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80070fe:	ec4b ab10 	vmov	d0, sl, fp
 8007102:	f7ff f9c9 	bl	8006498 <__ulp>
 8007106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800710a:	ec51 0b10 	vmov	r0, r1, d0
 800710e:	f7f9 fa93 	bl	8000638 <__aeabi_dmul>
 8007112:	4652      	mov	r2, sl
 8007114:	465b      	mov	r3, fp
 8007116:	f7f9 f8d9 	bl	80002cc <__adddf3>
 800711a:	460b      	mov	r3, r1
 800711c:	4949      	ldr	r1, [pc, #292]	@ (8007244 <_strtod_l+0xaf4>)
 800711e:	4a4e      	ldr	r2, [pc, #312]	@ (8007258 <_strtod_l+0xb08>)
 8007120:	4019      	ands	r1, r3
 8007122:	4291      	cmp	r1, r2
 8007124:	4682      	mov	sl, r0
 8007126:	d942      	bls.n	80071ae <_strtod_l+0xa5e>
 8007128:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800712a:	4b47      	ldr	r3, [pc, #284]	@ (8007248 <_strtod_l+0xaf8>)
 800712c:	429a      	cmp	r2, r3
 800712e:	d103      	bne.n	8007138 <_strtod_l+0x9e8>
 8007130:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007132:	3301      	adds	r3, #1
 8007134:	f43f ad2f 	beq.w	8006b96 <_strtod_l+0x446>
 8007138:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007248 <_strtod_l+0xaf8>
 800713c:	f04f 3aff 	mov.w	sl, #4294967295
 8007140:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007142:	9805      	ldr	r0, [sp, #20]
 8007144:	f7fe fe7c 	bl	8005e40 <_Bfree>
 8007148:	9805      	ldr	r0, [sp, #20]
 800714a:	4649      	mov	r1, r9
 800714c:	f7fe fe78 	bl	8005e40 <_Bfree>
 8007150:	9805      	ldr	r0, [sp, #20]
 8007152:	4641      	mov	r1, r8
 8007154:	f7fe fe74 	bl	8005e40 <_Bfree>
 8007158:	9805      	ldr	r0, [sp, #20]
 800715a:	4621      	mov	r1, r4
 800715c:	f7fe fe70 	bl	8005e40 <_Bfree>
 8007160:	e619      	b.n	8006d96 <_strtod_l+0x646>
 8007162:	f1ba 0f01 	cmp.w	sl, #1
 8007166:	d103      	bne.n	8007170 <_strtod_l+0xa20>
 8007168:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800716a:	2b00      	cmp	r3, #0
 800716c:	f43f ada6 	beq.w	8006cbc <_strtod_l+0x56c>
 8007170:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007220 <_strtod_l+0xad0>
 8007174:	4f35      	ldr	r7, [pc, #212]	@ (800724c <_strtod_l+0xafc>)
 8007176:	ed8d 7b06 	vstr	d7, [sp, #24]
 800717a:	2600      	movs	r6, #0
 800717c:	e7b1      	b.n	80070e2 <_strtod_l+0x992>
 800717e:	4f34      	ldr	r7, [pc, #208]	@ (8007250 <_strtod_l+0xb00>)
 8007180:	2600      	movs	r6, #0
 8007182:	e7aa      	b.n	80070da <_strtod_l+0x98a>
 8007184:	4b32      	ldr	r3, [pc, #200]	@ (8007250 <_strtod_l+0xb00>)
 8007186:	4630      	mov	r0, r6
 8007188:	4639      	mov	r1, r7
 800718a:	2200      	movs	r2, #0
 800718c:	f7f9 fa54 	bl	8000638 <__aeabi_dmul>
 8007190:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007192:	4606      	mov	r6, r0
 8007194:	460f      	mov	r7, r1
 8007196:	2b00      	cmp	r3, #0
 8007198:	d09f      	beq.n	80070da <_strtod_l+0x98a>
 800719a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800719e:	e7a0      	b.n	80070e2 <_strtod_l+0x992>
 80071a0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007228 <_strtod_l+0xad8>
 80071a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071a8:	ec57 6b17 	vmov	r6, r7, d7
 80071ac:	e799      	b.n	80070e2 <_strtod_l+0x992>
 80071ae:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80071b2:	9b08      	ldr	r3, [sp, #32]
 80071b4:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1c1      	bne.n	8007140 <_strtod_l+0x9f0>
 80071bc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071c0:	0d1b      	lsrs	r3, r3, #20
 80071c2:	051b      	lsls	r3, r3, #20
 80071c4:	429d      	cmp	r5, r3
 80071c6:	d1bb      	bne.n	8007140 <_strtod_l+0x9f0>
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 fd94 	bl	8000cf8 <__aeabi_d2lz>
 80071d0:	f7f9 fa04 	bl	80005dc <__aeabi_l2d>
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4630      	mov	r0, r6
 80071da:	4639      	mov	r1, r7
 80071dc:	f7f9 f874 	bl	80002c8 <__aeabi_dsub>
 80071e0:	460b      	mov	r3, r1
 80071e2:	4602      	mov	r2, r0
 80071e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80071e8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80071ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071ee:	ea46 060a 	orr.w	r6, r6, sl
 80071f2:	431e      	orrs	r6, r3
 80071f4:	d06f      	beq.n	80072d6 <_strtod_l+0xb86>
 80071f6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007230 <_strtod_l+0xae0>)
 80071f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071fc:	f7f9 fc8e 	bl	8000b1c <__aeabi_dcmplt>
 8007200:	2800      	cmp	r0, #0
 8007202:	f47f acd3 	bne.w	8006bac <_strtod_l+0x45c>
 8007206:	a30c      	add	r3, pc, #48	@ (adr r3, 8007238 <_strtod_l+0xae8>)
 8007208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007210:	f7f9 fca2 	bl	8000b58 <__aeabi_dcmpgt>
 8007214:	2800      	cmp	r0, #0
 8007216:	d093      	beq.n	8007140 <_strtod_l+0x9f0>
 8007218:	e4c8      	b.n	8006bac <_strtod_l+0x45c>
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w
 8007220:	00000000 	.word	0x00000000
 8007224:	bff00000 	.word	0xbff00000
 8007228:	00000000 	.word	0x00000000
 800722c:	3ff00000 	.word	0x3ff00000
 8007230:	94a03595 	.word	0x94a03595
 8007234:	3fdfffff 	.word	0x3fdfffff
 8007238:	35afe535 	.word	0x35afe535
 800723c:	3fe00000 	.word	0x3fe00000
 8007240:	000fffff 	.word	0x000fffff
 8007244:	7ff00000 	.word	0x7ff00000
 8007248:	7fefffff 	.word	0x7fefffff
 800724c:	3ff00000 	.word	0x3ff00000
 8007250:	3fe00000 	.word	0x3fe00000
 8007254:	7fe00000 	.word	0x7fe00000
 8007258:	7c9fffff 	.word	0x7c9fffff
 800725c:	9b08      	ldr	r3, [sp, #32]
 800725e:	b323      	cbz	r3, 80072aa <_strtod_l+0xb5a>
 8007260:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007264:	d821      	bhi.n	80072aa <_strtod_l+0xb5a>
 8007266:	a328      	add	r3, pc, #160	@ (adr r3, 8007308 <_strtod_l+0xbb8>)
 8007268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726c:	4630      	mov	r0, r6
 800726e:	4639      	mov	r1, r7
 8007270:	f7f9 fc5e 	bl	8000b30 <__aeabi_dcmple>
 8007274:	b1a0      	cbz	r0, 80072a0 <_strtod_l+0xb50>
 8007276:	4639      	mov	r1, r7
 8007278:	4630      	mov	r0, r6
 800727a:	f7f9 fcb5 	bl	8000be8 <__aeabi_d2uiz>
 800727e:	2801      	cmp	r0, #1
 8007280:	bf38      	it	cc
 8007282:	2001      	movcc	r0, #1
 8007284:	f7f9 f95e 	bl	8000544 <__aeabi_ui2d>
 8007288:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800728a:	4606      	mov	r6, r0
 800728c:	460f      	mov	r7, r1
 800728e:	b9fb      	cbnz	r3, 80072d0 <_strtod_l+0xb80>
 8007290:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007294:	9014      	str	r0, [sp, #80]	@ 0x50
 8007296:	9315      	str	r3, [sp, #84]	@ 0x54
 8007298:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800729c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80072a0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80072a2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80072a6:	1b5b      	subs	r3, r3, r5
 80072a8:	9311      	str	r3, [sp, #68]	@ 0x44
 80072aa:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80072ae:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80072b2:	f7ff f8f1 	bl	8006498 <__ulp>
 80072b6:	4650      	mov	r0, sl
 80072b8:	ec53 2b10 	vmov	r2, r3, d0
 80072bc:	4659      	mov	r1, fp
 80072be:	f7f9 f9bb 	bl	8000638 <__aeabi_dmul>
 80072c2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80072c6:	f7f9 f801 	bl	80002cc <__adddf3>
 80072ca:	4682      	mov	sl, r0
 80072cc:	468b      	mov	fp, r1
 80072ce:	e770      	b.n	80071b2 <_strtod_l+0xa62>
 80072d0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80072d4:	e7e0      	b.n	8007298 <_strtod_l+0xb48>
 80072d6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007310 <_strtod_l+0xbc0>)
 80072d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072dc:	f7f9 fc1e 	bl	8000b1c <__aeabi_dcmplt>
 80072e0:	e798      	b.n	8007214 <_strtod_l+0xac4>
 80072e2:	2300      	movs	r3, #0
 80072e4:	930e      	str	r3, [sp, #56]	@ 0x38
 80072e6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80072e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	f7ff ba6d 	b.w	80067ca <_strtod_l+0x7a>
 80072f0:	2a65      	cmp	r2, #101	@ 0x65
 80072f2:	f43f ab68 	beq.w	80069c6 <_strtod_l+0x276>
 80072f6:	2a45      	cmp	r2, #69	@ 0x45
 80072f8:	f43f ab65 	beq.w	80069c6 <_strtod_l+0x276>
 80072fc:	2301      	movs	r3, #1
 80072fe:	f7ff bba0 	b.w	8006a42 <_strtod_l+0x2f2>
 8007302:	bf00      	nop
 8007304:	f3af 8000 	nop.w
 8007308:	ffc00000 	.word	0xffc00000
 800730c:	41dfffff 	.word	0x41dfffff
 8007310:	94a03595 	.word	0x94a03595
 8007314:	3fcfffff 	.word	0x3fcfffff

08007318 <_strtod_r>:
 8007318:	4b01      	ldr	r3, [pc, #4]	@ (8007320 <_strtod_r+0x8>)
 800731a:	f7ff ba19 	b.w	8006750 <_strtod_l>
 800731e:	bf00      	nop
 8007320:	20000068 	.word	0x20000068

08007324 <_strtol_l.isra.0>:
 8007324:	2b24      	cmp	r3, #36	@ 0x24
 8007326:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800732a:	4686      	mov	lr, r0
 800732c:	4690      	mov	r8, r2
 800732e:	d801      	bhi.n	8007334 <_strtol_l.isra.0+0x10>
 8007330:	2b01      	cmp	r3, #1
 8007332:	d106      	bne.n	8007342 <_strtol_l.isra.0+0x1e>
 8007334:	f7fd fdb8 	bl	8004ea8 <__errno>
 8007338:	2316      	movs	r3, #22
 800733a:	6003      	str	r3, [r0, #0]
 800733c:	2000      	movs	r0, #0
 800733e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007342:	4834      	ldr	r0, [pc, #208]	@ (8007414 <_strtol_l.isra.0+0xf0>)
 8007344:	460d      	mov	r5, r1
 8007346:	462a      	mov	r2, r5
 8007348:	f815 4b01 	ldrb.w	r4, [r5], #1
 800734c:	5d06      	ldrb	r6, [r0, r4]
 800734e:	f016 0608 	ands.w	r6, r6, #8
 8007352:	d1f8      	bne.n	8007346 <_strtol_l.isra.0+0x22>
 8007354:	2c2d      	cmp	r4, #45	@ 0x2d
 8007356:	d110      	bne.n	800737a <_strtol_l.isra.0+0x56>
 8007358:	782c      	ldrb	r4, [r5, #0]
 800735a:	2601      	movs	r6, #1
 800735c:	1c95      	adds	r5, r2, #2
 800735e:	f033 0210 	bics.w	r2, r3, #16
 8007362:	d115      	bne.n	8007390 <_strtol_l.isra.0+0x6c>
 8007364:	2c30      	cmp	r4, #48	@ 0x30
 8007366:	d10d      	bne.n	8007384 <_strtol_l.isra.0+0x60>
 8007368:	782a      	ldrb	r2, [r5, #0]
 800736a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800736e:	2a58      	cmp	r2, #88	@ 0x58
 8007370:	d108      	bne.n	8007384 <_strtol_l.isra.0+0x60>
 8007372:	786c      	ldrb	r4, [r5, #1]
 8007374:	3502      	adds	r5, #2
 8007376:	2310      	movs	r3, #16
 8007378:	e00a      	b.n	8007390 <_strtol_l.isra.0+0x6c>
 800737a:	2c2b      	cmp	r4, #43	@ 0x2b
 800737c:	bf04      	itt	eq
 800737e:	782c      	ldrbeq	r4, [r5, #0]
 8007380:	1c95      	addeq	r5, r2, #2
 8007382:	e7ec      	b.n	800735e <_strtol_l.isra.0+0x3a>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1f6      	bne.n	8007376 <_strtol_l.isra.0+0x52>
 8007388:	2c30      	cmp	r4, #48	@ 0x30
 800738a:	bf14      	ite	ne
 800738c:	230a      	movne	r3, #10
 800738e:	2308      	moveq	r3, #8
 8007390:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007394:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007398:	2200      	movs	r2, #0
 800739a:	fbbc f9f3 	udiv	r9, ip, r3
 800739e:	4610      	mov	r0, r2
 80073a0:	fb03 ca19 	mls	sl, r3, r9, ip
 80073a4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80073a8:	2f09      	cmp	r7, #9
 80073aa:	d80f      	bhi.n	80073cc <_strtol_l.isra.0+0xa8>
 80073ac:	463c      	mov	r4, r7
 80073ae:	42a3      	cmp	r3, r4
 80073b0:	dd1b      	ble.n	80073ea <_strtol_l.isra.0+0xc6>
 80073b2:	1c57      	adds	r7, r2, #1
 80073b4:	d007      	beq.n	80073c6 <_strtol_l.isra.0+0xa2>
 80073b6:	4581      	cmp	r9, r0
 80073b8:	d314      	bcc.n	80073e4 <_strtol_l.isra.0+0xc0>
 80073ba:	d101      	bne.n	80073c0 <_strtol_l.isra.0+0x9c>
 80073bc:	45a2      	cmp	sl, r4
 80073be:	db11      	blt.n	80073e4 <_strtol_l.isra.0+0xc0>
 80073c0:	fb00 4003 	mla	r0, r0, r3, r4
 80073c4:	2201      	movs	r2, #1
 80073c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073ca:	e7eb      	b.n	80073a4 <_strtol_l.isra.0+0x80>
 80073cc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80073d0:	2f19      	cmp	r7, #25
 80073d2:	d801      	bhi.n	80073d8 <_strtol_l.isra.0+0xb4>
 80073d4:	3c37      	subs	r4, #55	@ 0x37
 80073d6:	e7ea      	b.n	80073ae <_strtol_l.isra.0+0x8a>
 80073d8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80073dc:	2f19      	cmp	r7, #25
 80073de:	d804      	bhi.n	80073ea <_strtol_l.isra.0+0xc6>
 80073e0:	3c57      	subs	r4, #87	@ 0x57
 80073e2:	e7e4      	b.n	80073ae <_strtol_l.isra.0+0x8a>
 80073e4:	f04f 32ff 	mov.w	r2, #4294967295
 80073e8:	e7ed      	b.n	80073c6 <_strtol_l.isra.0+0xa2>
 80073ea:	1c53      	adds	r3, r2, #1
 80073ec:	d108      	bne.n	8007400 <_strtol_l.isra.0+0xdc>
 80073ee:	2322      	movs	r3, #34	@ 0x22
 80073f0:	f8ce 3000 	str.w	r3, [lr]
 80073f4:	4660      	mov	r0, ip
 80073f6:	f1b8 0f00 	cmp.w	r8, #0
 80073fa:	d0a0      	beq.n	800733e <_strtol_l.isra.0+0x1a>
 80073fc:	1e69      	subs	r1, r5, #1
 80073fe:	e006      	b.n	800740e <_strtol_l.isra.0+0xea>
 8007400:	b106      	cbz	r6, 8007404 <_strtol_l.isra.0+0xe0>
 8007402:	4240      	negs	r0, r0
 8007404:	f1b8 0f00 	cmp.w	r8, #0
 8007408:	d099      	beq.n	800733e <_strtol_l.isra.0+0x1a>
 800740a:	2a00      	cmp	r2, #0
 800740c:	d1f6      	bne.n	80073fc <_strtol_l.isra.0+0xd8>
 800740e:	f8c8 1000 	str.w	r1, [r8]
 8007412:	e794      	b.n	800733e <_strtol_l.isra.0+0x1a>
 8007414:	08008951 	.word	0x08008951

08007418 <_strtol_r>:
 8007418:	f7ff bf84 	b.w	8007324 <_strtol_l.isra.0>

0800741c <__ssputs_r>:
 800741c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007420:	688e      	ldr	r6, [r1, #8]
 8007422:	461f      	mov	r7, r3
 8007424:	42be      	cmp	r6, r7
 8007426:	680b      	ldr	r3, [r1, #0]
 8007428:	4682      	mov	sl, r0
 800742a:	460c      	mov	r4, r1
 800742c:	4690      	mov	r8, r2
 800742e:	d82d      	bhi.n	800748c <__ssputs_r+0x70>
 8007430:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007434:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007438:	d026      	beq.n	8007488 <__ssputs_r+0x6c>
 800743a:	6965      	ldr	r5, [r4, #20]
 800743c:	6909      	ldr	r1, [r1, #16]
 800743e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007442:	eba3 0901 	sub.w	r9, r3, r1
 8007446:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800744a:	1c7b      	adds	r3, r7, #1
 800744c:	444b      	add	r3, r9
 800744e:	106d      	asrs	r5, r5, #1
 8007450:	429d      	cmp	r5, r3
 8007452:	bf38      	it	cc
 8007454:	461d      	movcc	r5, r3
 8007456:	0553      	lsls	r3, r2, #21
 8007458:	d527      	bpl.n	80074aa <__ssputs_r+0x8e>
 800745a:	4629      	mov	r1, r5
 800745c:	f7fe fc24 	bl	8005ca8 <_malloc_r>
 8007460:	4606      	mov	r6, r0
 8007462:	b360      	cbz	r0, 80074be <__ssputs_r+0xa2>
 8007464:	6921      	ldr	r1, [r4, #16]
 8007466:	464a      	mov	r2, r9
 8007468:	f000 fbee 	bl	8007c48 <memcpy>
 800746c:	89a3      	ldrh	r3, [r4, #12]
 800746e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007472:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007476:	81a3      	strh	r3, [r4, #12]
 8007478:	6126      	str	r6, [r4, #16]
 800747a:	6165      	str	r5, [r4, #20]
 800747c:	444e      	add	r6, r9
 800747e:	eba5 0509 	sub.w	r5, r5, r9
 8007482:	6026      	str	r6, [r4, #0]
 8007484:	60a5      	str	r5, [r4, #8]
 8007486:	463e      	mov	r6, r7
 8007488:	42be      	cmp	r6, r7
 800748a:	d900      	bls.n	800748e <__ssputs_r+0x72>
 800748c:	463e      	mov	r6, r7
 800748e:	6820      	ldr	r0, [r4, #0]
 8007490:	4632      	mov	r2, r6
 8007492:	4641      	mov	r1, r8
 8007494:	f000 fb9c 	bl	8007bd0 <memmove>
 8007498:	68a3      	ldr	r3, [r4, #8]
 800749a:	1b9b      	subs	r3, r3, r6
 800749c:	60a3      	str	r3, [r4, #8]
 800749e:	6823      	ldr	r3, [r4, #0]
 80074a0:	4433      	add	r3, r6
 80074a2:	6023      	str	r3, [r4, #0]
 80074a4:	2000      	movs	r0, #0
 80074a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074aa:	462a      	mov	r2, r5
 80074ac:	f000 ff61 	bl	8008372 <_realloc_r>
 80074b0:	4606      	mov	r6, r0
 80074b2:	2800      	cmp	r0, #0
 80074b4:	d1e0      	bne.n	8007478 <__ssputs_r+0x5c>
 80074b6:	6921      	ldr	r1, [r4, #16]
 80074b8:	4650      	mov	r0, sl
 80074ba:	f7fe fb81 	bl	8005bc0 <_free_r>
 80074be:	230c      	movs	r3, #12
 80074c0:	f8ca 3000 	str.w	r3, [sl]
 80074c4:	89a3      	ldrh	r3, [r4, #12]
 80074c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ca:	81a3      	strh	r3, [r4, #12]
 80074cc:	f04f 30ff 	mov.w	r0, #4294967295
 80074d0:	e7e9      	b.n	80074a6 <__ssputs_r+0x8a>
	...

080074d4 <_svfiprintf_r>:
 80074d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	4698      	mov	r8, r3
 80074da:	898b      	ldrh	r3, [r1, #12]
 80074dc:	061b      	lsls	r3, r3, #24
 80074de:	b09d      	sub	sp, #116	@ 0x74
 80074e0:	4607      	mov	r7, r0
 80074e2:	460d      	mov	r5, r1
 80074e4:	4614      	mov	r4, r2
 80074e6:	d510      	bpl.n	800750a <_svfiprintf_r+0x36>
 80074e8:	690b      	ldr	r3, [r1, #16]
 80074ea:	b973      	cbnz	r3, 800750a <_svfiprintf_r+0x36>
 80074ec:	2140      	movs	r1, #64	@ 0x40
 80074ee:	f7fe fbdb 	bl	8005ca8 <_malloc_r>
 80074f2:	6028      	str	r0, [r5, #0]
 80074f4:	6128      	str	r0, [r5, #16]
 80074f6:	b930      	cbnz	r0, 8007506 <_svfiprintf_r+0x32>
 80074f8:	230c      	movs	r3, #12
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007500:	b01d      	add	sp, #116	@ 0x74
 8007502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007506:	2340      	movs	r3, #64	@ 0x40
 8007508:	616b      	str	r3, [r5, #20]
 800750a:	2300      	movs	r3, #0
 800750c:	9309      	str	r3, [sp, #36]	@ 0x24
 800750e:	2320      	movs	r3, #32
 8007510:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007514:	f8cd 800c 	str.w	r8, [sp, #12]
 8007518:	2330      	movs	r3, #48	@ 0x30
 800751a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80076b8 <_svfiprintf_r+0x1e4>
 800751e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007522:	f04f 0901 	mov.w	r9, #1
 8007526:	4623      	mov	r3, r4
 8007528:	469a      	mov	sl, r3
 800752a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800752e:	b10a      	cbz	r2, 8007534 <_svfiprintf_r+0x60>
 8007530:	2a25      	cmp	r2, #37	@ 0x25
 8007532:	d1f9      	bne.n	8007528 <_svfiprintf_r+0x54>
 8007534:	ebba 0b04 	subs.w	fp, sl, r4
 8007538:	d00b      	beq.n	8007552 <_svfiprintf_r+0x7e>
 800753a:	465b      	mov	r3, fp
 800753c:	4622      	mov	r2, r4
 800753e:	4629      	mov	r1, r5
 8007540:	4638      	mov	r0, r7
 8007542:	f7ff ff6b 	bl	800741c <__ssputs_r>
 8007546:	3001      	adds	r0, #1
 8007548:	f000 80a7 	beq.w	800769a <_svfiprintf_r+0x1c6>
 800754c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800754e:	445a      	add	r2, fp
 8007550:	9209      	str	r2, [sp, #36]	@ 0x24
 8007552:	f89a 3000 	ldrb.w	r3, [sl]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 809f 	beq.w	800769a <_svfiprintf_r+0x1c6>
 800755c:	2300      	movs	r3, #0
 800755e:	f04f 32ff 	mov.w	r2, #4294967295
 8007562:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007566:	f10a 0a01 	add.w	sl, sl, #1
 800756a:	9304      	str	r3, [sp, #16]
 800756c:	9307      	str	r3, [sp, #28]
 800756e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007572:	931a      	str	r3, [sp, #104]	@ 0x68
 8007574:	4654      	mov	r4, sl
 8007576:	2205      	movs	r2, #5
 8007578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757c:	484e      	ldr	r0, [pc, #312]	@ (80076b8 <_svfiprintf_r+0x1e4>)
 800757e:	f7f8 fe47 	bl	8000210 <memchr>
 8007582:	9a04      	ldr	r2, [sp, #16]
 8007584:	b9d8      	cbnz	r0, 80075be <_svfiprintf_r+0xea>
 8007586:	06d0      	lsls	r0, r2, #27
 8007588:	bf44      	itt	mi
 800758a:	2320      	movmi	r3, #32
 800758c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007590:	0711      	lsls	r1, r2, #28
 8007592:	bf44      	itt	mi
 8007594:	232b      	movmi	r3, #43	@ 0x2b
 8007596:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800759a:	f89a 3000 	ldrb.w	r3, [sl]
 800759e:	2b2a      	cmp	r3, #42	@ 0x2a
 80075a0:	d015      	beq.n	80075ce <_svfiprintf_r+0xfa>
 80075a2:	9a07      	ldr	r2, [sp, #28]
 80075a4:	4654      	mov	r4, sl
 80075a6:	2000      	movs	r0, #0
 80075a8:	f04f 0c0a 	mov.w	ip, #10
 80075ac:	4621      	mov	r1, r4
 80075ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075b2:	3b30      	subs	r3, #48	@ 0x30
 80075b4:	2b09      	cmp	r3, #9
 80075b6:	d94b      	bls.n	8007650 <_svfiprintf_r+0x17c>
 80075b8:	b1b0      	cbz	r0, 80075e8 <_svfiprintf_r+0x114>
 80075ba:	9207      	str	r2, [sp, #28]
 80075bc:	e014      	b.n	80075e8 <_svfiprintf_r+0x114>
 80075be:	eba0 0308 	sub.w	r3, r0, r8
 80075c2:	fa09 f303 	lsl.w	r3, r9, r3
 80075c6:	4313      	orrs	r3, r2
 80075c8:	9304      	str	r3, [sp, #16]
 80075ca:	46a2      	mov	sl, r4
 80075cc:	e7d2      	b.n	8007574 <_svfiprintf_r+0xa0>
 80075ce:	9b03      	ldr	r3, [sp, #12]
 80075d0:	1d19      	adds	r1, r3, #4
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	9103      	str	r1, [sp, #12]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	bfbb      	ittet	lt
 80075da:	425b      	neglt	r3, r3
 80075dc:	f042 0202 	orrlt.w	r2, r2, #2
 80075e0:	9307      	strge	r3, [sp, #28]
 80075e2:	9307      	strlt	r3, [sp, #28]
 80075e4:	bfb8      	it	lt
 80075e6:	9204      	strlt	r2, [sp, #16]
 80075e8:	7823      	ldrb	r3, [r4, #0]
 80075ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ec:	d10a      	bne.n	8007604 <_svfiprintf_r+0x130>
 80075ee:	7863      	ldrb	r3, [r4, #1]
 80075f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80075f2:	d132      	bne.n	800765a <_svfiprintf_r+0x186>
 80075f4:	9b03      	ldr	r3, [sp, #12]
 80075f6:	1d1a      	adds	r2, r3, #4
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	9203      	str	r2, [sp, #12]
 80075fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007600:	3402      	adds	r4, #2
 8007602:	9305      	str	r3, [sp, #20]
 8007604:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80076c8 <_svfiprintf_r+0x1f4>
 8007608:	7821      	ldrb	r1, [r4, #0]
 800760a:	2203      	movs	r2, #3
 800760c:	4650      	mov	r0, sl
 800760e:	f7f8 fdff 	bl	8000210 <memchr>
 8007612:	b138      	cbz	r0, 8007624 <_svfiprintf_r+0x150>
 8007614:	9b04      	ldr	r3, [sp, #16]
 8007616:	eba0 000a 	sub.w	r0, r0, sl
 800761a:	2240      	movs	r2, #64	@ 0x40
 800761c:	4082      	lsls	r2, r0
 800761e:	4313      	orrs	r3, r2
 8007620:	3401      	adds	r4, #1
 8007622:	9304      	str	r3, [sp, #16]
 8007624:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007628:	4824      	ldr	r0, [pc, #144]	@ (80076bc <_svfiprintf_r+0x1e8>)
 800762a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800762e:	2206      	movs	r2, #6
 8007630:	f7f8 fdee 	bl	8000210 <memchr>
 8007634:	2800      	cmp	r0, #0
 8007636:	d036      	beq.n	80076a6 <_svfiprintf_r+0x1d2>
 8007638:	4b21      	ldr	r3, [pc, #132]	@ (80076c0 <_svfiprintf_r+0x1ec>)
 800763a:	bb1b      	cbnz	r3, 8007684 <_svfiprintf_r+0x1b0>
 800763c:	9b03      	ldr	r3, [sp, #12]
 800763e:	3307      	adds	r3, #7
 8007640:	f023 0307 	bic.w	r3, r3, #7
 8007644:	3308      	adds	r3, #8
 8007646:	9303      	str	r3, [sp, #12]
 8007648:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764a:	4433      	add	r3, r6
 800764c:	9309      	str	r3, [sp, #36]	@ 0x24
 800764e:	e76a      	b.n	8007526 <_svfiprintf_r+0x52>
 8007650:	fb0c 3202 	mla	r2, ip, r2, r3
 8007654:	460c      	mov	r4, r1
 8007656:	2001      	movs	r0, #1
 8007658:	e7a8      	b.n	80075ac <_svfiprintf_r+0xd8>
 800765a:	2300      	movs	r3, #0
 800765c:	3401      	adds	r4, #1
 800765e:	9305      	str	r3, [sp, #20]
 8007660:	4619      	mov	r1, r3
 8007662:	f04f 0c0a 	mov.w	ip, #10
 8007666:	4620      	mov	r0, r4
 8007668:	f810 2b01 	ldrb.w	r2, [r0], #1
 800766c:	3a30      	subs	r2, #48	@ 0x30
 800766e:	2a09      	cmp	r2, #9
 8007670:	d903      	bls.n	800767a <_svfiprintf_r+0x1a6>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d0c6      	beq.n	8007604 <_svfiprintf_r+0x130>
 8007676:	9105      	str	r1, [sp, #20]
 8007678:	e7c4      	b.n	8007604 <_svfiprintf_r+0x130>
 800767a:	fb0c 2101 	mla	r1, ip, r1, r2
 800767e:	4604      	mov	r4, r0
 8007680:	2301      	movs	r3, #1
 8007682:	e7f0      	b.n	8007666 <_svfiprintf_r+0x192>
 8007684:	ab03      	add	r3, sp, #12
 8007686:	9300      	str	r3, [sp, #0]
 8007688:	462a      	mov	r2, r5
 800768a:	4b0e      	ldr	r3, [pc, #56]	@ (80076c4 <_svfiprintf_r+0x1f0>)
 800768c:	a904      	add	r1, sp, #16
 800768e:	4638      	mov	r0, r7
 8007690:	f7fc fcba 	bl	8004008 <_printf_float>
 8007694:	1c42      	adds	r2, r0, #1
 8007696:	4606      	mov	r6, r0
 8007698:	d1d6      	bne.n	8007648 <_svfiprintf_r+0x174>
 800769a:	89ab      	ldrh	r3, [r5, #12]
 800769c:	065b      	lsls	r3, r3, #25
 800769e:	f53f af2d 	bmi.w	80074fc <_svfiprintf_r+0x28>
 80076a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076a4:	e72c      	b.n	8007500 <_svfiprintf_r+0x2c>
 80076a6:	ab03      	add	r3, sp, #12
 80076a8:	9300      	str	r3, [sp, #0]
 80076aa:	462a      	mov	r2, r5
 80076ac:	4b05      	ldr	r3, [pc, #20]	@ (80076c4 <_svfiprintf_r+0x1f0>)
 80076ae:	a904      	add	r1, sp, #16
 80076b0:	4638      	mov	r0, r7
 80076b2:	f7fc ff41 	bl	8004538 <_printf_i>
 80076b6:	e7ed      	b.n	8007694 <_svfiprintf_r+0x1c0>
 80076b8:	0800874d 	.word	0x0800874d
 80076bc:	08008757 	.word	0x08008757
 80076c0:	08004009 	.word	0x08004009
 80076c4:	0800741d 	.word	0x0800741d
 80076c8:	08008753 	.word	0x08008753

080076cc <__sfputc_r>:
 80076cc:	6893      	ldr	r3, [r2, #8]
 80076ce:	3b01      	subs	r3, #1
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	b410      	push	{r4}
 80076d4:	6093      	str	r3, [r2, #8]
 80076d6:	da08      	bge.n	80076ea <__sfputc_r+0x1e>
 80076d8:	6994      	ldr	r4, [r2, #24]
 80076da:	42a3      	cmp	r3, r4
 80076dc:	db01      	blt.n	80076e2 <__sfputc_r+0x16>
 80076de:	290a      	cmp	r1, #10
 80076e0:	d103      	bne.n	80076ea <__sfputc_r+0x1e>
 80076e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076e6:	f000 b9df 	b.w	8007aa8 <__swbuf_r>
 80076ea:	6813      	ldr	r3, [r2, #0]
 80076ec:	1c58      	adds	r0, r3, #1
 80076ee:	6010      	str	r0, [r2, #0]
 80076f0:	7019      	strb	r1, [r3, #0]
 80076f2:	4608      	mov	r0, r1
 80076f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076f8:	4770      	bx	lr

080076fa <__sfputs_r>:
 80076fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fc:	4606      	mov	r6, r0
 80076fe:	460f      	mov	r7, r1
 8007700:	4614      	mov	r4, r2
 8007702:	18d5      	adds	r5, r2, r3
 8007704:	42ac      	cmp	r4, r5
 8007706:	d101      	bne.n	800770c <__sfputs_r+0x12>
 8007708:	2000      	movs	r0, #0
 800770a:	e007      	b.n	800771c <__sfputs_r+0x22>
 800770c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007710:	463a      	mov	r2, r7
 8007712:	4630      	mov	r0, r6
 8007714:	f7ff ffda 	bl	80076cc <__sfputc_r>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d1f3      	bne.n	8007704 <__sfputs_r+0xa>
 800771c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007720 <_vfiprintf_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	460d      	mov	r5, r1
 8007726:	b09d      	sub	sp, #116	@ 0x74
 8007728:	4614      	mov	r4, r2
 800772a:	4698      	mov	r8, r3
 800772c:	4606      	mov	r6, r0
 800772e:	b118      	cbz	r0, 8007738 <_vfiprintf_r+0x18>
 8007730:	6a03      	ldr	r3, [r0, #32]
 8007732:	b90b      	cbnz	r3, 8007738 <_vfiprintf_r+0x18>
 8007734:	f7fd fab8 	bl	8004ca8 <__sinit>
 8007738:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800773a:	07d9      	lsls	r1, r3, #31
 800773c:	d405      	bmi.n	800774a <_vfiprintf_r+0x2a>
 800773e:	89ab      	ldrh	r3, [r5, #12]
 8007740:	059a      	lsls	r2, r3, #22
 8007742:	d402      	bmi.n	800774a <_vfiprintf_r+0x2a>
 8007744:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007746:	f7fd fbda 	bl	8004efe <__retarget_lock_acquire_recursive>
 800774a:	89ab      	ldrh	r3, [r5, #12]
 800774c:	071b      	lsls	r3, r3, #28
 800774e:	d501      	bpl.n	8007754 <_vfiprintf_r+0x34>
 8007750:	692b      	ldr	r3, [r5, #16]
 8007752:	b99b      	cbnz	r3, 800777c <_vfiprintf_r+0x5c>
 8007754:	4629      	mov	r1, r5
 8007756:	4630      	mov	r0, r6
 8007758:	f000 f9e4 	bl	8007b24 <__swsetup_r>
 800775c:	b170      	cbz	r0, 800777c <_vfiprintf_r+0x5c>
 800775e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007760:	07dc      	lsls	r4, r3, #31
 8007762:	d504      	bpl.n	800776e <_vfiprintf_r+0x4e>
 8007764:	f04f 30ff 	mov.w	r0, #4294967295
 8007768:	b01d      	add	sp, #116	@ 0x74
 800776a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	0598      	lsls	r0, r3, #22
 8007772:	d4f7      	bmi.n	8007764 <_vfiprintf_r+0x44>
 8007774:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007776:	f7fd fbc3 	bl	8004f00 <__retarget_lock_release_recursive>
 800777a:	e7f3      	b.n	8007764 <_vfiprintf_r+0x44>
 800777c:	2300      	movs	r3, #0
 800777e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007780:	2320      	movs	r3, #32
 8007782:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007786:	f8cd 800c 	str.w	r8, [sp, #12]
 800778a:	2330      	movs	r3, #48	@ 0x30
 800778c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800793c <_vfiprintf_r+0x21c>
 8007790:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007794:	f04f 0901 	mov.w	r9, #1
 8007798:	4623      	mov	r3, r4
 800779a:	469a      	mov	sl, r3
 800779c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077a0:	b10a      	cbz	r2, 80077a6 <_vfiprintf_r+0x86>
 80077a2:	2a25      	cmp	r2, #37	@ 0x25
 80077a4:	d1f9      	bne.n	800779a <_vfiprintf_r+0x7a>
 80077a6:	ebba 0b04 	subs.w	fp, sl, r4
 80077aa:	d00b      	beq.n	80077c4 <_vfiprintf_r+0xa4>
 80077ac:	465b      	mov	r3, fp
 80077ae:	4622      	mov	r2, r4
 80077b0:	4629      	mov	r1, r5
 80077b2:	4630      	mov	r0, r6
 80077b4:	f7ff ffa1 	bl	80076fa <__sfputs_r>
 80077b8:	3001      	adds	r0, #1
 80077ba:	f000 80a7 	beq.w	800790c <_vfiprintf_r+0x1ec>
 80077be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077c0:	445a      	add	r2, fp
 80077c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80077c4:	f89a 3000 	ldrb.w	r3, [sl]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 809f 	beq.w	800790c <_vfiprintf_r+0x1ec>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f04f 32ff 	mov.w	r2, #4294967295
 80077d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077d8:	f10a 0a01 	add.w	sl, sl, #1
 80077dc:	9304      	str	r3, [sp, #16]
 80077de:	9307      	str	r3, [sp, #28]
 80077e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80077e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80077e6:	4654      	mov	r4, sl
 80077e8:	2205      	movs	r2, #5
 80077ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077ee:	4853      	ldr	r0, [pc, #332]	@ (800793c <_vfiprintf_r+0x21c>)
 80077f0:	f7f8 fd0e 	bl	8000210 <memchr>
 80077f4:	9a04      	ldr	r2, [sp, #16]
 80077f6:	b9d8      	cbnz	r0, 8007830 <_vfiprintf_r+0x110>
 80077f8:	06d1      	lsls	r1, r2, #27
 80077fa:	bf44      	itt	mi
 80077fc:	2320      	movmi	r3, #32
 80077fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007802:	0713      	lsls	r3, r2, #28
 8007804:	bf44      	itt	mi
 8007806:	232b      	movmi	r3, #43	@ 0x2b
 8007808:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800780c:	f89a 3000 	ldrb.w	r3, [sl]
 8007810:	2b2a      	cmp	r3, #42	@ 0x2a
 8007812:	d015      	beq.n	8007840 <_vfiprintf_r+0x120>
 8007814:	9a07      	ldr	r2, [sp, #28]
 8007816:	4654      	mov	r4, sl
 8007818:	2000      	movs	r0, #0
 800781a:	f04f 0c0a 	mov.w	ip, #10
 800781e:	4621      	mov	r1, r4
 8007820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007824:	3b30      	subs	r3, #48	@ 0x30
 8007826:	2b09      	cmp	r3, #9
 8007828:	d94b      	bls.n	80078c2 <_vfiprintf_r+0x1a2>
 800782a:	b1b0      	cbz	r0, 800785a <_vfiprintf_r+0x13a>
 800782c:	9207      	str	r2, [sp, #28]
 800782e:	e014      	b.n	800785a <_vfiprintf_r+0x13a>
 8007830:	eba0 0308 	sub.w	r3, r0, r8
 8007834:	fa09 f303 	lsl.w	r3, r9, r3
 8007838:	4313      	orrs	r3, r2
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	46a2      	mov	sl, r4
 800783e:	e7d2      	b.n	80077e6 <_vfiprintf_r+0xc6>
 8007840:	9b03      	ldr	r3, [sp, #12]
 8007842:	1d19      	adds	r1, r3, #4
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	9103      	str	r1, [sp, #12]
 8007848:	2b00      	cmp	r3, #0
 800784a:	bfbb      	ittet	lt
 800784c:	425b      	neglt	r3, r3
 800784e:	f042 0202 	orrlt.w	r2, r2, #2
 8007852:	9307      	strge	r3, [sp, #28]
 8007854:	9307      	strlt	r3, [sp, #28]
 8007856:	bfb8      	it	lt
 8007858:	9204      	strlt	r2, [sp, #16]
 800785a:	7823      	ldrb	r3, [r4, #0]
 800785c:	2b2e      	cmp	r3, #46	@ 0x2e
 800785e:	d10a      	bne.n	8007876 <_vfiprintf_r+0x156>
 8007860:	7863      	ldrb	r3, [r4, #1]
 8007862:	2b2a      	cmp	r3, #42	@ 0x2a
 8007864:	d132      	bne.n	80078cc <_vfiprintf_r+0x1ac>
 8007866:	9b03      	ldr	r3, [sp, #12]
 8007868:	1d1a      	adds	r2, r3, #4
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	9203      	str	r2, [sp, #12]
 800786e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007872:	3402      	adds	r4, #2
 8007874:	9305      	str	r3, [sp, #20]
 8007876:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800794c <_vfiprintf_r+0x22c>
 800787a:	7821      	ldrb	r1, [r4, #0]
 800787c:	2203      	movs	r2, #3
 800787e:	4650      	mov	r0, sl
 8007880:	f7f8 fcc6 	bl	8000210 <memchr>
 8007884:	b138      	cbz	r0, 8007896 <_vfiprintf_r+0x176>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	eba0 000a 	sub.w	r0, r0, sl
 800788c:	2240      	movs	r2, #64	@ 0x40
 800788e:	4082      	lsls	r2, r0
 8007890:	4313      	orrs	r3, r2
 8007892:	3401      	adds	r4, #1
 8007894:	9304      	str	r3, [sp, #16]
 8007896:	f814 1b01 	ldrb.w	r1, [r4], #1
 800789a:	4829      	ldr	r0, [pc, #164]	@ (8007940 <_vfiprintf_r+0x220>)
 800789c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078a0:	2206      	movs	r2, #6
 80078a2:	f7f8 fcb5 	bl	8000210 <memchr>
 80078a6:	2800      	cmp	r0, #0
 80078a8:	d03f      	beq.n	800792a <_vfiprintf_r+0x20a>
 80078aa:	4b26      	ldr	r3, [pc, #152]	@ (8007944 <_vfiprintf_r+0x224>)
 80078ac:	bb1b      	cbnz	r3, 80078f6 <_vfiprintf_r+0x1d6>
 80078ae:	9b03      	ldr	r3, [sp, #12]
 80078b0:	3307      	adds	r3, #7
 80078b2:	f023 0307 	bic.w	r3, r3, #7
 80078b6:	3308      	adds	r3, #8
 80078b8:	9303      	str	r3, [sp, #12]
 80078ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078bc:	443b      	add	r3, r7
 80078be:	9309      	str	r3, [sp, #36]	@ 0x24
 80078c0:	e76a      	b.n	8007798 <_vfiprintf_r+0x78>
 80078c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80078c6:	460c      	mov	r4, r1
 80078c8:	2001      	movs	r0, #1
 80078ca:	e7a8      	b.n	800781e <_vfiprintf_r+0xfe>
 80078cc:	2300      	movs	r3, #0
 80078ce:	3401      	adds	r4, #1
 80078d0:	9305      	str	r3, [sp, #20]
 80078d2:	4619      	mov	r1, r3
 80078d4:	f04f 0c0a 	mov.w	ip, #10
 80078d8:	4620      	mov	r0, r4
 80078da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078de:	3a30      	subs	r2, #48	@ 0x30
 80078e0:	2a09      	cmp	r2, #9
 80078e2:	d903      	bls.n	80078ec <_vfiprintf_r+0x1cc>
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d0c6      	beq.n	8007876 <_vfiprintf_r+0x156>
 80078e8:	9105      	str	r1, [sp, #20]
 80078ea:	e7c4      	b.n	8007876 <_vfiprintf_r+0x156>
 80078ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80078f0:	4604      	mov	r4, r0
 80078f2:	2301      	movs	r3, #1
 80078f4:	e7f0      	b.n	80078d8 <_vfiprintf_r+0x1b8>
 80078f6:	ab03      	add	r3, sp, #12
 80078f8:	9300      	str	r3, [sp, #0]
 80078fa:	462a      	mov	r2, r5
 80078fc:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <_vfiprintf_r+0x228>)
 80078fe:	a904      	add	r1, sp, #16
 8007900:	4630      	mov	r0, r6
 8007902:	f7fc fb81 	bl	8004008 <_printf_float>
 8007906:	4607      	mov	r7, r0
 8007908:	1c78      	adds	r0, r7, #1
 800790a:	d1d6      	bne.n	80078ba <_vfiprintf_r+0x19a>
 800790c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800790e:	07d9      	lsls	r1, r3, #31
 8007910:	d405      	bmi.n	800791e <_vfiprintf_r+0x1fe>
 8007912:	89ab      	ldrh	r3, [r5, #12]
 8007914:	059a      	lsls	r2, r3, #22
 8007916:	d402      	bmi.n	800791e <_vfiprintf_r+0x1fe>
 8007918:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800791a:	f7fd faf1 	bl	8004f00 <__retarget_lock_release_recursive>
 800791e:	89ab      	ldrh	r3, [r5, #12]
 8007920:	065b      	lsls	r3, r3, #25
 8007922:	f53f af1f 	bmi.w	8007764 <_vfiprintf_r+0x44>
 8007926:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007928:	e71e      	b.n	8007768 <_vfiprintf_r+0x48>
 800792a:	ab03      	add	r3, sp, #12
 800792c:	9300      	str	r3, [sp, #0]
 800792e:	462a      	mov	r2, r5
 8007930:	4b05      	ldr	r3, [pc, #20]	@ (8007948 <_vfiprintf_r+0x228>)
 8007932:	a904      	add	r1, sp, #16
 8007934:	4630      	mov	r0, r6
 8007936:	f7fc fdff 	bl	8004538 <_printf_i>
 800793a:	e7e4      	b.n	8007906 <_vfiprintf_r+0x1e6>
 800793c:	0800874d 	.word	0x0800874d
 8007940:	08008757 	.word	0x08008757
 8007944:	08004009 	.word	0x08004009
 8007948:	080076fb 	.word	0x080076fb
 800794c:	08008753 	.word	0x08008753

08007950 <__sflush_r>:
 8007950:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	0716      	lsls	r6, r2, #28
 800795a:	4605      	mov	r5, r0
 800795c:	460c      	mov	r4, r1
 800795e:	d454      	bmi.n	8007a0a <__sflush_r+0xba>
 8007960:	684b      	ldr	r3, [r1, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	dc02      	bgt.n	800796c <__sflush_r+0x1c>
 8007966:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	dd48      	ble.n	80079fe <__sflush_r+0xae>
 800796c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800796e:	2e00      	cmp	r6, #0
 8007970:	d045      	beq.n	80079fe <__sflush_r+0xae>
 8007972:	2300      	movs	r3, #0
 8007974:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007978:	682f      	ldr	r7, [r5, #0]
 800797a:	6a21      	ldr	r1, [r4, #32]
 800797c:	602b      	str	r3, [r5, #0]
 800797e:	d030      	beq.n	80079e2 <__sflush_r+0x92>
 8007980:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007982:	89a3      	ldrh	r3, [r4, #12]
 8007984:	0759      	lsls	r1, r3, #29
 8007986:	d505      	bpl.n	8007994 <__sflush_r+0x44>
 8007988:	6863      	ldr	r3, [r4, #4]
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800798e:	b10b      	cbz	r3, 8007994 <__sflush_r+0x44>
 8007990:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007992:	1ad2      	subs	r2, r2, r3
 8007994:	2300      	movs	r3, #0
 8007996:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007998:	6a21      	ldr	r1, [r4, #32]
 800799a:	4628      	mov	r0, r5
 800799c:	47b0      	blx	r6
 800799e:	1c43      	adds	r3, r0, #1
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	d106      	bne.n	80079b2 <__sflush_r+0x62>
 80079a4:	6829      	ldr	r1, [r5, #0]
 80079a6:	291d      	cmp	r1, #29
 80079a8:	d82b      	bhi.n	8007a02 <__sflush_r+0xb2>
 80079aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007a54 <__sflush_r+0x104>)
 80079ac:	40ca      	lsrs	r2, r1
 80079ae:	07d6      	lsls	r6, r2, #31
 80079b0:	d527      	bpl.n	8007a02 <__sflush_r+0xb2>
 80079b2:	2200      	movs	r2, #0
 80079b4:	6062      	str	r2, [r4, #4]
 80079b6:	04d9      	lsls	r1, r3, #19
 80079b8:	6922      	ldr	r2, [r4, #16]
 80079ba:	6022      	str	r2, [r4, #0]
 80079bc:	d504      	bpl.n	80079c8 <__sflush_r+0x78>
 80079be:	1c42      	adds	r2, r0, #1
 80079c0:	d101      	bne.n	80079c6 <__sflush_r+0x76>
 80079c2:	682b      	ldr	r3, [r5, #0]
 80079c4:	b903      	cbnz	r3, 80079c8 <__sflush_r+0x78>
 80079c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80079c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079ca:	602f      	str	r7, [r5, #0]
 80079cc:	b1b9      	cbz	r1, 80079fe <__sflush_r+0xae>
 80079ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079d2:	4299      	cmp	r1, r3
 80079d4:	d002      	beq.n	80079dc <__sflush_r+0x8c>
 80079d6:	4628      	mov	r0, r5
 80079d8:	f7fe f8f2 	bl	8005bc0 <_free_r>
 80079dc:	2300      	movs	r3, #0
 80079de:	6363      	str	r3, [r4, #52]	@ 0x34
 80079e0:	e00d      	b.n	80079fe <__sflush_r+0xae>
 80079e2:	2301      	movs	r3, #1
 80079e4:	4628      	mov	r0, r5
 80079e6:	47b0      	blx	r6
 80079e8:	4602      	mov	r2, r0
 80079ea:	1c50      	adds	r0, r2, #1
 80079ec:	d1c9      	bne.n	8007982 <__sflush_r+0x32>
 80079ee:	682b      	ldr	r3, [r5, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d0c6      	beq.n	8007982 <__sflush_r+0x32>
 80079f4:	2b1d      	cmp	r3, #29
 80079f6:	d001      	beq.n	80079fc <__sflush_r+0xac>
 80079f8:	2b16      	cmp	r3, #22
 80079fa:	d11e      	bne.n	8007a3a <__sflush_r+0xea>
 80079fc:	602f      	str	r7, [r5, #0]
 80079fe:	2000      	movs	r0, #0
 8007a00:	e022      	b.n	8007a48 <__sflush_r+0xf8>
 8007a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a06:	b21b      	sxth	r3, r3
 8007a08:	e01b      	b.n	8007a42 <__sflush_r+0xf2>
 8007a0a:	690f      	ldr	r7, [r1, #16]
 8007a0c:	2f00      	cmp	r7, #0
 8007a0e:	d0f6      	beq.n	80079fe <__sflush_r+0xae>
 8007a10:	0793      	lsls	r3, r2, #30
 8007a12:	680e      	ldr	r6, [r1, #0]
 8007a14:	bf08      	it	eq
 8007a16:	694b      	ldreq	r3, [r1, #20]
 8007a18:	600f      	str	r7, [r1, #0]
 8007a1a:	bf18      	it	ne
 8007a1c:	2300      	movne	r3, #0
 8007a1e:	eba6 0807 	sub.w	r8, r6, r7
 8007a22:	608b      	str	r3, [r1, #8]
 8007a24:	f1b8 0f00 	cmp.w	r8, #0
 8007a28:	dde9      	ble.n	80079fe <__sflush_r+0xae>
 8007a2a:	6a21      	ldr	r1, [r4, #32]
 8007a2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a2e:	4643      	mov	r3, r8
 8007a30:	463a      	mov	r2, r7
 8007a32:	4628      	mov	r0, r5
 8007a34:	47b0      	blx	r6
 8007a36:	2800      	cmp	r0, #0
 8007a38:	dc08      	bgt.n	8007a4c <__sflush_r+0xfc>
 8007a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a42:	81a3      	strh	r3, [r4, #12]
 8007a44:	f04f 30ff 	mov.w	r0, #4294967295
 8007a48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a4c:	4407      	add	r7, r0
 8007a4e:	eba8 0800 	sub.w	r8, r8, r0
 8007a52:	e7e7      	b.n	8007a24 <__sflush_r+0xd4>
 8007a54:	20400001 	.word	0x20400001

08007a58 <_fflush_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	690b      	ldr	r3, [r1, #16]
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	460c      	mov	r4, r1
 8007a60:	b913      	cbnz	r3, 8007a68 <_fflush_r+0x10>
 8007a62:	2500      	movs	r5, #0
 8007a64:	4628      	mov	r0, r5
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	b118      	cbz	r0, 8007a72 <_fflush_r+0x1a>
 8007a6a:	6a03      	ldr	r3, [r0, #32]
 8007a6c:	b90b      	cbnz	r3, 8007a72 <_fflush_r+0x1a>
 8007a6e:	f7fd f91b 	bl	8004ca8 <__sinit>
 8007a72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f3      	beq.n	8007a62 <_fflush_r+0xa>
 8007a7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a7c:	07d0      	lsls	r0, r2, #31
 8007a7e:	d404      	bmi.n	8007a8a <_fflush_r+0x32>
 8007a80:	0599      	lsls	r1, r3, #22
 8007a82:	d402      	bmi.n	8007a8a <_fflush_r+0x32>
 8007a84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a86:	f7fd fa3a 	bl	8004efe <__retarget_lock_acquire_recursive>
 8007a8a:	4628      	mov	r0, r5
 8007a8c:	4621      	mov	r1, r4
 8007a8e:	f7ff ff5f 	bl	8007950 <__sflush_r>
 8007a92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a94:	07da      	lsls	r2, r3, #31
 8007a96:	4605      	mov	r5, r0
 8007a98:	d4e4      	bmi.n	8007a64 <_fflush_r+0xc>
 8007a9a:	89a3      	ldrh	r3, [r4, #12]
 8007a9c:	059b      	lsls	r3, r3, #22
 8007a9e:	d4e1      	bmi.n	8007a64 <_fflush_r+0xc>
 8007aa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007aa2:	f7fd fa2d 	bl	8004f00 <__retarget_lock_release_recursive>
 8007aa6:	e7dd      	b.n	8007a64 <_fflush_r+0xc>

08007aa8 <__swbuf_r>:
 8007aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aaa:	460e      	mov	r6, r1
 8007aac:	4614      	mov	r4, r2
 8007aae:	4605      	mov	r5, r0
 8007ab0:	b118      	cbz	r0, 8007aba <__swbuf_r+0x12>
 8007ab2:	6a03      	ldr	r3, [r0, #32]
 8007ab4:	b90b      	cbnz	r3, 8007aba <__swbuf_r+0x12>
 8007ab6:	f7fd f8f7 	bl	8004ca8 <__sinit>
 8007aba:	69a3      	ldr	r3, [r4, #24]
 8007abc:	60a3      	str	r3, [r4, #8]
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	071a      	lsls	r2, r3, #28
 8007ac2:	d501      	bpl.n	8007ac8 <__swbuf_r+0x20>
 8007ac4:	6923      	ldr	r3, [r4, #16]
 8007ac6:	b943      	cbnz	r3, 8007ada <__swbuf_r+0x32>
 8007ac8:	4621      	mov	r1, r4
 8007aca:	4628      	mov	r0, r5
 8007acc:	f000 f82a 	bl	8007b24 <__swsetup_r>
 8007ad0:	b118      	cbz	r0, 8007ada <__swbuf_r+0x32>
 8007ad2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ad6:	4638      	mov	r0, r7
 8007ad8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ada:	6823      	ldr	r3, [r4, #0]
 8007adc:	6922      	ldr	r2, [r4, #16]
 8007ade:	1a98      	subs	r0, r3, r2
 8007ae0:	6963      	ldr	r3, [r4, #20]
 8007ae2:	b2f6      	uxtb	r6, r6
 8007ae4:	4283      	cmp	r3, r0
 8007ae6:	4637      	mov	r7, r6
 8007ae8:	dc05      	bgt.n	8007af6 <__swbuf_r+0x4e>
 8007aea:	4621      	mov	r1, r4
 8007aec:	4628      	mov	r0, r5
 8007aee:	f7ff ffb3 	bl	8007a58 <_fflush_r>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d1ed      	bne.n	8007ad2 <__swbuf_r+0x2a>
 8007af6:	68a3      	ldr	r3, [r4, #8]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	60a3      	str	r3, [r4, #8]
 8007afc:	6823      	ldr	r3, [r4, #0]
 8007afe:	1c5a      	adds	r2, r3, #1
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	701e      	strb	r6, [r3, #0]
 8007b04:	6962      	ldr	r2, [r4, #20]
 8007b06:	1c43      	adds	r3, r0, #1
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d004      	beq.n	8007b16 <__swbuf_r+0x6e>
 8007b0c:	89a3      	ldrh	r3, [r4, #12]
 8007b0e:	07db      	lsls	r3, r3, #31
 8007b10:	d5e1      	bpl.n	8007ad6 <__swbuf_r+0x2e>
 8007b12:	2e0a      	cmp	r6, #10
 8007b14:	d1df      	bne.n	8007ad6 <__swbuf_r+0x2e>
 8007b16:	4621      	mov	r1, r4
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f7ff ff9d 	bl	8007a58 <_fflush_r>
 8007b1e:	2800      	cmp	r0, #0
 8007b20:	d0d9      	beq.n	8007ad6 <__swbuf_r+0x2e>
 8007b22:	e7d6      	b.n	8007ad2 <__swbuf_r+0x2a>

08007b24 <__swsetup_r>:
 8007b24:	b538      	push	{r3, r4, r5, lr}
 8007b26:	4b29      	ldr	r3, [pc, #164]	@ (8007bcc <__swsetup_r+0xa8>)
 8007b28:	4605      	mov	r5, r0
 8007b2a:	6818      	ldr	r0, [r3, #0]
 8007b2c:	460c      	mov	r4, r1
 8007b2e:	b118      	cbz	r0, 8007b38 <__swsetup_r+0x14>
 8007b30:	6a03      	ldr	r3, [r0, #32]
 8007b32:	b90b      	cbnz	r3, 8007b38 <__swsetup_r+0x14>
 8007b34:	f7fd f8b8 	bl	8004ca8 <__sinit>
 8007b38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3c:	0719      	lsls	r1, r3, #28
 8007b3e:	d422      	bmi.n	8007b86 <__swsetup_r+0x62>
 8007b40:	06da      	lsls	r2, r3, #27
 8007b42:	d407      	bmi.n	8007b54 <__swsetup_r+0x30>
 8007b44:	2209      	movs	r2, #9
 8007b46:	602a      	str	r2, [r5, #0]
 8007b48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8007b52:	e033      	b.n	8007bbc <__swsetup_r+0x98>
 8007b54:	0758      	lsls	r0, r3, #29
 8007b56:	d512      	bpl.n	8007b7e <__swsetup_r+0x5a>
 8007b58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b5a:	b141      	cbz	r1, 8007b6e <__swsetup_r+0x4a>
 8007b5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b60:	4299      	cmp	r1, r3
 8007b62:	d002      	beq.n	8007b6a <__swsetup_r+0x46>
 8007b64:	4628      	mov	r0, r5
 8007b66:	f7fe f82b 	bl	8005bc0 <_free_r>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b6e:	89a3      	ldrh	r3, [r4, #12]
 8007b70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b74:	81a3      	strh	r3, [r4, #12]
 8007b76:	2300      	movs	r3, #0
 8007b78:	6063      	str	r3, [r4, #4]
 8007b7a:	6923      	ldr	r3, [r4, #16]
 8007b7c:	6023      	str	r3, [r4, #0]
 8007b7e:	89a3      	ldrh	r3, [r4, #12]
 8007b80:	f043 0308 	orr.w	r3, r3, #8
 8007b84:	81a3      	strh	r3, [r4, #12]
 8007b86:	6923      	ldr	r3, [r4, #16]
 8007b88:	b94b      	cbnz	r3, 8007b9e <__swsetup_r+0x7a>
 8007b8a:	89a3      	ldrh	r3, [r4, #12]
 8007b8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b94:	d003      	beq.n	8007b9e <__swsetup_r+0x7a>
 8007b96:	4621      	mov	r1, r4
 8007b98:	4628      	mov	r0, r5
 8007b9a:	f000 fc5d 	bl	8008458 <__smakebuf_r>
 8007b9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ba2:	f013 0201 	ands.w	r2, r3, #1
 8007ba6:	d00a      	beq.n	8007bbe <__swsetup_r+0x9a>
 8007ba8:	2200      	movs	r2, #0
 8007baa:	60a2      	str	r2, [r4, #8]
 8007bac:	6962      	ldr	r2, [r4, #20]
 8007bae:	4252      	negs	r2, r2
 8007bb0:	61a2      	str	r2, [r4, #24]
 8007bb2:	6922      	ldr	r2, [r4, #16]
 8007bb4:	b942      	cbnz	r2, 8007bc8 <__swsetup_r+0xa4>
 8007bb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bba:	d1c5      	bne.n	8007b48 <__swsetup_r+0x24>
 8007bbc:	bd38      	pop	{r3, r4, r5, pc}
 8007bbe:	0799      	lsls	r1, r3, #30
 8007bc0:	bf58      	it	pl
 8007bc2:	6962      	ldrpl	r2, [r4, #20]
 8007bc4:	60a2      	str	r2, [r4, #8]
 8007bc6:	e7f4      	b.n	8007bb2 <__swsetup_r+0x8e>
 8007bc8:	2000      	movs	r0, #0
 8007bca:	e7f7      	b.n	8007bbc <__swsetup_r+0x98>
 8007bcc:	20000018 	.word	0x20000018

08007bd0 <memmove>:
 8007bd0:	4288      	cmp	r0, r1
 8007bd2:	b510      	push	{r4, lr}
 8007bd4:	eb01 0402 	add.w	r4, r1, r2
 8007bd8:	d902      	bls.n	8007be0 <memmove+0x10>
 8007bda:	4284      	cmp	r4, r0
 8007bdc:	4623      	mov	r3, r4
 8007bde:	d807      	bhi.n	8007bf0 <memmove+0x20>
 8007be0:	1e43      	subs	r3, r0, #1
 8007be2:	42a1      	cmp	r1, r4
 8007be4:	d008      	beq.n	8007bf8 <memmove+0x28>
 8007be6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bea:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bee:	e7f8      	b.n	8007be2 <memmove+0x12>
 8007bf0:	4402      	add	r2, r0
 8007bf2:	4601      	mov	r1, r0
 8007bf4:	428a      	cmp	r2, r1
 8007bf6:	d100      	bne.n	8007bfa <memmove+0x2a>
 8007bf8:	bd10      	pop	{r4, pc}
 8007bfa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bfe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c02:	e7f7      	b.n	8007bf4 <memmove+0x24>

08007c04 <strncmp>:
 8007c04:	b510      	push	{r4, lr}
 8007c06:	b16a      	cbz	r2, 8007c24 <strncmp+0x20>
 8007c08:	3901      	subs	r1, #1
 8007c0a:	1884      	adds	r4, r0, r2
 8007c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c10:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d103      	bne.n	8007c20 <strncmp+0x1c>
 8007c18:	42a0      	cmp	r0, r4
 8007c1a:	d001      	beq.n	8007c20 <strncmp+0x1c>
 8007c1c:	2a00      	cmp	r2, #0
 8007c1e:	d1f5      	bne.n	8007c0c <strncmp+0x8>
 8007c20:	1ad0      	subs	r0, r2, r3
 8007c22:	bd10      	pop	{r4, pc}
 8007c24:	4610      	mov	r0, r2
 8007c26:	e7fc      	b.n	8007c22 <strncmp+0x1e>

08007c28 <_sbrk_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d06      	ldr	r5, [pc, #24]	@ (8007c44 <_sbrk_r+0x1c>)
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	4604      	mov	r4, r0
 8007c30:	4608      	mov	r0, r1
 8007c32:	602b      	str	r3, [r5, #0]
 8007c34:	f7f9 fe82 	bl	800193c <_sbrk>
 8007c38:	1c43      	adds	r3, r0, #1
 8007c3a:	d102      	bne.n	8007c42 <_sbrk_r+0x1a>
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	b103      	cbz	r3, 8007c42 <_sbrk_r+0x1a>
 8007c40:	6023      	str	r3, [r4, #0]
 8007c42:	bd38      	pop	{r3, r4, r5, pc}
 8007c44:	200004d8 	.word	0x200004d8

08007c48 <memcpy>:
 8007c48:	440a      	add	r2, r1
 8007c4a:	4291      	cmp	r1, r2
 8007c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c50:	d100      	bne.n	8007c54 <memcpy+0xc>
 8007c52:	4770      	bx	lr
 8007c54:	b510      	push	{r4, lr}
 8007c56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c5e:	4291      	cmp	r1, r2
 8007c60:	d1f9      	bne.n	8007c56 <memcpy+0xe>
 8007c62:	bd10      	pop	{r4, pc}
 8007c64:	0000      	movs	r0, r0
	...

08007c68 <nan>:
 8007c68:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007c70 <nan+0x8>
 8007c6c:	4770      	bx	lr
 8007c6e:	bf00      	nop
 8007c70:	00000000 	.word	0x00000000
 8007c74:	7ff80000 	.word	0x7ff80000

08007c78 <__assert_func>:
 8007c78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c7a:	4614      	mov	r4, r2
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4b09      	ldr	r3, [pc, #36]	@ (8007ca4 <__assert_func+0x2c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4605      	mov	r5, r0
 8007c84:	68d8      	ldr	r0, [r3, #12]
 8007c86:	b14c      	cbz	r4, 8007c9c <__assert_func+0x24>
 8007c88:	4b07      	ldr	r3, [pc, #28]	@ (8007ca8 <__assert_func+0x30>)
 8007c8a:	9100      	str	r1, [sp, #0]
 8007c8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c90:	4906      	ldr	r1, [pc, #24]	@ (8007cac <__assert_func+0x34>)
 8007c92:	462b      	mov	r3, r5
 8007c94:	f000 fba8 	bl	80083e8 <fiprintf>
 8007c98:	f000 fc3c 	bl	8008514 <abort>
 8007c9c:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <__assert_func+0x38>)
 8007c9e:	461c      	mov	r4, r3
 8007ca0:	e7f3      	b.n	8007c8a <__assert_func+0x12>
 8007ca2:	bf00      	nop
 8007ca4:	20000018 	.word	0x20000018
 8007ca8:	08008766 	.word	0x08008766
 8007cac:	08008773 	.word	0x08008773
 8007cb0:	080087a1 	.word	0x080087a1

08007cb4 <_calloc_r>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	fba1 5402 	umull	r5, r4, r1, r2
 8007cba:	b934      	cbnz	r4, 8007cca <_calloc_r+0x16>
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f7fd fff3 	bl	8005ca8 <_malloc_r>
 8007cc2:	4606      	mov	r6, r0
 8007cc4:	b928      	cbnz	r0, 8007cd2 <_calloc_r+0x1e>
 8007cc6:	4630      	mov	r0, r6
 8007cc8:	bd70      	pop	{r4, r5, r6, pc}
 8007cca:	220c      	movs	r2, #12
 8007ccc:	6002      	str	r2, [r0, #0]
 8007cce:	2600      	movs	r6, #0
 8007cd0:	e7f9      	b.n	8007cc6 <_calloc_r+0x12>
 8007cd2:	462a      	mov	r2, r5
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	f7fd f894 	bl	8004e02 <memset>
 8007cda:	e7f4      	b.n	8007cc6 <_calloc_r+0x12>

08007cdc <rshift>:
 8007cdc:	6903      	ldr	r3, [r0, #16]
 8007cde:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007ce2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007ce6:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007cea:	f100 0414 	add.w	r4, r0, #20
 8007cee:	dd45      	ble.n	8007d7c <rshift+0xa0>
 8007cf0:	f011 011f 	ands.w	r1, r1, #31
 8007cf4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007cf8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007cfc:	d10c      	bne.n	8007d18 <rshift+0x3c>
 8007cfe:	f100 0710 	add.w	r7, r0, #16
 8007d02:	4629      	mov	r1, r5
 8007d04:	42b1      	cmp	r1, r6
 8007d06:	d334      	bcc.n	8007d72 <rshift+0x96>
 8007d08:	1a9b      	subs	r3, r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	1eea      	subs	r2, r5, #3
 8007d0e:	4296      	cmp	r6, r2
 8007d10:	bf38      	it	cc
 8007d12:	2300      	movcc	r3, #0
 8007d14:	4423      	add	r3, r4
 8007d16:	e015      	b.n	8007d44 <rshift+0x68>
 8007d18:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007d1c:	f1c1 0820 	rsb	r8, r1, #32
 8007d20:	40cf      	lsrs	r7, r1
 8007d22:	f105 0e04 	add.w	lr, r5, #4
 8007d26:	46a1      	mov	r9, r4
 8007d28:	4576      	cmp	r6, lr
 8007d2a:	46f4      	mov	ip, lr
 8007d2c:	d815      	bhi.n	8007d5a <rshift+0x7e>
 8007d2e:	1a9a      	subs	r2, r3, r2
 8007d30:	0092      	lsls	r2, r2, #2
 8007d32:	3a04      	subs	r2, #4
 8007d34:	3501      	adds	r5, #1
 8007d36:	42ae      	cmp	r6, r5
 8007d38:	bf38      	it	cc
 8007d3a:	2200      	movcc	r2, #0
 8007d3c:	18a3      	adds	r3, r4, r2
 8007d3e:	50a7      	str	r7, [r4, r2]
 8007d40:	b107      	cbz	r7, 8007d44 <rshift+0x68>
 8007d42:	3304      	adds	r3, #4
 8007d44:	1b1a      	subs	r2, r3, r4
 8007d46:	42a3      	cmp	r3, r4
 8007d48:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007d4c:	bf08      	it	eq
 8007d4e:	2300      	moveq	r3, #0
 8007d50:	6102      	str	r2, [r0, #16]
 8007d52:	bf08      	it	eq
 8007d54:	6143      	streq	r3, [r0, #20]
 8007d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007d5a:	f8dc c000 	ldr.w	ip, [ip]
 8007d5e:	fa0c fc08 	lsl.w	ip, ip, r8
 8007d62:	ea4c 0707 	orr.w	r7, ip, r7
 8007d66:	f849 7b04 	str.w	r7, [r9], #4
 8007d6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007d6e:	40cf      	lsrs	r7, r1
 8007d70:	e7da      	b.n	8007d28 <rshift+0x4c>
 8007d72:	f851 cb04 	ldr.w	ip, [r1], #4
 8007d76:	f847 cf04 	str.w	ip, [r7, #4]!
 8007d7a:	e7c3      	b.n	8007d04 <rshift+0x28>
 8007d7c:	4623      	mov	r3, r4
 8007d7e:	e7e1      	b.n	8007d44 <rshift+0x68>

08007d80 <__hexdig_fun>:
 8007d80:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007d84:	2b09      	cmp	r3, #9
 8007d86:	d802      	bhi.n	8007d8e <__hexdig_fun+0xe>
 8007d88:	3820      	subs	r0, #32
 8007d8a:	b2c0      	uxtb	r0, r0
 8007d8c:	4770      	bx	lr
 8007d8e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007d92:	2b05      	cmp	r3, #5
 8007d94:	d801      	bhi.n	8007d9a <__hexdig_fun+0x1a>
 8007d96:	3847      	subs	r0, #71	@ 0x47
 8007d98:	e7f7      	b.n	8007d8a <__hexdig_fun+0xa>
 8007d9a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007d9e:	2b05      	cmp	r3, #5
 8007da0:	d801      	bhi.n	8007da6 <__hexdig_fun+0x26>
 8007da2:	3827      	subs	r0, #39	@ 0x27
 8007da4:	e7f1      	b.n	8007d8a <__hexdig_fun+0xa>
 8007da6:	2000      	movs	r0, #0
 8007da8:	4770      	bx	lr
	...

08007dac <__gethex>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	b085      	sub	sp, #20
 8007db2:	468a      	mov	sl, r1
 8007db4:	9302      	str	r3, [sp, #8]
 8007db6:	680b      	ldr	r3, [r1, #0]
 8007db8:	9001      	str	r0, [sp, #4]
 8007dba:	4690      	mov	r8, r2
 8007dbc:	1c9c      	adds	r4, r3, #2
 8007dbe:	46a1      	mov	r9, r4
 8007dc0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007dc4:	2830      	cmp	r0, #48	@ 0x30
 8007dc6:	d0fa      	beq.n	8007dbe <__gethex+0x12>
 8007dc8:	eba9 0303 	sub.w	r3, r9, r3
 8007dcc:	f1a3 0b02 	sub.w	fp, r3, #2
 8007dd0:	f7ff ffd6 	bl	8007d80 <__hexdig_fun>
 8007dd4:	4605      	mov	r5, r0
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	d168      	bne.n	8007eac <__gethex+0x100>
 8007dda:	49a0      	ldr	r1, [pc, #640]	@ (800805c <__gethex+0x2b0>)
 8007ddc:	2201      	movs	r2, #1
 8007dde:	4648      	mov	r0, r9
 8007de0:	f7ff ff10 	bl	8007c04 <strncmp>
 8007de4:	4607      	mov	r7, r0
 8007de6:	2800      	cmp	r0, #0
 8007de8:	d167      	bne.n	8007eba <__gethex+0x10e>
 8007dea:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007dee:	4626      	mov	r6, r4
 8007df0:	f7ff ffc6 	bl	8007d80 <__hexdig_fun>
 8007df4:	2800      	cmp	r0, #0
 8007df6:	d062      	beq.n	8007ebe <__gethex+0x112>
 8007df8:	4623      	mov	r3, r4
 8007dfa:	7818      	ldrb	r0, [r3, #0]
 8007dfc:	2830      	cmp	r0, #48	@ 0x30
 8007dfe:	4699      	mov	r9, r3
 8007e00:	f103 0301 	add.w	r3, r3, #1
 8007e04:	d0f9      	beq.n	8007dfa <__gethex+0x4e>
 8007e06:	f7ff ffbb 	bl	8007d80 <__hexdig_fun>
 8007e0a:	fab0 f580 	clz	r5, r0
 8007e0e:	096d      	lsrs	r5, r5, #5
 8007e10:	f04f 0b01 	mov.w	fp, #1
 8007e14:	464a      	mov	r2, r9
 8007e16:	4616      	mov	r6, r2
 8007e18:	3201      	adds	r2, #1
 8007e1a:	7830      	ldrb	r0, [r6, #0]
 8007e1c:	f7ff ffb0 	bl	8007d80 <__hexdig_fun>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	d1f8      	bne.n	8007e16 <__gethex+0x6a>
 8007e24:	498d      	ldr	r1, [pc, #564]	@ (800805c <__gethex+0x2b0>)
 8007e26:	2201      	movs	r2, #1
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f7ff feeb 	bl	8007c04 <strncmp>
 8007e2e:	2800      	cmp	r0, #0
 8007e30:	d13f      	bne.n	8007eb2 <__gethex+0x106>
 8007e32:	b944      	cbnz	r4, 8007e46 <__gethex+0x9a>
 8007e34:	1c74      	adds	r4, r6, #1
 8007e36:	4622      	mov	r2, r4
 8007e38:	4616      	mov	r6, r2
 8007e3a:	3201      	adds	r2, #1
 8007e3c:	7830      	ldrb	r0, [r6, #0]
 8007e3e:	f7ff ff9f 	bl	8007d80 <__hexdig_fun>
 8007e42:	2800      	cmp	r0, #0
 8007e44:	d1f8      	bne.n	8007e38 <__gethex+0x8c>
 8007e46:	1ba4      	subs	r4, r4, r6
 8007e48:	00a7      	lsls	r7, r4, #2
 8007e4a:	7833      	ldrb	r3, [r6, #0]
 8007e4c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007e50:	2b50      	cmp	r3, #80	@ 0x50
 8007e52:	d13e      	bne.n	8007ed2 <__gethex+0x126>
 8007e54:	7873      	ldrb	r3, [r6, #1]
 8007e56:	2b2b      	cmp	r3, #43	@ 0x2b
 8007e58:	d033      	beq.n	8007ec2 <__gethex+0x116>
 8007e5a:	2b2d      	cmp	r3, #45	@ 0x2d
 8007e5c:	d034      	beq.n	8007ec8 <__gethex+0x11c>
 8007e5e:	1c71      	adds	r1, r6, #1
 8007e60:	2400      	movs	r4, #0
 8007e62:	7808      	ldrb	r0, [r1, #0]
 8007e64:	f7ff ff8c 	bl	8007d80 <__hexdig_fun>
 8007e68:	1e43      	subs	r3, r0, #1
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b18      	cmp	r3, #24
 8007e6e:	d830      	bhi.n	8007ed2 <__gethex+0x126>
 8007e70:	f1a0 0210 	sub.w	r2, r0, #16
 8007e74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007e78:	f7ff ff82 	bl	8007d80 <__hexdig_fun>
 8007e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007e80:	fa5f fc8c 	uxtb.w	ip, ip
 8007e84:	f1bc 0f18 	cmp.w	ip, #24
 8007e88:	f04f 030a 	mov.w	r3, #10
 8007e8c:	d91e      	bls.n	8007ecc <__gethex+0x120>
 8007e8e:	b104      	cbz	r4, 8007e92 <__gethex+0xe6>
 8007e90:	4252      	negs	r2, r2
 8007e92:	4417      	add	r7, r2
 8007e94:	f8ca 1000 	str.w	r1, [sl]
 8007e98:	b1ed      	cbz	r5, 8007ed6 <__gethex+0x12a>
 8007e9a:	f1bb 0f00 	cmp.w	fp, #0
 8007e9e:	bf0c      	ite	eq
 8007ea0:	2506      	moveq	r5, #6
 8007ea2:	2500      	movne	r5, #0
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	b005      	add	sp, #20
 8007ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007eac:	2500      	movs	r5, #0
 8007eae:	462c      	mov	r4, r5
 8007eb0:	e7b0      	b.n	8007e14 <__gethex+0x68>
 8007eb2:	2c00      	cmp	r4, #0
 8007eb4:	d1c7      	bne.n	8007e46 <__gethex+0x9a>
 8007eb6:	4627      	mov	r7, r4
 8007eb8:	e7c7      	b.n	8007e4a <__gethex+0x9e>
 8007eba:	464e      	mov	r6, r9
 8007ebc:	462f      	mov	r7, r5
 8007ebe:	2501      	movs	r5, #1
 8007ec0:	e7c3      	b.n	8007e4a <__gethex+0x9e>
 8007ec2:	2400      	movs	r4, #0
 8007ec4:	1cb1      	adds	r1, r6, #2
 8007ec6:	e7cc      	b.n	8007e62 <__gethex+0xb6>
 8007ec8:	2401      	movs	r4, #1
 8007eca:	e7fb      	b.n	8007ec4 <__gethex+0x118>
 8007ecc:	fb03 0002 	mla	r0, r3, r2, r0
 8007ed0:	e7ce      	b.n	8007e70 <__gethex+0xc4>
 8007ed2:	4631      	mov	r1, r6
 8007ed4:	e7de      	b.n	8007e94 <__gethex+0xe8>
 8007ed6:	eba6 0309 	sub.w	r3, r6, r9
 8007eda:	3b01      	subs	r3, #1
 8007edc:	4629      	mov	r1, r5
 8007ede:	2b07      	cmp	r3, #7
 8007ee0:	dc0a      	bgt.n	8007ef8 <__gethex+0x14c>
 8007ee2:	9801      	ldr	r0, [sp, #4]
 8007ee4:	f7fd ff6c 	bl	8005dc0 <_Balloc>
 8007ee8:	4604      	mov	r4, r0
 8007eea:	b940      	cbnz	r0, 8007efe <__gethex+0x152>
 8007eec:	4b5c      	ldr	r3, [pc, #368]	@ (8008060 <__gethex+0x2b4>)
 8007eee:	4602      	mov	r2, r0
 8007ef0:	21e4      	movs	r1, #228	@ 0xe4
 8007ef2:	485c      	ldr	r0, [pc, #368]	@ (8008064 <__gethex+0x2b8>)
 8007ef4:	f7ff fec0 	bl	8007c78 <__assert_func>
 8007ef8:	3101      	adds	r1, #1
 8007efa:	105b      	asrs	r3, r3, #1
 8007efc:	e7ef      	b.n	8007ede <__gethex+0x132>
 8007efe:	f100 0a14 	add.w	sl, r0, #20
 8007f02:	2300      	movs	r3, #0
 8007f04:	4655      	mov	r5, sl
 8007f06:	469b      	mov	fp, r3
 8007f08:	45b1      	cmp	r9, r6
 8007f0a:	d337      	bcc.n	8007f7c <__gethex+0x1d0>
 8007f0c:	f845 bb04 	str.w	fp, [r5], #4
 8007f10:	eba5 050a 	sub.w	r5, r5, sl
 8007f14:	10ad      	asrs	r5, r5, #2
 8007f16:	6125      	str	r5, [r4, #16]
 8007f18:	4658      	mov	r0, fp
 8007f1a:	f7fe f843 	bl	8005fa4 <__hi0bits>
 8007f1e:	016d      	lsls	r5, r5, #5
 8007f20:	f8d8 6000 	ldr.w	r6, [r8]
 8007f24:	1a2d      	subs	r5, r5, r0
 8007f26:	42b5      	cmp	r5, r6
 8007f28:	dd54      	ble.n	8007fd4 <__gethex+0x228>
 8007f2a:	1bad      	subs	r5, r5, r6
 8007f2c:	4629      	mov	r1, r5
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f7fe fbcf 	bl	80066d2 <__any_on>
 8007f34:	4681      	mov	r9, r0
 8007f36:	b178      	cbz	r0, 8007f58 <__gethex+0x1ac>
 8007f38:	1e6b      	subs	r3, r5, #1
 8007f3a:	1159      	asrs	r1, r3, #5
 8007f3c:	f003 021f 	and.w	r2, r3, #31
 8007f40:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8007f44:	f04f 0901 	mov.w	r9, #1
 8007f48:	fa09 f202 	lsl.w	r2, r9, r2
 8007f4c:	420a      	tst	r2, r1
 8007f4e:	d003      	beq.n	8007f58 <__gethex+0x1ac>
 8007f50:	454b      	cmp	r3, r9
 8007f52:	dc36      	bgt.n	8007fc2 <__gethex+0x216>
 8007f54:	f04f 0902 	mov.w	r9, #2
 8007f58:	4629      	mov	r1, r5
 8007f5a:	4620      	mov	r0, r4
 8007f5c:	f7ff febe 	bl	8007cdc <rshift>
 8007f60:	442f      	add	r7, r5
 8007f62:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007f66:	42bb      	cmp	r3, r7
 8007f68:	da42      	bge.n	8007ff0 <__gethex+0x244>
 8007f6a:	9801      	ldr	r0, [sp, #4]
 8007f6c:	4621      	mov	r1, r4
 8007f6e:	f7fd ff67 	bl	8005e40 <_Bfree>
 8007f72:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007f74:	2300      	movs	r3, #0
 8007f76:	6013      	str	r3, [r2, #0]
 8007f78:	25a3      	movs	r5, #163	@ 0xa3
 8007f7a:	e793      	b.n	8007ea4 <__gethex+0xf8>
 8007f7c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8007f80:	2a2e      	cmp	r2, #46	@ 0x2e
 8007f82:	d012      	beq.n	8007faa <__gethex+0x1fe>
 8007f84:	2b20      	cmp	r3, #32
 8007f86:	d104      	bne.n	8007f92 <__gethex+0x1e6>
 8007f88:	f845 bb04 	str.w	fp, [r5], #4
 8007f8c:	f04f 0b00 	mov.w	fp, #0
 8007f90:	465b      	mov	r3, fp
 8007f92:	7830      	ldrb	r0, [r6, #0]
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	f7ff fef3 	bl	8007d80 <__hexdig_fun>
 8007f9a:	9b03      	ldr	r3, [sp, #12]
 8007f9c:	f000 000f 	and.w	r0, r0, #15
 8007fa0:	4098      	lsls	r0, r3
 8007fa2:	ea4b 0b00 	orr.w	fp, fp, r0
 8007fa6:	3304      	adds	r3, #4
 8007fa8:	e7ae      	b.n	8007f08 <__gethex+0x15c>
 8007faa:	45b1      	cmp	r9, r6
 8007fac:	d8ea      	bhi.n	8007f84 <__gethex+0x1d8>
 8007fae:	492b      	ldr	r1, [pc, #172]	@ (800805c <__gethex+0x2b0>)
 8007fb0:	9303      	str	r3, [sp, #12]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	4630      	mov	r0, r6
 8007fb6:	f7ff fe25 	bl	8007c04 <strncmp>
 8007fba:	9b03      	ldr	r3, [sp, #12]
 8007fbc:	2800      	cmp	r0, #0
 8007fbe:	d1e1      	bne.n	8007f84 <__gethex+0x1d8>
 8007fc0:	e7a2      	b.n	8007f08 <__gethex+0x15c>
 8007fc2:	1ea9      	subs	r1, r5, #2
 8007fc4:	4620      	mov	r0, r4
 8007fc6:	f7fe fb84 	bl	80066d2 <__any_on>
 8007fca:	2800      	cmp	r0, #0
 8007fcc:	d0c2      	beq.n	8007f54 <__gethex+0x1a8>
 8007fce:	f04f 0903 	mov.w	r9, #3
 8007fd2:	e7c1      	b.n	8007f58 <__gethex+0x1ac>
 8007fd4:	da09      	bge.n	8007fea <__gethex+0x23e>
 8007fd6:	1b75      	subs	r5, r6, r5
 8007fd8:	4621      	mov	r1, r4
 8007fda:	9801      	ldr	r0, [sp, #4]
 8007fdc:	462a      	mov	r2, r5
 8007fde:	f7fe f93f 	bl	8006260 <__lshift>
 8007fe2:	1b7f      	subs	r7, r7, r5
 8007fe4:	4604      	mov	r4, r0
 8007fe6:	f100 0a14 	add.w	sl, r0, #20
 8007fea:	f04f 0900 	mov.w	r9, #0
 8007fee:	e7b8      	b.n	8007f62 <__gethex+0x1b6>
 8007ff0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007ff4:	42bd      	cmp	r5, r7
 8007ff6:	dd6f      	ble.n	80080d8 <__gethex+0x32c>
 8007ff8:	1bed      	subs	r5, r5, r7
 8007ffa:	42ae      	cmp	r6, r5
 8007ffc:	dc34      	bgt.n	8008068 <__gethex+0x2bc>
 8007ffe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008002:	2b02      	cmp	r3, #2
 8008004:	d022      	beq.n	800804c <__gethex+0x2a0>
 8008006:	2b03      	cmp	r3, #3
 8008008:	d024      	beq.n	8008054 <__gethex+0x2a8>
 800800a:	2b01      	cmp	r3, #1
 800800c:	d115      	bne.n	800803a <__gethex+0x28e>
 800800e:	42ae      	cmp	r6, r5
 8008010:	d113      	bne.n	800803a <__gethex+0x28e>
 8008012:	2e01      	cmp	r6, #1
 8008014:	d10b      	bne.n	800802e <__gethex+0x282>
 8008016:	9a02      	ldr	r2, [sp, #8]
 8008018:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	2301      	movs	r3, #1
 8008020:	6123      	str	r3, [r4, #16]
 8008022:	f8ca 3000 	str.w	r3, [sl]
 8008026:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008028:	2562      	movs	r5, #98	@ 0x62
 800802a:	601c      	str	r4, [r3, #0]
 800802c:	e73a      	b.n	8007ea4 <__gethex+0xf8>
 800802e:	1e71      	subs	r1, r6, #1
 8008030:	4620      	mov	r0, r4
 8008032:	f7fe fb4e 	bl	80066d2 <__any_on>
 8008036:	2800      	cmp	r0, #0
 8008038:	d1ed      	bne.n	8008016 <__gethex+0x26a>
 800803a:	9801      	ldr	r0, [sp, #4]
 800803c:	4621      	mov	r1, r4
 800803e:	f7fd feff 	bl	8005e40 <_Bfree>
 8008042:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008044:	2300      	movs	r3, #0
 8008046:	6013      	str	r3, [r2, #0]
 8008048:	2550      	movs	r5, #80	@ 0x50
 800804a:	e72b      	b.n	8007ea4 <__gethex+0xf8>
 800804c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1f3      	bne.n	800803a <__gethex+0x28e>
 8008052:	e7e0      	b.n	8008016 <__gethex+0x26a>
 8008054:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1dd      	bne.n	8008016 <__gethex+0x26a>
 800805a:	e7ee      	b.n	800803a <__gethex+0x28e>
 800805c:	0800874b 	.word	0x0800874b
 8008060:	080086e1 	.word	0x080086e1
 8008064:	080087a2 	.word	0x080087a2
 8008068:	1e6f      	subs	r7, r5, #1
 800806a:	f1b9 0f00 	cmp.w	r9, #0
 800806e:	d130      	bne.n	80080d2 <__gethex+0x326>
 8008070:	b127      	cbz	r7, 800807c <__gethex+0x2d0>
 8008072:	4639      	mov	r1, r7
 8008074:	4620      	mov	r0, r4
 8008076:	f7fe fb2c 	bl	80066d2 <__any_on>
 800807a:	4681      	mov	r9, r0
 800807c:	117a      	asrs	r2, r7, #5
 800807e:	2301      	movs	r3, #1
 8008080:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008084:	f007 071f 	and.w	r7, r7, #31
 8008088:	40bb      	lsls	r3, r7
 800808a:	4213      	tst	r3, r2
 800808c:	4629      	mov	r1, r5
 800808e:	4620      	mov	r0, r4
 8008090:	bf18      	it	ne
 8008092:	f049 0902 	orrne.w	r9, r9, #2
 8008096:	f7ff fe21 	bl	8007cdc <rshift>
 800809a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800809e:	1b76      	subs	r6, r6, r5
 80080a0:	2502      	movs	r5, #2
 80080a2:	f1b9 0f00 	cmp.w	r9, #0
 80080a6:	d047      	beq.n	8008138 <__gethex+0x38c>
 80080a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80080ac:	2b02      	cmp	r3, #2
 80080ae:	d015      	beq.n	80080dc <__gethex+0x330>
 80080b0:	2b03      	cmp	r3, #3
 80080b2:	d017      	beq.n	80080e4 <__gethex+0x338>
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d109      	bne.n	80080cc <__gethex+0x320>
 80080b8:	f019 0f02 	tst.w	r9, #2
 80080bc:	d006      	beq.n	80080cc <__gethex+0x320>
 80080be:	f8da 3000 	ldr.w	r3, [sl]
 80080c2:	ea49 0903 	orr.w	r9, r9, r3
 80080c6:	f019 0f01 	tst.w	r9, #1
 80080ca:	d10e      	bne.n	80080ea <__gethex+0x33e>
 80080cc:	f045 0510 	orr.w	r5, r5, #16
 80080d0:	e032      	b.n	8008138 <__gethex+0x38c>
 80080d2:	f04f 0901 	mov.w	r9, #1
 80080d6:	e7d1      	b.n	800807c <__gethex+0x2d0>
 80080d8:	2501      	movs	r5, #1
 80080da:	e7e2      	b.n	80080a2 <__gethex+0x2f6>
 80080dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080de:	f1c3 0301 	rsb	r3, r3, #1
 80080e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80080e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0f0      	beq.n	80080cc <__gethex+0x320>
 80080ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80080ee:	f104 0314 	add.w	r3, r4, #20
 80080f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80080f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80080fa:	f04f 0c00 	mov.w	ip, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f853 2b04 	ldr.w	r2, [r3], #4
 8008104:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008108:	d01b      	beq.n	8008142 <__gethex+0x396>
 800810a:	3201      	adds	r2, #1
 800810c:	6002      	str	r2, [r0, #0]
 800810e:	2d02      	cmp	r5, #2
 8008110:	f104 0314 	add.w	r3, r4, #20
 8008114:	d13c      	bne.n	8008190 <__gethex+0x3e4>
 8008116:	f8d8 2000 	ldr.w	r2, [r8]
 800811a:	3a01      	subs	r2, #1
 800811c:	42b2      	cmp	r2, r6
 800811e:	d109      	bne.n	8008134 <__gethex+0x388>
 8008120:	1171      	asrs	r1, r6, #5
 8008122:	2201      	movs	r2, #1
 8008124:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008128:	f006 061f 	and.w	r6, r6, #31
 800812c:	fa02 f606 	lsl.w	r6, r2, r6
 8008130:	421e      	tst	r6, r3
 8008132:	d13a      	bne.n	80081aa <__gethex+0x3fe>
 8008134:	f045 0520 	orr.w	r5, r5, #32
 8008138:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800813a:	601c      	str	r4, [r3, #0]
 800813c:	9b02      	ldr	r3, [sp, #8]
 800813e:	601f      	str	r7, [r3, #0]
 8008140:	e6b0      	b.n	8007ea4 <__gethex+0xf8>
 8008142:	4299      	cmp	r1, r3
 8008144:	f843 cc04 	str.w	ip, [r3, #-4]
 8008148:	d8d9      	bhi.n	80080fe <__gethex+0x352>
 800814a:	68a3      	ldr	r3, [r4, #8]
 800814c:	459b      	cmp	fp, r3
 800814e:	db17      	blt.n	8008180 <__gethex+0x3d4>
 8008150:	6861      	ldr	r1, [r4, #4]
 8008152:	9801      	ldr	r0, [sp, #4]
 8008154:	3101      	adds	r1, #1
 8008156:	f7fd fe33 	bl	8005dc0 <_Balloc>
 800815a:	4681      	mov	r9, r0
 800815c:	b918      	cbnz	r0, 8008166 <__gethex+0x3ba>
 800815e:	4b1a      	ldr	r3, [pc, #104]	@ (80081c8 <__gethex+0x41c>)
 8008160:	4602      	mov	r2, r0
 8008162:	2184      	movs	r1, #132	@ 0x84
 8008164:	e6c5      	b.n	8007ef2 <__gethex+0x146>
 8008166:	6922      	ldr	r2, [r4, #16]
 8008168:	3202      	adds	r2, #2
 800816a:	f104 010c 	add.w	r1, r4, #12
 800816e:	0092      	lsls	r2, r2, #2
 8008170:	300c      	adds	r0, #12
 8008172:	f7ff fd69 	bl	8007c48 <memcpy>
 8008176:	4621      	mov	r1, r4
 8008178:	9801      	ldr	r0, [sp, #4]
 800817a:	f7fd fe61 	bl	8005e40 <_Bfree>
 800817e:	464c      	mov	r4, r9
 8008180:	6923      	ldr	r3, [r4, #16]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008188:	6122      	str	r2, [r4, #16]
 800818a:	2201      	movs	r2, #1
 800818c:	615a      	str	r2, [r3, #20]
 800818e:	e7be      	b.n	800810e <__gethex+0x362>
 8008190:	6922      	ldr	r2, [r4, #16]
 8008192:	455a      	cmp	r2, fp
 8008194:	dd0b      	ble.n	80081ae <__gethex+0x402>
 8008196:	2101      	movs	r1, #1
 8008198:	4620      	mov	r0, r4
 800819a:	f7ff fd9f 	bl	8007cdc <rshift>
 800819e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80081a2:	3701      	adds	r7, #1
 80081a4:	42bb      	cmp	r3, r7
 80081a6:	f6ff aee0 	blt.w	8007f6a <__gethex+0x1be>
 80081aa:	2501      	movs	r5, #1
 80081ac:	e7c2      	b.n	8008134 <__gethex+0x388>
 80081ae:	f016 061f 	ands.w	r6, r6, #31
 80081b2:	d0fa      	beq.n	80081aa <__gethex+0x3fe>
 80081b4:	4453      	add	r3, sl
 80081b6:	f1c6 0620 	rsb	r6, r6, #32
 80081ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80081be:	f7fd fef1 	bl	8005fa4 <__hi0bits>
 80081c2:	42b0      	cmp	r0, r6
 80081c4:	dbe7      	blt.n	8008196 <__gethex+0x3ea>
 80081c6:	e7f0      	b.n	80081aa <__gethex+0x3fe>
 80081c8:	080086e1 	.word	0x080086e1

080081cc <L_shift>:
 80081cc:	f1c2 0208 	rsb	r2, r2, #8
 80081d0:	0092      	lsls	r2, r2, #2
 80081d2:	b570      	push	{r4, r5, r6, lr}
 80081d4:	f1c2 0620 	rsb	r6, r2, #32
 80081d8:	6843      	ldr	r3, [r0, #4]
 80081da:	6804      	ldr	r4, [r0, #0]
 80081dc:	fa03 f506 	lsl.w	r5, r3, r6
 80081e0:	432c      	orrs	r4, r5
 80081e2:	40d3      	lsrs	r3, r2
 80081e4:	6004      	str	r4, [r0, #0]
 80081e6:	f840 3f04 	str.w	r3, [r0, #4]!
 80081ea:	4288      	cmp	r0, r1
 80081ec:	d3f4      	bcc.n	80081d8 <L_shift+0xc>
 80081ee:	bd70      	pop	{r4, r5, r6, pc}

080081f0 <__match>:
 80081f0:	b530      	push	{r4, r5, lr}
 80081f2:	6803      	ldr	r3, [r0, #0]
 80081f4:	3301      	adds	r3, #1
 80081f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80081fa:	b914      	cbnz	r4, 8008202 <__match+0x12>
 80081fc:	6003      	str	r3, [r0, #0]
 80081fe:	2001      	movs	r0, #1
 8008200:	bd30      	pop	{r4, r5, pc}
 8008202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008206:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800820a:	2d19      	cmp	r5, #25
 800820c:	bf98      	it	ls
 800820e:	3220      	addls	r2, #32
 8008210:	42a2      	cmp	r2, r4
 8008212:	d0f0      	beq.n	80081f6 <__match+0x6>
 8008214:	2000      	movs	r0, #0
 8008216:	e7f3      	b.n	8008200 <__match+0x10>

08008218 <__hexnan>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	680b      	ldr	r3, [r1, #0]
 800821e:	6801      	ldr	r1, [r0, #0]
 8008220:	115e      	asrs	r6, r3, #5
 8008222:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008226:	f013 031f 	ands.w	r3, r3, #31
 800822a:	b087      	sub	sp, #28
 800822c:	bf18      	it	ne
 800822e:	3604      	addne	r6, #4
 8008230:	2500      	movs	r5, #0
 8008232:	1f37      	subs	r7, r6, #4
 8008234:	4682      	mov	sl, r0
 8008236:	4690      	mov	r8, r2
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	f846 5c04 	str.w	r5, [r6, #-4]
 800823e:	46b9      	mov	r9, r7
 8008240:	463c      	mov	r4, r7
 8008242:	9502      	str	r5, [sp, #8]
 8008244:	46ab      	mov	fp, r5
 8008246:	784a      	ldrb	r2, [r1, #1]
 8008248:	1c4b      	adds	r3, r1, #1
 800824a:	9303      	str	r3, [sp, #12]
 800824c:	b342      	cbz	r2, 80082a0 <__hexnan+0x88>
 800824e:	4610      	mov	r0, r2
 8008250:	9105      	str	r1, [sp, #20]
 8008252:	9204      	str	r2, [sp, #16]
 8008254:	f7ff fd94 	bl	8007d80 <__hexdig_fun>
 8008258:	2800      	cmp	r0, #0
 800825a:	d151      	bne.n	8008300 <__hexnan+0xe8>
 800825c:	9a04      	ldr	r2, [sp, #16]
 800825e:	9905      	ldr	r1, [sp, #20]
 8008260:	2a20      	cmp	r2, #32
 8008262:	d818      	bhi.n	8008296 <__hexnan+0x7e>
 8008264:	9b02      	ldr	r3, [sp, #8]
 8008266:	459b      	cmp	fp, r3
 8008268:	dd13      	ble.n	8008292 <__hexnan+0x7a>
 800826a:	454c      	cmp	r4, r9
 800826c:	d206      	bcs.n	800827c <__hexnan+0x64>
 800826e:	2d07      	cmp	r5, #7
 8008270:	dc04      	bgt.n	800827c <__hexnan+0x64>
 8008272:	462a      	mov	r2, r5
 8008274:	4649      	mov	r1, r9
 8008276:	4620      	mov	r0, r4
 8008278:	f7ff ffa8 	bl	80081cc <L_shift>
 800827c:	4544      	cmp	r4, r8
 800827e:	d952      	bls.n	8008326 <__hexnan+0x10e>
 8008280:	2300      	movs	r3, #0
 8008282:	f1a4 0904 	sub.w	r9, r4, #4
 8008286:	f844 3c04 	str.w	r3, [r4, #-4]
 800828a:	f8cd b008 	str.w	fp, [sp, #8]
 800828e:	464c      	mov	r4, r9
 8008290:	461d      	mov	r5, r3
 8008292:	9903      	ldr	r1, [sp, #12]
 8008294:	e7d7      	b.n	8008246 <__hexnan+0x2e>
 8008296:	2a29      	cmp	r2, #41	@ 0x29
 8008298:	d157      	bne.n	800834a <__hexnan+0x132>
 800829a:	3102      	adds	r1, #2
 800829c:	f8ca 1000 	str.w	r1, [sl]
 80082a0:	f1bb 0f00 	cmp.w	fp, #0
 80082a4:	d051      	beq.n	800834a <__hexnan+0x132>
 80082a6:	454c      	cmp	r4, r9
 80082a8:	d206      	bcs.n	80082b8 <__hexnan+0xa0>
 80082aa:	2d07      	cmp	r5, #7
 80082ac:	dc04      	bgt.n	80082b8 <__hexnan+0xa0>
 80082ae:	462a      	mov	r2, r5
 80082b0:	4649      	mov	r1, r9
 80082b2:	4620      	mov	r0, r4
 80082b4:	f7ff ff8a 	bl	80081cc <L_shift>
 80082b8:	4544      	cmp	r4, r8
 80082ba:	d936      	bls.n	800832a <__hexnan+0x112>
 80082bc:	f1a8 0204 	sub.w	r2, r8, #4
 80082c0:	4623      	mov	r3, r4
 80082c2:	f853 1b04 	ldr.w	r1, [r3], #4
 80082c6:	f842 1f04 	str.w	r1, [r2, #4]!
 80082ca:	429f      	cmp	r7, r3
 80082cc:	d2f9      	bcs.n	80082c2 <__hexnan+0xaa>
 80082ce:	1b3b      	subs	r3, r7, r4
 80082d0:	f023 0303 	bic.w	r3, r3, #3
 80082d4:	3304      	adds	r3, #4
 80082d6:	3401      	adds	r4, #1
 80082d8:	3e03      	subs	r6, #3
 80082da:	42b4      	cmp	r4, r6
 80082dc:	bf88      	it	hi
 80082de:	2304      	movhi	r3, #4
 80082e0:	4443      	add	r3, r8
 80082e2:	2200      	movs	r2, #0
 80082e4:	f843 2b04 	str.w	r2, [r3], #4
 80082e8:	429f      	cmp	r7, r3
 80082ea:	d2fb      	bcs.n	80082e4 <__hexnan+0xcc>
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	b91b      	cbnz	r3, 80082f8 <__hexnan+0xe0>
 80082f0:	4547      	cmp	r7, r8
 80082f2:	d128      	bne.n	8008346 <__hexnan+0x12e>
 80082f4:	2301      	movs	r3, #1
 80082f6:	603b      	str	r3, [r7, #0]
 80082f8:	2005      	movs	r0, #5
 80082fa:	b007      	add	sp, #28
 80082fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008300:	3501      	adds	r5, #1
 8008302:	2d08      	cmp	r5, #8
 8008304:	f10b 0b01 	add.w	fp, fp, #1
 8008308:	dd06      	ble.n	8008318 <__hexnan+0x100>
 800830a:	4544      	cmp	r4, r8
 800830c:	d9c1      	bls.n	8008292 <__hexnan+0x7a>
 800830e:	2300      	movs	r3, #0
 8008310:	f844 3c04 	str.w	r3, [r4, #-4]
 8008314:	2501      	movs	r5, #1
 8008316:	3c04      	subs	r4, #4
 8008318:	6822      	ldr	r2, [r4, #0]
 800831a:	f000 000f 	and.w	r0, r0, #15
 800831e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008322:	6020      	str	r0, [r4, #0]
 8008324:	e7b5      	b.n	8008292 <__hexnan+0x7a>
 8008326:	2508      	movs	r5, #8
 8008328:	e7b3      	b.n	8008292 <__hexnan+0x7a>
 800832a:	9b01      	ldr	r3, [sp, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0dd      	beq.n	80082ec <__hexnan+0xd4>
 8008330:	f1c3 0320 	rsb	r3, r3, #32
 8008334:	f04f 32ff 	mov.w	r2, #4294967295
 8008338:	40da      	lsrs	r2, r3
 800833a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800833e:	4013      	ands	r3, r2
 8008340:	f846 3c04 	str.w	r3, [r6, #-4]
 8008344:	e7d2      	b.n	80082ec <__hexnan+0xd4>
 8008346:	3f04      	subs	r7, #4
 8008348:	e7d0      	b.n	80082ec <__hexnan+0xd4>
 800834a:	2004      	movs	r0, #4
 800834c:	e7d5      	b.n	80082fa <__hexnan+0xe2>

0800834e <__ascii_mbtowc>:
 800834e:	b082      	sub	sp, #8
 8008350:	b901      	cbnz	r1, 8008354 <__ascii_mbtowc+0x6>
 8008352:	a901      	add	r1, sp, #4
 8008354:	b142      	cbz	r2, 8008368 <__ascii_mbtowc+0x1a>
 8008356:	b14b      	cbz	r3, 800836c <__ascii_mbtowc+0x1e>
 8008358:	7813      	ldrb	r3, [r2, #0]
 800835a:	600b      	str	r3, [r1, #0]
 800835c:	7812      	ldrb	r2, [r2, #0]
 800835e:	1e10      	subs	r0, r2, #0
 8008360:	bf18      	it	ne
 8008362:	2001      	movne	r0, #1
 8008364:	b002      	add	sp, #8
 8008366:	4770      	bx	lr
 8008368:	4610      	mov	r0, r2
 800836a:	e7fb      	b.n	8008364 <__ascii_mbtowc+0x16>
 800836c:	f06f 0001 	mvn.w	r0, #1
 8008370:	e7f8      	b.n	8008364 <__ascii_mbtowc+0x16>

08008372 <_realloc_r>:
 8008372:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008376:	4607      	mov	r7, r0
 8008378:	4614      	mov	r4, r2
 800837a:	460d      	mov	r5, r1
 800837c:	b921      	cbnz	r1, 8008388 <_realloc_r+0x16>
 800837e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008382:	4611      	mov	r1, r2
 8008384:	f7fd bc90 	b.w	8005ca8 <_malloc_r>
 8008388:	b92a      	cbnz	r2, 8008396 <_realloc_r+0x24>
 800838a:	f7fd fc19 	bl	8005bc0 <_free_r>
 800838e:	4625      	mov	r5, r4
 8008390:	4628      	mov	r0, r5
 8008392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008396:	f000 f8c4 	bl	8008522 <_malloc_usable_size_r>
 800839a:	4284      	cmp	r4, r0
 800839c:	4606      	mov	r6, r0
 800839e:	d802      	bhi.n	80083a6 <_realloc_r+0x34>
 80083a0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80083a4:	d8f4      	bhi.n	8008390 <_realloc_r+0x1e>
 80083a6:	4621      	mov	r1, r4
 80083a8:	4638      	mov	r0, r7
 80083aa:	f7fd fc7d 	bl	8005ca8 <_malloc_r>
 80083ae:	4680      	mov	r8, r0
 80083b0:	b908      	cbnz	r0, 80083b6 <_realloc_r+0x44>
 80083b2:	4645      	mov	r5, r8
 80083b4:	e7ec      	b.n	8008390 <_realloc_r+0x1e>
 80083b6:	42b4      	cmp	r4, r6
 80083b8:	4622      	mov	r2, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	bf28      	it	cs
 80083be:	4632      	movcs	r2, r6
 80083c0:	f7ff fc42 	bl	8007c48 <memcpy>
 80083c4:	4629      	mov	r1, r5
 80083c6:	4638      	mov	r0, r7
 80083c8:	f7fd fbfa 	bl	8005bc0 <_free_r>
 80083cc:	e7f1      	b.n	80083b2 <_realloc_r+0x40>

080083ce <__ascii_wctomb>:
 80083ce:	4603      	mov	r3, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	b141      	cbz	r1, 80083e6 <__ascii_wctomb+0x18>
 80083d4:	2aff      	cmp	r2, #255	@ 0xff
 80083d6:	d904      	bls.n	80083e2 <__ascii_wctomb+0x14>
 80083d8:	228a      	movs	r2, #138	@ 0x8a
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	f04f 30ff 	mov.w	r0, #4294967295
 80083e0:	4770      	bx	lr
 80083e2:	700a      	strb	r2, [r1, #0]
 80083e4:	2001      	movs	r0, #1
 80083e6:	4770      	bx	lr

080083e8 <fiprintf>:
 80083e8:	b40e      	push	{r1, r2, r3}
 80083ea:	b503      	push	{r0, r1, lr}
 80083ec:	4601      	mov	r1, r0
 80083ee:	ab03      	add	r3, sp, #12
 80083f0:	4805      	ldr	r0, [pc, #20]	@ (8008408 <fiprintf+0x20>)
 80083f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80083f6:	6800      	ldr	r0, [r0, #0]
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	f7ff f991 	bl	8007720 <_vfiprintf_r>
 80083fe:	b002      	add	sp, #8
 8008400:	f85d eb04 	ldr.w	lr, [sp], #4
 8008404:	b003      	add	sp, #12
 8008406:	4770      	bx	lr
 8008408:	20000018 	.word	0x20000018

0800840c <__swhatbuf_r>:
 800840c:	b570      	push	{r4, r5, r6, lr}
 800840e:	460c      	mov	r4, r1
 8008410:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008414:	2900      	cmp	r1, #0
 8008416:	b096      	sub	sp, #88	@ 0x58
 8008418:	4615      	mov	r5, r2
 800841a:	461e      	mov	r6, r3
 800841c:	da0d      	bge.n	800843a <__swhatbuf_r+0x2e>
 800841e:	89a3      	ldrh	r3, [r4, #12]
 8008420:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008424:	f04f 0100 	mov.w	r1, #0
 8008428:	bf14      	ite	ne
 800842a:	2340      	movne	r3, #64	@ 0x40
 800842c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008430:	2000      	movs	r0, #0
 8008432:	6031      	str	r1, [r6, #0]
 8008434:	602b      	str	r3, [r5, #0]
 8008436:	b016      	add	sp, #88	@ 0x58
 8008438:	bd70      	pop	{r4, r5, r6, pc}
 800843a:	466a      	mov	r2, sp
 800843c:	f000 f848 	bl	80084d0 <_fstat_r>
 8008440:	2800      	cmp	r0, #0
 8008442:	dbec      	blt.n	800841e <__swhatbuf_r+0x12>
 8008444:	9901      	ldr	r1, [sp, #4]
 8008446:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800844a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800844e:	4259      	negs	r1, r3
 8008450:	4159      	adcs	r1, r3
 8008452:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008456:	e7eb      	b.n	8008430 <__swhatbuf_r+0x24>

08008458 <__smakebuf_r>:
 8008458:	898b      	ldrh	r3, [r1, #12]
 800845a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800845c:	079d      	lsls	r5, r3, #30
 800845e:	4606      	mov	r6, r0
 8008460:	460c      	mov	r4, r1
 8008462:	d507      	bpl.n	8008474 <__smakebuf_r+0x1c>
 8008464:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008468:	6023      	str	r3, [r4, #0]
 800846a:	6123      	str	r3, [r4, #16]
 800846c:	2301      	movs	r3, #1
 800846e:	6163      	str	r3, [r4, #20]
 8008470:	b003      	add	sp, #12
 8008472:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008474:	ab01      	add	r3, sp, #4
 8008476:	466a      	mov	r2, sp
 8008478:	f7ff ffc8 	bl	800840c <__swhatbuf_r>
 800847c:	9f00      	ldr	r7, [sp, #0]
 800847e:	4605      	mov	r5, r0
 8008480:	4639      	mov	r1, r7
 8008482:	4630      	mov	r0, r6
 8008484:	f7fd fc10 	bl	8005ca8 <_malloc_r>
 8008488:	b948      	cbnz	r0, 800849e <__smakebuf_r+0x46>
 800848a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848e:	059a      	lsls	r2, r3, #22
 8008490:	d4ee      	bmi.n	8008470 <__smakebuf_r+0x18>
 8008492:	f023 0303 	bic.w	r3, r3, #3
 8008496:	f043 0302 	orr.w	r3, r3, #2
 800849a:	81a3      	strh	r3, [r4, #12]
 800849c:	e7e2      	b.n	8008464 <__smakebuf_r+0xc>
 800849e:	89a3      	ldrh	r3, [r4, #12]
 80084a0:	6020      	str	r0, [r4, #0]
 80084a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084ae:	b15b      	cbz	r3, 80084c8 <__smakebuf_r+0x70>
 80084b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084b4:	4630      	mov	r0, r6
 80084b6:	f000 f81d 	bl	80084f4 <_isatty_r>
 80084ba:	b128      	cbz	r0, 80084c8 <__smakebuf_r+0x70>
 80084bc:	89a3      	ldrh	r3, [r4, #12]
 80084be:	f023 0303 	bic.w	r3, r3, #3
 80084c2:	f043 0301 	orr.w	r3, r3, #1
 80084c6:	81a3      	strh	r3, [r4, #12]
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	431d      	orrs	r5, r3
 80084cc:	81a5      	strh	r5, [r4, #12]
 80084ce:	e7cf      	b.n	8008470 <__smakebuf_r+0x18>

080084d0 <_fstat_r>:
 80084d0:	b538      	push	{r3, r4, r5, lr}
 80084d2:	4d07      	ldr	r5, [pc, #28]	@ (80084f0 <_fstat_r+0x20>)
 80084d4:	2300      	movs	r3, #0
 80084d6:	4604      	mov	r4, r0
 80084d8:	4608      	mov	r0, r1
 80084da:	4611      	mov	r1, r2
 80084dc:	602b      	str	r3, [r5, #0]
 80084de:	f7f9 fa05 	bl	80018ec <_fstat>
 80084e2:	1c43      	adds	r3, r0, #1
 80084e4:	d102      	bne.n	80084ec <_fstat_r+0x1c>
 80084e6:	682b      	ldr	r3, [r5, #0]
 80084e8:	b103      	cbz	r3, 80084ec <_fstat_r+0x1c>
 80084ea:	6023      	str	r3, [r4, #0]
 80084ec:	bd38      	pop	{r3, r4, r5, pc}
 80084ee:	bf00      	nop
 80084f0:	200004d8 	.word	0x200004d8

080084f4 <_isatty_r>:
 80084f4:	b538      	push	{r3, r4, r5, lr}
 80084f6:	4d06      	ldr	r5, [pc, #24]	@ (8008510 <_isatty_r+0x1c>)
 80084f8:	2300      	movs	r3, #0
 80084fa:	4604      	mov	r4, r0
 80084fc:	4608      	mov	r0, r1
 80084fe:	602b      	str	r3, [r5, #0]
 8008500:	f7f9 fa04 	bl	800190c <_isatty>
 8008504:	1c43      	adds	r3, r0, #1
 8008506:	d102      	bne.n	800850e <_isatty_r+0x1a>
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	b103      	cbz	r3, 800850e <_isatty_r+0x1a>
 800850c:	6023      	str	r3, [r4, #0]
 800850e:	bd38      	pop	{r3, r4, r5, pc}
 8008510:	200004d8 	.word	0x200004d8

08008514 <abort>:
 8008514:	b508      	push	{r3, lr}
 8008516:	2006      	movs	r0, #6
 8008518:	f000 f834 	bl	8008584 <raise>
 800851c:	2001      	movs	r0, #1
 800851e:	f7f9 f9b1 	bl	8001884 <_exit>

08008522 <_malloc_usable_size_r>:
 8008522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008526:	1f18      	subs	r0, r3, #4
 8008528:	2b00      	cmp	r3, #0
 800852a:	bfbc      	itt	lt
 800852c:	580b      	ldrlt	r3, [r1, r0]
 800852e:	18c0      	addlt	r0, r0, r3
 8008530:	4770      	bx	lr

08008532 <_raise_r>:
 8008532:	291f      	cmp	r1, #31
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4605      	mov	r5, r0
 8008538:	460c      	mov	r4, r1
 800853a:	d904      	bls.n	8008546 <_raise_r+0x14>
 800853c:	2316      	movs	r3, #22
 800853e:	6003      	str	r3, [r0, #0]
 8008540:	f04f 30ff 	mov.w	r0, #4294967295
 8008544:	bd38      	pop	{r3, r4, r5, pc}
 8008546:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008548:	b112      	cbz	r2, 8008550 <_raise_r+0x1e>
 800854a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800854e:	b94b      	cbnz	r3, 8008564 <_raise_r+0x32>
 8008550:	4628      	mov	r0, r5
 8008552:	f000 f831 	bl	80085b8 <_getpid_r>
 8008556:	4622      	mov	r2, r4
 8008558:	4601      	mov	r1, r0
 800855a:	4628      	mov	r0, r5
 800855c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008560:	f000 b818 	b.w	8008594 <_kill_r>
 8008564:	2b01      	cmp	r3, #1
 8008566:	d00a      	beq.n	800857e <_raise_r+0x4c>
 8008568:	1c59      	adds	r1, r3, #1
 800856a:	d103      	bne.n	8008574 <_raise_r+0x42>
 800856c:	2316      	movs	r3, #22
 800856e:	6003      	str	r3, [r0, #0]
 8008570:	2001      	movs	r0, #1
 8008572:	e7e7      	b.n	8008544 <_raise_r+0x12>
 8008574:	2100      	movs	r1, #0
 8008576:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800857a:	4620      	mov	r0, r4
 800857c:	4798      	blx	r3
 800857e:	2000      	movs	r0, #0
 8008580:	e7e0      	b.n	8008544 <_raise_r+0x12>
	...

08008584 <raise>:
 8008584:	4b02      	ldr	r3, [pc, #8]	@ (8008590 <raise+0xc>)
 8008586:	4601      	mov	r1, r0
 8008588:	6818      	ldr	r0, [r3, #0]
 800858a:	f7ff bfd2 	b.w	8008532 <_raise_r>
 800858e:	bf00      	nop
 8008590:	20000018 	.word	0x20000018

08008594 <_kill_r>:
 8008594:	b538      	push	{r3, r4, r5, lr}
 8008596:	4d07      	ldr	r5, [pc, #28]	@ (80085b4 <_kill_r+0x20>)
 8008598:	2300      	movs	r3, #0
 800859a:	4604      	mov	r4, r0
 800859c:	4608      	mov	r0, r1
 800859e:	4611      	mov	r1, r2
 80085a0:	602b      	str	r3, [r5, #0]
 80085a2:	f7f9 f95f 	bl	8001864 <_kill>
 80085a6:	1c43      	adds	r3, r0, #1
 80085a8:	d102      	bne.n	80085b0 <_kill_r+0x1c>
 80085aa:	682b      	ldr	r3, [r5, #0]
 80085ac:	b103      	cbz	r3, 80085b0 <_kill_r+0x1c>
 80085ae:	6023      	str	r3, [r4, #0]
 80085b0:	bd38      	pop	{r3, r4, r5, pc}
 80085b2:	bf00      	nop
 80085b4:	200004d8 	.word	0x200004d8

080085b8 <_getpid_r>:
 80085b8:	f7f9 b94c 	b.w	8001854 <_getpid>

080085bc <_init>:
 80085bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085be:	bf00      	nop
 80085c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085c2:	bc08      	pop	{r3}
 80085c4:	469e      	mov	lr, r3
 80085c6:	4770      	bx	lr

080085c8 <_fini>:
 80085c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ca:	bf00      	nop
 80085cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ce:	bc08      	pop	{r3}
 80085d0:	469e      	mov	lr, r3
 80085d2:	4770      	bx	lr
